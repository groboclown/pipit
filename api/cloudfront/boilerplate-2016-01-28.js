'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * Amazon CloudFront version 2016-01-28
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol rest-xml
require('../../lib/aws-common/shape_http')('rest-xml', module.exports, null);
// -----------------------------------
module.exports.CreateCloudFrontOriginAccessIdentity = awsCommon.as(
  '/2016-01-28/origin-access-identity/cloudfront',
  function CreateCloudFrontOriginAccessIdentity(aws) {
    var cloudFrontOriginAccessIdentityConfig = aws.params.CloudFrontOriginAccessIdentityConfig;
    if (!cloudFrontOriginAccessIdentityConfig) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter CloudFrontOriginAccessIdentityConfig'];
    }


    // TODO implement code

    var ret = {
      CloudFrontOriginAccessIdentity: /*S5*/{
        CloudFrontOriginAccessIdentityConfig: /*S2*/{
          CallerReference: '',
          Comment: '',
        },
        Id: '',
        S3CanonicalUserId: '',
      },
      ETag: '',
      Location: '',
    };
    return [201, ret];
  });
// -----------------------------------
module.exports.CreateDistribution = awsCommon.as(
  '/2016-01-28/distribution',
  function CreateDistribution(aws) {
    var distributionConfig = aws.params.DistributionConfig;
    if (!distributionConfig) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DistributionConfig'];
    }


    // TODO implement code

    var ret = {
      Distribution: /*S1l*/{
        ActiveTrustedSigners: /*S1n*/{
          Enabled: false,
          Items: [ {
            AwsAccountNumber: '',
            KeyPairIds: {
              Items: [ '', /* ...*/ ],
              Quantity: 0,
            },
          }, /* ...*/ ],
          Quantity: 0,
        },
        DistributionConfig: /*S7*/{
          Aliases: /*S8*/{
            Items: [ '', /* ...*/ ],
            Quantity: 0,
          },
          CacheBehaviors: /*S14*/{
            Items: [ {
              AllowedMethods: /*S10*/{
                CachedMethods: {
                  Items: /*S11*/[ '', /* ...*/ ],
                  Quantity: 0,
                },
                Items: /*S11*/[ '', /* ...*/ ],
                Quantity: 0,
              },
              Compress: false,
              DefaultTTL: 0 /*Long*/,
              ForwardedValues: /*So*/{
                Cookies: {
                  Forward: '',
                  WhitelistedNames: {
                    Items: [ '', /* ...*/ ],
                    Quantity: 0,
                  },
                },
                Headers: {
                  Items: [ '', /* ...*/ ],
                  Quantity: 0,
                },
                QueryString: false,
              },
              MaxTTL: 0 /*Long*/,
              MinTTL: 0 /*Long*/,
              PathPattern: '',
              SmoothStreaming: false,
              TargetOriginId: '',
              TrustedSigners: /*Sw*/{
                Enabled: false,
                Items: [ '', /* ...*/ ],
                Quantity: 0,
              },
              ViewerProtocolPolicy: '',
            }, /* ...*/ ],
            Quantity: 0,
          },
          CallerReference: '',
          Comment: '',
          CustomErrorResponses: /*S17*/{
            Items: [ {
              ErrorCachingMinTTL: 0 /*Long*/,
              ErrorCode: 0,
              ResponseCode: '',
              ResponsePagePath: '',
            }, /* ...*/ ],
            Quantity: 0,
          },
          DefaultCacheBehavior: /*Sn*/{
            AllowedMethods: /*S10*/{
                CachedMethods: {
                  Items: /*S11*/[ '', /* ...*/ ],
                  Quantity: 0,
                },
                Items: /*S11*/[ '', /* ...*/ ],
                Quantity: 0,
              },
            Compress: false,
            DefaultTTL: 0 /*Long*/,
            ForwardedValues: /*So*/{
                Cookies: {
                  Forward: '',
                  WhitelistedNames: {
                    Items: [ '', /* ...*/ ],
                    Quantity: 0,
                  },
                },
                Headers: {
                  Items: [ '', /* ...*/ ],
                  Quantity: 0,
                },
                QueryString: false,
              },
            MaxTTL: 0 /*Long*/,
            MinTTL: 0 /*Long*/,
            SmoothStreaming: false,
            TargetOriginId: '',
            TrustedSigners: /*Sw*/{
                Enabled: false,
                Items: [ '', /* ...*/ ],
                Quantity: 0,
              },
            ViewerProtocolPolicy: '',
          },
          DefaultRootObject: '',
          Enabled: false,
          Logging: {
            Bucket: '',
            Enabled: false,
            IncludeCookies: false,
            Prefix: '',
          },
          Origins: /*Sb*/{
            Items: [ {
              CustomHeaders: {
                Items: [ {
                  HeaderName: '',
                  HeaderValue: '',
                }, /* ...*/ ],
                Quantity: 0,
              },
              CustomOriginConfig: {
                HTTPPort: 0,
                HTTPSPort: 0,
                OriginProtocolPolicy: '',
                OriginSslProtocols: {
                  Items: [ '', /* ...*/ ],
                  Quantity: 0,
                },
              },
              DomainName: '',
              Id: '',
              OriginPath: '',
              S3OriginConfig: {
                OriginAccessIdentity: '',
              },
            }, /* ...*/ ],
            Quantity: 0,
          },
          PriceClass: '',
          Restrictions: /*S1g*/{
            GeoRestriction: {
              Items: [ '', /* ...*/ ],
              Quantity: 0,
              RestrictionType: '',
            },
          },
          ViewerCertificate: /*S1c*/{
            ACMCertificateArn: '',
            Certificate: '',
            CertificateSource: '',
            CloudFrontDefaultCertificate: false,
            IAMCertificateId: '',
            MinimumProtocolVersion: '',
            SSLSupportMethod: '',
          },
          WebACLId: '',
        },
        DomainName: '',
        Id: '',
        InProgressInvalidationBatches: 0,
        LastModifiedTime: awsCommon.timestamp(),
        Status: '',
      },
      ETag: '',
      Location: '',
    };
    return [201, ret];
  });
// -----------------------------------
module.exports.CreateInvalidation = awsCommon.as(
  '/2016-01-28/distribution/:DistributionId/invalidation',
  function CreateInvalidation(aws) {
    var distributionId = aws.reqParams.DistributionId;
    var invalidationBatch = aws.params.InvalidationBatch;
    if (!distributionId) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DistributionId'];
    }
    if (!invalidationBatch) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InvalidationBatch'];
    }


    // TODO implement code

    var ret = {
      Invalidation: /*S1x*/{
        CreateTime: awsCommon.timestamp(),
        Id: '',
        InvalidationBatch: /*S1t*/{
          CallerReference: '',
          Paths: {
            Items: [ '', /* ...*/ ],
            Quantity: 0,
          },
        },
        Status: '',
      },
      Location: '',
    };
    return [201, ret];
  });
// -----------------------------------
module.exports.CreateStreamingDistribution = awsCommon.as(
  '/2016-01-28/streaming-distribution',
  function CreateStreamingDistribution(aws) {
    var streamingDistributionConfig = aws.params.StreamingDistributionConfig;
    if (!streamingDistributionConfig) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter StreamingDistributionConfig'];
    }


    // TODO implement code

    var ret = {
      ETag: '',
      Location: '',
      StreamingDistribution: /*S23*/{
        ActiveTrustedSigners: /*S1n*/{
          Enabled: false,
          Items: [ {
            AwsAccountNumber: '',
            KeyPairIds: {
              Items: [ '', /* ...*/ ],
              Quantity: 0,
            },
          }, /* ...*/ ],
          Quantity: 0,
        },
        DomainName: '',
        Id: '',
        LastModifiedTime: awsCommon.timestamp(),
        Status: '',
        StreamingDistributionConfig: /*S1z*/{
          Aliases: /*S8*/{
            Items: [ '', /* ...*/ ],
            Quantity: 0,
          },
          CallerReference: '',
          Comment: '',
          Enabled: false,
          Logging: {
            Bucket: '',
            Enabled: false,
            Prefix: '',
          },
          PriceClass: '',
          S3Origin: /*S20*/{
            DomainName: '',
            OriginAccessIdentity: '',
          },
          TrustedSigners: /*Sw*/{
            Enabled: false,
            Items: [ '', /* ...*/ ],
            Quantity: 0,
          },
        },
      },
    };
    return [201, ret];
  });
// -----------------------------------
module.exports.DeleteCloudFrontOriginAccessIdentity = awsCommon.as(
  'DELETE',
  '/2016-01-28/origin-access-identity/cloudfront/:Id',
  function DeleteCloudFrontOriginAccessIdentity(aws) {
    var id = aws.reqParams.Id;
    var ifMatch = aws.params.IfMatch;
    if (!id) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Id'];
    }


    // TODO implement code

    var ret = {};
    return [204, ret];
  });
// -----------------------------------
module.exports.DeleteDistribution = awsCommon.as(
  'DELETE',
  '/2016-01-28/distribution/:Id',
  function DeleteDistribution(aws) {
    var id = aws.reqParams.Id;
    var ifMatch = aws.params.IfMatch;
    if (!id) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Id'];
    }


    // TODO implement code

    var ret = {};
    return [204, ret];
  });
// -----------------------------------
module.exports.DeleteStreamingDistribution = awsCommon.as(
  'DELETE',
  '/2016-01-28/streaming-distribution/:Id',
  function DeleteStreamingDistribution(aws) {
    var id = aws.reqParams.Id;
    var ifMatch = aws.params.IfMatch;
    if (!id) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Id'];
    }


    // TODO implement code

    var ret = {};
    return [204, ret];
  });
// -----------------------------------
module.exports.GetCloudFrontOriginAccessIdentity = awsCommon.as(
  'GET',
  '/2016-01-28/origin-access-identity/cloudfront/:Id',
  function GetCloudFrontOriginAccessIdentity(aws) {
    var id = aws.reqParams.Id;
    if (!id) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Id'];
    }


    // TODO implement code

    var ret = {
      CloudFrontOriginAccessIdentity: /*S5*/{
        CloudFrontOriginAccessIdentityConfig: /*S2*/{
          CallerReference: '',
          Comment: '',
        },
        Id: '',
        S3CanonicalUserId: '',
      },
      ETag: '',
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.GetCloudFrontOriginAccessIdentityConfig = awsCommon.as(
  'GET',
  '/2016-01-28/origin-access-identity/cloudfront/:Id/config',
  function GetCloudFrontOriginAccessIdentityConfig(aws) {
    var id = aws.reqParams.Id;
    if (!id) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Id'];
    }


    // TODO implement code

    var ret = {
      CloudFrontOriginAccessIdentityConfig: /*S2*/{
        CallerReference: '',
        Comment: '',
      },
      ETag: '',
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.GetDistribution = awsCommon.as(
  'GET',
  '/2016-01-28/distribution/:Id',
  function GetDistribution(aws) {
    var id = aws.reqParams.Id;
    if (!id) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Id'];
    }


    // TODO implement code

    var ret = {
      Distribution: /*S1l*/{
        ActiveTrustedSigners: /*S1n*/{
          Enabled: false,
          Items: [ {
            AwsAccountNumber: '',
            KeyPairIds: {
              Items: [ '', /* ...*/ ],
              Quantity: 0,
            },
          }, /* ...*/ ],
          Quantity: 0,
        },
        DistributionConfig: /*S7*/{
          Aliases: /*S8*/{
            Items: [ '', /* ...*/ ],
            Quantity: 0,
          },
          CacheBehaviors: /*S14*/{
            Items: [ {
              AllowedMethods: /*S10*/{
                CachedMethods: {
                  Items: /*S11*/[ '', /* ...*/ ],
                  Quantity: 0,
                },
                Items: /*S11*/[ '', /* ...*/ ],
                Quantity: 0,
              },
              Compress: false,
              DefaultTTL: 0 /*Long*/,
              ForwardedValues: /*So*/{
                Cookies: {
                  Forward: '',
                  WhitelistedNames: {
                    Items: [ '', /* ...*/ ],
                    Quantity: 0,
                  },
                },
                Headers: {
                  Items: [ '', /* ...*/ ],
                  Quantity: 0,
                },
                QueryString: false,
              },
              MaxTTL: 0 /*Long*/,
              MinTTL: 0 /*Long*/,
              PathPattern: '',
              SmoothStreaming: false,
              TargetOriginId: '',
              TrustedSigners: /*Sw*/{
                Enabled: false,
                Items: [ '', /* ...*/ ],
                Quantity: 0,
              },
              ViewerProtocolPolicy: '',
            }, /* ...*/ ],
            Quantity: 0,
          },
          CallerReference: '',
          Comment: '',
          CustomErrorResponses: /*S17*/{
            Items: [ {
              ErrorCachingMinTTL: 0 /*Long*/,
              ErrorCode: 0,
              ResponseCode: '',
              ResponsePagePath: '',
            }, /* ...*/ ],
            Quantity: 0,
          },
          DefaultCacheBehavior: /*Sn*/{
            AllowedMethods: /*S10*/{
                CachedMethods: {
                  Items: /*S11*/[ '', /* ...*/ ],
                  Quantity: 0,
                },
                Items: /*S11*/[ '', /* ...*/ ],
                Quantity: 0,
              },
            Compress: false,
            DefaultTTL: 0 /*Long*/,
            ForwardedValues: /*So*/{
                Cookies: {
                  Forward: '',
                  WhitelistedNames: {
                    Items: [ '', /* ...*/ ],
                    Quantity: 0,
                  },
                },
                Headers: {
                  Items: [ '', /* ...*/ ],
                  Quantity: 0,
                },
                QueryString: false,
              },
            MaxTTL: 0 /*Long*/,
            MinTTL: 0 /*Long*/,
            SmoothStreaming: false,
            TargetOriginId: '',
            TrustedSigners: /*Sw*/{
                Enabled: false,
                Items: [ '', /* ...*/ ],
                Quantity: 0,
              },
            ViewerProtocolPolicy: '',
          },
          DefaultRootObject: '',
          Enabled: false,
          Logging: {
            Bucket: '',
            Enabled: false,
            IncludeCookies: false,
            Prefix: '',
          },
          Origins: /*Sb*/{
            Items: [ {
              CustomHeaders: {
                Items: [ {
                  HeaderName: '',
                  HeaderValue: '',
                }, /* ...*/ ],
                Quantity: 0,
              },
              CustomOriginConfig: {
                HTTPPort: 0,
                HTTPSPort: 0,
                OriginProtocolPolicy: '',
                OriginSslProtocols: {
                  Items: [ '', /* ...*/ ],
                  Quantity: 0,
                },
              },
              DomainName: '',
              Id: '',
              OriginPath: '',
              S3OriginConfig: {
                OriginAccessIdentity: '',
              },
            }, /* ...*/ ],
            Quantity: 0,
          },
          PriceClass: '',
          Restrictions: /*S1g*/{
            GeoRestriction: {
              Items: [ '', /* ...*/ ],
              Quantity: 0,
              RestrictionType: '',
            },
          },
          ViewerCertificate: /*S1c*/{
            ACMCertificateArn: '',
            Certificate: '',
            CertificateSource: '',
            CloudFrontDefaultCertificate: false,
            IAMCertificateId: '',
            MinimumProtocolVersion: '',
            SSLSupportMethod: '',
          },
          WebACLId: '',
        },
        DomainName: '',
        Id: '',
        InProgressInvalidationBatches: 0,
        LastModifiedTime: awsCommon.timestamp(),
        Status: '',
      },
      ETag: '',
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.GetDistributionConfig = awsCommon.as(
  'GET',
  '/2016-01-28/distribution/:Id/config',
  function GetDistributionConfig(aws) {
    var id = aws.reqParams.Id;
    if (!id) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Id'];
    }


    // TODO implement code

    var ret = {
      DistributionConfig: /*S7*/{
        Aliases: /*S8*/{
          Items: [ '', /* ...*/ ],
          Quantity: 0,
        },
        CacheBehaviors: /*S14*/{
          Items: [ {
            AllowedMethods: /*S10*/{
              CachedMethods: {
                Items: /*S11*/[ '', /* ...*/ ],
                Quantity: 0,
              },
              Items: /*S11*/[ '', /* ...*/ ],
              Quantity: 0,
            },
            Compress: false,
            DefaultTTL: 0 /*Long*/,
            ForwardedValues: /*So*/{
              Cookies: {
                Forward: '',
                WhitelistedNames: {
                  Items: [ '', /* ...*/ ],
                  Quantity: 0,
                },
              },
              Headers: {
                Items: [ '', /* ...*/ ],
                Quantity: 0,
              },
              QueryString: false,
            },
            MaxTTL: 0 /*Long*/,
            MinTTL: 0 /*Long*/,
            PathPattern: '',
            SmoothStreaming: false,
            TargetOriginId: '',
            TrustedSigners: /*Sw*/{
              Enabled: false,
              Items: [ '', /* ...*/ ],
              Quantity: 0,
            },
            ViewerProtocolPolicy: '',
          }, /* ...*/ ],
          Quantity: 0,
        },
        CallerReference: '',
        Comment: '',
        CustomErrorResponses: /*S17*/{
          Items: [ {
            ErrorCachingMinTTL: 0 /*Long*/,
            ErrorCode: 0,
            ResponseCode: '',
            ResponsePagePath: '',
          }, /* ...*/ ],
          Quantity: 0,
        },
        DefaultCacheBehavior: /*Sn*/{
          AllowedMethods: /*S10*/{
              CachedMethods: {
                Items: /*S11*/[ '', /* ...*/ ],
                Quantity: 0,
              },
              Items: /*S11*/[ '', /* ...*/ ],
              Quantity: 0,
            },
          Compress: false,
          DefaultTTL: 0 /*Long*/,
          ForwardedValues: /*So*/{
              Cookies: {
                Forward: '',
                WhitelistedNames: {
                  Items: [ '', /* ...*/ ],
                  Quantity: 0,
                },
              },
              Headers: {
                Items: [ '', /* ...*/ ],
                Quantity: 0,
              },
              QueryString: false,
            },
          MaxTTL: 0 /*Long*/,
          MinTTL: 0 /*Long*/,
          SmoothStreaming: false,
          TargetOriginId: '',
          TrustedSigners: /*Sw*/{
              Enabled: false,
              Items: [ '', /* ...*/ ],
              Quantity: 0,
            },
          ViewerProtocolPolicy: '',
        },
        DefaultRootObject: '',
        Enabled: false,
        Logging: {
          Bucket: '',
          Enabled: false,
          IncludeCookies: false,
          Prefix: '',
        },
        Origins: /*Sb*/{
          Items: [ {
            CustomHeaders: {
              Items: [ {
                HeaderName: '',
                HeaderValue: '',
              }, /* ...*/ ],
              Quantity: 0,
            },
            CustomOriginConfig: {
              HTTPPort: 0,
              HTTPSPort: 0,
              OriginProtocolPolicy: '',
              OriginSslProtocols: {
                Items: [ '', /* ...*/ ],
                Quantity: 0,
              },
            },
            DomainName: '',
            Id: '',
            OriginPath: '',
            S3OriginConfig: {
              OriginAccessIdentity: '',
            },
          }, /* ...*/ ],
          Quantity: 0,
        },
        PriceClass: '',
        Restrictions: /*S1g*/{
          GeoRestriction: {
            Items: [ '', /* ...*/ ],
            Quantity: 0,
            RestrictionType: '',
          },
        },
        ViewerCertificate: /*S1c*/{
          ACMCertificateArn: '',
          Certificate: '',
          CertificateSource: '',
          CloudFrontDefaultCertificate: false,
          IAMCertificateId: '',
          MinimumProtocolVersion: '',
          SSLSupportMethod: '',
        },
        WebACLId: '',
      },
      ETag: '',
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.GetInvalidation = awsCommon.as(
  'GET',
  '/2016-01-28/distribution/:DistributionId/invalidation/:Id',
  function GetInvalidation(aws) {
    var distributionId = aws.reqParams.DistributionId;
    var id = aws.reqParams.Id;
    if (!distributionId) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DistributionId'];
    }
    if (!id) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Id'];
    }


    // TODO implement code

    var ret = {
      Invalidation: /*S1x*/{
        CreateTime: awsCommon.timestamp(),
        Id: '',
        InvalidationBatch: /*S1t*/{
          CallerReference: '',
          Paths: {
            Items: [ '', /* ...*/ ],
            Quantity: 0,
          },
        },
        Status: '',
      },
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.GetStreamingDistribution = awsCommon.as(
  'GET',
  '/2016-01-28/streaming-distribution/:Id',
  function GetStreamingDistribution(aws) {
    var id = aws.reqParams.Id;
    if (!id) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Id'];
    }


    // TODO implement code

    var ret = {
      ETag: '',
      StreamingDistribution: /*S23*/{
        ActiveTrustedSigners: /*S1n*/{
          Enabled: false,
          Items: [ {
            AwsAccountNumber: '',
            KeyPairIds: {
              Items: [ '', /* ...*/ ],
              Quantity: 0,
            },
          }, /* ...*/ ],
          Quantity: 0,
        },
        DomainName: '',
        Id: '',
        LastModifiedTime: awsCommon.timestamp(),
        Status: '',
        StreamingDistributionConfig: /*S1z*/{
          Aliases: /*S8*/{
            Items: [ '', /* ...*/ ],
            Quantity: 0,
          },
          CallerReference: '',
          Comment: '',
          Enabled: false,
          Logging: {
            Bucket: '',
            Enabled: false,
            Prefix: '',
          },
          PriceClass: '',
          S3Origin: /*S20*/{
            DomainName: '',
            OriginAccessIdentity: '',
          },
          TrustedSigners: /*Sw*/{
            Enabled: false,
            Items: [ '', /* ...*/ ],
            Quantity: 0,
          },
        },
      },
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.GetStreamingDistributionConfig = awsCommon.as(
  'GET',
  '/2016-01-28/streaming-distribution/:Id/config',
  function GetStreamingDistributionConfig(aws) {
    var id = aws.reqParams.Id;
    if (!id) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Id'];
    }


    // TODO implement code

    var ret = {
      ETag: '',
      StreamingDistributionConfig: /*S1z*/{
        Aliases: /*S8*/{
          Items: [ '', /* ...*/ ],
          Quantity: 0,
        },
        CallerReference: '',
        Comment: '',
        Enabled: false,
        Logging: {
          Bucket: '',
          Enabled: false,
          Prefix: '',
        },
        PriceClass: '',
        S3Origin: /*S20*/{
          DomainName: '',
          OriginAccessIdentity: '',
        },
        TrustedSigners: /*Sw*/{
          Enabled: false,
          Items: [ '', /* ...*/ ],
          Quantity: 0,
        },
      },
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.ListCloudFrontOriginAccessIdentities = awsCommon.as(
  'GET',
  '/2016-01-28/origin-access-identity/cloudfront',
  function ListCloudFrontOriginAccessIdentities(aws) {
    var marker = aws.params.Marker;
    var maxItems = aws.params.MaxItems;


    // TODO implement code

    var ret = {
      CloudFrontOriginAccessIdentityList: {
        IsTruncated: false,
        Items: [ {
          Comment: '',
          Id: '',
          S3CanonicalUserId: '',
        }, /* ...*/ ],
        Marker: '',
        MaxItems: 0,
        NextMarker: '',
        Quantity: 0,
      },
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.ListDistributions = awsCommon.as(
  'GET',
  '/2016-01-28/distribution',
  function ListDistributions(aws) {
    var marker = aws.params.Marker;
    var maxItems = aws.params.MaxItems;


    // TODO implement code

    var ret = {
      DistributionList: /*S2s*/{
        IsTruncated: false,
        Items: [ {
          Aliases: /*S8*/{
            Items: [ '', /* ...*/ ],
            Quantity: 0,
          },
          CacheBehaviors: /*S14*/{
            Items: [ {
              AllowedMethods: /*S10*/{
                CachedMethods: {
                  Items: /*S11*/[ '', /* ...*/ ],
                  Quantity: 0,
                },
                Items: /*S11*/[ '', /* ...*/ ],
                Quantity: 0,
              },
              Compress: false,
              DefaultTTL: 0 /*Long*/,
              ForwardedValues: /*So*/{
                Cookies: {
                  Forward: '',
                  WhitelistedNames: {
                    Items: [ '', /* ...*/ ],
                    Quantity: 0,
                  },
                },
                Headers: {
                  Items: [ '', /* ...*/ ],
                  Quantity: 0,
                },
                QueryString: false,
              },
              MaxTTL: 0 /*Long*/,
              MinTTL: 0 /*Long*/,
              PathPattern: '',
              SmoothStreaming: false,
              TargetOriginId: '',
              TrustedSigners: /*Sw*/{
                Enabled: false,
                Items: [ '', /* ...*/ ],
                Quantity: 0,
              },
              ViewerProtocolPolicy: '',
            }, /* ...*/ ],
            Quantity: 0,
          },
          Comment: '',
          CustomErrorResponses: /*S17*/{
            Items: [ {
              ErrorCachingMinTTL: 0 /*Long*/,
              ErrorCode: 0,
              ResponseCode: '',
              ResponsePagePath: '',
            }, /* ...*/ ],
            Quantity: 0,
          },
          DefaultCacheBehavior: /*Sn*/{
            AllowedMethods: /*S10*/{
                CachedMethods: {
                  Items: /*S11*/[ '', /* ...*/ ],
                  Quantity: 0,
                },
                Items: /*S11*/[ '', /* ...*/ ],
                Quantity: 0,
              },
            Compress: false,
            DefaultTTL: 0 /*Long*/,
            ForwardedValues: /*So*/{
                Cookies: {
                  Forward: '',
                  WhitelistedNames: {
                    Items: [ '', /* ...*/ ],
                    Quantity: 0,
                  },
                },
                Headers: {
                  Items: [ '', /* ...*/ ],
                  Quantity: 0,
                },
                QueryString: false,
              },
            MaxTTL: 0 /*Long*/,
            MinTTL: 0 /*Long*/,
            SmoothStreaming: false,
            TargetOriginId: '',
            TrustedSigners: /*Sw*/{
                Enabled: false,
                Items: [ '', /* ...*/ ],
                Quantity: 0,
              },
            ViewerProtocolPolicy: '',
          },
          DomainName: '',
          Enabled: false,
          Id: '',
          LastModifiedTime: awsCommon.timestamp(),
          Origins: /*Sb*/{
            Items: [ {
              CustomHeaders: {
                Items: [ {
                  HeaderName: '',
                  HeaderValue: '',
                }, /* ...*/ ],
                Quantity: 0,
              },
              CustomOriginConfig: {
                HTTPPort: 0,
                HTTPSPort: 0,
                OriginProtocolPolicy: '',
                OriginSslProtocols: {
                  Items: [ '', /* ...*/ ],
                  Quantity: 0,
                },
              },
              DomainName: '',
              Id: '',
              OriginPath: '',
              S3OriginConfig: {
                OriginAccessIdentity: '',
              },
            }, /* ...*/ ],
            Quantity: 0,
          },
          PriceClass: '',
          Restrictions: /*S1g*/{
            GeoRestriction: {
              Items: [ '', /* ...*/ ],
              Quantity: 0,
              RestrictionType: '',
            },
          },
          Status: '',
          ViewerCertificate: /*S1c*/{
            ACMCertificateArn: '',
            Certificate: '',
            CertificateSource: '',
            CloudFrontDefaultCertificate: false,
            IAMCertificateId: '',
            MinimumProtocolVersion: '',
            SSLSupportMethod: '',
          },
          WebACLId: '',
        }, /* ...*/ ],
        Marker: '',
        MaxItems: 0,
        NextMarker: '',
        Quantity: 0,
      },
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.ListDistributionsByWebACLId = awsCommon.as(
  'GET',
  '/2016-01-28/distributionsByWebACLId/:WebACLId',
  function ListDistributionsByWebACLId(aws) {
    var marker = aws.params.Marker;
    var maxItems = aws.params.MaxItems;
    var webACLId = aws.reqParams.WebACLId;
    if (!webACLId) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter WebACLId'];
    }


    // TODO implement code

    var ret = {
      DistributionList: /*S2s*/{
        IsTruncated: false,
        Items: [ {
          Aliases: /*S8*/{
            Items: [ '', /* ...*/ ],
            Quantity: 0,
          },
          CacheBehaviors: /*S14*/{
            Items: [ {
              AllowedMethods: /*S10*/{
                CachedMethods: {
                  Items: /*S11*/[ '', /* ...*/ ],
                  Quantity: 0,
                },
                Items: /*S11*/[ '', /* ...*/ ],
                Quantity: 0,
              },
              Compress: false,
              DefaultTTL: 0 /*Long*/,
              ForwardedValues: /*So*/{
                Cookies: {
                  Forward: '',
                  WhitelistedNames: {
                    Items: [ '', /* ...*/ ],
                    Quantity: 0,
                  },
                },
                Headers: {
                  Items: [ '', /* ...*/ ],
                  Quantity: 0,
                },
                QueryString: false,
              },
              MaxTTL: 0 /*Long*/,
              MinTTL: 0 /*Long*/,
              PathPattern: '',
              SmoothStreaming: false,
              TargetOriginId: '',
              TrustedSigners: /*Sw*/{
                Enabled: false,
                Items: [ '', /* ...*/ ],
                Quantity: 0,
              },
              ViewerProtocolPolicy: '',
            }, /* ...*/ ],
            Quantity: 0,
          },
          Comment: '',
          CustomErrorResponses: /*S17*/{
            Items: [ {
              ErrorCachingMinTTL: 0 /*Long*/,
              ErrorCode: 0,
              ResponseCode: '',
              ResponsePagePath: '',
            }, /* ...*/ ],
            Quantity: 0,
          },
          DefaultCacheBehavior: /*Sn*/{
            AllowedMethods: /*S10*/{
                CachedMethods: {
                  Items: /*S11*/[ '', /* ...*/ ],
                  Quantity: 0,
                },
                Items: /*S11*/[ '', /* ...*/ ],
                Quantity: 0,
              },
            Compress: false,
            DefaultTTL: 0 /*Long*/,
            ForwardedValues: /*So*/{
                Cookies: {
                  Forward: '',
                  WhitelistedNames: {
                    Items: [ '', /* ...*/ ],
                    Quantity: 0,
                  },
                },
                Headers: {
                  Items: [ '', /* ...*/ ],
                  Quantity: 0,
                },
                QueryString: false,
              },
            MaxTTL: 0 /*Long*/,
            MinTTL: 0 /*Long*/,
            SmoothStreaming: false,
            TargetOriginId: '',
            TrustedSigners: /*Sw*/{
                Enabled: false,
                Items: [ '', /* ...*/ ],
                Quantity: 0,
              },
            ViewerProtocolPolicy: '',
          },
          DomainName: '',
          Enabled: false,
          Id: '',
          LastModifiedTime: awsCommon.timestamp(),
          Origins: /*Sb*/{
            Items: [ {
              CustomHeaders: {
                Items: [ {
                  HeaderName: '',
                  HeaderValue: '',
                }, /* ...*/ ],
                Quantity: 0,
              },
              CustomOriginConfig: {
                HTTPPort: 0,
                HTTPSPort: 0,
                OriginProtocolPolicy: '',
                OriginSslProtocols: {
                  Items: [ '', /* ...*/ ],
                  Quantity: 0,
                },
              },
              DomainName: '',
              Id: '',
              OriginPath: '',
              S3OriginConfig: {
                OriginAccessIdentity: '',
              },
            }, /* ...*/ ],
            Quantity: 0,
          },
          PriceClass: '',
          Restrictions: /*S1g*/{
            GeoRestriction: {
              Items: [ '', /* ...*/ ],
              Quantity: 0,
              RestrictionType: '',
            },
          },
          Status: '',
          ViewerCertificate: /*S1c*/{
            ACMCertificateArn: '',
            Certificate: '',
            CertificateSource: '',
            CloudFrontDefaultCertificate: false,
            IAMCertificateId: '',
            MinimumProtocolVersion: '',
            SSLSupportMethod: '',
          },
          WebACLId: '',
        }, /* ...*/ ],
        Marker: '',
        MaxItems: 0,
        NextMarker: '',
        Quantity: 0,
      },
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.ListInvalidations = awsCommon.as(
  'GET',
  '/2016-01-28/distribution/:DistributionId/invalidation',
  function ListInvalidations(aws) {
    var distributionId = aws.reqParams.DistributionId;
    var marker = aws.params.Marker;
    var maxItems = aws.params.MaxItems;
    if (!distributionId) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DistributionId'];
    }


    // TODO implement code

    var ret = {
      InvalidationList: {
        IsTruncated: false,
        Items: [ {
          CreateTime: awsCommon.timestamp(),
          Id: '',
          Status: '',
        }, /* ...*/ ],
        Marker: '',
        MaxItems: 0,
        NextMarker: '',
        Quantity: 0,
      },
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.ListStreamingDistributions = awsCommon.as(
  'GET',
  '/2016-01-28/streaming-distribution',
  function ListStreamingDistributions(aws) {
    var marker = aws.params.Marker;
    var maxItems = aws.params.MaxItems;


    // TODO implement code

    var ret = {
      StreamingDistributionList: {
        IsTruncated: false,
        Items: [ {
          Aliases: /*S8*/{
            Items: [ '', /* ...*/ ],
            Quantity: 0,
          },
          Comment: '',
          DomainName: '',
          Enabled: false,
          Id: '',
          LastModifiedTime: awsCommon.timestamp(),
          PriceClass: '',
          S3Origin: /*S20*/{
            DomainName: '',
            OriginAccessIdentity: '',
          },
          Status: '',
          TrustedSigners: /*Sw*/{
            Enabled: false,
            Items: [ '', /* ...*/ ],
            Quantity: 0,
          },
        }, /* ...*/ ],
        Marker: '',
        MaxItems: 0,
        NextMarker: '',
        Quantity: 0,
      },
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.UpdateCloudFrontOriginAccessIdentity = awsCommon.as(
  'PUT',
  '/2016-01-28/origin-access-identity/cloudfront/:Id/config',
  function UpdateCloudFrontOriginAccessIdentity(aws) {
    var cloudFrontOriginAccessIdentityConfig = aws.params.CloudFrontOriginAccessIdentityConfig;
    var id = aws.reqParams.Id;
    var ifMatch = aws.params.IfMatch;
    if (!cloudFrontOriginAccessIdentityConfig) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter CloudFrontOriginAccessIdentityConfig'];
    }
    if (!id) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Id'];
    }


    // TODO implement code

    var ret = {
      CloudFrontOriginAccessIdentity: /*S5*/{
        CloudFrontOriginAccessIdentityConfig: /*S2*/{
          CallerReference: '',
          Comment: '',
        },
        Id: '',
        S3CanonicalUserId: '',
      },
      ETag: '',
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.UpdateDistribution = awsCommon.as(
  'PUT',
  '/2016-01-28/distribution/:Id/config',
  function UpdateDistribution(aws) {
    var distributionConfig = aws.params.DistributionConfig;
    var id = aws.reqParams.Id;
    var ifMatch = aws.params.IfMatch;
    if (!distributionConfig) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DistributionConfig'];
    }
    if (!id) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Id'];
    }


    // TODO implement code

    var ret = {
      Distribution: /*S1l*/{
        ActiveTrustedSigners: /*S1n*/{
          Enabled: false,
          Items: [ {
            AwsAccountNumber: '',
            KeyPairIds: {
              Items: [ '', /* ...*/ ],
              Quantity: 0,
            },
          }, /* ...*/ ],
          Quantity: 0,
        },
        DistributionConfig: /*S7*/{
          Aliases: /*S8*/{
            Items: [ '', /* ...*/ ],
            Quantity: 0,
          },
          CacheBehaviors: /*S14*/{
            Items: [ {
              AllowedMethods: /*S10*/{
                CachedMethods: {
                  Items: /*S11*/[ '', /* ...*/ ],
                  Quantity: 0,
                },
                Items: /*S11*/[ '', /* ...*/ ],
                Quantity: 0,
              },
              Compress: false,
              DefaultTTL: 0 /*Long*/,
              ForwardedValues: /*So*/{
                Cookies: {
                  Forward: '',
                  WhitelistedNames: {
                    Items: [ '', /* ...*/ ],
                    Quantity: 0,
                  },
                },
                Headers: {
                  Items: [ '', /* ...*/ ],
                  Quantity: 0,
                },
                QueryString: false,
              },
              MaxTTL: 0 /*Long*/,
              MinTTL: 0 /*Long*/,
              PathPattern: '',
              SmoothStreaming: false,
              TargetOriginId: '',
              TrustedSigners: /*Sw*/{
                Enabled: false,
                Items: [ '', /* ...*/ ],
                Quantity: 0,
              },
              ViewerProtocolPolicy: '',
            }, /* ...*/ ],
            Quantity: 0,
          },
          CallerReference: '',
          Comment: '',
          CustomErrorResponses: /*S17*/{
            Items: [ {
              ErrorCachingMinTTL: 0 /*Long*/,
              ErrorCode: 0,
              ResponseCode: '',
              ResponsePagePath: '',
            }, /* ...*/ ],
            Quantity: 0,
          },
          DefaultCacheBehavior: /*Sn*/{
            AllowedMethods: /*S10*/{
                CachedMethods: {
                  Items: /*S11*/[ '', /* ...*/ ],
                  Quantity: 0,
                },
                Items: /*S11*/[ '', /* ...*/ ],
                Quantity: 0,
              },
            Compress: false,
            DefaultTTL: 0 /*Long*/,
            ForwardedValues: /*So*/{
                Cookies: {
                  Forward: '',
                  WhitelistedNames: {
                    Items: [ '', /* ...*/ ],
                    Quantity: 0,
                  },
                },
                Headers: {
                  Items: [ '', /* ...*/ ],
                  Quantity: 0,
                },
                QueryString: false,
              },
            MaxTTL: 0 /*Long*/,
            MinTTL: 0 /*Long*/,
            SmoothStreaming: false,
            TargetOriginId: '',
            TrustedSigners: /*Sw*/{
                Enabled: false,
                Items: [ '', /* ...*/ ],
                Quantity: 0,
              },
            ViewerProtocolPolicy: '',
          },
          DefaultRootObject: '',
          Enabled: false,
          Logging: {
            Bucket: '',
            Enabled: false,
            IncludeCookies: false,
            Prefix: '',
          },
          Origins: /*Sb*/{
            Items: [ {
              CustomHeaders: {
                Items: [ {
                  HeaderName: '',
                  HeaderValue: '',
                }, /* ...*/ ],
                Quantity: 0,
              },
              CustomOriginConfig: {
                HTTPPort: 0,
                HTTPSPort: 0,
                OriginProtocolPolicy: '',
                OriginSslProtocols: {
                  Items: [ '', /* ...*/ ],
                  Quantity: 0,
                },
              },
              DomainName: '',
              Id: '',
              OriginPath: '',
              S3OriginConfig: {
                OriginAccessIdentity: '',
              },
            }, /* ...*/ ],
            Quantity: 0,
          },
          PriceClass: '',
          Restrictions: /*S1g*/{
            GeoRestriction: {
              Items: [ '', /* ...*/ ],
              Quantity: 0,
              RestrictionType: '',
            },
          },
          ViewerCertificate: /*S1c*/{
            ACMCertificateArn: '',
            Certificate: '',
            CertificateSource: '',
            CloudFrontDefaultCertificate: false,
            IAMCertificateId: '',
            MinimumProtocolVersion: '',
            SSLSupportMethod: '',
          },
          WebACLId: '',
        },
        DomainName: '',
        Id: '',
        InProgressInvalidationBatches: 0,
        LastModifiedTime: awsCommon.timestamp(),
        Status: '',
      },
      ETag: '',
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.UpdateStreamingDistribution = awsCommon.as(
  'PUT',
  '/2016-01-28/streaming-distribution/:Id/config',
  function UpdateStreamingDistribution(aws) {
    var id = aws.reqParams.Id;
    var ifMatch = aws.params.IfMatch;
    var streamingDistributionConfig = aws.params.StreamingDistributionConfig;
    if (!id) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Id'];
    }
    if (!streamingDistributionConfig) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter StreamingDistributionConfig'];
    }


    // TODO implement code

    var ret = {
      ETag: '',
      StreamingDistribution: /*S23*/{
        ActiveTrustedSigners: /*S1n*/{
          Enabled: false,
          Items: [ {
            AwsAccountNumber: '',
            KeyPairIds: {
              Items: [ '', /* ...*/ ],
              Quantity: 0,
            },
          }, /* ...*/ ],
          Quantity: 0,
        },
        DomainName: '',
        Id: '',
        LastModifiedTime: awsCommon.timestamp(),
        Status: '',
        StreamingDistributionConfig: /*S1z*/{
          Aliases: /*S8*/{
            Items: [ '', /* ...*/ ],
            Quantity: 0,
          },
          CallerReference: '',
          Comment: '',
          Enabled: false,
          Logging: {
            Bucket: '',
            Enabled: false,
            Prefix: '',
          },
          PriceClass: '',
          S3Origin: /*S20*/{
            DomainName: '',
            OriginAccessIdentity: '',
          },
          TrustedSigners: /*Sw*/{
            Enabled: false,
            Items: [ '', /* ...*/ ],
            Quantity: 0,
          },
        },
      },
    };
    return [200, ret];
  });
