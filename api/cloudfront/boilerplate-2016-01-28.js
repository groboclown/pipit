'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * Amazon CloudFront version 2016-01-28
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.CreateInvalidation = aws_common.as(
    "/2016-01-28/distribution/:DistributionId/invalidation",
    function CreateInvalidation(aws) {
        var DistributionId = aws.reqParams.DistributionId;
        var InvalidationBatch = aws.params.InvalidationBatch;
        if (! DistributionId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DistributionId"];
        }        if (! InvalidationBatch) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InvalidationBatch"];
        }

        // TODO implement code

        var ret = {
            Location: "",
            Invalidation: /*S1x*/{
                CreateTime: now(),
                Id: "",
                InvalidationBatch: /*S1t*/{
                    CallerReference: "",
                    Paths: {
                        Items: [ "" /*, ...*/ ],
                        Quantity: 0
                    }
                },
                Status: ""
            }
        };
        return [201, ret];
    });
module.exports.CreateDistribution = aws_common.as(
    "/2016-01-28/distribution",
    function CreateDistribution(aws) {
        var DistributionConfig = aws.params.DistributionConfig;
        if (! DistributionConfig) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DistributionConfig"];
        }

        // TODO implement code

        var ret = {
            Location: "",
            ETag: "",
            Distribution: /*S1l*/{
                LastModifiedTime: now(),
                InProgressInvalidationBatches: 0,
                DistributionConfig: /*S7*/{
                    CustomErrorResponses: /*S17*/{
                        Items: [ {
                            ResponseCode: "",
                            ResponsePagePath: "",
                            ErrorCachingMinTTL: 0 /*long*/,
                            ErrorCode: 0
                        } /*, ...*/ ],
                        Quantity: 0
                    },
                    WebACLId: "",
                    Enabled: false,
                    CallerReference: "",
                    Comment: "",
                    Aliases: /*S8*/{
                        Items: [ "" /*, ...*/ ],
                        Quantity: 0
                    },
                    DefaultRootObject: "",
                    DefaultCacheBehavior: /*Sn*/{
                        MinTTL: 0 /*long*/,
                        MaxTTL: 0 /*long*/,
                        AllowedMethods: /*S10*/{
                            Items: /*S11*/[ "" /*, ...*/ ],
                            CachedMethods: {
                                Items: /*S11*/[ "" /*, ...*/ ],
                                Quantity: 0
                            },
                            Quantity: 0
                        },
                        DefaultTTL: 0 /*long*/,
                        ViewerProtocolPolicy: "",
                        TargetOriginId: "",
                        ForwardedValues: /*So*/{
                            QueryString: false,
                            Headers: {
                                Items: [ "" /*, ...*/ ],
                                Quantity: 0
                            },
                            Cookies: {
                                WhitelistedNames: {
                                    Items: [ "" /*, ...*/ ],
                                    Quantity: 0
                                },
                                Forward: ""
                            }
                        },
                        TrustedSigners: /*Sw*/{
                            Items: [ "" /*, ...*/ ],
                            Enabled: false,
                            Quantity: 0
                        },
                        Compress: false,
                        SmoothStreaming: false
                    },
                    Restrictions: /*S1g*/{
                        GeoRestriction: {
                            Items: [ "" /*, ...*/ ],
                            RestrictionType: "",
                            Quantity: 0
                        }
                    },
                    PriceClass: "",
                    Origins: /*Sb*/{
                        Items: [ {
                            CustomHeaders: {
                                Items: [ {
                                    HeaderName: "",
                                    HeaderValue: ""
                                } /*, ...*/ ],
                                Quantity: 0
                            },
                            Id: "",
                            CustomOriginConfig: {
                                HTTPSPort: 0,
                                OriginProtocolPolicy: "",
                                HTTPPort: 0,
                                OriginSslProtocols: {
                                    Items: [ "" /*, ...*/ ],
                                    Quantity: 0
                                }
                            },
                            OriginPath: "",
                            DomainName: "",
                            S3OriginConfig: {
                                OriginAccessIdentity: ""
                            }
                        } /*, ...*/ ],
                        Quantity: 0
                    },
                    ViewerCertificate: /*S1c*/{
                        CloudFrontDefaultCertificate: false,
                        Certificate: "",
                        MinimumProtocolVersion: "",
                        CertificateSource: "",
                        SSLSupportMethod: "",
                        IAMCertificateId: ""
                    },
                    Logging: {
                        IncludeCookies: false,
                        Bucket: "",
                        Enabled: false,
                        Prefix: ""
                    },
                    CacheBehaviors: /*S14*/{
                        Items: [ {
                            MaxTTL: 0 /*long*/,
                            MinTTL: 0 /*long*/,
                            ForwardedValues: /*So*/{
                            QueryString: false,
                            Headers: {
                                Items: [ "" /*, ...*/ ],
                                Quantity: 0
                            },
                            Cookies: {
                                WhitelistedNames: {
                                    Items: [ "" /*, ...*/ ],
                                    Quantity: 0
                                },
                                Forward: ""
                            }
                        },
                            AllowedMethods: /*S10*/{
                            Items: /*S11*/[ "" /*, ...*/ ],
                            CachedMethods: {
                                Items: /*S11*/[ "" /*, ...*/ ],
                                Quantity: 0
                            },
                            Quantity: 0
                        },
                            DefaultTTL: 0 /*long*/,
                            ViewerProtocolPolicy: "",
                            TargetOriginId: "",
                            PathPattern: "",
                            TrustedSigners: /*Sw*/{
                            Items: [ "" /*, ...*/ ],
                            Enabled: false,
                            Quantity: 0
                        },
                            Compress: false,
                            SmoothStreaming: false
                        } /*, ...*/ ],
                        Quantity: 0
                    }
                },
                ActiveTrustedSigners: /*S1n*/{
                    Items: [ {
                        KeyPairIds: {
                            Items: [ "" /*, ...*/ ],
                            Quantity: 0
                        },
                        AwsAccountNumber: ""
                    } /*, ...*/ ],
                    Enabled: false,
                    Quantity: 0
                },
                Id: "",
                DomainName: "",
                Status: ""
            }
        };
        return [201, ret];
    });
module.exports.GetCloudFrontOriginAccessIdentity = aws_common.as(
    "GET",
    "/2016-01-28/origin-access-identity/cloudfront/:Id",
    function GetCloudFrontOriginAccessIdentity(aws) {
        var Id = aws.reqParams.Id;
        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }

        // TODO implement code

        var ret = {
            CloudFrontOriginAccessIdentity: /*S5*/{
                S3CanonicalUserId: "",
                Id: "",
                CloudFrontOriginAccessIdentityConfig: /*S2*/{
                    CallerReference: "",
                    Comment: ""
                }
            },
            ETag: ""
        };
        return [200, ret];
    });
module.exports.GetCloudFrontOriginAccessIdentityConfig = aws_common.as(
    "GET",
    "/2016-01-28/origin-access-identity/cloudfront/:Id/config",
    function GetCloudFrontOriginAccessIdentityConfig(aws) {
        var Id = aws.reqParams.Id;
        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }

        // TODO implement code

        var ret = {
            ETag: "",
            CloudFrontOriginAccessIdentityConfig: /*S2*/{
                CallerReference: "",
                Comment: ""
            }
        };
        return [200, ret];
    });
module.exports.ListDistributionsByWebACLId = aws_common.as(
    "GET",
    "/2016-01-28/distributionsByWebACLId/:WebACLId",
    function ListDistributionsByWebACLId(aws) {
        var MaxItems = aws.params.MaxItems;
        var Marker = aws.params.Marker;
        var WebACLId = aws.reqParams.WebACLId;
        if (! WebACLId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter WebACLId"];
        }

        // TODO implement code

        var ret = {
            DistributionList: /*S2s*/{
                Marker: "",
                IsTruncated: false,
                Items: [ {
                    CustomErrorResponses: /*S17*/{
                        Items: [ {
                            ResponseCode: "",
                            ResponsePagePath: "",
                            ErrorCachingMinTTL: 0 /*long*/,
                            ErrorCode: 0
                        } /*, ...*/ ],
                        Quantity: 0
                    },
                    WebACLId: "",
                    Enabled: false,
                    Id: "",
                    Comment: "",
                    Aliases: /*S8*/{
                        Items: [ "" /*, ...*/ ],
                        Quantity: 0
                    },
                    ViewerCertificate: /*S1c*/{
                        CloudFrontDefaultCertificate: false,
                        Certificate: "",
                        MinimumProtocolVersion: "",
                        CertificateSource: "",
                        SSLSupportMethod: "",
                        IAMCertificateId: ""
                    },
                    LastModifiedTime: now(),
                    DefaultCacheBehavior: /*Sn*/{
                        MinTTL: 0 /*long*/,
                        MaxTTL: 0 /*long*/,
                        AllowedMethods: /*S10*/{
                            Items: /*S11*/[ "" /*, ...*/ ],
                            CachedMethods: {
                                Items: /*S11*/[ "" /*, ...*/ ],
                                Quantity: 0
                            },
                            Quantity: 0
                        },
                        DefaultTTL: 0 /*long*/,
                        ViewerProtocolPolicy: "",
                        TargetOriginId: "",
                        ForwardedValues: /*So*/{
                            QueryString: false,
                            Headers: {
                                Items: [ "" /*, ...*/ ],
                                Quantity: 0
                            },
                            Cookies: {
                                WhitelistedNames: {
                                    Items: [ "" /*, ...*/ ],
                                    Quantity: 0
                                },
                                Forward: ""
                            }
                        },
                        TrustedSigners: /*Sw*/{
                            Items: [ "" /*, ...*/ ],
                            Enabled: false,
                            Quantity: 0
                        },
                        Compress: false,
                        SmoothStreaming: false
                    },
                    Restrictions: /*S1g*/{
                        GeoRestriction: {
                            Items: [ "" /*, ...*/ ],
                            RestrictionType: "",
                            Quantity: 0
                        }
                    },
                    PriceClass: "",
                    Origins: /*Sb*/{
                        Items: [ {
                            CustomHeaders: {
                                Items: [ {
                                    HeaderName: "",
                                    HeaderValue: ""
                                } /*, ...*/ ],
                                Quantity: 0
                            },
                            Id: "",
                            CustomOriginConfig: {
                                HTTPSPort: 0,
                                OriginProtocolPolicy: "",
                                HTTPPort: 0,
                                OriginSslProtocols: {
                                    Items: [ "" /*, ...*/ ],
                                    Quantity: 0
                                }
                            },
                            OriginPath: "",
                            DomainName: "",
                            S3OriginConfig: {
                                OriginAccessIdentity: ""
                            }
                        } /*, ...*/ ],
                        Quantity: 0
                    },
                    DomainName: "",
                    CacheBehaviors: /*S14*/{
                        Items: [ {
                            MaxTTL: 0 /*long*/,
                            MinTTL: 0 /*long*/,
                            ForwardedValues: /*So*/{
                            QueryString: false,
                            Headers: {
                                Items: [ "" /*, ...*/ ],
                                Quantity: 0
                            },
                            Cookies: {
                                WhitelistedNames: {
                                    Items: [ "" /*, ...*/ ],
                                    Quantity: 0
                                },
                                Forward: ""
                            }
                        },
                            AllowedMethods: /*S10*/{
                            Items: /*S11*/[ "" /*, ...*/ ],
                            CachedMethods: {
                                Items: /*S11*/[ "" /*, ...*/ ],
                                Quantity: 0
                            },
                            Quantity: 0
                        },
                            DefaultTTL: 0 /*long*/,
                            ViewerProtocolPolicy: "",
                            TargetOriginId: "",
                            PathPattern: "",
                            TrustedSigners: /*Sw*/{
                            Items: [ "" /*, ...*/ ],
                            Enabled: false,
                            Quantity: 0
                        },
                            Compress: false,
                            SmoothStreaming: false
                        } /*, ...*/ ],
                        Quantity: 0
                    },
                    Status: ""
                } /*, ...*/ ],
                MaxItems: 0,
                NextMarker: "",
                Quantity: 0
            }
        };
        return [200, ret];
    });
module.exports.ListInvalidations = aws_common.as(
    "GET",
    "/2016-01-28/distribution/:DistributionId/invalidation",
    function ListInvalidations(aws) {
        var Marker = aws.params.Marker;
        var DistributionId = aws.reqParams.DistributionId;
        var MaxItems = aws.params.MaxItems;
        if (! DistributionId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DistributionId"];
        }

        // TODO implement code

        var ret = {
            InvalidationList: {
                Marker: "",
                IsTruncated: false,
                Items: [ {
                    Id: "",
                    Status: "",
                    CreateTime: now()
                } /*, ...*/ ],
                MaxItems: 0,
                NextMarker: "",
                Quantity: 0
            }
        };
        return [200, ret];
    });
module.exports.CreateCloudFrontOriginAccessIdentity = aws_common.as(
    "/2016-01-28/origin-access-identity/cloudfront",
    function CreateCloudFrontOriginAccessIdentity(aws) {
        var CloudFrontOriginAccessIdentityConfig = aws.params.CloudFrontOriginAccessIdentityConfig;
        if (! CloudFrontOriginAccessIdentityConfig) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter CloudFrontOriginAccessIdentityConfig"];
        }

        // TODO implement code

        var ret = {
            Location: "",
            CloudFrontOriginAccessIdentity: /*S5*/{
                S3CanonicalUserId: "",
                Id: "",
                CloudFrontOriginAccessIdentityConfig: /*S2*/{
                    CallerReference: "",
                    Comment: ""
                }
            },
            ETag: ""
        };
        return [201, ret];
    });
module.exports.UpdateStreamingDistribution = aws_common.as(
    "PUT",
    "/2016-01-28/streaming-distribution/:Id/config",
    function UpdateStreamingDistribution(aws) {
        var IfMatch = aws.params.IfMatch;
        var Id = aws.reqParams.Id;
        var StreamingDistributionConfig = aws.params.StreamingDistributionConfig;
        if (! StreamingDistributionConfig) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StreamingDistributionConfig"];
        }        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }

        // TODO implement code

        var ret = {
            ETag: "",
            StreamingDistribution: /*S23*/{
                LastModifiedTime: now(),
                StreamingDistributionConfig: /*S1z*/{
                    Enabled: false,
                    PriceClass: "",
                    TrustedSigners: /*Sw*/{
                        Items: [ "" /*, ...*/ ],
                        Enabled: false,
                        Quantity: 0
                    },
                    Logging: {
                        Bucket: "",
                        Enabled: false,
                        Prefix: ""
                    },
                    CallerReference: "",
                    Comment: "",
                    Aliases: /*S8*/{
                        Items: [ "" /*, ...*/ ],
                        Quantity: 0
                    },
                    S3Origin: /*S20*/{
                        OriginAccessIdentity: "",
                        DomainName: ""
                    }
                },
                ActiveTrustedSigners: /*S1n*/{
                    Items: [ {
                        KeyPairIds: {
                            Items: [ "" /*, ...*/ ],
                            Quantity: 0
                        },
                        AwsAccountNumber: ""
                    } /*, ...*/ ],
                    Enabled: false,
                    Quantity: 0
                },
                Id: "",
                DomainName: "",
                Status: ""
            }
        };
        return [200, ret];
    });
module.exports.GetInvalidation = aws_common.as(
    "GET",
    "/2016-01-28/distribution/:DistributionId/invalidation/:Id",
    function GetInvalidation(aws) {
        var Id = aws.reqParams.Id;
        var DistributionId = aws.reqParams.DistributionId;
        if (! DistributionId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DistributionId"];
        }        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }

        // TODO implement code

        var ret = {
            Invalidation: /*S1x*/{
                CreateTime: now(),
                Id: "",
                InvalidationBatch: /*S1t*/{
                    CallerReference: "",
                    Paths: {
                        Items: [ "" /*, ...*/ ],
                        Quantity: 0
                    }
                },
                Status: ""
            }
        };
        return [200, ret];
    });
module.exports.CreateStreamingDistribution = aws_common.as(
    "/2016-01-28/streaming-distribution",
    function CreateStreamingDistribution(aws) {
        var StreamingDistributionConfig = aws.params.StreamingDistributionConfig;
        if (! StreamingDistributionConfig) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StreamingDistributionConfig"];
        }

        // TODO implement code

        var ret = {
            Location: "",
            ETag: "",
            StreamingDistribution: /*S23*/{
                LastModifiedTime: now(),
                StreamingDistributionConfig: /*S1z*/{
                    Enabled: false,
                    PriceClass: "",
                    TrustedSigners: /*Sw*/{
                        Items: [ "" /*, ...*/ ],
                        Enabled: false,
                        Quantity: 0
                    },
                    Logging: {
                        Bucket: "",
                        Enabled: false,
                        Prefix: ""
                    },
                    CallerReference: "",
                    Comment: "",
                    Aliases: /*S8*/{
                        Items: [ "" /*, ...*/ ],
                        Quantity: 0
                    },
                    S3Origin: /*S20*/{
                        OriginAccessIdentity: "",
                        DomainName: ""
                    }
                },
                ActiveTrustedSigners: /*S1n*/{
                    Items: [ {
                        KeyPairIds: {
                            Items: [ "" /*, ...*/ ],
                            Quantity: 0
                        },
                        AwsAccountNumber: ""
                    } /*, ...*/ ],
                    Enabled: false,
                    Quantity: 0
                },
                Id: "",
                DomainName: "",
                Status: ""
            }
        };
        return [201, ret];
    });
module.exports.DeleteDistribution = aws_common.as(
    "DELETE",
    "/2016-01-28/distribution/:Id",
    function DeleteDistribution(aws) {
        var IfMatch = aws.params.IfMatch;
        var Id = aws.reqParams.Id;
        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }

        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.GetDistribution = aws_common.as(
    "GET",
    "/2016-01-28/distribution/:Id",
    function GetDistribution(aws) {
        var Id = aws.reqParams.Id;
        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }

        // TODO implement code

        var ret = {
            ETag: "",
            Distribution: /*S1l*/{
                LastModifiedTime: now(),
                InProgressInvalidationBatches: 0,
                DistributionConfig: /*S7*/{
                    CustomErrorResponses: /*S17*/{
                        Items: [ {
                            ResponseCode: "",
                            ResponsePagePath: "",
                            ErrorCachingMinTTL: 0 /*long*/,
                            ErrorCode: 0
                        } /*, ...*/ ],
                        Quantity: 0
                    },
                    WebACLId: "",
                    Enabled: false,
                    CallerReference: "",
                    Comment: "",
                    Aliases: /*S8*/{
                        Items: [ "" /*, ...*/ ],
                        Quantity: 0
                    },
                    DefaultRootObject: "",
                    DefaultCacheBehavior: /*Sn*/{
                        MinTTL: 0 /*long*/,
                        MaxTTL: 0 /*long*/,
                        AllowedMethods: /*S10*/{
                            Items: /*S11*/[ "" /*, ...*/ ],
                            CachedMethods: {
                                Items: /*S11*/[ "" /*, ...*/ ],
                                Quantity: 0
                            },
                            Quantity: 0
                        },
                        DefaultTTL: 0 /*long*/,
                        ViewerProtocolPolicy: "",
                        TargetOriginId: "",
                        ForwardedValues: /*So*/{
                            QueryString: false,
                            Headers: {
                                Items: [ "" /*, ...*/ ],
                                Quantity: 0
                            },
                            Cookies: {
                                WhitelistedNames: {
                                    Items: [ "" /*, ...*/ ],
                                    Quantity: 0
                                },
                                Forward: ""
                            }
                        },
                        TrustedSigners: /*Sw*/{
                            Items: [ "" /*, ...*/ ],
                            Enabled: false,
                            Quantity: 0
                        },
                        Compress: false,
                        SmoothStreaming: false
                    },
                    Restrictions: /*S1g*/{
                        GeoRestriction: {
                            Items: [ "" /*, ...*/ ],
                            RestrictionType: "",
                            Quantity: 0
                        }
                    },
                    PriceClass: "",
                    Origins: /*Sb*/{
                        Items: [ {
                            CustomHeaders: {
                                Items: [ {
                                    HeaderName: "",
                                    HeaderValue: ""
                                } /*, ...*/ ],
                                Quantity: 0
                            },
                            Id: "",
                            CustomOriginConfig: {
                                HTTPSPort: 0,
                                OriginProtocolPolicy: "",
                                HTTPPort: 0,
                                OriginSslProtocols: {
                                    Items: [ "" /*, ...*/ ],
                                    Quantity: 0
                                }
                            },
                            OriginPath: "",
                            DomainName: "",
                            S3OriginConfig: {
                                OriginAccessIdentity: ""
                            }
                        } /*, ...*/ ],
                        Quantity: 0
                    },
                    ViewerCertificate: /*S1c*/{
                        CloudFrontDefaultCertificate: false,
                        Certificate: "",
                        MinimumProtocolVersion: "",
                        CertificateSource: "",
                        SSLSupportMethod: "",
                        IAMCertificateId: ""
                    },
                    Logging: {
                        IncludeCookies: false,
                        Bucket: "",
                        Enabled: false,
                        Prefix: ""
                    },
                    CacheBehaviors: /*S14*/{
                        Items: [ {
                            MaxTTL: 0 /*long*/,
                            MinTTL: 0 /*long*/,
                            ForwardedValues: /*So*/{
                            QueryString: false,
                            Headers: {
                                Items: [ "" /*, ...*/ ],
                                Quantity: 0
                            },
                            Cookies: {
                                WhitelistedNames: {
                                    Items: [ "" /*, ...*/ ],
                                    Quantity: 0
                                },
                                Forward: ""
                            }
                        },
                            AllowedMethods: /*S10*/{
                            Items: /*S11*/[ "" /*, ...*/ ],
                            CachedMethods: {
                                Items: /*S11*/[ "" /*, ...*/ ],
                                Quantity: 0
                            },
                            Quantity: 0
                        },
                            DefaultTTL: 0 /*long*/,
                            ViewerProtocolPolicy: "",
                            TargetOriginId: "",
                            PathPattern: "",
                            TrustedSigners: /*Sw*/{
                            Items: [ "" /*, ...*/ ],
                            Enabled: false,
                            Quantity: 0
                        },
                            Compress: false,
                            SmoothStreaming: false
                        } /*, ...*/ ],
                        Quantity: 0
                    }
                },
                ActiveTrustedSigners: /*S1n*/{
                    Items: [ {
                        KeyPairIds: {
                            Items: [ "" /*, ...*/ ],
                            Quantity: 0
                        },
                        AwsAccountNumber: ""
                    } /*, ...*/ ],
                    Enabled: false,
                    Quantity: 0
                },
                Id: "",
                DomainName: "",
                Status: ""
            }
        };
        return [200, ret];
    });
module.exports.ListCloudFrontOriginAccessIdentities = aws_common.as(
    "GET",
    "/2016-01-28/origin-access-identity/cloudfront",
    function ListCloudFrontOriginAccessIdentities(aws) {
        var MaxItems = aws.params.MaxItems;
        var Marker = aws.params.Marker;


        // TODO implement code

        var ret = {
            CloudFrontOriginAccessIdentityList: {
                Marker: "",
                IsTruncated: false,
                Items: [ {
                    S3CanonicalUserId: "",
                    Id: "",
                    Comment: ""
                } /*, ...*/ ],
                MaxItems: 0,
                NextMarker: "",
                Quantity: 0
            }
        };
        return [200, ret];
    });
module.exports.UpdateDistribution = aws_common.as(
    "PUT",
    "/2016-01-28/distribution/:Id/config",
    function UpdateDistribution(aws) {
        var IfMatch = aws.params.IfMatch;
        var Id = aws.reqParams.Id;
        var DistributionConfig = aws.params.DistributionConfig;
        if (! DistributionConfig) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DistributionConfig"];
        }        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }

        // TODO implement code

        var ret = {
            ETag: "",
            Distribution: /*S1l*/{
                LastModifiedTime: now(),
                InProgressInvalidationBatches: 0,
                DistributionConfig: /*S7*/{
                    CustomErrorResponses: /*S17*/{
                        Items: [ {
                            ResponseCode: "",
                            ResponsePagePath: "",
                            ErrorCachingMinTTL: 0 /*long*/,
                            ErrorCode: 0
                        } /*, ...*/ ],
                        Quantity: 0
                    },
                    WebACLId: "",
                    Enabled: false,
                    CallerReference: "",
                    Comment: "",
                    Aliases: /*S8*/{
                        Items: [ "" /*, ...*/ ],
                        Quantity: 0
                    },
                    DefaultRootObject: "",
                    DefaultCacheBehavior: /*Sn*/{
                        MinTTL: 0 /*long*/,
                        MaxTTL: 0 /*long*/,
                        AllowedMethods: /*S10*/{
                            Items: /*S11*/[ "" /*, ...*/ ],
                            CachedMethods: {
                                Items: /*S11*/[ "" /*, ...*/ ],
                                Quantity: 0
                            },
                            Quantity: 0
                        },
                        DefaultTTL: 0 /*long*/,
                        ViewerProtocolPolicy: "",
                        TargetOriginId: "",
                        ForwardedValues: /*So*/{
                            QueryString: false,
                            Headers: {
                                Items: [ "" /*, ...*/ ],
                                Quantity: 0
                            },
                            Cookies: {
                                WhitelistedNames: {
                                    Items: [ "" /*, ...*/ ],
                                    Quantity: 0
                                },
                                Forward: ""
                            }
                        },
                        TrustedSigners: /*Sw*/{
                            Items: [ "" /*, ...*/ ],
                            Enabled: false,
                            Quantity: 0
                        },
                        Compress: false,
                        SmoothStreaming: false
                    },
                    Restrictions: /*S1g*/{
                        GeoRestriction: {
                            Items: [ "" /*, ...*/ ],
                            RestrictionType: "",
                            Quantity: 0
                        }
                    },
                    PriceClass: "",
                    Origins: /*Sb*/{
                        Items: [ {
                            CustomHeaders: {
                                Items: [ {
                                    HeaderName: "",
                                    HeaderValue: ""
                                } /*, ...*/ ],
                                Quantity: 0
                            },
                            Id: "",
                            CustomOriginConfig: {
                                HTTPSPort: 0,
                                OriginProtocolPolicy: "",
                                HTTPPort: 0,
                                OriginSslProtocols: {
                                    Items: [ "" /*, ...*/ ],
                                    Quantity: 0
                                }
                            },
                            OriginPath: "",
                            DomainName: "",
                            S3OriginConfig: {
                                OriginAccessIdentity: ""
                            }
                        } /*, ...*/ ],
                        Quantity: 0
                    },
                    ViewerCertificate: /*S1c*/{
                        CloudFrontDefaultCertificate: false,
                        Certificate: "",
                        MinimumProtocolVersion: "",
                        CertificateSource: "",
                        SSLSupportMethod: "",
                        IAMCertificateId: ""
                    },
                    Logging: {
                        IncludeCookies: false,
                        Bucket: "",
                        Enabled: false,
                        Prefix: ""
                    },
                    CacheBehaviors: /*S14*/{
                        Items: [ {
                            MaxTTL: 0 /*long*/,
                            MinTTL: 0 /*long*/,
                            ForwardedValues: /*So*/{
                            QueryString: false,
                            Headers: {
                                Items: [ "" /*, ...*/ ],
                                Quantity: 0
                            },
                            Cookies: {
                                WhitelistedNames: {
                                    Items: [ "" /*, ...*/ ],
                                    Quantity: 0
                                },
                                Forward: ""
                            }
                        },
                            AllowedMethods: /*S10*/{
                            Items: /*S11*/[ "" /*, ...*/ ],
                            CachedMethods: {
                                Items: /*S11*/[ "" /*, ...*/ ],
                                Quantity: 0
                            },
                            Quantity: 0
                        },
                            DefaultTTL: 0 /*long*/,
                            ViewerProtocolPolicy: "",
                            TargetOriginId: "",
                            PathPattern: "",
                            TrustedSigners: /*Sw*/{
                            Items: [ "" /*, ...*/ ],
                            Enabled: false,
                            Quantity: 0
                        },
                            Compress: false,
                            SmoothStreaming: false
                        } /*, ...*/ ],
                        Quantity: 0
                    }
                },
                ActiveTrustedSigners: /*S1n*/{
                    Items: [ {
                        KeyPairIds: {
                            Items: [ "" /*, ...*/ ],
                            Quantity: 0
                        },
                        AwsAccountNumber: ""
                    } /*, ...*/ ],
                    Enabled: false,
                    Quantity: 0
                },
                Id: "",
                DomainName: "",
                Status: ""
            }
        };
        return [200, ret];
    });
module.exports.GetStreamingDistribution = aws_common.as(
    "GET",
    "/2016-01-28/streaming-distribution/:Id",
    function GetStreamingDistribution(aws) {
        var Id = aws.reqParams.Id;
        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }

        // TODO implement code

        var ret = {
            ETag: "",
            StreamingDistribution: /*S23*/{
                LastModifiedTime: now(),
                StreamingDistributionConfig: /*S1z*/{
                    Enabled: false,
                    PriceClass: "",
                    TrustedSigners: /*Sw*/{
                        Items: [ "" /*, ...*/ ],
                        Enabled: false,
                        Quantity: 0
                    },
                    Logging: {
                        Bucket: "",
                        Enabled: false,
                        Prefix: ""
                    },
                    CallerReference: "",
                    Comment: "",
                    Aliases: /*S8*/{
                        Items: [ "" /*, ...*/ ],
                        Quantity: 0
                    },
                    S3Origin: /*S20*/{
                        OriginAccessIdentity: "",
                        DomainName: ""
                    }
                },
                ActiveTrustedSigners: /*S1n*/{
                    Items: [ {
                        KeyPairIds: {
                            Items: [ "" /*, ...*/ ],
                            Quantity: 0
                        },
                        AwsAccountNumber: ""
                    } /*, ...*/ ],
                    Enabled: false,
                    Quantity: 0
                },
                Id: "",
                DomainName: "",
                Status: ""
            }
        };
        return [200, ret];
    });
module.exports.ListDistributions = aws_common.as(
    "GET",
    "/2016-01-28/distribution",
    function ListDistributions(aws) {
        var MaxItems = aws.params.MaxItems;
        var Marker = aws.params.Marker;


        // TODO implement code

        var ret = {
            DistributionList: /*S2s*/{
                Marker: "",
                IsTruncated: false,
                Items: [ {
                    CustomErrorResponses: /*S17*/{
                        Items: [ {
                            ResponseCode: "",
                            ResponsePagePath: "",
                            ErrorCachingMinTTL: 0 /*long*/,
                            ErrorCode: 0
                        } /*, ...*/ ],
                        Quantity: 0
                    },
                    WebACLId: "",
                    Enabled: false,
                    Id: "",
                    Comment: "",
                    Aliases: /*S8*/{
                        Items: [ "" /*, ...*/ ],
                        Quantity: 0
                    },
                    ViewerCertificate: /*S1c*/{
                        CloudFrontDefaultCertificate: false,
                        Certificate: "",
                        MinimumProtocolVersion: "",
                        CertificateSource: "",
                        SSLSupportMethod: "",
                        IAMCertificateId: ""
                    },
                    LastModifiedTime: now(),
                    DefaultCacheBehavior: /*Sn*/{
                        MinTTL: 0 /*long*/,
                        MaxTTL: 0 /*long*/,
                        AllowedMethods: /*S10*/{
                            Items: /*S11*/[ "" /*, ...*/ ],
                            CachedMethods: {
                                Items: /*S11*/[ "" /*, ...*/ ],
                                Quantity: 0
                            },
                            Quantity: 0
                        },
                        DefaultTTL: 0 /*long*/,
                        ViewerProtocolPolicy: "",
                        TargetOriginId: "",
                        ForwardedValues: /*So*/{
                            QueryString: false,
                            Headers: {
                                Items: [ "" /*, ...*/ ],
                                Quantity: 0
                            },
                            Cookies: {
                                WhitelistedNames: {
                                    Items: [ "" /*, ...*/ ],
                                    Quantity: 0
                                },
                                Forward: ""
                            }
                        },
                        TrustedSigners: /*Sw*/{
                            Items: [ "" /*, ...*/ ],
                            Enabled: false,
                            Quantity: 0
                        },
                        Compress: false,
                        SmoothStreaming: false
                    },
                    Restrictions: /*S1g*/{
                        GeoRestriction: {
                            Items: [ "" /*, ...*/ ],
                            RestrictionType: "",
                            Quantity: 0
                        }
                    },
                    PriceClass: "",
                    Origins: /*Sb*/{
                        Items: [ {
                            CustomHeaders: {
                                Items: [ {
                                    HeaderName: "",
                                    HeaderValue: ""
                                } /*, ...*/ ],
                                Quantity: 0
                            },
                            Id: "",
                            CustomOriginConfig: {
                                HTTPSPort: 0,
                                OriginProtocolPolicy: "",
                                HTTPPort: 0,
                                OriginSslProtocols: {
                                    Items: [ "" /*, ...*/ ],
                                    Quantity: 0
                                }
                            },
                            OriginPath: "",
                            DomainName: "",
                            S3OriginConfig: {
                                OriginAccessIdentity: ""
                            }
                        } /*, ...*/ ],
                        Quantity: 0
                    },
                    DomainName: "",
                    CacheBehaviors: /*S14*/{
                        Items: [ {
                            MaxTTL: 0 /*long*/,
                            MinTTL: 0 /*long*/,
                            ForwardedValues: /*So*/{
                            QueryString: false,
                            Headers: {
                                Items: [ "" /*, ...*/ ],
                                Quantity: 0
                            },
                            Cookies: {
                                WhitelistedNames: {
                                    Items: [ "" /*, ...*/ ],
                                    Quantity: 0
                                },
                                Forward: ""
                            }
                        },
                            AllowedMethods: /*S10*/{
                            Items: /*S11*/[ "" /*, ...*/ ],
                            CachedMethods: {
                                Items: /*S11*/[ "" /*, ...*/ ],
                                Quantity: 0
                            },
                            Quantity: 0
                        },
                            DefaultTTL: 0 /*long*/,
                            ViewerProtocolPolicy: "",
                            TargetOriginId: "",
                            PathPattern: "",
                            TrustedSigners: /*Sw*/{
                            Items: [ "" /*, ...*/ ],
                            Enabled: false,
                            Quantity: 0
                        },
                            Compress: false,
                            SmoothStreaming: false
                        } /*, ...*/ ],
                        Quantity: 0
                    },
                    Status: ""
                } /*, ...*/ ],
                MaxItems: 0,
                NextMarker: "",
                Quantity: 0
            }
        };
        return [200, ret];
    });
module.exports.DeleteStreamingDistribution = aws_common.as(
    "DELETE",
    "/2016-01-28/streaming-distribution/:Id",
    function DeleteStreamingDistribution(aws) {
        var IfMatch = aws.params.IfMatch;
        var Id = aws.reqParams.Id;
        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }

        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.DeleteCloudFrontOriginAccessIdentity = aws_common.as(
    "DELETE",
    "/2016-01-28/origin-access-identity/cloudfront/:Id",
    function DeleteCloudFrontOriginAccessIdentity(aws) {
        var IfMatch = aws.params.IfMatch;
        var Id = aws.reqParams.Id;
        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }

        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.GetDistributionConfig = aws_common.as(
    "GET",
    "/2016-01-28/distribution/:Id/config",
    function GetDistributionConfig(aws) {
        var Id = aws.reqParams.Id;
        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }

        // TODO implement code

        var ret = {
            ETag: "",
            DistributionConfig: /*S7*/{
                CustomErrorResponses: /*S17*/{
                    Items: [ {
                        ResponseCode: "",
                        ResponsePagePath: "",
                        ErrorCachingMinTTL: 0 /*long*/,
                        ErrorCode: 0
                    } /*, ...*/ ],
                    Quantity: 0
                },
                WebACLId: "",
                Enabled: false,
                CallerReference: "",
                Comment: "",
                Aliases: /*S8*/{
                    Items: [ "" /*, ...*/ ],
                    Quantity: 0
                },
                DefaultRootObject: "",
                DefaultCacheBehavior: /*Sn*/{
                    MinTTL: 0 /*long*/,
                    MaxTTL: 0 /*long*/,
                    AllowedMethods: /*S10*/{
                        Items: /*S11*/[ "" /*, ...*/ ],
                        CachedMethods: {
                            Items: /*S11*/[ "" /*, ...*/ ],
                            Quantity: 0
                        },
                        Quantity: 0
                    },
                    DefaultTTL: 0 /*long*/,
                    ViewerProtocolPolicy: "",
                    TargetOriginId: "",
                    ForwardedValues: /*So*/{
                        QueryString: false,
                        Headers: {
                            Items: [ "" /*, ...*/ ],
                            Quantity: 0
                        },
                        Cookies: {
                            WhitelistedNames: {
                                Items: [ "" /*, ...*/ ],
                                Quantity: 0
                            },
                            Forward: ""
                        }
                    },
                    TrustedSigners: /*Sw*/{
                        Items: [ "" /*, ...*/ ],
                        Enabled: false,
                        Quantity: 0
                    },
                    Compress: false,
                    SmoothStreaming: false
                },
                Restrictions: /*S1g*/{
                    GeoRestriction: {
                        Items: [ "" /*, ...*/ ],
                        RestrictionType: "",
                        Quantity: 0
                    }
                },
                PriceClass: "",
                Origins: /*Sb*/{
                    Items: [ {
                        CustomHeaders: {
                            Items: [ {
                                HeaderName: "",
                                HeaderValue: ""
                            } /*, ...*/ ],
                            Quantity: 0
                        },
                        Id: "",
                        CustomOriginConfig: {
                            HTTPSPort: 0,
                            OriginProtocolPolicy: "",
                            HTTPPort: 0,
                            OriginSslProtocols: {
                                Items: [ "" /*, ...*/ ],
                                Quantity: 0
                            }
                        },
                        OriginPath: "",
                        DomainName: "",
                        S3OriginConfig: {
                            OriginAccessIdentity: ""
                        }
                    } /*, ...*/ ],
                    Quantity: 0
                },
                ViewerCertificate: /*S1c*/{
                    CloudFrontDefaultCertificate: false,
                    Certificate: "",
                    MinimumProtocolVersion: "",
                    CertificateSource: "",
                    SSLSupportMethod: "",
                    IAMCertificateId: ""
                },
                Logging: {
                    IncludeCookies: false,
                    Bucket: "",
                    Enabled: false,
                    Prefix: ""
                },
                CacheBehaviors: /*S14*/{
                    Items: [ {
                        MaxTTL: 0 /*long*/,
                        MinTTL: 0 /*long*/,
                        ForwardedValues: /*So*/{
                        QueryString: false,
                        Headers: {
                            Items: [ "" /*, ...*/ ],
                            Quantity: 0
                        },
                        Cookies: {
                            WhitelistedNames: {
                                Items: [ "" /*, ...*/ ],
                                Quantity: 0
                            },
                            Forward: ""
                        }
                    },
                        AllowedMethods: /*S10*/{
                        Items: /*S11*/[ "" /*, ...*/ ],
                        CachedMethods: {
                            Items: /*S11*/[ "" /*, ...*/ ],
                            Quantity: 0
                        },
                        Quantity: 0
                    },
                        DefaultTTL: 0 /*long*/,
                        ViewerProtocolPolicy: "",
                        TargetOriginId: "",
                        PathPattern: "",
                        TrustedSigners: /*Sw*/{
                        Items: [ "" /*, ...*/ ],
                        Enabled: false,
                        Quantity: 0
                    },
                        Compress: false,
                        SmoothStreaming: false
                    } /*, ...*/ ],
                    Quantity: 0
                }
            }
        };
        return [200, ret];
    });
module.exports.GetStreamingDistributionConfig = aws_common.as(
    "GET",
    "/2016-01-28/streaming-distribution/:Id/config",
    function GetStreamingDistributionConfig(aws) {
        var Id = aws.reqParams.Id;
        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }

        // TODO implement code

        var ret = {
            ETag: "",
            StreamingDistributionConfig: /*S1z*/{
                Enabled: false,
                PriceClass: "",
                TrustedSigners: /*Sw*/{
                    Items: [ "" /*, ...*/ ],
                    Enabled: false,
                    Quantity: 0
                },
                Logging: {
                    Bucket: "",
                    Enabled: false,
                    Prefix: ""
                },
                CallerReference: "",
                Comment: "",
                Aliases: /*S8*/{
                    Items: [ "" /*, ...*/ ],
                    Quantity: 0
                },
                S3Origin: /*S20*/{
                    OriginAccessIdentity: "",
                    DomainName: ""
                }
            }
        };
        return [200, ret];
    });
module.exports.ListStreamingDistributions = aws_common.as(
    "GET",
    "/2016-01-28/streaming-distribution",
    function ListStreamingDistributions(aws) {
        var MaxItems = aws.params.MaxItems;
        var Marker = aws.params.Marker;


        // TODO implement code

        var ret = {
            StreamingDistributionList: {
                Marker: "",
                IsTruncated: false,
                Items: [ {
                    LastModifiedTime: now(),
                    Aliases: /*S8*/{
                        Items: [ "" /*, ...*/ ],
                        Quantity: 0
                    },
                    PriceClass: "",
                    TrustedSigners: /*Sw*/{
                        Items: [ "" /*, ...*/ ],
                        Enabled: false,
                        Quantity: 0
                    },
                    Enabled: false,
                    Id: "",
                    DomainName: "",
                    Comment: "",
                    Status: "",
                    S3Origin: /*S20*/{
                        OriginAccessIdentity: "",
                        DomainName: ""
                    }
                } /*, ...*/ ],
                MaxItems: 0,
                NextMarker: "",
                Quantity: 0
            }
        };
        return [200, ret];
    });
module.exports.UpdateCloudFrontOriginAccessIdentity = aws_common.as(
    "PUT",
    "/2016-01-28/origin-access-identity/cloudfront/:Id/config",
    function UpdateCloudFrontOriginAccessIdentity(aws) {
        var IfMatch = aws.params.IfMatch;
        var Id = aws.reqParams.Id;
        var CloudFrontOriginAccessIdentityConfig = aws.params.CloudFrontOriginAccessIdentityConfig;
        if (! CloudFrontOriginAccessIdentityConfig) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter CloudFrontOriginAccessIdentityConfig"];
        }        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }

        // TODO implement code

        var ret = {
            CloudFrontOriginAccessIdentity: /*S5*/{
                S3CanonicalUserId: "",
                Id: "",
                CloudFrontOriginAccessIdentityConfig: /*S2*/{
                    CallerReference: "",
                    Comment: ""
                }
            },
            ETag: ""
        };
        return [200, ret];
    });
