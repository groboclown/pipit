'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * AWS OpsWorks version 2013-02-18
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.DescribeAgentVersions = function DescribeAgentVersions(aws) {
        var StackId = aws.params.StackId;
        var ConfigurationManager = aws.params.ConfigurationManager;


        // TODO implement code

        var ret = {
            AgentVersions: [ {
                Version: "",
                ConfigurationManager: /*Sa*/{
                    Name: "",
                    Version: ""
                }
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.RebootInstance = function RebootInstance(aws) {
        var InstanceId = aws.params.InstanceId;
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeDeployments = function DescribeDeployments(aws) {
        var StackId = aws.params.StackId;
        var DeploymentIds = aws.params.DeploymentIds;
        var AppId = aws.params.AppId;


        // TODO implement code

        var ret = {
            Deployments: [ {
                StackId: "",
                CompletedAt: "",
                CreatedAt: "",
                Comment: "",
                CustomJson: "",
                InstanceIds: /*S3*/[ "" /*, ...*/ ],
                Command: /*Ss*/{
                    Name: "",
                    Args: {} /* map */
                },
                IamUserArn: "",
                Duration: 0,
                AppId: "",
                DeploymentId: "",
                Status: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribePermissions = function DescribePermissions(aws) {
        var StackId = aws.params.StackId;
        var IamUserArn = aws.params.IamUserArn;


        // TODO implement code

        var ret = {
            Permissions: [ {
                StackId: "",
                AllowSsh: false,
                IamUserArn: "",
                Level: "",
                AllowSudo: false
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeregisterRdsDbInstance = function DeregisterRdsDbInstance(aws) {
        var RdsDbInstanceArn = aws.params.RdsDbInstanceArn;
        if (! RdsDbInstanceArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RdsDbInstanceArn"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.SetLoadBasedAutoScaling = function SetLoadBasedAutoScaling(aws) {
        var DownScaling = aws.params.DownScaling;
        var UpScaling = aws.params.UpScaling;
        var LayerId = aws.params.LayerId;
        var Enable = aws.params.Enable /* boolean */;
        if (! LayerId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LayerId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.UpdateLayer = function UpdateLayer(aws) {
        var Name = aws.params.Name;
        var AutoAssignPublicIps = aws.params.AutoAssignPublicIps /* boolean */;
        var EnableAutoHealing = aws.params.EnableAutoHealing /* boolean */;
        var CustomSecurityGroupIds = aws.params.CustomSecurityGroupIds;
        var Attributes = aws.params.Attributes;
        var VolumeConfigurations = aws.params.VolumeConfigurations;
        var CustomJson = aws.params.CustomJson;
        var Packages = aws.params.Packages;
        var UseEbsOptimizedInstances = aws.params.UseEbsOptimizedInstances /* boolean */;
        var InstallUpdatesOnBoot = aws.params.InstallUpdatesOnBoot /* boolean */;
        var CustomInstanceProfileArn = aws.params.CustomInstanceProfileArn;
        var Shortname = aws.params.Shortname;
        var CustomRecipes = aws.params.CustomRecipes;
        var AutoAssignElasticIps = aws.params.AutoAssignElasticIps /* boolean */;
        var LayerId = aws.params.LayerId;
        var LifecycleEventConfiguration = aws.params.LifecycleEventConfiguration;
        if (! LayerId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LayerId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.SetTimeBasedAutoScaling = function SetTimeBasedAutoScaling(aws) {
        var AutoScalingSchedule = aws.params.AutoScalingSchedule;
        var InstanceId = aws.params.InstanceId;
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeStackProvisioningParameters = function DescribeStackProvisioningParameters(aws) {
        var StackId = aws.params.StackId;
        if (! StackId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackId"];
        }

        // TODO implement code

        var ret = {
            AgentInstallerUrl: "",
            Parameters: {} /* map */
        };
        return [200, ret];
    }
module.exports.DeregisterEcsCluster = function DeregisterEcsCluster(aws) {
        var EcsClusterArn = aws.params.EcsClusterArn;
        if (! EcsClusterArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter EcsClusterArn"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.UnassignVolume = function UnassignVolume(aws) {
        var VolumeId = aws.params.VolumeId;
        if (! VolumeId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VolumeId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeLoadBasedAutoScaling = function DescribeLoadBasedAutoScaling(aws) {
        var LayerIds = aws.params.LayerIds;
        if (! LayerIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LayerIds"];
        }

        // TODO implement code

        var ret = {
            LoadBasedAutoScalingConfigurations: [ {
                DownScaling: /*S30*/{
                    MemoryThreshold: 0.0 /*double*/,
                    ThresholdsWaitTime: 0,
                    LoadThreshold: 0.0 /*double*/,
                    InstanceCount: 0,
                    CpuThreshold: 0.0 /*double*/,
                    Alarms: /*S3*/[ "" /*, ...*/ ],
                    IgnoreMetricsTime: 0
                },
                UpScaling: /*S30*/{
                    MemoryThreshold: 0.0 /*double*/,
                    ThresholdsWaitTime: 0,
                    LoadThreshold: 0.0 /*double*/,
                    InstanceCount: 0,
                    CpuThreshold: 0.0 /*double*/,
                    Alarms: /*S3*/[ "" /*, ...*/ ],
                    IgnoreMetricsTime: 0
                },
                LayerId: "",
                Enable: false
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.RegisterElasticIp = function RegisterElasticIp(aws) {
        var StackId = aws.params.StackId;
        var ElasticIp = aws.params.ElasticIp;
        if (! ElasticIp) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ElasticIp"];
        }        if (! StackId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackId"];
        }

        // TODO implement code

        var ret = {
            ElasticIp: ""
        };
        return [200, ret];
    }
module.exports.UpdateElasticIp = function UpdateElasticIp(aws) {
        var Name = aws.params.Name;
        var ElasticIp = aws.params.ElasticIp;
        if (! ElasticIp) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ElasticIp"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.RegisterInstance = function RegisterInstance(aws) {
        var StackId = aws.params.StackId;
        var PrivateIp = aws.params.PrivateIp;
        var RsaPublicKeyFingerprint = aws.params.RsaPublicKeyFingerprint;
        var RsaPublicKey = aws.params.RsaPublicKey;
        var PublicIp = aws.params.PublicIp;
        var Hostname = aws.params.Hostname;
        var InstanceIdentity = aws.params.InstanceIdentity /* structure */;
        if (! StackId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackId"];
        }

        // TODO implement code

        var ret = {
            InstanceId: ""
        };
        return [200, ret];
    }
module.exports.DescribeElasticIps = function DescribeElasticIps(aws) {
        var StackId = aws.params.StackId;
        var Ips = aws.params.Ips;
        var InstanceId = aws.params.InstanceId;


        // TODO implement code

        var ret = {
            ElasticIps: [ {
                Name: "",
                Ip: "",
                Region: "",
                InstanceId: "",
                Domain: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.UpdateStack = function UpdateStack(aws) {
        var StackId = aws.params.StackId;
        var Name = aws.params.Name;
        var DefaultAvailabilityZone = aws.params.DefaultAvailabilityZone;
        var DefaultSubnetId = aws.params.DefaultSubnetId;
        var ConfigurationManager = aws.params.ConfigurationManager;
        var HostnameTheme = aws.params.HostnameTheme;
        var Attributes = aws.params.Attributes;
        var DefaultSshKeyName = aws.params.DefaultSshKeyName;
        var CustomJson = aws.params.CustomJson;
        var CustomCookbooksSource = aws.params.CustomCookbooksSource;
        var UseOpsworksSecurityGroups = aws.params.UseOpsworksSecurityGroups /* boolean */;
        var DefaultOs = aws.params.DefaultOs;
        var UseCustomCookbooks = aws.params.UseCustomCookbooks /* boolean */;
        var DefaultInstanceProfileArn = aws.params.DefaultInstanceProfileArn;
        var ChefConfiguration = aws.params.ChefConfiguration;
        var AgentVersion = aws.params.AgentVersion;
        var ServiceRoleArn = aws.params.ServiceRoleArn;
        var DefaultRootDeviceType = aws.params.DefaultRootDeviceType;
        if (! StackId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeRdsDbInstances = function DescribeRdsDbInstances(aws) {
        var StackId = aws.params.StackId;
        var RdsDbInstanceArns = aws.params.RdsDbInstanceArns;
        if (! StackId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackId"];
        }

        // TODO implement code

        var ret = {
            RdsDbInstances: [ {
                StackId: "",
                Region: "",
                MissingOnRds: false,
                Address: "",
                DbPassword: "",
                RdsDbInstanceArn: "",
                DbInstanceIdentifier: "",
                Engine: "",
                DbUser: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CloneStack = function CloneStack(aws) {
        var Name = aws.params.Name;
        var SourceStackId = aws.params.SourceStackId;
        var DefaultAvailabilityZone = aws.params.DefaultAvailabilityZone;
        var VpcId = aws.params.VpcId;
        var HostnameTheme = aws.params.HostnameTheme;
        var CloneAppIds = aws.params.CloneAppIds;
        var CustomJson = aws.params.CustomJson;
        var UseOpsworksSecurityGroups = aws.params.UseOpsworksSecurityGroups /* boolean */;
        var ClonePermissions = aws.params.ClonePermissions /* boolean */;
        var ChefConfiguration = aws.params.ChefConfiguration;
        var ServiceRoleArn = aws.params.ServiceRoleArn;
        var DefaultRootDeviceType = aws.params.DefaultRootDeviceType;
        var CustomCookbooksSource = aws.params.CustomCookbooksSource;
        var DefaultSubnetId = aws.params.DefaultSubnetId;
        var ConfigurationManager = aws.params.ConfigurationManager;
        var DefaultSshKeyName = aws.params.DefaultSshKeyName;
        var Attributes = aws.params.Attributes;
        var DefaultOs = aws.params.DefaultOs;
        var UseCustomCookbooks = aws.params.UseCustomCookbooks /* boolean */;
        var Region = aws.params.Region;
        var DefaultInstanceProfileArn = aws.params.DefaultInstanceProfileArn;
        var AgentVersion = aws.params.AgentVersion;
        if (! SourceStackId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SourceStackId"];
        }        if (! ServiceRoleArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ServiceRoleArn"];
        }

        // TODO implement code

        var ret = {
            StackId: ""
        };
        return [200, ret];
    }
module.exports.UpdateMyUserProfile = function UpdateMyUserProfile(aws) {
        var SshPublicKey = aws.params.SshPublicKey;


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeStacks = function DescribeStacks(aws) {
        var StackIds = aws.params.StackIds;


        // TODO implement code

        var ret = {
            Stacks: [ {
                Name: "",
                DefaultAvailabilityZone: "",
                VpcId: "",
                HostnameTheme: "",
                CustomJson: "",
                UseOpsworksSecurityGroups: false,
                Arn: "",
                ChefConfiguration: /*Sb*/{
                    ManageBerkshelf: false,
                    BerkshelfVersion: ""
                },
                CreatedAt: "",
                ServiceRoleArn: "",
                DefaultRootDeviceType: "",
                StackId: "",
                CustomCookbooksSource: /*Sd*/{
                    Password: "",
                    Revision: "",
                    Type: "",
                    SshKey: "",
                    Url: "",
                    Username: ""
                },
                DefaultSubnetId: "",
                ConfigurationManager: /*Sa*/{
                    Name: "",
                    Version: ""
                },
                DefaultSshKeyName: "",
                Attributes: /*S8*/{} /* map */,
                DefaultOs: "",
                UseCustomCookbooks: false,
                Region: "",
                DefaultInstanceProfileArn: "",
                AgentVersion: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateStack = function CreateStack(aws) {
        var Name = aws.params.Name;
        var DefaultAvailabilityZone = aws.params.DefaultAvailabilityZone;
        var DefaultSubnetId = aws.params.DefaultSubnetId;
        var ConfigurationManager = aws.params.ConfigurationManager;
        var VpcId = aws.params.VpcId;
        var HostnameTheme = aws.params.HostnameTheme;
        var Attributes = aws.params.Attributes;
        var DefaultSshKeyName = aws.params.DefaultSshKeyName;
        var CustomJson = aws.params.CustomJson;
        var UseOpsworksSecurityGroups = aws.params.UseOpsworksSecurityGroups /* boolean */;
        var DefaultOs = aws.params.DefaultOs;
        var CustomCookbooksSource = aws.params.CustomCookbooksSource;
        var UseCustomCookbooks = aws.params.UseCustomCookbooks /* boolean */;
        var Region = aws.params.Region;
        var DefaultInstanceProfileArn = aws.params.DefaultInstanceProfileArn;
        var ChefConfiguration = aws.params.ChefConfiguration;
        var AgentVersion = aws.params.AgentVersion;
        var ServiceRoleArn = aws.params.ServiceRoleArn;
        var DefaultRootDeviceType = aws.params.DefaultRootDeviceType;
        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }        if (! Region) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Region"];
        }        if (! ServiceRoleArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ServiceRoleArn"];
        }        if (! DefaultInstanceProfileArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DefaultInstanceProfileArn"];
        }

        // TODO implement code

        var ret = {
            StackId: ""
        };
        return [200, ret];
    }
module.exports.DescribeServiceErrors = function DescribeServiceErrors(aws) {
        var StackId = aws.params.StackId;
        var ServiceErrorIds = aws.params.ServiceErrorIds;
        var InstanceId = aws.params.InstanceId;


        // TODO implement code

        var ret = {
            ServiceErrors: [ {
                StackId: "",
                Type: "",
                Message: "",
                CreatedAt: "",
                InstanceId: "",
                ServiceErrorId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.UpdateVolume = function UpdateVolume(aws) {
        var Name = aws.params.Name;
        var VolumeId = aws.params.VolumeId;
        var MountPoint = aws.params.MountPoint;
        if (! VolumeId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VolumeId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeMyUserProfile = function DescribeMyUserProfile(aws) {


        // TODO implement code

        var ret = {
            UserProfile: {
                Name: "",
                SshPublicKey: "",
                IamUserArn: "",
                SshUsername: ""
            }
        };
        return [200, ret];
    }
module.exports.GrantAccess = function GrantAccess(aws) {
        var InstanceId = aws.params.InstanceId;
        var ValidForInMinutes = aws.params.ValidForInMinutes /* integer */;
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }

        // TODO implement code

        var ret = {
            TemporaryCredential: {
                Password: "",
                Username: "",
                ValidForInMinutes: 0,
                InstanceId: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeVolumes = function DescribeVolumes(aws) {
        var StackId = aws.params.StackId;
        var RaidArrayId = aws.params.RaidArrayId;
        var InstanceId = aws.params.InstanceId;
        var VolumeIds = aws.params.VolumeIds;


        // TODO implement code

        var ret = {
            Volumes: [ {
                Name: "",
                RaidArrayId: "",
                VolumeType: "",
                VolumeId: "",
                Ec2VolumeId: "",
                InstanceId: "",
                Device: "",
                Region: "",
                Iops: 0,
                AvailabilityZone: "",
                Size: 0,
                MountPoint: "",
                Status: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.RegisterEcsCluster = function RegisterEcsCluster(aws) {
        var StackId = aws.params.StackId;
        var EcsClusterArn = aws.params.EcsClusterArn;
        if (! EcsClusterArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter EcsClusterArn"];
        }        if (! StackId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackId"];
        }

        // TODO implement code

        var ret = {
            EcsClusterArn: ""
        };
        return [200, ret];
    }
module.exports.DetachElasticLoadBalancer = function DetachElasticLoadBalancer(aws) {
        var LayerId = aws.params.LayerId;
        var ElasticLoadBalancerName = aws.params.ElasticLoadBalancerName;
        if (! ElasticLoadBalancerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ElasticLoadBalancerName"];
        }        if (! LayerId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LayerId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeleteApp = function DeleteApp(aws) {
        var AppId = aws.params.AppId;
        if (! AppId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AppId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeLayers = function DescribeLayers(aws) {
        var StackId = aws.params.StackId;
        var LayerIds = aws.params.LayerIds;


        // TODO implement code

        var ret = {
            Layers: [ {
                StackId: "",
                Name: "",
                CreatedAt: "",
                EnableAutoHealing: false,
                CustomSecurityGroupIds: /*S3*/[ "" /*, ...*/ ],
                AutoAssignPublicIps: false,
                Attributes: /*S17*/{} /* map */,
                VolumeConfigurations: /*S19*/[ {
                    RaidLevel: 0,
                    Size: 0,
                    VolumeType: "",
                    Iops: 0,
                    NumberOfDisks: 0,
                    MountPoint: ""
                } /*, ...*/ ],
                CustomJson: "",
                Packages: /*S3*/[ "" /*, ...*/ ],
                UseEbsOptimizedInstances: false,
                DefaultSecurityGroupNames: /*S3*/[ "" /*, ...*/ ],
                Type: "",
                InstallUpdatesOnBoot: false,
                DefaultRecipes: /*S1b*/{
                    Undeploy: /*S3*/[ "" /*, ...*/ ],
                    Shutdown: /*S3*/[ "" /*, ...*/ ],
                    Setup: /*S3*/[ "" /*, ...*/ ],
                    Configure: /*S3*/[ "" /*, ...*/ ],
                    Deploy: /*S3*/[ "" /*, ...*/ ]
                },
                CustomInstanceProfileArn: "",
                Shortname: "",
                CustomRecipes: /*S1b*/{
                    Undeploy: /*S3*/[ "" /*, ...*/ ],
                    Shutdown: /*S3*/[ "" /*, ...*/ ],
                    Setup: /*S3*/[ "" /*, ...*/ ],
                    Configure: /*S3*/[ "" /*, ...*/ ],
                    Deploy: /*S3*/[ "" /*, ...*/ ]
                },
                AutoAssignElasticIps: false,
                LayerId: "",
                LifecycleEventConfiguration: /*S1c*/{
                    Shutdown: {
                        DelayUntilElbConnectionsDrained: false,
                        ExecutionTimeout: 0
                    }
                }
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeCommands = function DescribeCommands(aws) {
        var CommandIds = aws.params.CommandIds;
        var InstanceId = aws.params.InstanceId;
        var DeploymentId = aws.params.DeploymentId;


        // TODO implement code

        var ret = {
            Commands: [ {
                CompletedAt: "",
                AcknowledgedAt: "",
                Type: "",
                ExitCode: 0,
                CommandId: "",
                LogUrl: "",
                CreatedAt: "",
                InstanceId: "",
                DeploymentId: "",
                Status: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.UnassignInstance = function UnassignInstance(aws) {
        var InstanceId = aws.params.InstanceId;
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CreateLayer = function CreateLayer(aws) {
        var StackId = aws.params.StackId;
        var Name = aws.params.Name;
        var EnableAutoHealing = aws.params.EnableAutoHealing /* boolean */;
        var LifecycleEventConfiguration = aws.params.LifecycleEventConfiguration;
        var AutoAssignPublicIps = aws.params.AutoAssignPublicIps /* boolean */;
        var Attributes = aws.params.Attributes;
        var VolumeConfigurations = aws.params.VolumeConfigurations;
        var CustomJson = aws.params.CustomJson;
        var Packages = aws.params.Packages;
        var UseEbsOptimizedInstances = aws.params.UseEbsOptimizedInstances /* boolean */;
        var Type = aws.params.Type;
        var InstallUpdatesOnBoot = aws.params.InstallUpdatesOnBoot /* boolean */;
        var CustomInstanceProfileArn = aws.params.CustomInstanceProfileArn;
        var Shortname = aws.params.Shortname;
        var CustomRecipes = aws.params.CustomRecipes;
        var AutoAssignElasticIps = aws.params.AutoAssignElasticIps /* boolean */;
        var CustomSecurityGroupIds = aws.params.CustomSecurityGroupIds;
        if (! StackId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackId"];
        }        if (! Type) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Type"];
        }        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }        if (! Shortname) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Shortname"];
        }

        // TODO implement code

        var ret = {
            LayerId: ""
        };
        return [200, ret];
    }
module.exports.UpdateUserProfile = function UpdateUserProfile(aws) {
        var SshPublicKey = aws.params.SshPublicKey;
        var IamUserArn = aws.params.IamUserArn;
        var AllowSelfManagement = aws.params.AllowSelfManagement /* boolean */;
        var SshUsername = aws.params.SshUsername;
        if (! IamUserArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter IamUserArn"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeUserProfiles = function DescribeUserProfiles(aws) {
        var IamUserArns = aws.params.IamUserArns;


        // TODO implement code

        var ret = {
            UserProfiles: [ {
                Name: "",
                SshPublicKey: "",
                IamUserArn: "",
                AllowSelfManagement: false,
                SshUsername: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteLayer = function DeleteLayer(aws) {
        var LayerId = aws.params.LayerId;
        if (! LayerId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LayerId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeElasticLoadBalancers = function DescribeElasticLoadBalancers(aws) {
        var StackId = aws.params.StackId;
        var LayerIds = aws.params.LayerIds;


        // TODO implement code

        var ret = {
            ElasticLoadBalancers: [ {
                StackId: "",
                DnsName: "",
                Region: "",
                AvailabilityZones: /*S3*/[ "" /*, ...*/ ],
                VpcId: "",
                Ec2InstanceIds: /*S3*/[ "" /*, ...*/ ],
                LayerId: "",
                ElasticLoadBalancerName: "",
                SubnetIds: /*S3*/[ "" /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.SetPermission = function SetPermission(aws) {
        var StackId = aws.params.StackId;
        var AllowSsh = aws.params.AllowSsh /* boolean */;
        var IamUserArn = aws.params.IamUserArn;
        var Level = aws.params.Level;
        var AllowSudo = aws.params.AllowSudo /* boolean */;
        if (! StackId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackId"];
        }        if (! IamUserArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter IamUserArn"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeregisterInstance = function DeregisterInstance(aws) {
        var InstanceId = aws.params.InstanceId;
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.UpdateApp = function UpdateApp(aws) {
        var Name = aws.params.Name;
        var Description = aws.params.Description;
        var Environment = aws.params.Environment;
        var Type = aws.params.Type;
        var EnableSsl = aws.params.EnableSsl /* boolean */;
        var Attributes = aws.params.Attributes;
        var DataSources = aws.params.DataSources;
        var AppId = aws.params.AppId;
        var AppSource = aws.params.AppSource;
        var Domains = aws.params.Domains;
        var SslConfiguration = aws.params.SslConfiguration;
        if (! AppId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AppId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.AttachElasticLoadBalancer = function AttachElasticLoadBalancer(aws) {
        var LayerId = aws.params.LayerId;
        var ElasticLoadBalancerName = aws.params.ElasticLoadBalancerName;
        if (! ElasticLoadBalancerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ElasticLoadBalancerName"];
        }        if (! LayerId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LayerId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.AssignVolume = function AssignVolume(aws) {
        var VolumeId = aws.params.VolumeId;
        var InstanceId = aws.params.InstanceId;
        if (! VolumeId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VolumeId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeEcsClusters = function DescribeEcsClusters(aws) {
        var StackId = aws.params.StackId;
        var MaxResults = aws.params.MaxResults /* integer */;
        var EcsClusterArns = aws.params.EcsClusterArns;
        var NextToken = aws.params.NextToken;


        // TODO implement code

        var ret = {
            NextToken: "",
            EcsClusters: [ {
                StackId: "",
                EcsClusterName: "",
                EcsClusterArn: "",
                RegisteredAt: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.StopStack = function StopStack(aws) {
        var StackId = aws.params.StackId;
        if (! StackId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeleteUserProfile = function DeleteUserProfile(aws) {
        var IamUserArn = aws.params.IamUserArn;
        if (! IamUserArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter IamUserArn"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeApps = function DescribeApps(aws) {
        var StackId = aws.params.StackId;
        var AppIds = aws.params.AppIds;


        // TODO implement code

        var ret = {
            Apps: [ {
                StackId: "",
                Name: "",
                CreatedAt: "",
                Environment: /*So*/[ {
                    Value: "",
                    Key: "",
                    Secure: false
                } /*, ...*/ ],
                Attributes: /*Sm*/{} /* map */,
                DataSources: /*Si*/[ {
                    DatabaseName: "",
                    Type: "",
                    Arn: ""
                } /*, ...*/ ],
                Description: "",
                AppSource: /*Sd*/{
                    Password: "",
                    Revision: "",
                    Type: "",
                    SshKey: "",
                    Url: "",
                    Username: ""
                },
                SslConfiguration: /*Sl*/{
                    PrivateKey: "",
                    Certificate: "",
                    Chain: ""
                },
                EnableSsl: false,
                Type: "",
                Shortname: "",
                Domains: /*S3*/[ "" /*, ...*/ ],
                AppId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.UpdateInstance = function UpdateInstance(aws) {
        var SshKeyName = aws.params.SshKeyName;
        var Hostname = aws.params.Hostname;
        var AutoScalingType = aws.params.AutoScalingType;
        var AmiId = aws.params.AmiId;
        var InstallUpdatesOnBoot = aws.params.InstallUpdatesOnBoot /* boolean */;
        var InstanceId = aws.params.InstanceId;
        var Os = aws.params.Os;
        var Architecture = aws.params.Architecture;
        var InstanceType = aws.params.InstanceType;
        var AgentVersion = aws.params.AgentVersion;
        var LayerIds = aws.params.LayerIds;
        var EbsOptimized = aws.params.EbsOptimized /* boolean */;
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CreateDeployment = function CreateDeployment(aws) {
        var StackId = aws.params.StackId;
        var InstanceIds = aws.params.InstanceIds;
        var Command = aws.params.Command;
        var CustomJson = aws.params.CustomJson;
        var AppId = aws.params.AppId;
        var Comment = aws.params.Comment;
        if (! StackId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackId"];
        }        if (! Command) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Command"];
        }

        // TODO implement code

        var ret = {
            DeploymentId: ""
        };
        return [200, ret];
    }
module.exports.RegisterRdsDbInstance = function RegisterRdsDbInstance(aws) {
        var StackId = aws.params.StackId;
        var RdsDbInstanceArn = aws.params.RdsDbInstanceArn;
        var DbUser = aws.params.DbUser;
        var DbPassword = aws.params.DbPassword;
        if (! StackId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackId"];
        }        if (! RdsDbInstanceArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RdsDbInstanceArn"];
        }        if (! DbUser) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DbUser"];
        }        if (! DbPassword) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DbPassword"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeregisterVolume = function DeregisterVolume(aws) {
        var VolumeId = aws.params.VolumeId;
        if (! VolumeId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VolumeId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.UpdateRdsDbInstance = function UpdateRdsDbInstance(aws) {
        var RdsDbInstanceArn = aws.params.RdsDbInstanceArn;
        var DbUser = aws.params.DbUser;
        var DbPassword = aws.params.DbPassword;
        if (! RdsDbInstanceArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RdsDbInstanceArn"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.StartInstance = function StartInstance(aws) {
        var InstanceId = aws.params.InstanceId;
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CreateApp = function CreateApp(aws) {
        var StackId = aws.params.StackId;
        var Name = aws.params.Name;
        var Environment = aws.params.Environment;
        var Attributes = aws.params.Attributes;
        var DataSources = aws.params.DataSources;
        var Description = aws.params.Description;
        var AppSource = aws.params.AppSource;
        var SslConfiguration = aws.params.SslConfiguration;
        var EnableSsl = aws.params.EnableSsl /* boolean */;
        var Type = aws.params.Type;
        var Shortname = aws.params.Shortname;
        var Domains = aws.params.Domains;
        if (! StackId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackId"];
        }        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }        if (! Type) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Type"];
        }

        // TODO implement code

        var ret = {
            AppId: ""
        };
        return [200, ret];
    }
module.exports.DescribeInstances = function DescribeInstances(aws) {
        var StackId = aws.params.StackId;
        var InstanceIds = aws.params.InstanceIds;
        var LayerId = aws.params.LayerId;


        // TODO implement code

        var ret = {
            Instances: [ {
                SshKeyName: "",
                RootDeviceVolumeId: "",
                BlockDeviceMappings: /*Sz*/[ {
                    DeviceName: "",
                    NoDevice: "",
                    VirtualName: "",
                    Ebs: {
                        VolumeSize: 0,
                        SnapshotId: "",
                        DeleteOnTermination: false,
                        VolumeType: "",
                        Iops: 0
                    }
                } /*, ...*/ ],
                SshHostDsaKeyFingerprint: "",
                ReportedAgentVersion: "",
                PublicIp: "",
                AmiId: "",
                Hostname: "",
                EcsClusterArn: "",
                SshHostRsaKeyFingerprint: "",
                Os: "",
                Architecture: "",
                LastServiceErrorId: "",
                RegisteredBy: "",
                InstallUpdatesOnBoot: false,
                PublicDns: "",
                AvailabilityZone: "",
                Platform: "",
                CreatedAt: "",
                Status: "",
                LayerIds: /*S3*/[ "" /*, ...*/ ],
                EbsOptimized: false,
                StackId: "",
                InfrastructureClass: "",
                ElasticIp: "",
                EcsContainerInstanceArn: "",
                AutoScalingType: "",
                PrivateIp: "",
                ReportedOs: {
                    Name: "",
                    Version: "",
                    Family: ""
                },
                InstanceType: "",
                RootDeviceType: "",
                SubnetId: "",
                InstanceId: "",
                Ec2InstanceId: "",
                PrivateDns: "",
                VirtualizationType: "",
                SecurityGroupIds: /*S3*/[ "" /*, ...*/ ],
                InstanceProfileArn: "",
                AgentVersion: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateUserProfile = function CreateUserProfile(aws) {
        var SshPublicKey = aws.params.SshPublicKey;
        var IamUserArn = aws.params.IamUserArn;
        var AllowSelfManagement = aws.params.AllowSelfManagement /* boolean */;
        var SshUsername = aws.params.SshUsername;
        if (! IamUserArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter IamUserArn"];
        }

        // TODO implement code

        var ret = {
            IamUserArn: ""
        };
        return [200, ret];
    }
module.exports.DeleteInstance = function DeleteInstance(aws) {
        var DeleteVolumes = aws.params.DeleteVolumes /* boolean */;
        var DeleteElasticIp = aws.params.DeleteElasticIp /* boolean */;
        var InstanceId = aws.params.InstanceId;
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.RegisterVolume = function RegisterVolume(aws) {
        var StackId = aws.params.StackId;
        var Ec2VolumeId = aws.params.Ec2VolumeId;
        if (! StackId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackId"];
        }

        // TODO implement code

        var ret = {
            VolumeId: ""
        };
        return [200, ret];
    }
module.exports.GetHostnameSuggestion = function GetHostnameSuggestion(aws) {
        var LayerId = aws.params.LayerId;
        if (! LayerId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LayerId"];
        }

        // TODO implement code

        var ret = {
            LayerId: "",
            Hostname: ""
        };
        return [200, ret];
    }
module.exports.StartStack = function StartStack(aws) {
        var StackId = aws.params.StackId;
        if (! StackId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.AssociateElasticIp = function AssociateElasticIp(aws) {
        var ElasticIp = aws.params.ElasticIp;
        var InstanceId = aws.params.InstanceId;
        if (! ElasticIp) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ElasticIp"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeleteStack = function DeleteStack(aws) {
        var StackId = aws.params.StackId;
        if (! StackId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeStackSummary = function DescribeStackSummary(aws) {
        var StackId = aws.params.StackId;
        if (! StackId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackId"];
        }

        // TODO implement code

        var ret = {
            StackSummary: {
                StackId: "",
                Name: "",
                InstancesCount: {
                    Registered: 0,
                    Terminating: 0,
                    SetupFailed: 0,
                    ConnectionLost: 0,
                    RunningSetup: 0,
                    Unassigning: 0,
                    Requested: 0,
                    Deregistering: 0,
                    Booting: 0,
                    Stopped: 0,
                    Terminated: 0,
                    Registering: 0,
                    StartFailed: 0,
                    Online: 0,
                    Rebooting: 0,
                    Stopping: 0,
                    Assigning: 0,
                    ShuttingDown: 0,
                    Pending: 0
                },
                Arn: "",
                AppsCount: 0,
                LayersCount: 0
            }
        };
        return [200, ret];
    }
module.exports.CreateInstance = function CreateInstance(aws) {
        var StackId = aws.params.StackId;
        var SshKeyName = aws.params.SshKeyName;
        var BlockDeviceMappings = aws.params.BlockDeviceMappings;
        var AutoScalingType = aws.params.AutoScalingType;
        var AmiId = aws.params.AmiId;
        var RootDeviceType = aws.params.RootDeviceType;
        var Hostname = aws.params.Hostname;
        var Os = aws.params.Os;
        var Architecture = aws.params.Architecture;
        var InstallUpdatesOnBoot = aws.params.InstallUpdatesOnBoot /* boolean */;
        var VirtualizationType = aws.params.VirtualizationType;
        var InstanceType = aws.params.InstanceType;
        var AvailabilityZone = aws.params.AvailabilityZone;
        var SubnetId = aws.params.SubnetId;
        var AgentVersion = aws.params.AgentVersion;
        var LayerIds = aws.params.LayerIds;
        var EbsOptimized = aws.params.EbsOptimized /* boolean */;
        if (! StackId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackId"];
        }        if (! LayerIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LayerIds"];
        }        if (! InstanceType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceType"];
        }

        // TODO implement code

        var ret = {
            InstanceId: ""
        };
        return [200, ret];
    }
module.exports.DeregisterElasticIp = function DeregisterElasticIp(aws) {
        var ElasticIp = aws.params.ElasticIp;
        if (! ElasticIp) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ElasticIp"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.AssignInstance = function AssignInstance(aws) {
        var InstanceId = aws.params.InstanceId;
        var LayerIds = aws.params.LayerIds;
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }        if (! LayerIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LayerIds"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DisassociateElasticIp = function DisassociateElasticIp(aws) {
        var ElasticIp = aws.params.ElasticIp;
        if (! ElasticIp) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ElasticIp"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeRaidArrays = function DescribeRaidArrays(aws) {
        var StackId = aws.params.StackId;
        var RaidArrayIds = aws.params.RaidArrayIds;
        var InstanceId = aws.params.InstanceId;


        // TODO implement code

        var ret = {
            RaidArrays: [ {
                Name: "",
                RaidArrayId: "",
                StackId: "",
                VolumeType: "",
                InstanceId: "",
                Device: "",
                RaidLevel: 0,
                Size: 0,
                Iops: 0,
                AvailabilityZone: "",
                NumberOfDisks: 0,
                CreatedAt: "",
                MountPoint: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeTimeBasedAutoScaling = function DescribeTimeBasedAutoScaling(aws) {
        var InstanceIds = aws.params.InstanceIds;
        if (! InstanceIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceIds"];
        }

        // TODO implement code

        var ret = {
            TimeBasedAutoScalingConfigurations: [ {
                AutoScalingSchedule: /*S40*/{
                    Tuesday: /*S41*/{} /* map */,
                    Saturday: /*S41*/{} /* map */,
                    Sunday: /*S41*/{} /* map */,
                    Thursday: /*S41*/{} /* map */,
                    Friday: /*S41*/{} /* map */,
                    Wednesday: /*S41*/{} /* map */,
                    Monday: /*S41*/{} /* map */
                },
                InstanceId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.StopInstance = function StopInstance(aws) {
        var InstanceId = aws.params.InstanceId;
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
