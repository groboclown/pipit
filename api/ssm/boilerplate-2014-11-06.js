'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * Amazon Simple Systems Management Service version 2014-11-06
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.DeleteDocument = function DeleteDocument(aws) {
        var Name = aws.params['Name'];
        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.DeleteAssociation = function DeleteAssociation(aws) {
        var Name = aws.params['Name'];
        var InstanceId = aws.params['InstanceId'];
        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.UpdateAssociationStatus = function UpdateAssociationStatus(aws) {
        var AssociationStatus = aws.params['AssociationStatus'];
        var Name = aws.params['Name'];
        var InstanceId = aws.params['InstanceId'];
        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }        if (! AssociationStatus) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AssociationStatus"];
        }

        // TODO implement code

        var ret = {
            AssociationDescription: /*Sd*/{
                Parameters: /*S8*/{} /* map */,
                Status: /*Sf*/{
                    AdditionalInfo: "",
                    Name: "",
                    Date: now(),
                    Message: ""
                },
                Name: "",
                InstanceId: "",
                Date: now()
            }
        };
        return [200, ret];
    }
module.exports.ListAssociations = function ListAssociations(aws) {
        var AssociationFilterList = aws.params['AssociationFilterList'] /* list */;
        var MaxResults = aws.params['MaxResults'] /* integer */;
        var NextToken = aws.params['NextToken'];
        if (! AssociationFilterList) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AssociationFilterList"];
        }

        // TODO implement code

        var ret = {
            NextToken: "",
            Associations: [ {
                Name: "",
                InstanceId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateDocument = function CreateDocument(aws) {
        var Name = aws.params['Name'];
        var Content = aws.params['Content'];
        if (! Content) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Content"];
        }        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }

        // TODO implement code

        var ret = {
            DocumentDescription: /*Sv*/{
                Parameters: [ {
                    Description: "",
                    Name: "",
                    Type: "",
                    DefaultValue: ""
                } /*, ...*/ ],
                CreatedDate: now(),
                Description: "",
                Sha1: "",
                PlatformTypes: /*S15*/[ "" /*, ...*/ ],
                Name: "",
                Status: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeDocument = function DescribeDocument(aws) {
        var Name = aws.params['Name'];
        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }

        // TODO implement code

        var ret = {
            Document: /*Sv*/{
                Parameters: [ {
                    Description: "",
                    Name: "",
                    Type: "",
                    DefaultValue: ""
                } /*, ...*/ ],
                CreatedDate: now(),
                Description: "",
                Sha1: "",
                PlatformTypes: /*S15*/[ "" /*, ...*/ ],
                Name: "",
                Status: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeInstanceInformation = function DescribeInstanceInformation(aws) {
        var MaxResults = aws.params['MaxResults'] /* integer */;
        var NextToken = aws.params['NextToken'];
        var InstanceInformationFilterList = aws.params['InstanceInformationFilterList'] /* list */;


        // TODO implement code

        var ret = {
            NextToken: "",
            InstanceInformationList: [ {
                PlatformName: "",
                LastPingDateTime: now(),
                AgentVersion: "",
                IsLatestVersion: false,
                PlatformVersion: "",
                PlatformType: "",
                PingStatus: "",
                InstanceId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CancelCommand = function CancelCommand(aws) {
        var CommandId = aws.params['CommandId'];
        var InstanceIds = aws.params['InstanceIds'];
        if (! CommandId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter CommandId"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.CreateAssociation = function CreateAssociation(aws) {
        var Parameters = aws.params['Parameters'];
        var Name = aws.params['Name'];
        var InstanceId = aws.params['InstanceId'];
        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }

        // TODO implement code

        var ret = {
            AssociationDescription: /*Sd*/{
                Parameters: /*S8*/{} /* map */,
                Status: /*Sf*/{
                    AdditionalInfo: "",
                    Name: "",
                    Date: now(),
                    Message: ""
                },
                Name: "",
                InstanceId: "",
                Date: now()
            }
        };
        return [200, ret];
    }
module.exports.SendCommand = function SendCommand(aws) {
        var Parameters = aws.params['Parameters'];
        var Comment = aws.params['Comment'];
        var TimeoutSeconds = aws.params['TimeoutSeconds'] /* integer */;
        var OutputS3BucketName = aws.params['OutputS3BucketName'];
        var OutputS3KeyPrefix = aws.params['OutputS3KeyPrefix'];
        var InstanceIds = aws.params['InstanceIds'];
        var DocumentName = aws.params['DocumentName'];
        if (! InstanceIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceIds"];
        }        if (! DocumentName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DocumentName"];
        }

        // TODO implement code

        var ret = {
            Command: /*S2s*/{
                Parameters: /*S8*/{} /* map */,
                Status: "",
                Comment: "",
                RequestedDateTime: now(),
                OutputS3BucketName: "",
                ExpiresAfter: now(),
                OutputS3KeyPrefix: "",
                CommandId: "",
                DocumentName: "",
                InstanceIds: /*S3*/[ "" /*, ...*/ ]
            }
        };
        return [200, ret];
    }
module.exports.GetDocument = function GetDocument(aws) {
        var Name = aws.params['Name'];
        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }

        // TODO implement code

        var ret = {
            Name: "",
            Content: ""
        };
        return [200, ret];
    }
module.exports.ListCommands = function ListCommands(aws) {
        var CommandId = aws.params['CommandId'];
        var Filters = aws.params['Filters'];
        var NextToken = aws.params['NextToken'];
        var InstanceId = aws.params['InstanceId'];
        var MaxResults = aws.params['MaxResults'] /* integer */;


        // TODO implement code

        var ret = {
            NextToken: "",
            Commands: [ /*S2s*/{
                Parameters: /*S8*/{} /* map */,
                Status: "",
                Comment: "",
                RequestedDateTime: now(),
                OutputS3BucketName: "",
                ExpiresAfter: now(),
                OutputS3KeyPrefix: "",
                CommandId: "",
                DocumentName: "",
                InstanceIds: /*S3*/[ "" /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeAssociation = function DescribeAssociation(aws) {
        var Name = aws.params['Name'];
        var InstanceId = aws.params['InstanceId'];
        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }

        // TODO implement code

        var ret = {
            AssociationDescription: /*Sd*/{
                Parameters: /*S8*/{} /* map */,
                Status: /*Sf*/{
                    AdditionalInfo: "",
                    Name: "",
                    Date: now(),
                    Message: ""
                },
                Name: "",
                InstanceId: "",
                Date: now()
            }
        };
        return [200, ret];
    }
module.exports.CreateAssociationBatch = function CreateAssociationBatch(aws) {
        var Entries = aws.params['Entries'] /* list */;
        if (! Entries) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Entries"];
        }

        // TODO implement code

        var ret = {
            Successful: [ /*Sd*/{
                Parameters: /*S8*/{} /* map */,
                Status: /*Sf*/{
                    AdditionalInfo: "",
                    Name: "",
                    Date: now(),
                    Message: ""
                },
                Name: "",
                InstanceId: "",
                Date: now()
            } /*, ...*/ ],
            Failed: [ {
                Entry: /*Sl*/{
                    Parameters: /*S8*/{} /* map */,
                    Name: "",
                    InstanceId: ""
                },
                Fault: "",
                Message: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ListCommandInvocations = function ListCommandInvocations(aws) {
        var MaxResults = aws.params['MaxResults'] /* integer */;
        var InstanceId = aws.params['InstanceId'];
        var Details = aws.params['Details'] /* boolean */;
        var CommandId = aws.params['CommandId'];
        var NextToken = aws.params['NextToken'];
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            NextToken: "",
            CommandInvocations: [ {
                TraceOutput: "",
                DocumentName: "",
                RequestedDateTime: now(),
                CommandPlugins: [ {
                    OutputS3KeyPrefix: "",
                    ResponseStartDateTime: now(),
                    Output: "",
                    OutputS3BucketName: "",
                    ResponseFinishDateTime: now(),
                    Name: "",
                    ResponseCode: 0,
                    Status: ""
                } /*, ...*/ ],
                CommandId: "",
                Comment: "",
                Status: "",
                InstanceId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ListDocuments = function ListDocuments(aws) {
        var MaxResults = aws.params['MaxResults'] /* integer */;
        var DocumentFilterList = aws.params['DocumentFilterList'] /* list */;
        var NextToken = aws.params['NextToken'];


        // TODO implement code

        var ret = {
            NextToken: "",
            DocumentIdentifiers: [ {
                PlatformTypes: /*S15*/[ "" /*, ...*/ ],
                Name: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
