'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * Amazon Simple Systems Management Service version 2014-11-06
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol json
require('../../lib/aws-common/shape_http')('json', module.exports, null);
// -----------------------------------
module.exports.GetDocument = function GetDocument(aws) {
  var name = aws.params.Name;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }


  // TODO implement code

  var ret = {
    Name: '',
    Content: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListCommands = function ListCommands(aws) {
  var maxResults = aws.params.MaxResults /* Type integer */;
  var commandId = aws.params.CommandId;
  var filters = aws.params.Filters;
  var nextToken = aws.params.NextToken;
  var instanceId = aws.params.InstanceId;


  // TODO implement code

  var ret = {
    NextToken: '',
    Commands: [ /*S2s*/{
      CommandId: '',
      Comment: '',
      DocumentName: '',
      Status: '',
      RequestedDateTime: awsCommon.timestamp(),
      ExpiresAfter: awsCommon.timestamp(),
      InstanceIds: /*S3*/[ '', /* ...*/ ],
      OutputS3BucketName: '',
      OutputS3KeyPrefix: '',
      Parameters: /*S8*/{} /*Map*/,
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListAssociations = function ListAssociations(aws) {
  var maxResults = aws.params.MaxResults /* Type integer */;
  var associationFilterList = aws.params.AssociationFilterList /* Type list */;
  var nextToken = aws.params.NextToken;
  if (!associationFilterList) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AssociationFilterList'];
  }


  // TODO implement code

  var ret = {
    Associations: [ {
      Name: '',
      InstanceId: '',
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeDocument = function DescribeDocument(aws) {
  var name = aws.params.Name;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }


  // TODO implement code

  var ret = {
    Document: /*Sv*/{
      PlatformTypes: /*S15*/[ '', /* ...*/ ],
      Status: '',
      Description: '',
      Name: '',
      CreatedDate: awsCommon.timestamp(),
      Sha1: '',
      Parameters: [ {
        Description: '',
        Name: '',
        DefaultValue: '',
        Type: '',
      }, /* ...*/ ],
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListDocuments = function ListDocuments(aws) {
  var maxResults = aws.params.MaxResults /* Type integer */;
  var documentFilterList = aws.params.DocumentFilterList /* Type list */;
  var nextToken = aws.params.NextToken;


  // TODO implement code

  var ret = {
    NextToken: '',
    DocumentIdentifiers: [ {
      Name: '',
      PlatformTypes: /*S15*/[ '', /* ...*/ ],
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListCommandInvocations = function ListCommandInvocations(aws) {
  var maxResults = aws.params.MaxResults /* Type integer */;
  var commandId = aws.params.CommandId;
  var details = aws.params.Details /* Type boolean */;
  var nextToken = aws.params.NextToken;
  var filters = aws.params.Filters;
  var instanceId = aws.params.InstanceId;


  // TODO implement code

  var ret = {
    NextToken: '',
    CommandInvocations: [ {
      CommandId: '',
      Comment: '',
      DocumentName: '',
      Status: '',
      RequestedDateTime: awsCommon.timestamp(),
      CommandPlugins: [ {
        ResponseStartDateTime: awsCommon.timestamp(),
        ResponseFinishDateTime: awsCommon.timestamp(),
        Status: '',
        ResponseCode: 0,
        Name: '',
        Output: '',
        OutputS3KeyPrefix: '',
        OutputS3BucketName: '',
      }, /* ...*/ ],
      TraceOutput: '',
      InstanceId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateDocument = function CreateDocument(aws) {
  var content = aws.params.Content;
  var name = aws.params.Name;
  if (!content) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Content'];
  }
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }


  // TODO implement code

  var ret = {
    DocumentDescription: /*Sv*/{
      PlatformTypes: /*S15*/[ '', /* ...*/ ],
      Status: '',
      Description: '',
      Name: '',
      CreatedDate: awsCommon.timestamp(),
      Sha1: '',
      Parameters: [ {
        Description: '',
        Name: '',
        DefaultValue: '',
        Type: '',
      }, /* ...*/ ],
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteAssociation = function DeleteAssociation(aws) {
  var name = aws.params.Name;
  var instanceId = aws.params.InstanceId;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }
  if (!instanceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceId'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateAssociationBatch = function CreateAssociationBatch(aws) {
  var entries = aws.params.Entries /* Type list */;
  if (!entries) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Entries'];
  }


  // TODO implement code

  var ret = {
    Failed: [ {
      Message: '',
      Fault: '',
      Entry: /*Sl*/{
        Name: '',
        Parameters: /*S8*/{} /*Map*/,
        InstanceId: '',
      },
    }, /* ...*/ ],
    Successful: [ /*Sd*/{
      Name: '',
      Parameters: /*S8*/{} /*Map*/,
      Status: /*Sf*/{
        Name: '',
        Message: '',
        Date: awsCommon.timestamp(),
        AdditionalInfo: '',
      },
      Date: awsCommon.timestamp(),
      InstanceId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.SendCommand = function SendCommand(aws) {
  var timeoutSeconds = aws.params.TimeoutSeconds /* Type integer */;
  var comment = aws.params.Comment;
  var documentName = aws.params.DocumentName;
  var instanceIds = aws.params.InstanceIds;
  var outputS3BucketName = aws.params.OutputS3BucketName;
  var outputS3KeyPrefix = aws.params.OutputS3KeyPrefix;
  var parameters = aws.params.Parameters;
  if (!instanceIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceIds'];
  }
  if (!documentName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DocumentName'];
  }


  // TODO implement code

  var ret = {
    Command: /*S2s*/{
      CommandId: '',
      Comment: '',
      DocumentName: '',
      Status: '',
      RequestedDateTime: awsCommon.timestamp(),
      ExpiresAfter: awsCommon.timestamp(),
      InstanceIds: /*S3*/[ '', /* ...*/ ],
      OutputS3BucketName: '',
      OutputS3KeyPrefix: '',
      Parameters: /*S8*/{} /*Map*/,
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteDocument = function DeleteDocument(aws) {
  var name = aws.params.Name;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeInstanceInformation = function DescribeInstanceInformation(aws) {
  var instanceInformationFilterList = aws.params.InstanceInformationFilterList /* Type list */;
  var maxResults = aws.params.MaxResults /* Type integer */;
  var nextToken = aws.params.NextToken;


  // TODO implement code

  var ret = {
    NextToken: '',
    InstanceInformationList: [ {
      PlatformName: '',
      PlatformVersion: '',
      LastPingDateTime: awsCommon.timestamp(),
      PlatformType: '',
      IsLatestVersion: false,
      InstanceId: '',
      AgentVersion: '',
      PingStatus: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeAssociation = function DescribeAssociation(aws) {
  var name = aws.params.Name;
  var instanceId = aws.params.InstanceId;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }
  if (!instanceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceId'];
  }


  // TODO implement code

  var ret = {
    AssociationDescription: /*Sd*/{
      Name: '',
      Parameters: /*S8*/{} /*Map*/,
      Status: /*Sf*/{
        Name: '',
        Message: '',
        Date: awsCommon.timestamp(),
        AdditionalInfo: '',
      },
      Date: awsCommon.timestamp(),
      InstanceId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateAssociationStatus = function UpdateAssociationStatus(aws) {
  var associationStatus = aws.params.AssociationStatus;
  var name = aws.params.Name;
  var instanceId = aws.params.InstanceId;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }
  if (!instanceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceId'];
  }
  if (!associationStatus) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AssociationStatus'];
  }


  // TODO implement code

  var ret = {
    AssociationDescription: /*Sd*/{
      Name: '',
      Parameters: /*S8*/{} /*Map*/,
      Status: /*Sf*/{
        Name: '',
        Message: '',
        Date: awsCommon.timestamp(),
        AdditionalInfo: '',
      },
      Date: awsCommon.timestamp(),
      InstanceId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CancelCommand = function CancelCommand(aws) {
  var instanceIds = aws.params.InstanceIds;
  var commandId = aws.params.CommandId;
  if (!commandId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter CommandId'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateAssociation = function CreateAssociation(aws) {
  var name = aws.params.Name;
  var parameters = aws.params.Parameters;
  var instanceId = aws.params.InstanceId;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }
  if (!instanceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceId'];
  }


  // TODO implement code

  var ret = {
    AssociationDescription: /*Sd*/{
      Name: '',
      Parameters: /*S8*/{} /*Map*/,
      Status: /*Sf*/{
        Name: '',
        Message: '',
        Date: awsCommon.timestamp(),
        AdditionalInfo: '',
      },
      Date: awsCommon.timestamp(),
      InstanceId: '',
    },
  };
  return [200, ret];
};
