'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * AWS Certificate Manager version 2015-12-08
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol json
require('../../lib/aws-common/shape_http')('json', module.exports, null)
// -----------------------------------
module.exports.DeleteCertificate = function DeleteCertificate(aws) {
  var CertificateArn = aws.params['CertificateArn'];
  if (!CertificateArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter CertificateArn'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeCertificate = function DescribeCertificate(aws) {
  var CertificateArn = aws.params['CertificateArn'];
  if (!CertificateArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter CertificateArn'];
  }


  // TODO implement code

  var ret = {
    Certificate: {
      NotBefore: awsCommon.timestamp(),
      SignatureAlgorithm: '',
      Serial: '',
      KeyAlgorithm: '',
      NotAfter: awsCommon.timestamp(),
      Subject: '',
      RevokedAt: awsCommon.timestamp(),
      DomainName: '',
      CreatedAt: awsCommon.timestamp(),
      Issuer: '',
      CertificateArn: '',
      SubjectAlternativeNames: /*S7*/[ '', /* ...*/ ],
      Status: '',
      InUseBy: [ '', /* ...*/ ],
      DomainValidationOptions: [ {
        ValidationDomain: '',
        DomainName: '',
        ValidationEmails: [ '', /* ...*/ ],
      }, /* ...*/ ],
      RevocationReason: '',
      IssuedAt: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListCertificates = function ListCertificates(aws) {
  var CertificateStatuses = aws.params['CertificateStatuses'] /* Type list */;
  var MaxItems = aws.params['MaxItems'] /* Type integer */;
  var NextToken = aws.params['NextToken'];


  // TODO implement code

  var ret = {
    CertificateSummaryList: [ {
      CertificateArn: '',
      DomainName: '',
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ResendValidationEmail = function ResendValidationEmail(aws) {
  var CertificateArn = aws.params['CertificateArn'];
  var Domain = aws.params['Domain'];
  var ValidationDomain = aws.params['ValidationDomain'];
  if (!CertificateArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter CertificateArn'];
  }
  if (!Domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Domain'];
  }
  if (!ValidationDomain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ValidationDomain'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.RequestCertificate = function RequestCertificate(aws) {
  var IdempotencyToken = aws.params['IdempotencyToken'];
  var DomainName = aws.params['DomainName'];
  var SubjectAlternativeNames = aws.params['SubjectAlternativeNames'];
  var DomainValidationOptions = aws.params['DomainValidationOptions'] /* Type list */;
  if (!DomainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
  }


  // TODO implement code

  var ret = {
    CertificateArn: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetCertificate = function GetCertificate(aws) {
  var CertificateArn = aws.params['CertificateArn'];
  if (!CertificateArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter CertificateArn'];
  }


  // TODO implement code

  var ret = {
    CertificateChain: '',
    Certificate: '',
  };
  return [200, ret];
};
