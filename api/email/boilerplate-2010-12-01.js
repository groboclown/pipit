'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * Amazon Simple Email Service version 2010-12-01
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol query
require('../../lib/aws-common/shape_http')('query', module.exports, 'http://ses.amazonaws.com/doc/2010-12-01/');
// -----------------------------------
module.exports.DeleteIdentityPolicy = function DeleteIdentityPolicy(aws) {
  var identity = aws.params.Identity;
  var policyName = aws.params.PolicyName;
  if (!identity) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Identity'];
  }
  if (!policyName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyName'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.SetActiveReceiptRuleSet = function SetActiveReceiptRuleSet(aws) {
  var ruleSetName = aws.params.RuleSetName;


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetIdentityDkimAttributes = function GetIdentityDkimAttributes(aws) {
  var identities = aws.params.Identities;
  if (!identities) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Identities'];
  }


  // TODO implement code

  var ret = {
    DkimAttributes: {} /*Map*/,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.SendEmail = function SendEmail(aws) {
  var source = aws.params.Source;
  var returnPathArn = aws.params.ReturnPathArn;
  var message = aws.params.Message /* Type structure */;
  var destination = aws.params.Destination /* Type structure */;
  var sourceArn = aws.params.SourceArn;
  var returnPath = aws.params.ReturnPath;
  var replyToAddresses = aws.params.ReplyToAddresses;
  if (!source) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Source'];
  }
  if (!destination) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Destination'];
  }
  if (!message) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Message'];
  }


  // TODO implement code

  var ret = {
    MessageId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListVerifiedEmailAddresses = function ListVerifiedEmailAddresses(aws) {


  // TODO implement code

  var ret = {
    VerifiedEmailAddresses: /*S2z*/[ '', /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateReceiptFilter = function CreateReceiptFilter(aws) {
  var filter = aws.params.Filter;
  if (!filter) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Filter'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteIdentity = function DeleteIdentity(aws) {
  var identity = aws.params.Identity;
  if (!identity) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Identity'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.SetIdentityNotificationTopic = function SetIdentityNotificationTopic(aws) {
  var snsTopic = aws.params.SnsTopic;
  var notificationType = aws.params.NotificationType;
  var identity = aws.params.Identity;
  if (!identity) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Identity'];
  }
  if (!notificationType) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter NotificationType'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListReceiptFilters = function ListReceiptFilters(aws) {


  // TODO implement code

  var ret = {
    Filters: [ /*S5*/{
      Name: '',
      IpFilter: {
        Policy: '',
        Cidr: '',
      },
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListIdentityPolicies = function ListIdentityPolicies(aws) {
  var identity = aws.params.Identity;
  if (!identity) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Identity'];
  }


  // TODO implement code

  var ret = {
    PolicyNames: /*S25*/[ '', /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.PutIdentityPolicy = function PutIdentityPolicy(aws) {
  var policy = aws.params.Policy;
  var identity = aws.params.Identity;
  var policyName = aws.params.PolicyName;
  if (!identity) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Identity'];
  }
  if (!policyName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyName'];
  }
  if (!policy) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Policy'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeReceiptRuleSet = function DescribeReceiptRuleSet(aws) {
  var ruleSetName = aws.params.RuleSetName;
  if (!ruleSetName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RuleSetName'];
  }


  // TODO implement code

  var ret = {
    Rules: /*S1m*/[ /*Sd*/{
      Enabled: false,
      Recipients: [ '', /* ...*/ ],
      TlsPolicy: '',
      ScanEnabled: false,
      Name: '',
      Actions: [ {
        SNSAction: {
          TopicArn: '',
        },
        WorkmailAction: {
          OrganizationArn: '',
          TopicArn: '',
        },
        StopAction: {
          TopicArn: '',
          Scope: '',
        },
        BounceAction: {
          SmtpReplyCode: '',
          StatusCode: '',
          Message: '',
          TopicArn: '',
          Sender: '',
        },
        LambdaAction: {
          InvocationType: '',
          TopicArn: '',
          FunctionArn: '',
        },
        S3Action: {
          BucketName: '',
          KmsKeyArn: '',
          TopicArn: '',
          ObjectKeyPrefix: '',
        },
        AddHeaderAction: {
          HeaderName: '',
          HeaderValue: '',
        },
      }, /* ...*/ ],
    }, /* ...*/ ],
    Metadata: /*S1k*/{
      Name: '',
      CreatedTimestamp: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetIdentityNotificationAttributes = function GetIdentityNotificationAttributes(aws) {
  var identities = aws.params.Identities;
  if (!identities) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Identities'];
  }


  // TODO implement code

  var ret = {
    NotificationAttributes: {} /*Map*/,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.SetReceiptRulePosition = function SetReceiptRulePosition(aws) {
  var ruleSetName = aws.params.RuleSetName;
  var ruleName = aws.params.RuleName;
  var after = aws.params.After;
  if (!ruleSetName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RuleSetName'];
  }
  if (!ruleName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RuleName'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteReceiptRule = function DeleteReceiptRule(aws) {
  var ruleSetName = aws.params.RuleSetName;
  var ruleName = aws.params.RuleName;
  if (!ruleSetName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RuleSetName'];
  }
  if (!ruleName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RuleName'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.CloneReceiptRuleSet = function CloneReceiptRuleSet(aws) {
  var ruleSetName = aws.params.RuleSetName;
  var originalRuleSetName = aws.params.OriginalRuleSetName;
  if (!ruleSetName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RuleSetName'];
  }
  if (!originalRuleSetName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter OriginalRuleSetName'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateReceiptRule = function CreateReceiptRule(aws) {
  var ruleSetName = aws.params.RuleSetName;
  var rule = aws.params.Rule;
  var after = aws.params.After;
  if (!ruleSetName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RuleSetName'];
  }
  if (!rule) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Rule'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteVerifiedEmailAddress = function DeleteVerifiedEmailAddress(aws) {
  var emailAddress = aws.params.EmailAddress;
  if (!emailAddress) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EmailAddress'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeActiveReceiptRuleSet = function DescribeActiveReceiptRuleSet(aws) {


  // TODO implement code

  var ret = {
    Rules: /*S1m*/[ /*Sd*/{
      Enabled: false,
      Recipients: [ '', /* ...*/ ],
      TlsPolicy: '',
      ScanEnabled: false,
      Name: '',
      Actions: [ {
        SNSAction: {
          TopicArn: '',
        },
        WorkmailAction: {
          OrganizationArn: '',
          TopicArn: '',
        },
        StopAction: {
          TopicArn: '',
          Scope: '',
        },
        BounceAction: {
          SmtpReplyCode: '',
          StatusCode: '',
          Message: '',
          TopicArn: '',
          Sender: '',
        },
        LambdaAction: {
          InvocationType: '',
          TopicArn: '',
          FunctionArn: '',
        },
        S3Action: {
          BucketName: '',
          KmsKeyArn: '',
          TopicArn: '',
          ObjectKeyPrefix: '',
        },
        AddHeaderAction: {
          HeaderName: '',
          HeaderValue: '',
        },
      }, /* ...*/ ],
    }, /* ...*/ ],
    Metadata: /*S1k*/{
      Name: '',
      CreatedTimestamp: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.SendBounce = function SendBounce(aws) {
  var bounceSender = aws.params.BounceSender;
  var messageDsn = aws.params.MessageDsn /* Type structure */;
  var bouncedRecipientInfoList = aws.params.BouncedRecipientInfoList /* Type list */;
  var originalMessageId = aws.params.OriginalMessageId;
  var explanation = aws.params.Explanation;
  var bounceSenderArn = aws.params.BounceSenderArn;
  if (!originalMessageId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter OriginalMessageId'];
  }
  if (!bounceSender) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter BounceSender'];
  }
  if (!bouncedRecipientInfoList) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter BouncedRecipientInfoList'];
  }


  // TODO implement code

  var ret = {
    MessageId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListIdentities = function ListIdentities(aws) {
  var nextToken = aws.params.NextToken;
  var identityType = aws.params.IdentityType;
  var maxItems = aws.params.MaxItems /* Type integer */;


  // TODO implement code

  var ret = {
    Identities: /*S1s*/[ '', /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.SetIdentityFeedbackForwardingEnabled = function SetIdentityFeedbackForwardingEnabled(aws) {
  var forwardingEnabled = aws.params.ForwardingEnabled /* Type boolean */;
  var identity = aws.params.Identity;
  if (!identity) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Identity'];
  }
  if (!forwardingEnabled) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ForwardingEnabled'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetSendStatistics = function GetSendStatistics(aws) {


  // TODO implement code

  var ret = {
    SendDataPoints: [ {
      Timestamp: awsCommon.timestamp(),
      DeliveryAttempts: 0 /*Long*/,
      Rejects: 0 /*Long*/,
      Complaints: 0 /*Long*/,
      Bounces: 0 /*Long*/,
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateReceiptRule = function UpdateReceiptRule(aws) {
  var ruleSetName = aws.params.RuleSetName;
  var rule = aws.params.Rule;
  if (!ruleSetName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RuleSetName'];
  }
  if (!rule) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Rule'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.SetIdentityDkimEnabled = function SetIdentityDkimEnabled(aws) {
  var identity = aws.params.Identity;
  var dkimEnabled = aws.params.DkimEnabled /* Type boolean */;
  if (!identity) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Identity'];
  }
  if (!dkimEnabled) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DkimEnabled'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.VerifyDomainDkim = function VerifyDomainDkim(aws) {
  var domain = aws.params.Domain;
  if (!domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Domain'];
  }


  // TODO implement code

  var ret = {
    DkimTokens: /*S1x*/[ '', /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.VerifyEmailAddress = function VerifyEmailAddress(aws) {
  var emailAddress = aws.params.EmailAddress;
  if (!emailAddress) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EmailAddress'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.GetSendQuota = function GetSendQuota(aws) {


  // TODO implement code

  var ret = {
    MaxSendRate: 0.0 /*Double*/,
    Max24HourSend: 0.0 /*Double*/,
    SentLast24Hours: 0.0 /*Double*/,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteReceiptRuleSet = function DeleteReceiptRuleSet(aws) {
  var ruleSetName = aws.params.RuleSetName;
  if (!ruleSetName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RuleSetName'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetIdentityPolicies = function GetIdentityPolicies(aws) {
  var policyNames = aws.params.PolicyNames;
  var identity = aws.params.Identity;
  if (!identity) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Identity'];
  }
  if (!policyNames) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyNames'];
  }


  // TODO implement code

  var ret = {
    Policies: {} /*Map*/,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.SendRawEmail = function SendRawEmail(aws) {
  var source = aws.params.Source;
  var destinations = aws.params.Destinations;
  var fromArn = aws.params.FromArn;
  var returnPathArn = aws.params.ReturnPathArn;
  var sourceArn = aws.params.SourceArn;
  var rawMessage = aws.params.RawMessage /* Type structure */;
  if (!rawMessage) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RawMessage'];
  }


  // TODO implement code

  var ret = {
    MessageId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.VerifyDomainIdentity = function VerifyDomainIdentity(aws) {
  var domain = aws.params.Domain;
  if (!domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Domain'];
  }


  // TODO implement code

  var ret = {
    VerificationToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListReceiptRuleSets = function ListReceiptRuleSets(aws) {
  var nextToken = aws.params.NextToken;


  // TODO implement code

  var ret = {
    NextToken: '',
    RuleSets: [ /*S1k*/{
      Name: '',
      CreatedTimestamp: awsCommon.timestamp(),
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteReceiptFilter = function DeleteReceiptFilter(aws) {
  var filterName = aws.params.FilterName;
  if (!filterName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FilterName'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeReceiptRule = function DescribeReceiptRule(aws) {
  var ruleSetName = aws.params.RuleSetName;
  var ruleName = aws.params.RuleName;
  if (!ruleSetName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RuleSetName'];
  }
  if (!ruleName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RuleName'];
  }


  // TODO implement code

  var ret = {
    Rule: /*Sd*/{
      Enabled: false,
      Recipients: [ '', /* ...*/ ],
      TlsPolicy: '',
      ScanEnabled: false,
      Name: '',
      Actions: [ {
        SNSAction: {
          TopicArn: '',
        },
        WorkmailAction: {
          OrganizationArn: '',
          TopicArn: '',
        },
        StopAction: {
          TopicArn: '',
          Scope: '',
        },
        BounceAction: {
          SmtpReplyCode: '',
          StatusCode: '',
          Message: '',
          TopicArn: '',
          Sender: '',
        },
        LambdaAction: {
          InvocationType: '',
          TopicArn: '',
          FunctionArn: '',
        },
        S3Action: {
          BucketName: '',
          KmsKeyArn: '',
          TopicArn: '',
          ObjectKeyPrefix: '',
        },
        AddHeaderAction: {
          HeaderName: '',
          HeaderValue: '',
        },
      }, /* ...*/ ],
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateReceiptRuleSet = function CreateReceiptRuleSet(aws) {
  var ruleSetName = aws.params.RuleSetName;
  if (!ruleSetName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RuleSetName'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetIdentityVerificationAttributes = function GetIdentityVerificationAttributes(aws) {
  var identities = aws.params.Identities;
  if (!identities) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Identities'];
  }


  // TODO implement code

  var ret = {
    VerificationAttributes: {} /*Map*/,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ReorderReceiptRuleSet = function ReorderReceiptRuleSet(aws) {
  var ruleSetName = aws.params.RuleSetName;
  var ruleNames = aws.params.RuleNames /* Type list */;
  if (!ruleSetName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RuleSetName'];
  }
  if (!ruleNames) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RuleNames'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.VerifyEmailIdentity = function VerifyEmailIdentity(aws) {
  var emailAddress = aws.params.EmailAddress;
  if (!emailAddress) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EmailAddress'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
