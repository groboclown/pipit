'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * AWS Identity and Access Management version 2010-05-08
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol query
require('../../lib/aws-common/shape_http')('query', module.exports, 'https://iam.amazonaws.com/doc/2010-05-08/');
// -----------------------------------
module.exports.UpdateUser = function UpdateUser(aws) {
  var newUserName = aws.params.NewUserName;
  var newPath = aws.params.NewPath;
  var userName = aws.params.UserName;
  if (!userName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UserName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteAccessKey = function DeleteAccessKey(aws) {
  var accessKeyId = aws.params.AccessKeyId;
  var userName = aws.params.UserName;
  if (!accessKeyId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AccessKeyId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteUserPolicy = function DeleteUserPolicy(aws) {
  var policyName = aws.params.PolicyName;
  var userName = aws.params.UserName;
  if (!userName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UserName'];
  }
  if (!policyName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.SimulateCustomPolicy = function SimulateCustomPolicy(aws) {
  var actionNames = aws.params.ActionNames;
  var maxItems = aws.params.MaxItems /* Type integer */;
  var policyInputList = aws.params.PolicyInputList;
  var resourceArns = aws.params.ResourceArns;
  var resourceOwner = aws.params.ResourceOwner;
  var callerArn = aws.params.CallerArn;
  var marker = aws.params.Marker;
  var resourcePolicy = aws.params.ResourcePolicy;
  var contextEntries = aws.params.ContextEntries;
  var resourceHandlingOption = aws.params.ResourceHandlingOption;
  if (!policyInputList) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyInputList'];
  }
  if (!actionNames) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ActionNames'];
  }


  // TODO implement code

  var ret = /*S7p*/{
    Marker: '',
    IsTruncated: false,
    EvaluationResults: [ {
      EvalActionName: '',
      EvalDecisionDetails: /*S80*/{} /*Map*/,
      ResourceSpecificResults: [ {
        MissingContextValues: /*S3w*/[ '', /* ...*/ ],
        EvalDecisionDetails: /*S80*/{} /*Map*/,
        EvalResourceDecision: '',
        MatchedStatements: /*S7t*/[ {
          StartPosition: /*S7x*/{
            Column: 0,
            Line: 0,
          },
          EndPosition: /*S7x*/{
            Column: 0,
            Line: 0,
          },
          SourcePolicyType: '',
          SourcePolicyId: '',
        }, /* ...*/ ],
        EvalResourceName: '',
      }, /* ...*/ ],
      EvalResourceName: '',
      MissingContextValues: /*S3w*/[ '', /* ...*/ ],
      EvalDecision: '',
      MatchedStatements: /*S7t*/[ {
          StartPosition: /*S7x*/{
            Column: 0,
            Line: 0,
          },
          EndPosition: /*S7x*/{
            Column: 0,
            Line: 0,
          },
          SourcePolicyType: '',
          SourcePolicyId: '',
        }, /* ...*/ ],
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.PutRolePolicy = function PutRolePolicy(aws) {
  var policyDocument = aws.params.PolicyDocument;
  var roleName = aws.params.RoleName;
  var policyName = aws.params.PolicyName;
  if (!roleName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RoleName'];
  }
  if (!policyName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyName'];
  }
  if (!policyDocument) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyDocument'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateServerCertificate = function UpdateServerCertificate(aws) {
  var newServerCertificateName = aws.params.NewServerCertificateName;
  var newPath = aws.params.NewPath;
  var serverCertificateName = aws.params.ServerCertificateName;
  if (!serverCertificateName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ServerCertificateName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.UploadSSHPublicKey = function UploadSSHPublicKey(aws) {
  var sSHPublicKeyBody = aws.params.SSHPublicKeyBody;
  var userName = aws.params.UserName;
  if (!userName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UserName'];
  }
  if (!sSHPublicKeyBody) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SSHPublicKeyBody'];
  }


  // TODO implement code

  var ret = {
    SSHPublicKey: /*S4q*/{
      Fingerprint: '',
      SSHPublicKeyId: '',
      Status: '',
      UploadDate: awsCommon.timestamp(),
      SSHPublicKeyBody: '',
      UserName: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateVirtualMFADevice = function CreateVirtualMFADevice(aws) {
  var path = aws.params.Path;
  var virtualMFADeviceName = aws.params.VirtualMFADeviceName;
  if (!virtualMFADeviceName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VirtualMFADeviceName'];
  }


  // TODO implement code

  var ret = {
    VirtualMFADevice: /*S1x*/{
      EnableDate: awsCommon.timestamp(),
      SerialNumber: '',
      QRCodePNG: /*S1z*/null /*Blob*/,
      Base32StringSeed: /*S1z*/null /*Blob*/,
      User: /*S1t*/{
        CreateDate: awsCommon.timestamp(),
        UserId: '',
        Path: '',
        Arn: '',
        PasswordLastUsed: awsCommon.timestamp(),
        UserName: '',
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetLoginProfile = function GetLoginProfile(aws) {
  var userName = aws.params.UserName;
  if (!userName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UserName'];
  }


  // TODO implement code

  var ret = {
    LoginProfile: /*S13*/{
      CreateDate: awsCommon.timestamp(),
      PasswordResetRequired: false,
      UserName: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListRoles = function ListRoles(aws) {
  var marker = aws.params.Marker;
  var maxItems = aws.params.MaxItems /* Type integer */;
  var pathPrefix = aws.params.PathPrefix;


  // TODO implement code

  var ret = {
    Marker: '',
    Roles: /*Sx*/[ /*Sy*/{
      CreateDate: awsCommon.timestamp(),
      RoleName: '',
      AssumeRolePolicyDocument: '',
      RoleId: '',
      Path: '',
      Arn: '',
    }, /* ...*/ ],
    IsTruncated: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateUser = function CreateUser(aws) {
  var path = aws.params.Path;
  var userName = aws.params.UserName;
  if (!userName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UserName'];
  }


  // TODO implement code

  var ret = {
    User: /*S1t*/{
      CreateDate: awsCommon.timestamp(),
      UserId: '',
      Path: '',
      Arn: '',
      PasswordLastUsed: awsCommon.timestamp(),
      UserName: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteSSHPublicKey = function DeleteSSHPublicKey(aws) {
  var sSHPublicKeyId = aws.params.SSHPublicKeyId;
  var userName = aws.params.UserName;
  if (!userName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UserName'];
  }
  if (!sSHPublicKeyId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SSHPublicKeyId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ListUsers = function ListUsers(aws) {
  var marker = aws.params.Marker;
  var maxItems = aws.params.MaxItems /* Type integer */;
  var pathPrefix = aws.params.PathPrefix;


  // TODO implement code

  var ret = {
    Marker: '',
    Users: /*S44*/[ /*S1t*/{
      CreateDate: awsCommon.timestamp(),
      UserId: '',
      Path: '',
      Arn: '',
      PasswordLastUsed: awsCommon.timestamp(),
      UserName: '',
    }, /* ...*/ ],
    IsTruncated: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetContextKeysForPrincipalPolicy = function GetContextKeysForPrincipalPolicy(aws) {
  var policyInputList = aws.params.PolicyInputList;
  var policySourceArn = aws.params.PolicySourceArn;
  if (!policySourceArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicySourceArn'];
  }


  // TODO implement code

  var ret = /*S3v*/{
    ContextKeyNames: /*S3w*/[ '', /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetServerCertificate = function GetServerCertificate(aws) {
  var serverCertificateName = aws.params.ServerCertificateName;
  if (!serverCertificateName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ServerCertificateName'];
  }


  // TODO implement code

  var ret = {
    ServerCertificate: {
      CertificateBody: '',
      ServerCertificateMetadata: /*S4w*/{
        Expiration: awsCommon.timestamp(),
        ServerCertificateName: '',
        UploadDate: awsCommon.timestamp(),
        Path: '',
        Arn: '',
        ServerCertificateId: '',
      },
      CertificateChain: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateSAMLProvider = function UpdateSAMLProvider(aws) {
  var sAMLProviderArn = aws.params.SAMLProviderArn;
  var sAMLMetadataDocument = aws.params.SAMLMetadataDocument;
  if (!sAMLMetadataDocument) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SAMLMetadataDocument'];
  }
  if (!sAMLProviderArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SAMLProviderArn'];
  }


  // TODO implement code

  var ret = {
    SAMLProviderArn: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetCredentialReport = function GetCredentialReport(aws) {


  // TODO implement code

  var ret = {
    Content: null /*Blob*/,
    GeneratedTime: awsCommon.timestamp(),
    ReportFormat: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteSigningCertificate = function DeleteSigningCertificate(aws) {
  var certificateId = aws.params.CertificateId;
  var userName = aws.params.UserName;
  if (!certificateId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter CertificateId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.RemoveClientIDFromOpenIDConnectProvider = function RemoveClientIDFromOpenIDConnectProvider(aws) {
  var openIDConnectProviderArn = aws.params.OpenIDConnectProviderArn;
  var clientID = aws.params.ClientID;
  if (!openIDConnectProviderArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter OpenIDConnectProviderArn'];
  }
  if (!clientID) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClientID'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DetachRolePolicy = function DetachRolePolicy(aws) {
  var policyArn = aws.params.PolicyArn;
  var roleName = aws.params.RoleName;
  if (!roleName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RoleName'];
  }
  if (!policyArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyArn'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteVirtualMFADevice = function DeleteVirtualMFADevice(aws) {
  var serialNumber = aws.params.SerialNumber;
  if (!serialNumber) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SerialNumber'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ListVirtualMFADevices = function ListVirtualMFADevices(aws) {
  var marker = aws.params.Marker;
  var maxItems = aws.params.MaxItems /* Type integer */;
  var assignmentStatus = aws.params.AssignmentStatus;


  // TODO implement code

  var ret = {
    VirtualMFADevices: [ /*S1x*/{
      EnableDate: awsCommon.timestamp(),
      SerialNumber: '',
      QRCodePNG: /*S1z*/null /*Blob*/,
      Base32StringSeed: /*S1z*/null /*Blob*/,
      User: /*S1t*/{
        CreateDate: awsCommon.timestamp(),
        UserId: '',
        Path: '',
        Arn: '',
        PasswordLastUsed: awsCommon.timestamp(),
        UserName: '',
      },
    }, /* ...*/ ],
    Marker: '',
    IsTruncated: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreatePolicyVersion = function CreatePolicyVersion(aws) {
  var policyArn = aws.params.PolicyArn;
  var policyDocument = aws.params.PolicyDocument;
  var setAsDefault = aws.params.SetAsDefault /* Type boolean */;
  if (!policyArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyArn'];
  }
  if (!policyDocument) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyDocument'];
  }


  // TODO implement code

  var ret = {
    PolicyVersion: /*S1k*/{
      IsDefaultVersion: false,
      CreateDate: awsCommon.timestamp(),
      VersionId: '',
      Document: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.PutGroupPolicy = function PutGroupPolicy(aws) {
  var policyDocument = aws.params.PolicyDocument;
  var groupName = aws.params.GroupName;
  var policyName = aws.params.PolicyName;
  if (!groupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GroupName'];
  }
  if (!policyName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyName'];
  }
  if (!policyDocument) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyDocument'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateGroup = function UpdateGroup(aws) {
  var groupName = aws.params.GroupName;
  var newGroupName = aws.params.NewGroupName;
  var newPath = aws.params.NewPath;
  if (!groupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GroupName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.GetUserPolicy = function GetUserPolicy(aws) {
  var policyName = aws.params.PolicyName;
  var userName = aws.params.UserName;
  if (!userName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UserName'];
  }
  if (!policyName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyName'];
  }


  // TODO implement code

  var ret = {
    PolicyDocument: '',
    PolicyName: '',
    UserName: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateGroup = function CreateGroup(aws) {
  var path = aws.params.Path;
  var groupName = aws.params.GroupName;
  if (!groupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GroupName'];
  }


  // TODO implement code

  var ret = {
    Group: /*Ss*/{
      Arn: '',
      Path: '',
      GroupName: '',
      GroupId: '',
      CreateDate: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetGroup = function GetGroup(aws) {
  var marker = aws.params.Marker;
  var maxItems = aws.params.MaxItems /* Type integer */;
  var groupName = aws.params.GroupName;
  if (!groupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GroupName'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    Users: /*S44*/[ /*S1t*/{
      CreateDate: awsCommon.timestamp(),
      UserId: '',
      Path: '',
      Arn: '',
      PasswordLastUsed: awsCommon.timestamp(),
      UserName: '',
    }, /* ...*/ ],
    IsTruncated: false,
    Group: /*Ss*/{
      Arn: '',
      Path: '',
      GroupName: '',
      GroupId: '',
      CreateDate: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RemoveUserFromGroup = function RemoveUserFromGroup(aws) {
  var groupName = aws.params.GroupName;
  var userName = aws.params.UserName;
  if (!groupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GroupName'];
  }
  if (!userName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UserName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ListOpenIDConnectProviders = function ListOpenIDConnectProviders(aws) {


  // TODO implement code

  var ret = {
    OpenIDConnectProviderList: [ {
      Arn: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetAccessKeyLastUsed = function GetAccessKeyLastUsed(aws) {
  var accessKeyId = aws.params.AccessKeyId;
  if (!accessKeyId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AccessKeyId'];
  }


  // TODO implement code

  var ret = {
    AccessKeyLastUsed: {
      LastUsedDate: awsCommon.timestamp(),
      Region: '',
      ServiceName: '',
    },
    UserName: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListMFADevices = function ListMFADevices(aws) {
  var marker = aws.params.Marker;
  var maxItems = aws.params.MaxItems /* Type integer */;
  var userName = aws.params.UserName;


  // TODO implement code

  var ret = {
    Marker: '',
    IsTruncated: false,
    MFADevices: [ {
      SerialNumber: '',
      EnableDate: awsCommon.timestamp(),
      UserName: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListPolicies = function ListPolicies(aws) {
  var marker = aws.params.Marker;
  var maxItems = aws.params.MaxItems /* Type integer */;
  var pathPrefix = aws.params.PathPrefix;
  var onlyAttached = aws.params.OnlyAttached /* Type boolean */;
  var scope = aws.params.Scope;


  // TODO implement code

  var ret = {
    Policies: [ /*S1f*/{
      CreateDate: awsCommon.timestamp(),
      PolicyName: '',
      Description: '',
      UpdateDate: awsCommon.timestamp(),
      Path: '',
      IsAttachable: false,
      Arn: '',
      PolicyId: '',
      AttachmentCount: 0,
      DefaultVersionId: '',
    }, /* ...*/ ],
    Marker: '',
    IsTruncated: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeletePolicyVersion = function DeletePolicyVersion(aws) {
  var policyArn = aws.params.PolicyArn;
  var versionId = aws.params.VersionId;
  if (!policyArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyArn'];
  }
  if (!versionId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VersionId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.SetDefaultPolicyVersion = function SetDefaultPolicyVersion(aws) {
  var policyArn = aws.params.PolicyArn;
  var versionId = aws.params.VersionId;
  if (!policyArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyArn'];
  }
  if (!versionId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VersionId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.AddRoleToInstanceProfile = function AddRoleToInstanceProfile(aws) {
  var roleName = aws.params.RoleName;
  var instanceProfileName = aws.params.InstanceProfileName;
  if (!instanceProfileName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceProfileName'];
  }
  if (!roleName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RoleName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.GetAccountSummary = function GetAccountSummary(aws) {


  // TODO implement code

  var ret = {
    SummaryMap: {} /*Map*/,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetRolePolicy = function GetRolePolicy(aws) {
  var roleName = aws.params.RoleName;
  var policyName = aws.params.PolicyName;
  if (!roleName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RoleName'];
  }
  if (!policyName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyName'];
  }


  // TODO implement code

  var ret = {
    PolicyDocument: '',
    RoleName: '',
    PolicyName: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListServerCertificates = function ListServerCertificates(aws) {
  var marker = aws.params.Marker;
  var maxItems = aws.params.MaxItems /* Type integer */;
  var pathPrefix = aws.params.PathPrefix;


  // TODO implement code

  var ret = {
    Marker: '',
    IsTruncated: false,
    ServerCertificateMetadataList: [ /*S4w*/{
      Expiration: awsCommon.timestamp(),
      ServerCertificateName: '',
      UploadDate: awsCommon.timestamp(),
      Path: '',
      Arn: '',
      ServerCertificateId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AttachGroupPolicy = function AttachGroupPolicy(aws) {
  var policyArn = aws.params.PolicyArn;
  var groupName = aws.params.GroupName;
  if (!groupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GroupName'];
  }
  if (!policyArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyArn'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DetachGroupPolicy = function DetachGroupPolicy(aws) {
  var policyArn = aws.params.PolicyArn;
  var groupName = aws.params.GroupName;
  if (!groupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GroupName'];
  }
  if (!policyArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyArn'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.GetSSHPublicKey = function GetSSHPublicKey(aws) {
  var encoding = aws.params.Encoding;
  var sSHPublicKeyId = aws.params.SSHPublicKeyId;
  var userName = aws.params.UserName;
  if (!userName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UserName'];
  }
  if (!sSHPublicKeyId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SSHPublicKeyId'];
  }
  if (!encoding) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Encoding'];
  }


  // TODO implement code

  var ret = {
    SSHPublicKey: /*S4q*/{
      Fingerprint: '',
      SSHPublicKeyId: '',
      Status: '',
      UploadDate: awsCommon.timestamp(),
      SSHPublicKeyBody: '',
      UserName: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreatePolicy = function CreatePolicy(aws) {
  var description = aws.params.Description;
  var path = aws.params.Path;
  var policyDocument = aws.params.PolicyDocument;
  var policyName = aws.params.PolicyName;
  if (!policyName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyName'];
  }
  if (!policyDocument) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyDocument'];
  }


  // TODO implement code

  var ret = {
    Policy: /*S1f*/{
      CreateDate: awsCommon.timestamp(),
      PolicyName: '',
      Description: '',
      UpdateDate: awsCommon.timestamp(),
      Path: '',
      IsAttachable: false,
      Arn: '',
      PolicyId: '',
      AttachmentCount: 0,
      DefaultVersionId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateSigningCertificate = function UpdateSigningCertificate(aws) {
  var certificateId = aws.params.CertificateId;
  var status = aws.params.Status;
  var userName = aws.params.UserName;
  if (!certificateId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter CertificateId'];
  }
  if (!status) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Status'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteRolePolicy = function DeleteRolePolicy(aws) {
  var roleName = aws.params.RoleName;
  var policyName = aws.params.PolicyName;
  if (!roleName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RoleName'];
  }
  if (!policyName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ListGroupsForUser = function ListGroupsForUser(aws) {
  var marker = aws.params.Marker;
  var maxItems = aws.params.MaxItems /* Type integer */;
  var userName = aws.params.UserName;
  if (!userName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UserName'];
  }


  // TODO implement code

  var ret = {
    Groups: /*S5u*/[ /*Ss*/{
      Arn: '',
      Path: '',
      GroupName: '',
      GroupId: '',
      CreateDate: awsCommon.timestamp(),
    }, /* ...*/ ],
    Marker: '',
    IsTruncated: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListRolePolicies = function ListRolePolicies(aws) {
  var marker = aws.params.Marker;
  var maxItems = aws.params.MaxItems /* Type integer */;
  var roleName = aws.params.RoleName;
  if (!roleName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RoleName'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    PolicyNames: /*S5q*/[ '', /* ...*/ ],
    IsTruncated: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AddClientIDToOpenIDConnectProvider = function AddClientIDToOpenIDConnectProvider(aws) {
  var openIDConnectProviderArn = aws.params.OpenIDConnectProviderArn;
  var clientID = aws.params.ClientID;
  if (!openIDConnectProviderArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter OpenIDConnectProviderArn'];
  }
  if (!clientID) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClientID'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ListSigningCertificates = function ListSigningCertificates(aws) {
  var marker = aws.params.Marker;
  var maxItems = aws.params.MaxItems /* Type integer */;
  var userName = aws.params.UserName;


  // TODO implement code

  var ret = {
    Certificates: [ /*S6x*/{
      UploadDate: awsCommon.timestamp(),
      CertificateBody: '',
      CertificateId: '',
      Status: '',
      UserName: '',
    }, /* ...*/ ],
    Marker: '',
    IsTruncated: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListAttachedGroupPolicies = function ListAttachedGroupPolicies(aws) {
  var marker = aws.params.Marker;
  var maxItems = aws.params.MaxItems /* Type integer */;
  var pathPrefix = aws.params.PathPrefix;
  var groupName = aws.params.GroupName;
  if (!groupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GroupName'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    IsTruncated: false,
    AttachedPolicies: /*S39*/[ {
      PolicyArn: '',
      PolicyName: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ResyncMFADevice = function ResyncMFADevice(aws) {
  var serialNumber = aws.params.SerialNumber;
  var authenticationCode2 = aws.params.AuthenticationCode2;
  var authenticationCode1 = aws.params.AuthenticationCode1;
  var userName = aws.params.UserName;
  if (!userName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UserName'];
  }
  if (!serialNumber) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SerialNumber'];
  }
  if (!authenticationCode1) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AuthenticationCode1'];
  }
  if (!authenticationCode2) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AuthenticationCode2'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.CreateSAMLProvider = function CreateSAMLProvider(aws) {
  var name = aws.params.Name;
  var sAMLMetadataDocument = aws.params.SAMLMetadataDocument;
  if (!sAMLMetadataDocument) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SAMLMetadataDocument'];
  }
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }


  // TODO implement code

  var ret = {
    SAMLProviderArn: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.EnableMFADevice = function EnableMFADevice(aws) {
  var serialNumber = aws.params.SerialNumber;
  var authenticationCode2 = aws.params.AuthenticationCode2;
  var authenticationCode1 = aws.params.AuthenticationCode1;
  var userName = aws.params.UserName;
  if (!userName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UserName'];
  }
  if (!serialNumber) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SerialNumber'];
  }
  if (!authenticationCode1) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AuthenticationCode1'];
  }
  if (!authenticationCode2) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AuthenticationCode2'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.CreateAccountAlias = function CreateAccountAlias(aws) {
  var accountAlias = aws.params.AccountAlias;
  if (!accountAlias) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AccountAlias'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.AttachUserPolicy = function AttachUserPolicy(aws) {
  var policyArn = aws.params.PolicyArn;
  var userName = aws.params.UserName;
  if (!userName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UserName'];
  }
  if (!policyArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyArn'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ListInstanceProfiles = function ListInstanceProfiles(aws) {
  var marker = aws.params.Marker;
  var maxItems = aws.params.MaxItems /* Type integer */;
  var pathPrefix = aws.params.PathPrefix;


  // TODO implement code

  var ret = {
    Marker: '',
    InstanceProfiles: /*S3f*/[ /*Sw*/{
      Roles: /*Sx*/[ /*Sy*/{
        CreateDate: awsCommon.timestamp(),
        RoleName: '',
        AssumeRolePolicyDocument: '',
        RoleId: '',
        Path: '',
        Arn: '',
      }, /* ...*/ ],
      CreateDate: awsCommon.timestamp(),
      InstanceProfileName: '',
      Path: '',
      Arn: '',
      InstanceProfileId: '',
    }, /* ...*/ ],
    IsTruncated: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteOpenIDConnectProvider = function DeleteOpenIDConnectProvider(aws) {
  var openIDConnectProviderArn = aws.params.OpenIDConnectProviderArn;
  if (!openIDConnectProviderArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter OpenIDConnectProviderArn'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ListInstanceProfilesForRole = function ListInstanceProfilesForRole(aws) {
  var marker = aws.params.Marker;
  var maxItems = aws.params.MaxItems /* Type integer */;
  var roleName = aws.params.RoleName;
  if (!roleName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RoleName'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    InstanceProfiles: /*S3f*/[ /*Sw*/{
      Roles: /*Sx*/[ /*Sy*/{
        CreateDate: awsCommon.timestamp(),
        RoleName: '',
        AssumeRolePolicyDocument: '',
        RoleId: '',
        Path: '',
        Arn: '',
      }, /* ...*/ ],
      CreateDate: awsCommon.timestamp(),
      InstanceProfileName: '',
      Path: '',
      Arn: '',
      InstanceProfileId: '',
    }, /* ...*/ ],
    IsTruncated: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListAttachedUserPolicies = function ListAttachedUserPolicies(aws) {
  var marker = aws.params.Marker;
  var maxItems = aws.params.MaxItems /* Type integer */;
  var pathPrefix = aws.params.PathPrefix;
  var userName = aws.params.UserName;
  if (!userName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UserName'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    IsTruncated: false,
    AttachedPolicies: /*S39*/[ {
      PolicyArn: '',
      PolicyName: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateAccountPasswordPolicy = function UpdateAccountPasswordPolicy(aws) {
  var requireNumbers = aws.params.RequireNumbers /* Type boolean */;
  var minimumPasswordLength = aws.params.MinimumPasswordLength /* Type integer */;
  var passwordReusePrevention = aws.params.PasswordReusePrevention /* Type integer */;
  var requireUppercaseCharacters = aws.params.RequireUppercaseCharacters /* Type boolean */;
  var hardExpiry = aws.params.HardExpiry /* Type boolean */;
  var requireSymbols = aws.params.RequireSymbols /* Type boolean */;
  var allowUsersToChangePassword = aws.params.AllowUsersToChangePassword /* Type boolean */;
  var maxPasswordAge = aws.params.MaxPasswordAge /* Type integer */;
  var requireLowercaseCharacters = aws.params.RequireLowercaseCharacters /* Type boolean */;


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.GetPolicy = function GetPolicy(aws) {
  var policyArn = aws.params.PolicyArn;
  if (!policyArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyArn'];
  }


  // TODO implement code

  var ret = {
    Policy: /*S1f*/{
      CreateDate: awsCommon.timestamp(),
      PolicyName: '',
      Description: '',
      UpdateDate: awsCommon.timestamp(),
      Path: '',
      IsAttachable: false,
      Arn: '',
      PolicyId: '',
      AttachmentCount: 0,
      DefaultVersionId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateAccessKey = function CreateAccessKey(aws) {
  var userName = aws.params.UserName;


  // TODO implement code

  var ret = {
    AccessKey: {
      CreateDate: awsCommon.timestamp(),
      SecretAccessKey: '',
      AccessKeyId: '',
      Status: '',
      UserName: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteRole = function DeleteRole(aws) {
  var roleName = aws.params.RoleName;
  if (!roleName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RoleName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateLoginProfile = function UpdateLoginProfile(aws) {
  var password = aws.params.Password;
  var passwordResetRequired = aws.params.PasswordResetRequired /* Type boolean */;
  var userName = aws.params.UserName;
  if (!userName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UserName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ListAttachedRolePolicies = function ListAttachedRolePolicies(aws) {
  var marker = aws.params.Marker;
  var maxItems = aws.params.MaxItems /* Type integer */;
  var pathPrefix = aws.params.PathPrefix;
  var roleName = aws.params.RoleName;
  if (!roleName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RoleName'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    IsTruncated: false,
    AttachedPolicies: /*S39*/[ {
      PolicyArn: '',
      PolicyName: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.PutUserPolicy = function PutUserPolicy(aws) {
  var policyDocument = aws.params.PolicyDocument;
  var policyName = aws.params.PolicyName;
  var userName = aws.params.UserName;
  if (!userName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UserName'];
  }
  if (!policyName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyName'];
  }
  if (!policyDocument) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyDocument'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteGroupPolicy = function DeleteGroupPolicy(aws) {
  var groupName = aws.params.GroupName;
  var policyName = aws.params.PolicyName;
  if (!groupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GroupName'];
  }
  if (!policyName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateAccessKey = function UpdateAccessKey(aws) {
  var accessKeyId = aws.params.AccessKeyId;
  var status = aws.params.Status;
  var userName = aws.params.UserName;
  if (!accessKeyId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AccessKeyId'];
  }
  if (!status) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Status'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ListEntitiesForPolicy = function ListEntitiesForPolicy(aws) {
  var entityFilter = aws.params.EntityFilter;
  var marker = aws.params.Marker;
  var policyArn = aws.params.PolicyArn;
  var pathPrefix = aws.params.PathPrefix;
  var maxItems = aws.params.MaxItems /* Type integer */;
  if (!policyArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyArn'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    PolicyRoles: [ {
      RoleName: '',
    }, /* ...*/ ],
    IsTruncated: false,
    PolicyUsers: [ {
      UserName: '',
    }, /* ...*/ ],
    PolicyGroups: [ {
      GroupName: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateOpenIDConnectProviderThumbprint = function UpdateOpenIDConnectProviderThumbprint(aws) {
  var openIDConnectProviderArn = aws.params.OpenIDConnectProviderArn;
  var thumbprintList = aws.params.ThumbprintList;
  if (!openIDConnectProviderArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter OpenIDConnectProviderArn'];
  }
  if (!thumbprintList) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ThumbprintList'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteInstanceProfile = function DeleteInstanceProfile(aws) {
  var instanceProfileName = aws.params.InstanceProfileName;
  if (!instanceProfileName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceProfileName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.AddUserToGroup = function AddUserToGroup(aws) {
  var groupName = aws.params.GroupName;
  var userName = aws.params.UserName;
  if (!groupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GroupName'];
  }
  if (!userName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UserName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.GetContextKeysForCustomPolicy = function GetContextKeysForCustomPolicy(aws) {
  var policyInputList = aws.params.PolicyInputList;
  if (!policyInputList) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyInputList'];
  }


  // TODO implement code

  var ret = /*S3v*/{
    ContextKeyNames: /*S3w*/[ '', /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteAccountPasswordPolicy = function DeleteAccountPasswordPolicy(aws) {


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ListPolicyVersions = function ListPolicyVersions(aws) {
  var marker = aws.params.Marker;
  var maxItems = aws.params.MaxItems /* Type integer */;
  var policyArn = aws.params.PolicyArn;
  if (!policyArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyArn'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    IsTruncated: false,
    Versions: /*S3i*/[ /*S1k*/{
      IsDefaultVersion: false,
      CreateDate: awsCommon.timestamp(),
      VersionId: '',
      Document: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListAccessKeys = function ListAccessKeys(aws) {
  var marker = aws.params.Marker;
  var maxItems = aws.params.MaxItems /* Type integer */;
  var userName = aws.params.UserName;


  // TODO implement code

  var ret = {
    Marker: '',
    IsTruncated: false,
    AccessKeyMetadata: [ {
      CreateDate: awsCommon.timestamp(),
      AccessKeyId: '',
      Status: '',
      UserName: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateAssumeRolePolicy = function UpdateAssumeRolePolicy(aws) {
  var policyDocument = aws.params.PolicyDocument;
  var roleName = aws.params.RoleName;
  if (!roleName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RoleName'];
  }
  if (!policyDocument) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyDocument'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateSSHPublicKey = function UpdateSSHPublicKey(aws) {
  var sSHPublicKeyId = aws.params.SSHPublicKeyId;
  var status = aws.params.Status;
  var userName = aws.params.UserName;
  if (!userName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UserName'];
  }
  if (!sSHPublicKeyId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SSHPublicKeyId'];
  }
  if (!status) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Status'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteSAMLProvider = function DeleteSAMLProvider(aws) {
  var sAMLProviderArn = aws.params.SAMLProviderArn;
  if (!sAMLProviderArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SAMLProviderArn'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteUser = function DeleteUser(aws) {
  var userName = aws.params.UserName;
  if (!userName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UserName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.UploadServerCertificate = function UploadServerCertificate(aws) {
  var certificateBody = aws.params.CertificateBody;
  var path = aws.params.Path;
  var privateKey = aws.params.PrivateKey /* Type string */;
  var certificateChain = aws.params.CertificateChain;
  var serverCertificateName = aws.params.ServerCertificateName;
  if (!serverCertificateName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ServerCertificateName'];
  }
  if (!certificateBody) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter CertificateBody'];
  }
  if (!privateKey) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PrivateKey'];
  }


  // TODO implement code

  var ret = {
    ServerCertificateMetadata: /*S4w*/{
      Expiration: awsCommon.timestamp(),
      ServerCertificateName: '',
      UploadDate: awsCommon.timestamp(),
      Path: '',
      Arn: '',
      ServerCertificateId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListSAMLProviders = function ListSAMLProviders(aws) {


  // TODO implement code

  var ret = {
    SAMLProviderList: [ {
      ValidUntil: awsCommon.timestamp(),
      CreateDate: awsCommon.timestamp(),
      Arn: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetPolicyVersion = function GetPolicyVersion(aws) {
  var policyArn = aws.params.PolicyArn;
  var versionId = aws.params.VersionId;
  if (!policyArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyArn'];
  }
  if (!versionId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VersionId'];
  }


  // TODO implement code

  var ret = {
    PolicyVersion: /*S1k*/{
      IsDefaultVersion: false,
      CreateDate: awsCommon.timestamp(),
      VersionId: '',
      Document: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UploadSigningCertificate = function UploadSigningCertificate(aws) {
  var certificateBody = aws.params.CertificateBody;
  var userName = aws.params.UserName;
  if (!certificateBody) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter CertificateBody'];
  }


  // TODO implement code

  var ret = {
    Certificate: /*S6x*/{
      UploadDate: awsCommon.timestamp(),
      CertificateBody: '',
      CertificateId: '',
      Status: '',
      UserName: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListGroups = function ListGroups(aws) {
  var marker = aws.params.Marker;
  var maxItems = aws.params.MaxItems /* Type integer */;
  var pathPrefix = aws.params.PathPrefix;


  // TODO implement code

  var ret = {
    Groups: /*S5u*/[ /*Ss*/{
      Arn: '',
      Path: '',
      GroupName: '',
      GroupId: '',
      CreateDate: awsCommon.timestamp(),
    }, /* ...*/ ],
    Marker: '',
    IsTruncated: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteGroup = function DeleteGroup(aws) {
  var groupName = aws.params.GroupName;
  if (!groupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GroupName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.CreateInstanceProfile = function CreateInstanceProfile(aws) {
  var path = aws.params.Path;
  var instanceProfileName = aws.params.InstanceProfileName;
  if (!instanceProfileName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceProfileName'];
  }


  // TODO implement code

  var ret = {
    InstanceProfile: /*Sw*/{
      Roles: /*Sx*/[ /*Sy*/{
        CreateDate: awsCommon.timestamp(),
        RoleName: '',
        AssumeRolePolicyDocument: '',
        RoleId: '',
        Path: '',
        Arn: '',
      }, /* ...*/ ],
      CreateDate: awsCommon.timestamp(),
      InstanceProfileName: '',
      Path: '',
      Arn: '',
      InstanceProfileId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AttachRolePolicy = function AttachRolePolicy(aws) {
  var policyArn = aws.params.PolicyArn;
  var roleName = aws.params.RoleName;
  if (!roleName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RoleName'];
  }
  if (!policyArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyArn'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.RemoveRoleFromInstanceProfile = function RemoveRoleFromInstanceProfile(aws) {
  var roleName = aws.params.RoleName;
  var instanceProfileName = aws.params.InstanceProfileName;
  if (!instanceProfileName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceProfileName'];
  }
  if (!roleName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RoleName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DetachUserPolicy = function DetachUserPolicy(aws) {
  var policyArn = aws.params.PolicyArn;
  var userName = aws.params.UserName;
  if (!userName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UserName'];
  }
  if (!policyArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyArn'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteServerCertificate = function DeleteServerCertificate(aws) {
  var serverCertificateName = aws.params.ServerCertificateName;
  if (!serverCertificateName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ServerCertificateName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.GenerateCredentialReport = function GenerateCredentialReport(aws) {


  // TODO implement code

  var ret = {
    Description: '',
    State: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListUserPolicies = function ListUserPolicies(aws) {
  var marker = aws.params.Marker;
  var maxItems = aws.params.MaxItems /* Type integer */;
  var userName = aws.params.UserName;
  if (!userName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UserName'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    PolicyNames: /*S5q*/[ '', /* ...*/ ],
    IsTruncated: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteAccountAlias = function DeleteAccountAlias(aws) {
  var accountAlias = aws.params.AccountAlias;
  if (!accountAlias) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AccountAlias'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ChangePassword = function ChangePassword(aws) {
  var newPassword = aws.params.NewPassword;
  var oldPassword = aws.params.OldPassword;
  if (!oldPassword) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter OldPassword'];
  }
  if (!newPassword) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter NewPassword'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.GetOpenIDConnectProvider = function GetOpenIDConnectProvider(aws) {
  var openIDConnectProviderArn = aws.params.OpenIDConnectProviderArn;
  if (!openIDConnectProviderArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter OpenIDConnectProviderArn'];
  }


  // TODO implement code

  var ret = {
    ClientIDList: /*S16*/[ '', /* ...*/ ],
    CreateDate: awsCommon.timestamp(),
    Url: '',
    ThumbprintList: /*S17*/[ '', /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteLoginProfile = function DeleteLoginProfile(aws) {
  var userName = aws.params.UserName;
  if (!userName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UserName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.CreateOpenIDConnectProvider = function CreateOpenIDConnectProvider(aws) {
  var clientIDList = aws.params.ClientIDList;
  var url = aws.params.Url;
  var thumbprintList = aws.params.ThumbprintList;
  if (!url) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Url'];
  }
  if (!thumbprintList) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ThumbprintList'];
  }


  // TODO implement code

  var ret = {
    OpenIDConnectProviderArn: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.SimulatePrincipalPolicy = function SimulatePrincipalPolicy(aws) {
  var actionNames = aws.params.ActionNames;
  var maxItems = aws.params.MaxItems /* Type integer */;
  var policyInputList = aws.params.PolicyInputList;
  var resourceArns = aws.params.ResourceArns;
  var resourceOwner = aws.params.ResourceOwner;
  var callerArn = aws.params.CallerArn;
  var marker = aws.params.Marker;
  var resourcePolicy = aws.params.ResourcePolicy;
  var contextEntries = aws.params.ContextEntries;
  var policySourceArn = aws.params.PolicySourceArn;
  var resourceHandlingOption = aws.params.ResourceHandlingOption;
  if (!policySourceArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicySourceArn'];
  }
  if (!actionNames) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ActionNames'];
  }


  // TODO implement code

  var ret = /*S7p*/{
    Marker: '',
    IsTruncated: false,
    EvaluationResults: [ {
      EvalActionName: '',
      EvalDecisionDetails: /*S80*/{} /*Map*/,
      ResourceSpecificResults: [ {
        MissingContextValues: /*S3w*/[ '', /* ...*/ ],
        EvalDecisionDetails: /*S80*/{} /*Map*/,
        EvalResourceDecision: '',
        MatchedStatements: /*S7t*/[ {
          StartPosition: /*S7x*/{
            Column: 0,
            Line: 0,
          },
          EndPosition: /*S7x*/{
            Column: 0,
            Line: 0,
          },
          SourcePolicyType: '',
          SourcePolicyId: '',
        }, /* ...*/ ],
        EvalResourceName: '',
      }, /* ...*/ ],
      EvalResourceName: '',
      MissingContextValues: /*S3w*/[ '', /* ...*/ ],
      EvalDecision: '',
      MatchedStatements: /*S7t*/[ {
          StartPosition: /*S7x*/{
            Column: 0,
            Line: 0,
          },
          EndPosition: /*S7x*/{
            Column: 0,
            Line: 0,
          },
          SourcePolicyType: '',
          SourcePolicyId: '',
        }, /* ...*/ ],
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetAccountAuthorizationDetails = function GetAccountAuthorizationDetails(aws) {
  var marker = aws.params.Marker;
  var maxItems = aws.params.MaxItems /* Type integer */;
  var filter = aws.params.Filter /* Type list */;


  // TODO implement code

  var ret = {
    GroupDetailList: [ {
      AttachedManagedPolicies: /*S39*/[ {
        PolicyArn: '',
        PolicyName: '',
      }, /* ...*/ ],
      CreateDate: awsCommon.timestamp(),
      GroupPolicyList: /*S36*/[ {
        PolicyDocument: '',
        PolicyName: '',
      }, /* ...*/ ],
      GroupId: '',
      Path: '',
      GroupName: '',
      Arn: '',
    }, /* ...*/ ],
    IsTruncated: false,
    Marker: '',
    Policies: [ {
      CreateDate: awsCommon.timestamp(),
      PolicyVersionList: /*S3i*/[ /*S1k*/{
        IsDefaultVersion: false,
        CreateDate: awsCommon.timestamp(),
        VersionId: '',
        Document: '',
      }, /* ...*/ ],
      PolicyName: '',
      Description: '',
      UpdateDate: awsCommon.timestamp(),
      Path: '',
      IsAttachable: false,
      Arn: '',
      PolicyId: '',
      AttachmentCount: 0,
      DefaultVersionId: '',
    }, /* ...*/ ],
    RoleDetailList: [ {
      AttachedManagedPolicies: /*S39*/[ {
        PolicyArn: '',
        PolicyName: '',
      }, /* ...*/ ],
      CreateDate: awsCommon.timestamp(),
      RoleName: '',
      AssumeRolePolicyDocument: '',
      RolePolicyList: /*S36*/[ {
        PolicyDocument: '',
        PolicyName: '',
      }, /* ...*/ ],
      RoleId: '',
      Path: '',
      Arn: '',
      InstanceProfileList: /*S3f*/[ /*Sw*/{
        Roles: /*Sx*/[ /*Sy*/{
          CreateDate: awsCommon.timestamp(),
          RoleName: '',
          AssumeRolePolicyDocument: '',
          RoleId: '',
          Path: '',
          Arn: '',
        }, /* ...*/ ],
        CreateDate: awsCommon.timestamp(),
        InstanceProfileName: '',
        Path: '',
        Arn: '',
        InstanceProfileId: '',
      }, /* ...*/ ],
    }, /* ...*/ ],
    UserDetailList: [ {
      AttachedManagedPolicies: /*S39*/[ {
        PolicyArn: '',
        PolicyName: '',
      }, /* ...*/ ],
      CreateDate: awsCommon.timestamp(),
      UserId: '',
      UserPolicyList: /*S36*/[ {
        PolicyDocument: '',
        PolicyName: '',
      }, /* ...*/ ],
      GroupList: [ '', /* ...*/ ],
      Path: '',
      Arn: '',
      UserName: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListAccountAliases = function ListAccountAliases(aws) {
  var marker = aws.params.Marker;
  var maxItems = aws.params.MaxItems /* Type integer */;


  // TODO implement code

  var ret = {
    Marker: '',
    AccountAliases: [ '', /* ...*/ ],
    IsTruncated: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateRole = function CreateRole(aws) {
  var path = aws.params.Path;
  var roleName = aws.params.RoleName;
  var assumeRolePolicyDocument = aws.params.AssumeRolePolicyDocument;
  if (!roleName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RoleName'];
  }
  if (!assumeRolePolicyDocument) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AssumeRolePolicyDocument'];
  }


  // TODO implement code

  var ret = {
    Role: /*Sy*/{
      CreateDate: awsCommon.timestamp(),
      RoleName: '',
      AssumeRolePolicyDocument: '',
      RoleId: '',
      Path: '',
      Arn: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetSAMLProvider = function GetSAMLProvider(aws) {
  var sAMLProviderArn = aws.params.SAMLProviderArn;
  if (!sAMLProviderArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SAMLProviderArn'];
  }


  // TODO implement code

  var ret = {
    CreateDate: awsCommon.timestamp(),
    ValidUntil: awsCommon.timestamp(),
    SAMLMetadataDocument: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetUser = function GetUser(aws) {
  var userName = aws.params.UserName;


  // TODO implement code

  var ret = {
    User: /*S1t*/{
      CreateDate: awsCommon.timestamp(),
      UserId: '',
      Path: '',
      Arn: '',
      PasswordLastUsed: awsCommon.timestamp(),
      UserName: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetAccountPasswordPolicy = function GetAccountPasswordPolicy(aws) {


  // TODO implement code

  var ret = {
    PasswordPolicy: {
      ExpirePasswords: false,
      RequireNumbers: false,
      MinimumPasswordLength: 0,
      PasswordReusePrevention: 0,
      RequireUppercaseCharacters: false,
      HardExpiry: false,
      RequireSymbols: false,
      AllowUsersToChangePassword: false,
      MaxPasswordAge: 0,
      RequireLowercaseCharacters: false,
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListGroupPolicies = function ListGroupPolicies(aws) {
  var marker = aws.params.Marker;
  var maxItems = aws.params.MaxItems /* Type integer */;
  var groupName = aws.params.GroupName;
  if (!groupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GroupName'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    PolicyNames: /*S5q*/[ '', /* ...*/ ],
    IsTruncated: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateLoginProfile = function CreateLoginProfile(aws) {
  var password = aws.params.Password;
  var passwordResetRequired = aws.params.PasswordResetRequired /* Type boolean */;
  var userName = aws.params.UserName;
  if (!userName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UserName'];
  }
  if (!password) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Password'];
  }


  // TODO implement code

  var ret = {
    LoginProfile: /*S13*/{
      CreateDate: awsCommon.timestamp(),
      PasswordResetRequired: false,
      UserName: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetGroupPolicy = function GetGroupPolicy(aws) {
  var groupName = aws.params.GroupName;
  var policyName = aws.params.PolicyName;
  if (!groupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GroupName'];
  }
  if (!policyName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyName'];
  }


  // TODO implement code

  var ret = {
    PolicyDocument: '',
    GroupName: '',
    PolicyName: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeactivateMFADevice = function DeactivateMFADevice(aws) {
  var serialNumber = aws.params.SerialNumber;
  var userName = aws.params.UserName;
  if (!userName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UserName'];
  }
  if (!serialNumber) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SerialNumber'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeletePolicy = function DeletePolicy(aws) {
  var policyArn = aws.params.PolicyArn;
  if (!policyArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PolicyArn'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.GetInstanceProfile = function GetInstanceProfile(aws) {
  var instanceProfileName = aws.params.InstanceProfileName;
  if (!instanceProfileName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceProfileName'];
  }


  // TODO implement code

  var ret = {
    InstanceProfile: /*Sw*/{
      Roles: /*Sx*/[ /*Sy*/{
        CreateDate: awsCommon.timestamp(),
        RoleName: '',
        AssumeRolePolicyDocument: '',
        RoleId: '',
        Path: '',
        Arn: '',
      }, /* ...*/ ],
      CreateDate: awsCommon.timestamp(),
      InstanceProfileName: '',
      Path: '',
      Arn: '',
      InstanceProfileId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListSSHPublicKeys = function ListSSHPublicKeys(aws) {
  var marker = aws.params.Marker;
  var maxItems = aws.params.MaxItems /* Type integer */;
  var userName = aws.params.UserName;


  // TODO implement code

  var ret = {
    Marker: '',
    IsTruncated: false,
    SSHPublicKeys: [ {
      UploadDate: awsCommon.timestamp(),
      SSHPublicKeyId: '',
      Status: '',
      UserName: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetRole = function GetRole(aws) {
  var roleName = aws.params.RoleName;
  if (!roleName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RoleName'];
  }


  // TODO implement code

  var ret = {
    Role: /*Sy*/{
      CreateDate: awsCommon.timestamp(),
      RoleName: '',
      AssumeRolePolicyDocument: '',
      RoleId: '',
      Path: '',
      Arn: '',
    },
  };
  return [200, ret];
};
