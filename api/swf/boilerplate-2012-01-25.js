'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * Amazon Simple Workflow Service version 2012-01-25
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol json
require('../../lib/aws-common/shape_http')('json', module.exports, null);
// -----------------------------------
module.exports.RecordActivityTaskHeartbeat = function RecordActivityTaskHeartbeat(aws) {
  var taskToken = aws.params.taskToken;
  var details = aws.params.details;
  if (!taskToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter taskToken'];
  }


  // TODO implement code

  var ret = {
    cancelRequested: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListDomains = function ListDomains(aws) {
  var registrationStatus = aws.params.registrationStatus;
  var nextPageToken = aws.params.nextPageToken;
  var reverseOrder = aws.params.reverseOrder /* Type boolean */;
  var maximumPageSize = aws.params.maximumPageSize /* Type integer */;
  if (!registrationStatus) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter registrationStatus'];
  }


  // TODO implement code

  var ret = {
    nextPageToken: '',
    domainInfos: [ /*S12*/{
      name: '',
      description: '',
      status: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CountClosedWorkflowExecutions = function CountClosedWorkflowExecutions(aws) {
  var tagFilter = aws.params.tagFilter;
  var domain = aws.params.domain;
  var closeTimeFilter = aws.params.closeTimeFilter;
  var startTimeFilter = aws.params.startTimeFilter;
  var closeStatusFilter = aws.params.closeStatusFilter;
  var executionFilter = aws.params.executionFilter;
  var typeFilter = aws.params.typeFilter;
  if (!domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter domain'];
  }


  // TODO implement code

  var ret = /*Se*/{
    truncated: false,
    count: 0,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.PollForActivityTask = function PollForActivityTask(aws) {
  var identity = aws.params.identity;
  var domain = aws.params.domain;
  var taskList = aws.params.taskList;
  if (!domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter domain'];
  }
  if (!taskList) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter taskList'];
  }


  // TODO implement code

  var ret = {
    workflowExecution: /*S16*/{
      runId: '',
      workflowId: '',
    },
    taskToken: '',
    activityType: /*Sn*/{
      name: '',
      version: '',
    },
    startedEventId: 0 /*Long*/,
    input: '',
    activityId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeprecateActivityType = function DeprecateActivityType(aws) {
  var domain = aws.params.domain;
  var activityType = aws.params.activityType;
  if (!domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter domain'];
  }
  if (!activityType) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter activityType'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.GetWorkflowExecutionHistory = function GetWorkflowExecutionHistory(aws) {
  var reverseOrder = aws.params.reverseOrder /* Type boolean */;
  var domain = aws.params.domain;
  var nextPageToken = aws.params.nextPageToken;
  var execution = aws.params.execution;
  var maximumPageSize = aws.params.maximumPageSize /* Type integer */;
  if (!domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter domain'];
  }
  if (!execution) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter execution'];
  }


  // TODO implement code

  var ret = {
    events: /*S1t*/[ {
      activityTaskTimedOutEventAttributes: {
        startedEventId: 0 /*Long*/,
        scheduledEventId: 0 /*Long*/,
        details: '',
        timeoutType: '',
      },
      childWorkflowExecutionStartedEventAttributes: {
        initiatedEventId: 0 /*Long*/,
        workflowExecution: /*S16*/{
          runId: '',
          workflowId: '',
        },
        workflowType: /*Sr*/{
          name: '',
          version: '',
        },
      },
      activityTaskFailedEventAttributes: {
        startedEventId: 0 /*Long*/,
        scheduledEventId: 0 /*Long*/,
        details: '',
        reason: '',
      },
      lambdaFunctionStartedEventAttributes: {
        scheduledEventId: 0 /*Long*/,
      },
      markerRecordedEventAttributes: {
        markerName: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        details: '',
      },
      workflowExecutionContinuedAsNewEventAttributes: {
        taskPriority: '',
        lambdaRole: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        taskList: /*Sj*/{
          name: '',
        },
        executionStartToCloseTimeout: '',
        workflowType: /*Sr*/{
          name: '',
          version: '',
        },
        input: '',
        newExecutionRunId: '',
        tagList: /*S1b*/[ '', /* ...*/ ],
        taskStartToCloseTimeout: '',
        childPolicy: '',
      },
      cancelTimerFailedEventAttributes: {
        cause: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        timerId: '',
      },
      startLambdaFunctionFailedEventAttributes: {
        cause: '',
        message: '',
        scheduledEventId: 0 /*Long*/,
      },
      completeWorkflowExecutionFailedEventAttributes: {
        cause: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
      },
      externalWorkflowExecutionSignaledEventAttributes: {
        initiatedEventId: 0 /*Long*/,
        workflowExecution: /*S16*/{
          runId: '',
          workflowId: '',
        },
      },
      childWorkflowExecutionFailedEventAttributes: {
        initiatedEventId: 0 /*Long*/,
        workflowExecution: /*S16*/{
          runId: '',
          workflowId: '',
        },
        startedEventId: 0 /*Long*/,
        details: '',
        workflowType: /*Sr*/{
          name: '',
          version: '',
        },
        reason: '',
      },
      eventTimestamp: awsCommon.timestamp(),
      decisionTaskScheduledEventAttributes: {
        taskPriority: '',
        startToCloseTimeout: '',
        taskList: /*Sj*/{
          name: '',
        },
      },
      scheduleLambdaFunctionFailedEventAttributes: {
        name: '',
        id: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        cause: '',
      },
      workflowExecutionSignaledEventAttributes: {
        input: '',
        externalInitiatedEventId: 0 /*Long*/,
        signalName: '',
        externalWorkflowExecution: /*S16*/{
          runId: '',
          workflowId: '',
        },
      },
      timerFiredEventAttributes: {
        startedEventId: 0 /*Long*/,
        timerId: '',
      },
      eventId: 0 /*Long*/,
      activityTaskCanceledEventAttributes: {
        startedEventId: 0 /*Long*/,
        scheduledEventId: 0 /*Long*/,
        latestCancelRequestedEventId: 0 /*Long*/,
        details: '',
      },
      lambdaFunctionFailedEventAttributes: {
        startedEventId: 0 /*Long*/,
        scheduledEventId: 0 /*Long*/,
        details: '',
        reason: '',
      },
      externalWorkflowExecutionCancelRequestedEventAttributes: {
        initiatedEventId: 0 /*Long*/,
        workflowExecution: /*S16*/{
          runId: '',
          workflowId: '',
        },
      },
      workflowExecutionStartedEventAttributes: {
        taskPriority: '',
        lambdaRole: '',
        parentWorkflowExecution: /*S16*/{
          runId: '',
          workflowId: '',
        },
        input: '',
        tagList: /*S1b*/[ '', /* ...*/ ],
        workflowType: /*Sr*/{
          name: '',
          version: '',
        },
        continuedExecutionRunId: '',
        taskStartToCloseTimeout: '',
        taskList: /*Sj*/{
          name: '',
        },
        parentInitiatedEventId: 0 /*Long*/,
        executionStartToCloseTimeout: '',
        childPolicy: '',
      },
      startTimerFailedEventAttributes: {
        cause: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        timerId: '',
      },
      childWorkflowExecutionCanceledEventAttributes: {
        initiatedEventId: 0 /*Long*/,
        workflowExecution: /*S16*/{
          runId: '',
          workflowId: '',
        },
        startedEventId: 0 /*Long*/,
        workflowType: /*Sr*/{
          name: '',
          version: '',
        },
        details: '',
      },
      decisionTaskCompletedEventAttributes: {
        scheduledEventId: 0 /*Long*/,
        executionContext: '',
        startedEventId: 0 /*Long*/,
      },
      cancelWorkflowExecutionFailedEventAttributes: {
        cause: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
      },
      childWorkflowExecutionCompletedEventAttributes: {
        initiatedEventId: 0 /*Long*/,
        workflowExecution: /*S16*/{
          runId: '',
          workflowId: '',
        },
        result: '',
        startedEventId: 0 /*Long*/,
        workflowType: /*Sr*/{
          name: '',
          version: '',
        },
      },
      workflowExecutionFailedEventAttributes: {
        decisionTaskCompletedEventId: 0 /*Long*/,
        details: '',
        reason: '',
      },
      childWorkflowExecutionTimedOutEventAttributes: {
        initiatedEventId: 0 /*Long*/,
        workflowExecution: /*S16*/{
          runId: '',
          workflowId: '',
        },
        startedEventId: 0 /*Long*/,
        workflowType: /*Sr*/{
          name: '',
          version: '',
        },
        timeoutType: '',
      },
      requestCancelActivityTaskFailedEventAttributes: {
        decisionTaskCompletedEventId: 0 /*Long*/,
        cause: '',
        activityId: '',
      },
      activityTaskScheduledEventAttributes: {
        taskPriority: '',
        control: '',
        heartbeatTimeout: '',
        activityId: '',
        activityType: /*Sn*/{
          name: '',
          version: '',
        },
        scheduleToStartTimeout: '',
        taskList: /*Sj*/{
          name: '',
        },
        startToCloseTimeout: '',
        input: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        scheduleToCloseTimeout: '',
      },
      lambdaFunctionCompletedEventAttributes: {
        startedEventId: 0 /*Long*/,
        result: '',
        scheduledEventId: 0 /*Long*/,
      },
      workflowExecutionCanceledEventAttributes: {
        decisionTaskCompletedEventId: 0 /*Long*/,
        details: '',
      },
      workflowExecutionTimedOutEventAttributes: {
        childPolicy: '',
        timeoutType: '',
      },
      startChildWorkflowExecutionFailedEventAttributes: {
        initiatedEventId: 0 /*Long*/,
        cause: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        workflowId: '',
        control: '',
        workflowType: /*Sr*/{
          name: '',
          version: '',
        },
      },
      scheduleActivityTaskFailedEventAttributes: {
        decisionTaskCompletedEventId: 0 /*Long*/,
        cause: '',
        activityId: '',
        activityType: /*Sn*/{
          name: '',
          version: '',
        },
      },
      lambdaFunctionTimedOutEventAttributes: {
        startedEventId: 0 /*Long*/,
        scheduledEventId: 0 /*Long*/,
        timeoutType: '',
      },
      lambdaFunctionScheduledEventAttributes: {
        name: '',
        id: '',
        input: '',
        startToCloseTimeout: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
      },
      timerStartedEventAttributes: {
        control: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        startToFireTimeout: '',
        timerId: '',
      },
      workflowExecutionCancelRequestedEventAttributes: {
        cause: '',
        externalInitiatedEventId: 0 /*Long*/,
        externalWorkflowExecution: /*S16*/{
          runId: '',
          workflowId: '',
        },
      },
      eventType: '',
      failWorkflowExecutionFailedEventAttributes: {
        cause: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
      },
      workflowExecutionCompletedEventAttributes: {
        decisionTaskCompletedEventId: 0 /*Long*/,
        result: '',
      },
      activityTaskStartedEventAttributes: {
        identity: '',
        scheduledEventId: 0 /*Long*/,
      },
      continueAsNewWorkflowExecutionFailedEventAttributes: {
        cause: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
      },
      requestCancelExternalWorkflowExecutionFailedEventAttributes: {
        initiatedEventId: 0 /*Long*/,
        cause: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        workflowId: '',
        control: '',
        runId: '',
      },
      requestCancelExternalWorkflowExecutionInitiatedEventAttributes: {
        runId: '',
        control: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        workflowId: '',
      },
      activityTaskCancelRequestedEventAttributes: {
        decisionTaskCompletedEventId: 0 /*Long*/,
        activityId: '',
      },
      signalExternalWorkflowExecutionInitiatedEventAttributes: {
        control: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        workflowId: '',
        signalName: '',
        runId: '',
        input: '',
      },
      decisionTaskTimedOutEventAttributes: {
        startedEventId: 0 /*Long*/,
        scheduledEventId: 0 /*Long*/,
        timeoutType: '',
      },
      activityTaskCompletedEventAttributes: {
        startedEventId: 0 /*Long*/,
        result: '',
        scheduledEventId: 0 /*Long*/,
      },
      childWorkflowExecutionTerminatedEventAttributes: {
        initiatedEventId: 0 /*Long*/,
        workflowExecution: /*S16*/{
          runId: '',
          workflowId: '',
        },
        startedEventId: 0 /*Long*/,
        workflowType: /*Sr*/{
          name: '',
          version: '',
        },
      },
      decisionTaskStartedEventAttributes: {
        identity: '',
        scheduledEventId: 0 /*Long*/,
      },
      recordMarkerFailedEventAttributes: {
        markerName: '',
        cause: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
      },
      startChildWorkflowExecutionInitiatedEventAttributes: {
        taskPriority: '',
        control: '',
        lambdaRole: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        input: '',
        tagList: /*S1b*/[ '', /* ...*/ ],
        taskStartToCloseTimeout: '',
        workflowType: /*Sr*/{
          name: '',
          version: '',
        },
        taskList: /*Sj*/{
          name: '',
        },
        workflowId: '',
        executionStartToCloseTimeout: '',
        childPolicy: '',
      },
      workflowExecutionTerminatedEventAttributes: {
        cause: '',
        details: '',
        reason: '',
        childPolicy: '',
      },
      timerCanceledEventAttributes: {
        decisionTaskCompletedEventId: 0 /*Long*/,
        startedEventId: 0 /*Long*/,
        timerId: '',
      },
      signalExternalWorkflowExecutionFailedEventAttributes: {
        initiatedEventId: 0 /*Long*/,
        cause: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        workflowId: '',
        control: '',
        runId: '',
      },
    }, /* ...*/ ],
    nextPageToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeWorkflowType = function DescribeWorkflowType(aws) {
  var domain = aws.params.domain;
  var workflowType = aws.params.workflowType;
  if (!domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter domain'];
  }
  if (!workflowType) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter workflowType'];
  }


  // TODO implement code

  var ret = {
    configuration: {
      defaultTaskList: /*Sj*/{
        name: '',
      },
      defaultTaskPriority: '',
      defaultLambdaRole: '',
      defaultTaskStartToCloseTimeout: '',
      defaultExecutionStartToCloseTimeout: '',
      defaultChildPolicy: '',
    },
    typeInfo: /*S1m*/{
      creationDate: awsCommon.timestamp(),
      deprecationDate: awsCommon.timestamp(),
      description: '',
      workflowType: /*Sr*/{
        name: '',
        version: '',
      },
      status: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CountPendingActivityTasks = function CountPendingActivityTasks(aws) {
  var domain = aws.params.domain;
  var taskList = aws.params.taskList;
  if (!domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter domain'];
  }
  if (!taskList) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter taskList'];
  }


  // TODO implement code

  var ret = /*Sk*/{
    truncated: false,
    count: 0,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RegisterDomain = function RegisterDomain(aws) {
  var name = aws.params.name;
  var workflowExecutionRetentionPeriodInDays = aws.params.workflowExecutionRetentionPeriodInDays;
  var description = aws.params.description;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter name'];
  }
  if (!workflowExecutionRetentionPeriodInDays) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter workflowExecutionRetentionPeriodInDays'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ListWorkflowTypes = function ListWorkflowTypes(aws) {
  var domain = aws.params.domain;
  var reverseOrder = aws.params.reverseOrder /* Type boolean */;
  var maximumPageSize = aws.params.maximumPageSize /* Type integer */;
  var name = aws.params.name;
  var registrationStatus = aws.params.registrationStatus;
  var nextPageToken = aws.params.nextPageToken;
  if (!domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter domain'];
  }
  if (!registrationStatus) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter registrationStatus'];
  }


  // TODO implement code

  var ret = {
    nextPageToken: '',
    typeInfos: [ /*S1m*/{
      creationDate: awsCommon.timestamp(),
      deprecationDate: awsCommon.timestamp(),
      description: '',
      workflowType: /*Sr*/{
        name: '',
        version: '',
      },
      status: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeprecateWorkflowType = function DeprecateWorkflowType(aws) {
  var domain = aws.params.domain;
  var workflowType = aws.params.workflowType;
  if (!domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter domain'];
  }
  if (!workflowType) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter workflowType'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ListOpenWorkflowExecutions = function ListOpenWorkflowExecutions(aws) {
  var executionFilter = aws.params.executionFilter;
  var tagFilter = aws.params.tagFilter;
  var domain = aws.params.domain;
  var startTimeFilter = aws.params.startTimeFilter;
  var maximumPageSize = aws.params.maximumPageSize /* Type integer */;
  var reverseOrder = aws.params.reverseOrder /* Type boolean */;
  var nextPageToken = aws.params.nextPageToken;
  var typeFilter = aws.params.typeFilter;
  if (!domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter domain'];
  }
  if (!startTimeFilter) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter startTimeFilter'];
  }


  // TODO implement code

  var ret = /*S4g*/{
    executionInfos: [ /*S19*/{
      closeStatus: '',
      cancelRequested: false,
      executionStatus: '',
      execution: /*S16*/{
        runId: '',
        workflowId: '',
      },
      parent: /*S16*/{
        runId: '',
        workflowId: '',
      },
      tagList: /*S1b*/[ '', /* ...*/ ],
      workflowType: /*Sr*/{
        name: '',
        version: '',
      },
      closeTimestamp: awsCommon.timestamp(),
      startTimestamp: awsCommon.timestamp(),
    }, /* ...*/ ],
    nextPageToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeWorkflowExecution = function DescribeWorkflowExecution(aws) {
  var domain = aws.params.domain;
  var execution = aws.params.execution;
  if (!domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter domain'];
  }
  if (!execution) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter execution'];
  }


  // TODO implement code

  var ret = {
    executionInfo: /*S19*/{
      closeStatus: '',
      cancelRequested: false,
      executionStatus: '',
      execution: /*S16*/{
        runId: '',
        workflowId: '',
      },
      parent: /*S16*/{
        runId: '',
        workflowId: '',
      },
      tagList: /*S1b*/[ '', /* ...*/ ],
      workflowType: /*Sr*/{
        name: '',
        version: '',
      },
      closeTimestamp: awsCommon.timestamp(),
      startTimestamp: awsCommon.timestamp(),
    },
    executionConfiguration: {
      taskPriority: '',
      lambdaRole: '',
      taskList: /*Sj*/{
        name: '',
      },
      executionStartToCloseTimeout: '',
      taskStartToCloseTimeout: '',
      childPolicy: '',
    },
    openCounts: {
      openDecisionTasks: 0,
      openChildWorkflowExecutions: 0,
      openTimers: 0,
      openActivityTasks: 0,
      openLambdaFunctions: 0,
    },
    latestActivityTaskTimestamp: awsCommon.timestamp(),
    latestExecutionContext: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RespondDecisionTaskCompleted = function RespondDecisionTaskCompleted(aws) {
  var taskToken = aws.params.taskToken;
  var executionContext = aws.params.executionContext;
  var decisions = aws.params.decisions /* Type list */;
  if (!taskToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter taskToken'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.RespondActivityTaskCompleted = function RespondActivityTaskCompleted(aws) {
  var taskToken = aws.params.taskToken;
  var result = aws.params.result;
  if (!taskToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter taskToken'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.RespondActivityTaskCanceled = function RespondActivityTaskCanceled(aws) {
  var taskToken = aws.params.taskToken;
  var details = aws.params.details;
  if (!taskToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter taskToken'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.RegisterActivityType = function RegisterActivityType(aws) {
  var defaultTaskHeartbeatTimeout = aws.params.defaultTaskHeartbeatTimeout;
  var defaultTaskScheduleToStartTimeout = aws.params.defaultTaskScheduleToStartTimeout;
  var defaultTaskScheduleToCloseTimeout = aws.params.defaultTaskScheduleToCloseTimeout;
  var domain = aws.params.domain;
  var version = aws.params.version;
  var description = aws.params.description;
  var name = aws.params.name;
  var defaultTaskStartToCloseTimeout = aws.params.defaultTaskStartToCloseTimeout;
  var defaultTaskList = aws.params.defaultTaskList;
  var defaultTaskPriority = aws.params.defaultTaskPriority;
  if (!domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter domain'];
  }
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter name'];
  }
  if (!version) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter version'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.RespondActivityTaskFailed = function RespondActivityTaskFailed(aws) {
  var taskToken = aws.params.taskToken;
  var details = aws.params.details;
  var reason = aws.params.reason;
  if (!taskToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter taskToken'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.CountPendingDecisionTasks = function CountPendingDecisionTasks(aws) {
  var domain = aws.params.domain;
  var taskList = aws.params.taskList;
  if (!domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter domain'];
  }
  if (!taskList) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter taskList'];
  }


  // TODO implement code

  var ret = /*Sk*/{
    truncated: false,
    count: 0,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RequestCancelWorkflowExecution = function RequestCancelWorkflowExecution(aws) {
  var runId = aws.params.runId;
  var domain = aws.params.domain;
  var workflowId = aws.params.workflowId;
  if (!domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter domain'];
  }
  if (!workflowId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter workflowId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeActivityType = function DescribeActivityType(aws) {
  var domain = aws.params.domain;
  var activityType = aws.params.activityType;
  if (!domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter domain'];
  }
  if (!activityType) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter activityType'];
  }


  // TODO implement code

  var ret = {
    configuration: {
      defaultTaskHeartbeatTimeout: '',
      defaultTaskScheduleToStartTimeout: '',
      defaultTaskScheduleToCloseTimeout: '',
      defaultTaskList: /*Sj*/{
        name: '',
      },
      defaultTaskStartToCloseTimeout: '',
      defaultTaskPriority: '',
    },
    typeInfo: /*Su*/{
      creationDate: awsCommon.timestamp(),
      deprecationDate: awsCommon.timestamp(),
      description: '',
      activityType: /*Sn*/{
        name: '',
        version: '',
      },
      status: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeprecateDomain = function DeprecateDomain(aws) {
  var name = aws.params.name;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter name'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.RegisterWorkflowType = function RegisterWorkflowType(aws) {
  var defaultTaskPriority = aws.params.defaultTaskPriority;
  var domain = aws.params.domain;
  var defaultLambdaRole = aws.params.defaultLambdaRole;
  var version = aws.params.version;
  var description = aws.params.description;
  var name = aws.params.name;
  var defaultTaskStartToCloseTimeout = aws.params.defaultTaskStartToCloseTimeout;
  var defaultTaskList = aws.params.defaultTaskList;
  var defaultExecutionStartToCloseTimeout = aws.params.defaultExecutionStartToCloseTimeout;
  var defaultChildPolicy = aws.params.defaultChildPolicy;
  if (!domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter domain'];
  }
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter name'];
  }
  if (!version) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter version'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ListClosedWorkflowExecutions = function ListClosedWorkflowExecutions(aws) {
  var tagFilter = aws.params.tagFilter;
  var maximumPageSize = aws.params.maximumPageSize /* Type integer */;
  var domain = aws.params.domain;
  var closeTimeFilter = aws.params.closeTimeFilter;
  var startTimeFilter = aws.params.startTimeFilter;
  var closeStatusFilter = aws.params.closeStatusFilter;
  var reverseOrder = aws.params.reverseOrder /* Type boolean */;
  var executionFilter = aws.params.executionFilter;
  var typeFilter = aws.params.typeFilter;
  var nextPageToken = aws.params.nextPageToken;
  if (!domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter domain'];
  }


  // TODO implement code

  var ret = /*S4g*/{
    executionInfos: [ /*S19*/{
      closeStatus: '',
      cancelRequested: false,
      executionStatus: '',
      execution: /*S16*/{
        runId: '',
        workflowId: '',
      },
      parent: /*S16*/{
        runId: '',
        workflowId: '',
      },
      tagList: /*S1b*/[ '', /* ...*/ ],
      workflowType: /*Sr*/{
        name: '',
        version: '',
      },
      closeTimestamp: awsCommon.timestamp(),
      startTimestamp: awsCommon.timestamp(),
    }, /* ...*/ ],
    nextPageToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListActivityTypes = function ListActivityTypes(aws) {
  var domain = aws.params.domain;
  var reverseOrder = aws.params.reverseOrder /* Type boolean */;
  var maximumPageSize = aws.params.maximumPageSize /* Type integer */;
  var name = aws.params.name;
  var registrationStatus = aws.params.registrationStatus;
  var nextPageToken = aws.params.nextPageToken;
  if (!domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter domain'];
  }
  if (!registrationStatus) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter registrationStatus'];
  }


  // TODO implement code

  var ret = {
    nextPageToken: '',
    typeInfos: [ /*Su*/{
      creationDate: awsCommon.timestamp(),
      deprecationDate: awsCommon.timestamp(),
      description: '',
      activityType: /*Sn*/{
        name: '',
        version: '',
      },
      status: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.StartWorkflowExecution = function StartWorkflowExecution(aws) {
  var taskPriority = aws.params.taskPriority;
  var lambdaRole = aws.params.lambdaRole;
  var domain = aws.params.domain;
  var taskList = aws.params.taskList;
  var workflowId = aws.params.workflowId;
  var childPolicy = aws.params.childPolicy;
  var executionStartToCloseTimeout = aws.params.executionStartToCloseTimeout;
  var input = aws.params.input;
  var tagList = aws.params.tagList;
  var workflowType = aws.params.workflowType;
  var taskStartToCloseTimeout = aws.params.taskStartToCloseTimeout;
  if (!domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter domain'];
  }
  if (!workflowId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter workflowId'];
  }
  if (!workflowType) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter workflowType'];
  }


  // TODO implement code

  var ret = {
    runId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.PollForDecisionTask = function PollForDecisionTask(aws) {
  var domain = aws.params.domain;
  var taskList = aws.params.taskList;
  var maximumPageSize = aws.params.maximumPageSize /* Type integer */;
  var reverseOrder = aws.params.reverseOrder /* Type boolean */;
  var identity = aws.params.identity;
  var nextPageToken = aws.params.nextPageToken;
  if (!domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter domain'];
  }
  if (!taskList) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter taskList'];
  }


  // TODO implement code

  var ret = {
    events: /*S1t*/[ {
      activityTaskTimedOutEventAttributes: {
        startedEventId: 0 /*Long*/,
        scheduledEventId: 0 /*Long*/,
        details: '',
        timeoutType: '',
      },
      childWorkflowExecutionStartedEventAttributes: {
        initiatedEventId: 0 /*Long*/,
        workflowExecution: /*S16*/{
          runId: '',
          workflowId: '',
        },
        workflowType: /*Sr*/{
          name: '',
          version: '',
        },
      },
      activityTaskFailedEventAttributes: {
        startedEventId: 0 /*Long*/,
        scheduledEventId: 0 /*Long*/,
        details: '',
        reason: '',
      },
      lambdaFunctionStartedEventAttributes: {
        scheduledEventId: 0 /*Long*/,
      },
      markerRecordedEventAttributes: {
        markerName: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        details: '',
      },
      workflowExecutionContinuedAsNewEventAttributes: {
        taskPriority: '',
        lambdaRole: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        taskList: /*Sj*/{
          name: '',
        },
        executionStartToCloseTimeout: '',
        workflowType: /*Sr*/{
          name: '',
          version: '',
        },
        input: '',
        newExecutionRunId: '',
        tagList: /*S1b*/[ '', /* ...*/ ],
        taskStartToCloseTimeout: '',
        childPolicy: '',
      },
      cancelTimerFailedEventAttributes: {
        cause: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        timerId: '',
      },
      startLambdaFunctionFailedEventAttributes: {
        cause: '',
        message: '',
        scheduledEventId: 0 /*Long*/,
      },
      completeWorkflowExecutionFailedEventAttributes: {
        cause: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
      },
      externalWorkflowExecutionSignaledEventAttributes: {
        initiatedEventId: 0 /*Long*/,
        workflowExecution: /*S16*/{
          runId: '',
          workflowId: '',
        },
      },
      childWorkflowExecutionFailedEventAttributes: {
        initiatedEventId: 0 /*Long*/,
        workflowExecution: /*S16*/{
          runId: '',
          workflowId: '',
        },
        startedEventId: 0 /*Long*/,
        details: '',
        workflowType: /*Sr*/{
          name: '',
          version: '',
        },
        reason: '',
      },
      eventTimestamp: awsCommon.timestamp(),
      decisionTaskScheduledEventAttributes: {
        taskPriority: '',
        startToCloseTimeout: '',
        taskList: /*Sj*/{
          name: '',
        },
      },
      scheduleLambdaFunctionFailedEventAttributes: {
        name: '',
        id: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        cause: '',
      },
      workflowExecutionSignaledEventAttributes: {
        input: '',
        externalInitiatedEventId: 0 /*Long*/,
        signalName: '',
        externalWorkflowExecution: /*S16*/{
          runId: '',
          workflowId: '',
        },
      },
      timerFiredEventAttributes: {
        startedEventId: 0 /*Long*/,
        timerId: '',
      },
      eventId: 0 /*Long*/,
      activityTaskCanceledEventAttributes: {
        startedEventId: 0 /*Long*/,
        scheduledEventId: 0 /*Long*/,
        latestCancelRequestedEventId: 0 /*Long*/,
        details: '',
      },
      lambdaFunctionFailedEventAttributes: {
        startedEventId: 0 /*Long*/,
        scheduledEventId: 0 /*Long*/,
        details: '',
        reason: '',
      },
      externalWorkflowExecutionCancelRequestedEventAttributes: {
        initiatedEventId: 0 /*Long*/,
        workflowExecution: /*S16*/{
          runId: '',
          workflowId: '',
        },
      },
      workflowExecutionStartedEventAttributes: {
        taskPriority: '',
        lambdaRole: '',
        parentWorkflowExecution: /*S16*/{
          runId: '',
          workflowId: '',
        },
        input: '',
        tagList: /*S1b*/[ '', /* ...*/ ],
        workflowType: /*Sr*/{
          name: '',
          version: '',
        },
        continuedExecutionRunId: '',
        taskStartToCloseTimeout: '',
        taskList: /*Sj*/{
          name: '',
        },
        parentInitiatedEventId: 0 /*Long*/,
        executionStartToCloseTimeout: '',
        childPolicy: '',
      },
      startTimerFailedEventAttributes: {
        cause: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        timerId: '',
      },
      childWorkflowExecutionCanceledEventAttributes: {
        initiatedEventId: 0 /*Long*/,
        workflowExecution: /*S16*/{
          runId: '',
          workflowId: '',
        },
        startedEventId: 0 /*Long*/,
        workflowType: /*Sr*/{
          name: '',
          version: '',
        },
        details: '',
      },
      decisionTaskCompletedEventAttributes: {
        scheduledEventId: 0 /*Long*/,
        executionContext: '',
        startedEventId: 0 /*Long*/,
      },
      cancelWorkflowExecutionFailedEventAttributes: {
        cause: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
      },
      childWorkflowExecutionCompletedEventAttributes: {
        initiatedEventId: 0 /*Long*/,
        workflowExecution: /*S16*/{
          runId: '',
          workflowId: '',
        },
        result: '',
        startedEventId: 0 /*Long*/,
        workflowType: /*Sr*/{
          name: '',
          version: '',
        },
      },
      workflowExecutionFailedEventAttributes: {
        decisionTaskCompletedEventId: 0 /*Long*/,
        details: '',
        reason: '',
      },
      childWorkflowExecutionTimedOutEventAttributes: {
        initiatedEventId: 0 /*Long*/,
        workflowExecution: /*S16*/{
          runId: '',
          workflowId: '',
        },
        startedEventId: 0 /*Long*/,
        workflowType: /*Sr*/{
          name: '',
          version: '',
        },
        timeoutType: '',
      },
      requestCancelActivityTaskFailedEventAttributes: {
        decisionTaskCompletedEventId: 0 /*Long*/,
        cause: '',
        activityId: '',
      },
      activityTaskScheduledEventAttributes: {
        taskPriority: '',
        control: '',
        heartbeatTimeout: '',
        activityId: '',
        activityType: /*Sn*/{
          name: '',
          version: '',
        },
        scheduleToStartTimeout: '',
        taskList: /*Sj*/{
          name: '',
        },
        startToCloseTimeout: '',
        input: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        scheduleToCloseTimeout: '',
      },
      lambdaFunctionCompletedEventAttributes: {
        startedEventId: 0 /*Long*/,
        result: '',
        scheduledEventId: 0 /*Long*/,
      },
      workflowExecutionCanceledEventAttributes: {
        decisionTaskCompletedEventId: 0 /*Long*/,
        details: '',
      },
      workflowExecutionTimedOutEventAttributes: {
        childPolicy: '',
        timeoutType: '',
      },
      startChildWorkflowExecutionFailedEventAttributes: {
        initiatedEventId: 0 /*Long*/,
        cause: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        workflowId: '',
        control: '',
        workflowType: /*Sr*/{
          name: '',
          version: '',
        },
      },
      scheduleActivityTaskFailedEventAttributes: {
        decisionTaskCompletedEventId: 0 /*Long*/,
        cause: '',
        activityId: '',
        activityType: /*Sn*/{
          name: '',
          version: '',
        },
      },
      lambdaFunctionTimedOutEventAttributes: {
        startedEventId: 0 /*Long*/,
        scheduledEventId: 0 /*Long*/,
        timeoutType: '',
      },
      lambdaFunctionScheduledEventAttributes: {
        name: '',
        id: '',
        input: '',
        startToCloseTimeout: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
      },
      timerStartedEventAttributes: {
        control: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        startToFireTimeout: '',
        timerId: '',
      },
      workflowExecutionCancelRequestedEventAttributes: {
        cause: '',
        externalInitiatedEventId: 0 /*Long*/,
        externalWorkflowExecution: /*S16*/{
          runId: '',
          workflowId: '',
        },
      },
      eventType: '',
      failWorkflowExecutionFailedEventAttributes: {
        cause: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
      },
      workflowExecutionCompletedEventAttributes: {
        decisionTaskCompletedEventId: 0 /*Long*/,
        result: '',
      },
      activityTaskStartedEventAttributes: {
        identity: '',
        scheduledEventId: 0 /*Long*/,
      },
      continueAsNewWorkflowExecutionFailedEventAttributes: {
        cause: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
      },
      requestCancelExternalWorkflowExecutionFailedEventAttributes: {
        initiatedEventId: 0 /*Long*/,
        cause: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        workflowId: '',
        control: '',
        runId: '',
      },
      requestCancelExternalWorkflowExecutionInitiatedEventAttributes: {
        runId: '',
        control: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        workflowId: '',
      },
      activityTaskCancelRequestedEventAttributes: {
        decisionTaskCompletedEventId: 0 /*Long*/,
        activityId: '',
      },
      signalExternalWorkflowExecutionInitiatedEventAttributes: {
        control: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        workflowId: '',
        signalName: '',
        runId: '',
        input: '',
      },
      decisionTaskTimedOutEventAttributes: {
        startedEventId: 0 /*Long*/,
        scheduledEventId: 0 /*Long*/,
        timeoutType: '',
      },
      activityTaskCompletedEventAttributes: {
        startedEventId: 0 /*Long*/,
        result: '',
        scheduledEventId: 0 /*Long*/,
      },
      childWorkflowExecutionTerminatedEventAttributes: {
        initiatedEventId: 0 /*Long*/,
        workflowExecution: /*S16*/{
          runId: '',
          workflowId: '',
        },
        startedEventId: 0 /*Long*/,
        workflowType: /*Sr*/{
          name: '',
          version: '',
        },
      },
      decisionTaskStartedEventAttributes: {
        identity: '',
        scheduledEventId: 0 /*Long*/,
      },
      recordMarkerFailedEventAttributes: {
        markerName: '',
        cause: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
      },
      startChildWorkflowExecutionInitiatedEventAttributes: {
        taskPriority: '',
        control: '',
        lambdaRole: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        input: '',
        tagList: /*S1b*/[ '', /* ...*/ ],
        taskStartToCloseTimeout: '',
        workflowType: /*Sr*/{
          name: '',
          version: '',
        },
        taskList: /*Sj*/{
          name: '',
        },
        workflowId: '',
        executionStartToCloseTimeout: '',
        childPolicy: '',
      },
      workflowExecutionTerminatedEventAttributes: {
        cause: '',
        details: '',
        reason: '',
        childPolicy: '',
      },
      timerCanceledEventAttributes: {
        decisionTaskCompletedEventId: 0 /*Long*/,
        startedEventId: 0 /*Long*/,
        timerId: '',
      },
      signalExternalWorkflowExecutionFailedEventAttributes: {
        initiatedEventId: 0 /*Long*/,
        cause: '',
        decisionTaskCompletedEventId: 0 /*Long*/,
        workflowId: '',
        control: '',
        runId: '',
      },
    }, /* ...*/ ],
    workflowExecution: /*S16*/{
          runId: '',
          workflowId: '',
        },
    taskToken: '',
    startedEventId: 0 /*Long*/,
    nextPageToken: '',
    workflowType: /*Sr*/{
          name: '',
          version: '',
        },
    previousStartedEventId: 0 /*Long*/,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CountOpenWorkflowExecutions = function CountOpenWorkflowExecutions(aws) {
  var executionFilter = aws.params.executionFilter;
  var tagFilter = aws.params.tagFilter;
  var domain = aws.params.domain;
  var startTimeFilter = aws.params.startTimeFilter;
  var typeFilter = aws.params.typeFilter;
  if (!domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter domain'];
  }
  if (!startTimeFilter) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter startTimeFilter'];
  }


  // TODO implement code

  var ret = /*Se*/{
    truncated: false,
    count: 0,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.TerminateWorkflowExecution = function TerminateWorkflowExecution(aws) {
  var domain = aws.params.domain;
  var workflowId = aws.params.workflowId;
  var details = aws.params.details;
  var runId = aws.params.runId;
  var childPolicy = aws.params.childPolicy;
  var reason = aws.params.reason;
  if (!domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter domain'];
  }
  if (!workflowId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter workflowId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeDomain = function DescribeDomain(aws) {
  var name = aws.params.name;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter name'];
  }


  // TODO implement code

  var ret = {
    configuration: {
      workflowExecutionRetentionPeriodInDays: '',
    },
    domainInfo: /*S12*/{
      name: '',
      description: '',
      status: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.SignalWorkflowExecution = function SignalWorkflowExecution(aws) {
  var runId = aws.params.runId;
  var input = aws.params.input;
  var domain = aws.params.domain;
  var signalName = aws.params.signalName;
  var workflowId = aws.params.workflowId;
  if (!domain) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter domain'];
  }
  if (!workflowId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter workflowId'];
  }
  if (!signalName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter signalName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
