'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * Amazon Simple Workflow Service version 2012-01-25
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.PollForActivityTask = function PollForActivityTask(aws) {
        var domain = aws.params.domain;
        var taskList = aws.params.taskList;
        var identity = aws.params.identity;
        if (! domain) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domain"];
        }        if (! taskList) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter taskList"];
        }

        // TODO implement code

        var ret = {
            startedEventId: 0 /*long*/,
            workflowExecution: /*S16*/{
                workflowId: "",
                runId: ""
            },
            activityId: "",
            taskToken: "",
            input: "",
            activityType: /*Sn*/{
                version: "",
                name: ""
            }
        };
        return [200, ret];
    }
module.exports.DeprecateDomain = function DeprecateDomain(aws) {
        var name = aws.params.name;
        if (! name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter name"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ListWorkflowTypes = function ListWorkflowTypes(aws) {
        var domain = aws.params.domain;
        var name = aws.params.name;
        var maximumPageSize = aws.params.maximumPageSize /* integer */;
        var registrationStatus = aws.params.registrationStatus;
        var nextPageToken = aws.params.nextPageToken;
        var reverseOrder = aws.params.reverseOrder /* boolean */;
        if (! domain) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domain"];
        }        if (! registrationStatus) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter registrationStatus"];
        }

        // TODO implement code

        var ret = {
            nextPageToken: "",
            typeInfos: [ /*S1m*/{
                creationDate: now(),
                workflowType: /*Sr*/{
                    version: "",
                    name: ""
                },
                status: "",
                description: "",
                deprecationDate: now()
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CountClosedWorkflowExecutions = function CountClosedWorkflowExecutions(aws) {
        var closeStatusFilter = aws.params.closeStatusFilter;
        var domain = aws.params.domain;
        var tagFilter = aws.params.tagFilter;
        var startTimeFilter = aws.params.startTimeFilter;
        var typeFilter = aws.params.typeFilter;
        var closeTimeFilter = aws.params.closeTimeFilter;
        var executionFilter = aws.params.executionFilter;
        if (! domain) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domain"];
        }

        // TODO implement code

        var ret = /*Se*/{
            count: 0,
            truncated: false
        };
        return [200, ret];
    }
module.exports.RespondActivityTaskFailed = function RespondActivityTaskFailed(aws) {
        var details = aws.params.details;
        var taskToken = aws.params.taskToken;
        var reason = aws.params.reason;
        if (! taskToken) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter taskToken"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeDomain = function DescribeDomain(aws) {
        var name = aws.params.name;
        if (! name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter name"];
        }

        // TODO implement code

        var ret = {
            domainInfo: /*S12*/{
                status: "",
                name: "",
                description: ""
            },
            configuration: {
                workflowExecutionRetentionPeriodInDays: ""
            }
        };
        return [200, ret];
    }
module.exports.ListDomains = function ListDomains(aws) {
        var maximumPageSize = aws.params.maximumPageSize /* integer */;
        var registrationStatus = aws.params.registrationStatus;
        var nextPageToken = aws.params.nextPageToken;
        var reverseOrder = aws.params.reverseOrder /* boolean */;
        if (! registrationStatus) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter registrationStatus"];
        }

        // TODO implement code

        var ret = {
            domainInfos: [ /*S12*/{
                status: "",
                name: "",
                description: ""
            } /*, ...*/ ],
            nextPageToken: ""
        };
        return [200, ret];
    }
module.exports.CountPendingActivityTasks = function CountPendingActivityTasks(aws) {
        var domain = aws.params.domain;
        var taskList = aws.params.taskList;
        if (! domain) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domain"];
        }        if (! taskList) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter taskList"];
        }

        // TODO implement code

        var ret = /*Sk*/{
            count: 0,
            truncated: false
        };
        return [200, ret];
    }
module.exports.RegisterWorkflowType = function RegisterWorkflowType(aws) {
        var defaultTaskPriority = aws.params.defaultTaskPriority;
        var domain = aws.params.domain;
        var defaultChildPolicy = aws.params.defaultChildPolicy;
        var name = aws.params.name;
        var defaultLambdaRole = aws.params.defaultLambdaRole;
        var defaultTaskStartToCloseTimeout = aws.params.defaultTaskStartToCloseTimeout;
        var version = aws.params.version;
        var defaultExecutionStartToCloseTimeout = aws.params.defaultExecutionStartToCloseTimeout;
        var description = aws.params.description;
        var defaultTaskList = aws.params.defaultTaskList;
        if (! domain) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domain"];
        }        if (! name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter name"];
        }        if (! version) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter version"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ListActivityTypes = function ListActivityTypes(aws) {
        var domain = aws.params.domain;
        var name = aws.params.name;
        var maximumPageSize = aws.params.maximumPageSize /* integer */;
        var registrationStatus = aws.params.registrationStatus;
        var nextPageToken = aws.params.nextPageToken;
        var reverseOrder = aws.params.reverseOrder /* boolean */;
        if (! domain) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domain"];
        }        if (! registrationStatus) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter registrationStatus"];
        }

        // TODO implement code

        var ret = {
            nextPageToken: "",
            typeInfos: [ /*Su*/{
                creationDate: now(),
                activityType: /*Sn*/{
                    version: "",
                    name: ""
                },
                status: "",
                description: "",
                deprecationDate: now()
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.RegisterActivityType = function RegisterActivityType(aws) {
        var defaultTaskHeartbeatTimeout = aws.params.defaultTaskHeartbeatTimeout;
        var domain = aws.params.domain;
        var name = aws.params.name;
        var defaultTaskStartToCloseTimeout = aws.params.defaultTaskStartToCloseTimeout;
        var defaultTaskScheduleToCloseTimeout = aws.params.defaultTaskScheduleToCloseTimeout;
        var version = aws.params.version;
        var defaultTaskScheduleToStartTimeout = aws.params.defaultTaskScheduleToStartTimeout;
        var defaultTaskList = aws.params.defaultTaskList;
        var description = aws.params.description;
        var defaultTaskPriority = aws.params.defaultTaskPriority;
        if (! domain) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domain"];
        }        if (! name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter name"];
        }        if (! version) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter version"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.RequestCancelWorkflowExecution = function RequestCancelWorkflowExecution(aws) {
        var workflowId = aws.params.workflowId;
        var domain = aws.params.domain;
        var runId = aws.params.runId;
        if (! domain) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domain"];
        }        if (! workflowId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter workflowId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.RecordActivityTaskHeartbeat = function RecordActivityTaskHeartbeat(aws) {
        var details = aws.params.details;
        var taskToken = aws.params.taskToken;
        if (! taskToken) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter taskToken"];
        }

        // TODO implement code

        var ret = {
            cancelRequested: false
        };
        return [200, ret];
    }
module.exports.RespondDecisionTaskCompleted = function RespondDecisionTaskCompleted(aws) {
        var taskToken = aws.params.taskToken;
        var executionContext = aws.params.executionContext;
        var decisions = aws.params.decisions /* list */;
        if (! taskToken) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter taskToken"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.GetWorkflowExecutionHistory = function GetWorkflowExecutionHistory(aws) {
        var domain = aws.params.domain;
        var maximumPageSize = aws.params.maximumPageSize /* integer */;
        var execution = aws.params.execution;
        var nextPageToken = aws.params.nextPageToken;
        var reverseOrder = aws.params.reverseOrder /* boolean */;
        if (! domain) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domain"];
        }        if (! execution) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter execution"];
        }

        // TODO implement code

        var ret = {
            events: /*S1t*/[ {
                scheduleActivityTaskFailedEventAttributes: {
                    activityId: "",
                    activityType: /*Sn*/{
                        version: "",
                        name: ""
                    },
                    cause: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                decisionTaskScheduledEventAttributes: {
                    startToCloseTimeout: "",
                    taskPriority: "",
                    taskList: /*Sj*/{
                        name: ""
                    }
                },
                lambdaFunctionFailedEventAttributes: {
                    details: "",
                    startedEventId: 0 /*long*/,
                    scheduledEventId: 0 /*long*/,
                    reason: ""
                },
                requestCancelActivityTaskFailedEventAttributes: {
                    activityId: "",
                    cause: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                activityTaskStartedEventAttributes: {
                    scheduledEventId: 0 /*long*/,
                    identity: ""
                },
                failWorkflowExecutionFailedEventAttributes: {
                    cause: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                signalExternalWorkflowExecutionInitiatedEventAttributes: {
                    workflowId: "",
                    control: "",
                    decisionTaskCompletedEventId: 0 /*long*/,
                    input: "",
                    runId: "",
                    signalName: ""
                },
                workflowExecutionCancelRequestedEventAttributes: {
                    cause: "",
                    externalWorkflowExecution: /*S16*/{
                        workflowId: "",
                        runId: ""
                    },
                    externalInitiatedEventId: 0 /*long*/
                },
                externalWorkflowExecutionSignaledEventAttributes: {
                    initiatedEventId: 0 /*long*/,
                    workflowExecution: /*S16*/{
                        workflowId: "",
                        runId: ""
                    }
                },
                workflowExecutionCanceledEventAttributes: {
                    details: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                eventId: 0 /*long*/,
                decisionTaskTimedOutEventAttributes: {
                    startedEventId: 0 /*long*/,
                    scheduledEventId: 0 /*long*/,
                    timeoutType: ""
                },
                activityTaskCompletedEventAttributes: {
                    startedEventId: 0 /*long*/,
                    scheduledEventId: 0 /*long*/,
                    result: ""
                },
                recordMarkerFailedEventAttributes: {
                    cause: "",
                    markerName: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                childWorkflowExecutionTimedOutEventAttributes: {
                    startedEventId: 0 /*long*/,
                    workflowType: /*Sr*/{
                        version: "",
                        name: ""
                    },
                    timeoutType: "",
                    initiatedEventId: 0 /*long*/,
                    workflowExecution: /*S16*/{
                        workflowId: "",
                        runId: ""
                    }
                },
                continueAsNewWorkflowExecutionFailedEventAttributes: {
                    cause: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                childWorkflowExecutionTerminatedEventAttributes: {
                    startedEventId: 0 /*long*/,
                    workflowType: /*Sr*/{
                        version: "",
                        name: ""
                    },
                    initiatedEventId: 0 /*long*/,
                    workflowExecution: /*S16*/{
                        workflowId: "",
                        runId: ""
                    }
                },
                workflowExecutionStartedEventAttributes: {
                    workflowType: /*Sr*/{
                        version: "",
                        name: ""
                    },
                    childPolicy: "",
                    parentWorkflowExecution: /*S16*/{
                        workflowId: "",
                        runId: ""
                    },
                    input: "",
                    lambdaRole: "",
                    tagList: /*S1b*/[ "" /*, ...*/ ],
                    executionStartToCloseTimeout: "",
                    parentInitiatedEventId: 0 /*long*/,
                    taskPriority: "",
                    continuedExecutionRunId: "",
                    taskStartToCloseTimeout: "",
                    taskList: /*Sj*/{
                        name: ""
                    }
                },
                childWorkflowExecutionStartedEventAttributes: {
                    workflowType: /*Sr*/{
                        version: "",
                        name: ""
                    },
                    initiatedEventId: 0 /*long*/,
                    workflowExecution: /*S16*/{
                        workflowId: "",
                        runId: ""
                    }
                },
                startChildWorkflowExecutionInitiatedEventAttributes: {
                    workflowId: "",
                    workflowType: /*Sr*/{
                        version: "",
                        name: ""
                    },
                    childPolicy: "",
                    input: "",
                    tagList: /*S1b*/[ "" /*, ...*/ ],
                    control: "",
                    executionStartToCloseTimeout: "",
                    taskPriority: "",
                    lambdaRole: "",
                    decisionTaskCompletedEventId: 0 /*long*/,
                    taskStartToCloseTimeout: "",
                    taskList: /*Sj*/{
                        name: ""
                    }
                },
                startTimerFailedEventAttributes: {
                    timerId: "",
                    cause: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                workflowExecutionTimedOutEventAttributes: {
                    childPolicy: "",
                    timeoutType: ""
                },
                eventType: "",
                lambdaFunctionStartedEventAttributes: {
                    scheduledEventId: 0 /*long*/
                },
                cancelWorkflowExecutionFailedEventAttributes: {
                    cause: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                startLambdaFunctionFailedEventAttributes: {
                    cause: "",
                    scheduledEventId: 0 /*long*/,
                    message: ""
                },
                activityTaskCanceledEventAttributes: {
                    details: "",
                    startedEventId: 0 /*long*/,
                    scheduledEventId: 0 /*long*/,
                    latestCancelRequestedEventId: 0 /*long*/
                },
                timerFiredEventAttributes: {
                    startedEventId: 0 /*long*/,
                    timerId: ""
                },
                workflowExecutionCompletedEventAttributes: {
                    result: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                activityTaskCancelRequestedEventAttributes: {
                    activityId: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                lambdaFunctionScheduledEventAttributes: {
                    input: "",
                    name: "",
                    startToCloseTimeout: "",
                    id: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                decisionTaskCompletedEventAttributes: {
                    startedEventId: 0 /*long*/,
                    scheduledEventId: 0 /*long*/,
                    executionContext: ""
                },
                startChildWorkflowExecutionFailedEventAttributes: {
                    workflowId: "",
                    workflowType: /*Sr*/{
                        version: "",
                        name: ""
                    },
                    initiatedEventId: 0 /*long*/,
                    decisionTaskCompletedEventId: 0 /*long*/,
                    cause: "",
                    control: ""
                },
                activityTaskFailedEventAttributes: {
                    details: "",
                    startedEventId: 0 /*long*/,
                    scheduledEventId: 0 /*long*/,
                    reason: ""
                },
                activityTaskTimedOutEventAttributes: {
                    details: "",
                    startedEventId: 0 /*long*/,
                    scheduledEventId: 0 /*long*/,
                    timeoutType: ""
                },
                childWorkflowExecutionCompletedEventAttributes: {
                    startedEventId: 0 /*long*/,
                    workflowType: /*Sr*/{
                        version: "",
                        name: ""
                    },
                    initiatedEventId: 0 /*long*/,
                    result: "",
                    workflowExecution: /*S16*/{
                        workflowId: "",
                        runId: ""
                    }
                },
                signalExternalWorkflowExecutionFailedEventAttributes: {
                    workflowId: "",
                    cause: "",
                    initiatedEventId: 0 /*long*/,
                    decisionTaskCompletedEventId: 0 /*long*/,
                    control: "",
                    runId: ""
                },
                externalWorkflowExecutionCancelRequestedEventAttributes: {
                    initiatedEventId: 0 /*long*/,
                    workflowExecution: /*S16*/{
                        workflowId: "",
                        runId: ""
                    }
                },
                markerRecordedEventAttributes: {
                    details: "",
                    markerName: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                cancelTimerFailedEventAttributes: {
                    timerId: "",
                    cause: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                workflowExecutionContinuedAsNewEventAttributes: {
                    executionStartToCloseTimeout: "",
                    workflowType: /*Sr*/{
                        version: "",
                        name: ""
                    },
                    childPolicy: "",
                    taskPriority: "",
                    newExecutionRunId: "",
                    taskStartToCloseTimeout: "",
                    decisionTaskCompletedEventId: 0 /*long*/,
                    input: "",
                    lambdaRole: "",
                    taskList: /*Sj*/{
                        name: ""
                    },
                    tagList: /*S1b*/[ "" /*, ...*/ ]
                },
                lambdaFunctionTimedOutEventAttributes: {
                    startedEventId: 0 /*long*/,
                    scheduledEventId: 0 /*long*/,
                    timeoutType: ""
                },
                timerCanceledEventAttributes: {
                    startedEventId: 0 /*long*/,
                    timerId: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                eventTimestamp: now(),
                lambdaFunctionCompletedEventAttributes: {
                    startedEventId: 0 /*long*/,
                    scheduledEventId: 0 /*long*/,
                    result: ""
                },
                completeWorkflowExecutionFailedEventAttributes: {
                    cause: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                childWorkflowExecutionCanceledEventAttributes: {
                    details: "",
                    startedEventId: 0 /*long*/,
                    workflowType: /*Sr*/{
                        version: "",
                        name: ""
                    },
                    initiatedEventId: 0 /*long*/,
                    workflowExecution: /*S16*/{
                        workflowId: "",
                        runId: ""
                    }
                },
                workflowExecutionFailedEventAttributes: {
                    details: "",
                    decisionTaskCompletedEventId: 0 /*long*/,
                    reason: ""
                },
                workflowExecutionSignaledEventAttributes: {
                    input: "",
                    externalWorkflowExecution: /*S16*/{
                        workflowId: "",
                        runId: ""
                    },
                    externalInitiatedEventId: 0 /*long*/,
                    signalName: ""
                },
                requestCancelExternalWorkflowExecutionFailedEventAttributes: {
                    workflowId: "",
                    cause: "",
                    initiatedEventId: 0 /*long*/,
                    decisionTaskCompletedEventId: 0 /*long*/,
                    control: "",
                    runId: ""
                },
                timerStartedEventAttributes: {
                    startToFireTimeout: "",
                    timerId: "",
                    decisionTaskCompletedEventId: 0 /*long*/,
                    control: ""
                },
                activityTaskScheduledEventAttributes: {
                    taskPriority: "",
                    heartbeatTimeout: "",
                    scheduleToCloseTimeout: "",
                    input: "",
                    scheduleToStartTimeout: "",
                    activityId: "",
                    activityType: /*Sn*/{
                        version: "",
                        name: ""
                    },
                    decisionTaskCompletedEventId: 0 /*long*/,
                    startToCloseTimeout: "",
                    taskList: /*Sj*/{
                        name: ""
                    },
                    control: ""
                },
                childWorkflowExecutionFailedEventAttributes: {
                    details: "",
                    startedEventId: 0 /*long*/,
                    workflowType: /*Sr*/{
                        version: "",
                        name: ""
                    },
                    initiatedEventId: 0 /*long*/,
                    workflowExecution: /*S16*/{
                        workflowId: "",
                        runId: ""
                    },
                    reason: ""
                },
                scheduleLambdaFunctionFailedEventAttributes: {
                    cause: "",
                    name: "",
                    id: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                decisionTaskStartedEventAttributes: {
                    scheduledEventId: 0 /*long*/,
                    identity: ""
                },
                requestCancelExternalWorkflowExecutionInitiatedEventAttributes: {
                    workflowId: "",
                    control: "",
                    decisionTaskCompletedEventId: 0 /*long*/,
                    runId: ""
                },
                workflowExecutionTerminatedEventAttributes: {
                    details: "",
                    cause: "",
                    childPolicy: "",
                    reason: ""
                }
            } /*, ...*/ ],
            nextPageToken: ""
        };
        return [200, ret];
    }
module.exports.SignalWorkflowExecution = function SignalWorkflowExecution(aws) {
        var workflowId = aws.params.workflowId;
        var input = aws.params.input;
        var domain = aws.params.domain;
        var signalName = aws.params.signalName;
        var runId = aws.params.runId;
        if (! domain) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domain"];
        }        if (! workflowId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter workflowId"];
        }        if (! signalName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter signalName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CountPendingDecisionTasks = function CountPendingDecisionTasks(aws) {
        var domain = aws.params.domain;
        var taskList = aws.params.taskList;
        if (! domain) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domain"];
        }        if (! taskList) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter taskList"];
        }

        // TODO implement code

        var ret = /*Sk*/{
            count: 0,
            truncated: false
        };
        return [200, ret];
    }
module.exports.ListOpenWorkflowExecutions = function ListOpenWorkflowExecutions(aws) {
        var domain = aws.params.domain;
        var executionFilter = aws.params.executionFilter;
        var startTimeFilter = aws.params.startTimeFilter;
        var typeFilter = aws.params.typeFilter;
        var maximumPageSize = aws.params.maximumPageSize /* integer */;
        var tagFilter = aws.params.tagFilter;
        var reverseOrder = aws.params.reverseOrder /* boolean */;
        var nextPageToken = aws.params.nextPageToken;
        if (! domain) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domain"];
        }        if (! startTimeFilter) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter startTimeFilter"];
        }

        // TODO implement code

        var ret = /*S4g*/{
            executionInfos: [ /*S19*/{
                workflowType: /*Sr*/{
                    version: "",
                    name: ""
                },
                execution: /*S16*/{
                    workflowId: "",
                    runId: ""
                },
                tagList: /*S1b*/[ "" /*, ...*/ ],
                parent: /*S16*/{
                    workflowId: "",
                    runId: ""
                },
                closeStatus: "",
                closeTimestamp: now(),
                startTimestamp: now(),
                executionStatus: "",
                cancelRequested: false
            } /*, ...*/ ],
            nextPageToken: ""
        };
        return [200, ret];
    }
module.exports.RegisterDomain = function RegisterDomain(aws) {
        var name = aws.params.name;
        var workflowExecutionRetentionPeriodInDays = aws.params.workflowExecutionRetentionPeriodInDays;
        var description = aws.params.description;
        if (! name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter name"];
        }        if (! workflowExecutionRetentionPeriodInDays) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter workflowExecutionRetentionPeriodInDays"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeprecateWorkflowType = function DeprecateWorkflowType(aws) {
        var workflowType = aws.params.workflowType;
        var domain = aws.params.domain;
        if (! domain) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domain"];
        }        if (! workflowType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter workflowType"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeWorkflowType = function DescribeWorkflowType(aws) {
        var workflowType = aws.params.workflowType;
        var domain = aws.params.domain;
        if (! domain) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domain"];
        }        if (! workflowType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter workflowType"];
        }

        // TODO implement code

        var ret = {
            typeInfo: /*S1m*/{
                creationDate: now(),
                workflowType: /*Sr*/{
                    version: "",
                    name: ""
                },
                status: "",
                description: "",
                deprecationDate: now()
            },
            configuration: {
                defaultTaskPriority: "",
                defaultChildPolicy: "",
                defaultLambdaRole: "",
                defaultTaskStartToCloseTimeout: "",
                defaultTaskList: /*Sj*/{
                    name: ""
                },
                defaultExecutionStartToCloseTimeout: ""
            }
        };
        return [200, ret];
    }
module.exports.StartWorkflowExecution = function StartWorkflowExecution(aws) {
        var workflowId = aws.params.workflowId;
        var executionStartToCloseTimeout = aws.params.executionStartToCloseTimeout;
        var workflowType = aws.params.workflowType;
        var domain = aws.params.domain;
        var taskPriority = aws.params.taskPriority;
        var lambdaRole = aws.params.lambdaRole;
        var taskStartToCloseTimeout = aws.params.taskStartToCloseTimeout;
        var input = aws.params.input;
        var childPolicy = aws.params.childPolicy;
        var taskList = aws.params.taskList;
        var tagList = aws.params.tagList;
        if (! domain) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domain"];
        }        if (! workflowId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter workflowId"];
        }        if (! workflowType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter workflowType"];
        }

        // TODO implement code

        var ret = {
            runId: ""
        };
        return [200, ret];
    }
module.exports.DescribeWorkflowExecution = function DescribeWorkflowExecution(aws) {
        var domain = aws.params.domain;
        var execution = aws.params.execution;
        if (! domain) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domain"];
        }        if (! execution) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter execution"];
        }

        // TODO implement code

        var ret = {
            latestActivityTaskTimestamp: now(),
            executionInfo: /*S19*/{
                workflowType: /*Sr*/{
                    version: "",
                    name: ""
                },
                execution: /*S16*/{
                    workflowId: "",
                    runId: ""
                },
                tagList: /*S1b*/[ "" /*, ...*/ ],
                parent: /*S16*/{
                    workflowId: "",
                    runId: ""
                },
                closeStatus: "",
                closeTimestamp: now(),
                startTimestamp: now(),
                executionStatus: "",
                cancelRequested: false
            },
            latestExecutionContext: "",
            openCounts: {
                openActivityTasks: 0,
                openChildWorkflowExecutions: 0,
                openTimers: 0,
                openDecisionTasks: 0,
                openLambdaFunctions: 0
            },
            executionConfiguration: {
                executionStartToCloseTimeout: "",
                childPolicy: "",
                taskPriority: "",
                taskStartToCloseTimeout: "",
                taskList: /*Sj*/{
                    name: ""
                },
                lambdaRole: ""
            }
        };
        return [200, ret];
    }
module.exports.CountOpenWorkflowExecutions = function CountOpenWorkflowExecutions(aws) {
        var startTimeFilter = aws.params.startTimeFilter;
        var typeFilter = aws.params.typeFilter;
        var domain = aws.params.domain;
        var tagFilter = aws.params.tagFilter;
        var executionFilter = aws.params.executionFilter;
        if (! domain) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domain"];
        }        if (! startTimeFilter) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter startTimeFilter"];
        }

        // TODO implement code

        var ret = /*Se*/{
            count: 0,
            truncated: false
        };
        return [200, ret];
    }
module.exports.PollForDecisionTask = function PollForDecisionTask(aws) {
        var domain = aws.params.domain;
        var identity = aws.params.identity;
        var maximumPageSize = aws.params.maximumPageSize /* integer */;
        var taskList = aws.params.taskList;
        var nextPageToken = aws.params.nextPageToken;
        var reverseOrder = aws.params.reverseOrder /* boolean */;
        if (! domain) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domain"];
        }        if (! taskList) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter taskList"];
        }

        // TODO implement code

        var ret = {
            startedEventId: 0 /*long*/,
            workflowType: /*Sr*/{
                version: "",
                name: ""
            },
            previousStartedEventId: 0 /*long*/,
            events: /*S1t*/[ {
                scheduleActivityTaskFailedEventAttributes: {
                    activityId: "",
                    activityType: /*Sn*/{
                        version: "",
                        name: ""
                    },
                    cause: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                decisionTaskScheduledEventAttributes: {
                    startToCloseTimeout: "",
                    taskPriority: "",
                    taskList: /*Sj*/{
                        name: ""
                    }
                },
                lambdaFunctionFailedEventAttributes: {
                    details: "",
                    startedEventId: 0 /*long*/,
                    scheduledEventId: 0 /*long*/,
                    reason: ""
                },
                requestCancelActivityTaskFailedEventAttributes: {
                    activityId: "",
                    cause: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                activityTaskStartedEventAttributes: {
                    scheduledEventId: 0 /*long*/,
                    identity: ""
                },
                failWorkflowExecutionFailedEventAttributes: {
                    cause: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                signalExternalWorkflowExecutionInitiatedEventAttributes: {
                    workflowId: "",
                    control: "",
                    decisionTaskCompletedEventId: 0 /*long*/,
                    input: "",
                    runId: "",
                    signalName: ""
                },
                workflowExecutionCancelRequestedEventAttributes: {
                    cause: "",
                    externalWorkflowExecution: /*S16*/{
                        workflowId: "",
                        runId: ""
                    },
                    externalInitiatedEventId: 0 /*long*/
                },
                externalWorkflowExecutionSignaledEventAttributes: {
                    initiatedEventId: 0 /*long*/,
                    workflowExecution: /*S16*/{
                        workflowId: "",
                        runId: ""
                    }
                },
                workflowExecutionCanceledEventAttributes: {
                    details: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                eventId: 0 /*long*/,
                decisionTaskTimedOutEventAttributes: {
                    startedEventId: 0 /*long*/,
                    scheduledEventId: 0 /*long*/,
                    timeoutType: ""
                },
                activityTaskCompletedEventAttributes: {
                    startedEventId: 0 /*long*/,
                    scheduledEventId: 0 /*long*/,
                    result: ""
                },
                recordMarkerFailedEventAttributes: {
                    cause: "",
                    markerName: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                childWorkflowExecutionTimedOutEventAttributes: {
                    startedEventId: 0 /*long*/,
                    workflowType: /*Sr*/{
                version: "",
                name: ""
            },
                    timeoutType: "",
                    initiatedEventId: 0 /*long*/,
                    workflowExecution: /*S16*/{
                        workflowId: "",
                        runId: ""
                    }
                },
                continueAsNewWorkflowExecutionFailedEventAttributes: {
                    cause: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                childWorkflowExecutionTerminatedEventAttributes: {
                    startedEventId: 0 /*long*/,
                    workflowType: /*Sr*/{
                version: "",
                name: ""
            },
                    initiatedEventId: 0 /*long*/,
                    workflowExecution: /*S16*/{
                        workflowId: "",
                        runId: ""
                    }
                },
                workflowExecutionStartedEventAttributes: {
                    workflowType: /*Sr*/{
                version: "",
                name: ""
            },
                    childPolicy: "",
                    parentWorkflowExecution: /*S16*/{
                        workflowId: "",
                        runId: ""
                    },
                    input: "",
                    lambdaRole: "",
                    tagList: /*S1b*/[ "" /*, ...*/ ],
                    executionStartToCloseTimeout: "",
                    parentInitiatedEventId: 0 /*long*/,
                    taskPriority: "",
                    continuedExecutionRunId: "",
                    taskStartToCloseTimeout: "",
                    taskList: /*Sj*/{
                        name: ""
                    }
                },
                childWorkflowExecutionStartedEventAttributes: {
                    workflowType: /*Sr*/{
                version: "",
                name: ""
            },
                    initiatedEventId: 0 /*long*/,
                    workflowExecution: /*S16*/{
                        workflowId: "",
                        runId: ""
                    }
                },
                startChildWorkflowExecutionInitiatedEventAttributes: {
                    workflowId: "",
                    workflowType: /*Sr*/{
                version: "",
                name: ""
            },
                    childPolicy: "",
                    input: "",
                    tagList: /*S1b*/[ "" /*, ...*/ ],
                    control: "",
                    executionStartToCloseTimeout: "",
                    taskPriority: "",
                    lambdaRole: "",
                    decisionTaskCompletedEventId: 0 /*long*/,
                    taskStartToCloseTimeout: "",
                    taskList: /*Sj*/{
                        name: ""
                    }
                },
                startTimerFailedEventAttributes: {
                    timerId: "",
                    cause: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                workflowExecutionTimedOutEventAttributes: {
                    childPolicy: "",
                    timeoutType: ""
                },
                eventType: "",
                lambdaFunctionStartedEventAttributes: {
                    scheduledEventId: 0 /*long*/
                },
                cancelWorkflowExecutionFailedEventAttributes: {
                    cause: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                startLambdaFunctionFailedEventAttributes: {
                    cause: "",
                    scheduledEventId: 0 /*long*/,
                    message: ""
                },
                activityTaskCanceledEventAttributes: {
                    details: "",
                    startedEventId: 0 /*long*/,
                    scheduledEventId: 0 /*long*/,
                    latestCancelRequestedEventId: 0 /*long*/
                },
                timerFiredEventAttributes: {
                    startedEventId: 0 /*long*/,
                    timerId: ""
                },
                workflowExecutionCompletedEventAttributes: {
                    result: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                activityTaskCancelRequestedEventAttributes: {
                    activityId: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                lambdaFunctionScheduledEventAttributes: {
                    input: "",
                    name: "",
                    startToCloseTimeout: "",
                    id: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                decisionTaskCompletedEventAttributes: {
                    startedEventId: 0 /*long*/,
                    scheduledEventId: 0 /*long*/,
                    executionContext: ""
                },
                startChildWorkflowExecutionFailedEventAttributes: {
                    workflowId: "",
                    workflowType: /*Sr*/{
                version: "",
                name: ""
            },
                    initiatedEventId: 0 /*long*/,
                    decisionTaskCompletedEventId: 0 /*long*/,
                    cause: "",
                    control: ""
                },
                activityTaskFailedEventAttributes: {
                    details: "",
                    startedEventId: 0 /*long*/,
                    scheduledEventId: 0 /*long*/,
                    reason: ""
                },
                activityTaskTimedOutEventAttributes: {
                    details: "",
                    startedEventId: 0 /*long*/,
                    scheduledEventId: 0 /*long*/,
                    timeoutType: ""
                },
                childWorkflowExecutionCompletedEventAttributes: {
                    startedEventId: 0 /*long*/,
                    workflowType: /*Sr*/{
                version: "",
                name: ""
            },
                    initiatedEventId: 0 /*long*/,
                    result: "",
                    workflowExecution: /*S16*/{
                        workflowId: "",
                        runId: ""
                    }
                },
                signalExternalWorkflowExecutionFailedEventAttributes: {
                    workflowId: "",
                    cause: "",
                    initiatedEventId: 0 /*long*/,
                    decisionTaskCompletedEventId: 0 /*long*/,
                    control: "",
                    runId: ""
                },
                externalWorkflowExecutionCancelRequestedEventAttributes: {
                    initiatedEventId: 0 /*long*/,
                    workflowExecution: /*S16*/{
                        workflowId: "",
                        runId: ""
                    }
                },
                markerRecordedEventAttributes: {
                    details: "",
                    markerName: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                cancelTimerFailedEventAttributes: {
                    timerId: "",
                    cause: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                workflowExecutionContinuedAsNewEventAttributes: {
                    executionStartToCloseTimeout: "",
                    workflowType: /*Sr*/{
                version: "",
                name: ""
            },
                    childPolicy: "",
                    taskPriority: "",
                    newExecutionRunId: "",
                    taskStartToCloseTimeout: "",
                    decisionTaskCompletedEventId: 0 /*long*/,
                    input: "",
                    lambdaRole: "",
                    taskList: /*Sj*/{
                        name: ""
                    },
                    tagList: /*S1b*/[ "" /*, ...*/ ]
                },
                lambdaFunctionTimedOutEventAttributes: {
                    startedEventId: 0 /*long*/,
                    scheduledEventId: 0 /*long*/,
                    timeoutType: ""
                },
                timerCanceledEventAttributes: {
                    startedEventId: 0 /*long*/,
                    timerId: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                eventTimestamp: now(),
                lambdaFunctionCompletedEventAttributes: {
                    startedEventId: 0 /*long*/,
                    scheduledEventId: 0 /*long*/,
                    result: ""
                },
                completeWorkflowExecutionFailedEventAttributes: {
                    cause: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                childWorkflowExecutionCanceledEventAttributes: {
                    details: "",
                    startedEventId: 0 /*long*/,
                    workflowType: /*Sr*/{
                version: "",
                name: ""
            },
                    initiatedEventId: 0 /*long*/,
                    workflowExecution: /*S16*/{
                        workflowId: "",
                        runId: ""
                    }
                },
                workflowExecutionFailedEventAttributes: {
                    details: "",
                    decisionTaskCompletedEventId: 0 /*long*/,
                    reason: ""
                },
                workflowExecutionSignaledEventAttributes: {
                    input: "",
                    externalWorkflowExecution: /*S16*/{
                        workflowId: "",
                        runId: ""
                    },
                    externalInitiatedEventId: 0 /*long*/,
                    signalName: ""
                },
                requestCancelExternalWorkflowExecutionFailedEventAttributes: {
                    workflowId: "",
                    cause: "",
                    initiatedEventId: 0 /*long*/,
                    decisionTaskCompletedEventId: 0 /*long*/,
                    control: "",
                    runId: ""
                },
                timerStartedEventAttributes: {
                    startToFireTimeout: "",
                    timerId: "",
                    decisionTaskCompletedEventId: 0 /*long*/,
                    control: ""
                },
                activityTaskScheduledEventAttributes: {
                    taskPriority: "",
                    heartbeatTimeout: "",
                    scheduleToCloseTimeout: "",
                    input: "",
                    scheduleToStartTimeout: "",
                    activityId: "",
                    activityType: /*Sn*/{
                        version: "",
                        name: ""
                    },
                    decisionTaskCompletedEventId: 0 /*long*/,
                    startToCloseTimeout: "",
                    taskList: /*Sj*/{
                        name: ""
                    },
                    control: ""
                },
                childWorkflowExecutionFailedEventAttributes: {
                    details: "",
                    startedEventId: 0 /*long*/,
                    workflowType: /*Sr*/{
                version: "",
                name: ""
            },
                    initiatedEventId: 0 /*long*/,
                    workflowExecution: /*S16*/{
                        workflowId: "",
                        runId: ""
                    },
                    reason: ""
                },
                scheduleLambdaFunctionFailedEventAttributes: {
                    cause: "",
                    name: "",
                    id: "",
                    decisionTaskCompletedEventId: 0 /*long*/
                },
                decisionTaskStartedEventAttributes: {
                    scheduledEventId: 0 /*long*/,
                    identity: ""
                },
                requestCancelExternalWorkflowExecutionInitiatedEventAttributes: {
                    workflowId: "",
                    control: "",
                    decisionTaskCompletedEventId: 0 /*long*/,
                    runId: ""
                },
                workflowExecutionTerminatedEventAttributes: {
                    details: "",
                    cause: "",
                    childPolicy: "",
                    reason: ""
                }
            } /*, ...*/ ],
            taskToken: "",
            workflowExecution: /*S16*/{
                        workflowId: "",
                        runId: ""
                    },
            nextPageToken: ""
        };
        return [200, ret];
    }
module.exports.RespondActivityTaskCanceled = function RespondActivityTaskCanceled(aws) {
        var details = aws.params.details;
        var taskToken = aws.params.taskToken;
        if (! taskToken) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter taskToken"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.TerminateWorkflowExecution = function TerminateWorkflowExecution(aws) {
        var workflowId = aws.params.workflowId;
        var details = aws.params.details;
        var domain = aws.params.domain;
        var childPolicy = aws.params.childPolicy;
        var runId = aws.params.runId;
        var reason = aws.params.reason;
        if (! domain) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domain"];
        }        if (! workflowId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter workflowId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeprecateActivityType = function DeprecateActivityType(aws) {
        var activityType = aws.params.activityType;
        var domain = aws.params.domain;
        if (! domain) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domain"];
        }        if (! activityType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter activityType"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ListClosedWorkflowExecutions = function ListClosedWorkflowExecutions(aws) {
        var closeStatusFilter = aws.params.closeStatusFilter;
        var domain = aws.params.domain;
        var nextPageToken = aws.params.nextPageToken;
        var tagFilter = aws.params.tagFilter;
        var startTimeFilter = aws.params.startTimeFilter;
        var typeFilter = aws.params.typeFilter;
        var maximumPageSize = aws.params.maximumPageSize /* integer */;
        var closeTimeFilter = aws.params.closeTimeFilter;
        var reverseOrder = aws.params.reverseOrder /* boolean */;
        var executionFilter = aws.params.executionFilter;
        if (! domain) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domain"];
        }

        // TODO implement code

        var ret = /*S4g*/{
            executionInfos: [ /*S19*/{
                workflowType: /*Sr*/{
                    version: "",
                    name: ""
                },
                execution: /*S16*/{
                    workflowId: "",
                    runId: ""
                },
                tagList: /*S1b*/[ "" /*, ...*/ ],
                parent: /*S16*/{
                    workflowId: "",
                    runId: ""
                },
                closeStatus: "",
                closeTimestamp: now(),
                startTimestamp: now(),
                executionStatus: "",
                cancelRequested: false
            } /*, ...*/ ],
            nextPageToken: ""
        };
        return [200, ret];
    }
module.exports.DescribeActivityType = function DescribeActivityType(aws) {
        var activityType = aws.params.activityType;
        var domain = aws.params.domain;
        if (! domain) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domain"];
        }        if (! activityType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter activityType"];
        }

        // TODO implement code

        var ret = {
            typeInfo: /*Su*/{
                creationDate: now(),
                activityType: /*Sn*/{
                    version: "",
                    name: ""
                },
                status: "",
                description: "",
                deprecationDate: now()
            },
            configuration: {
                defaultTaskHeartbeatTimeout: "",
                defaultTaskStartToCloseTimeout: "",
                defaultTaskList: /*Sj*/{
                    name: ""
                },
                defaultTaskScheduleToCloseTimeout: "",
                defaultTaskPriority: "",
                defaultTaskScheduleToStartTimeout: ""
            }
        };
        return [200, ret];
    }
module.exports.RespondActivityTaskCompleted = function RespondActivityTaskCompleted(aws) {
        var taskToken = aws.params.taskToken;
        var result = aws.params.result;
        if (! taskToken) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter taskToken"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
