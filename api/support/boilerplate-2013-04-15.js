'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * AWS Support version 2013-04-15
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.DescribeCommunications = function DescribeCommunications(aws) {
        var beforeTime = aws.params['beforeTime'];
        var afterTime = aws.params['afterTime'];
        var caseId = aws.params['caseId'];
        var maxResults = aws.params['maxResults'] /* integer */;
        var nextToken = aws.params['nextToken'];
        if (! caseId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter caseId"];
        }

        // TODO implement code

        var ret = {
            nextToken: "",
            communications: /*S17*/[ {
                attachmentSet: [ {
                    fileName: "",
                    attachmentId: ""
                } /*, ...*/ ],
                caseId: "",
                timeCreated: "",
                body: "",
                submittedBy: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeServices = function DescribeServices(aws) {
        var language = aws.params['language'];
        var serviceCodeList = aws.params['serviceCodeList'] /* list */;


        // TODO implement code

        var ret = {
            services: [ {
                code: "",
                name: "",
                categories: [ {
                    code: "",
                    name: ""
                } /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeAttachment = function DescribeAttachment(aws) {
        var attachmentId = aws.params['attachmentId'];
        if (! attachmentId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter attachmentId"];
        }

        // TODO implement code

        var ret = {
            attachment: /*S4*/{
                fileName: "",
                data: null /*blob*/
            }
        };
        return [200, ret];
    }
module.exports.RefreshTrustedAdvisorCheck = function RefreshTrustedAdvisorCheck(aws) {
        var checkId = aws.params['checkId'];
        if (! checkId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter checkId"];
        }

        // TODO implement code

        var ret = {
            status: /*S1x*/{
                status: "",
                millisUntilNextRefreshable: 0 /*long*/,
                checkId: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeTrustedAdvisorChecks = function DescribeTrustedAdvisorChecks(aws) {
        var language = aws.params['language'];
        if (! language) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter language"];
        }

        // TODO implement code

        var ret = {
            checks: [ {
                description: "",
                metadata: /*S1t*/[ "" /*, ...*/ ],
                name: "",
                category: "",
                id: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ResolveCase = function ResolveCase(aws) {
        var caseId = aws.params['caseId'];


        // TODO implement code

        var ret = {
            finalCaseStatus: "",
            initialCaseStatus: ""
        };
        return [200, ret];
    }
module.exports.AddAttachmentsToSet = function AddAttachmentsToSet(aws) {
        var attachments = aws.params['attachments'] /* list */;
        var attachmentSetId = aws.params['attachmentSetId'];
        if (! attachments) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter attachments"];
        }

        // TODO implement code

        var ret = {
            expiryTime: "",
            attachmentSetId: ""
        };
        return [200, ret];
    }
module.exports.DescribeTrustedAdvisorCheckSummaries = function DescribeTrustedAdvisorCheckSummaries(aws) {
        var checkIds = aws.params['checkIds'];
        if (! checkIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter checkIds"];
        }

        // TODO implement code

        var ret = {
            summaries: [ {
                timestamp: "",
                status: "",
                hasFlaggedResources: false,
                resourcesSummary: /*S22*/{
                    resourcesProcessed: 0 /*long*/,
                    resourcesFlagged: 0 /*long*/,
                    resourcesSuppressed: 0 /*long*/,
                    resourcesIgnored: 0 /*long*/
                },
                checkId: "",
                categorySpecificSummary: /*S23*/{
                    costOptimizing: {
                        estimatedMonthlySavings: 0.0 /*double*/,
                        estimatedPercentMonthlySavings: 0.0 /*double*/
                    }
                }
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.AddCommunicationToCase = function AddCommunicationToCase(aws) {
        var ccEmailAddresses = aws.params['ccEmailAddresses'];
        var attachmentSetId = aws.params['attachmentSetId'];
        var communicationBody = aws.params['communicationBody'];
        var caseId = aws.params['caseId'];
        if (! communicationBody) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter communicationBody"];
        }

        // TODO implement code

        var ret = {
            result: false
        };
        return [200, ret];
    }
module.exports.DescribeCases = function DescribeCases(aws) {
        var beforeTime = aws.params['beforeTime'];
        var includeCommunications = aws.params['includeCommunications'] /* boolean */;
        var includeResolvedCases = aws.params['includeResolvedCases'] /* boolean */;
        var afterTime = aws.params['afterTime'];
        var language = aws.params['language'];
        var displayId = aws.params['displayId'];
        var nextToken = aws.params['nextToken'];
        var maxResults = aws.params['maxResults'] /* integer */;
        var caseIdList = aws.params['caseIdList'] /* list */;


        // TODO implement code

        var ret = {
            cases: [ {
                status: "",
                subject: "",
                caseId: "",
                categoryCode: "",
                ccEmailAddresses: /*Sc*/[ "" /*, ...*/ ],
                recentCommunications: {
                    nextToken: "",
                    communications: /*S17*/[ {
                        attachmentSet: [ {
                            fileName: "",
                            attachmentId: ""
                        } /*, ...*/ ],
                        caseId: "",
                        timeCreated: "",
                        body: "",
                        submittedBy: ""
                    } /*, ...*/ ]
                },
                timeCreated: "",
                serviceCode: "",
                displayId: "",
                submittedBy: "",
                language: "",
                severityCode: ""
            } /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.DescribeTrustedAdvisorCheckResult = function DescribeTrustedAdvisorCheckResult(aws) {
        var language = aws.params['language'];
        var checkId = aws.params['checkId'];
        if (! checkId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter checkId"];
        }

        // TODO implement code

        var ret = {
            result: {
                timestamp: "",
                status: "",
                resourcesSummary: /*S22*/{
                    resourcesProcessed: 0 /*long*/,
                    resourcesFlagged: 0 /*long*/,
                    resourcesSuppressed: 0 /*long*/,
                    resourcesIgnored: 0 /*long*/
                },
                checkId: "",
                categorySpecificSummary: /*S23*/{
                    costOptimizing: {
                        estimatedMonthlySavings: 0.0 /*double*/,
                        estimatedPercentMonthlySavings: 0.0 /*double*/
                    }
                },
                flaggedResources: [ {
                    status: "",
                    isSuppressed: false,
                    metadata: /*S1t*/[ "" /*, ...*/ ],
                    region: "",
                    resourceId: ""
                } /*, ...*/ ]
            }
        };
        return [200, ret];
    }
module.exports.CreateCase = function CreateCase(aws) {
        var subject = aws.params['subject'];
        var serviceCode = aws.params['serviceCode'];
        var communicationBody = aws.params['communicationBody'];
        var categoryCode = aws.params['categoryCode'];
        var language = aws.params['language'];
        var issueType = aws.params['issueType'];
        var ccEmailAddresses = aws.params['ccEmailAddresses'];
        var attachmentSetId = aws.params['attachmentSetId'];
        var severityCode = aws.params['severityCode'];
        if (! subject) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter subject"];
        }        if (! communicationBody) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter communicationBody"];
        }

        // TODO implement code

        var ret = {
            caseId: ""
        };
        return [200, ret];
    }
module.exports.DescribeTrustedAdvisorCheckRefreshStatuses = function DescribeTrustedAdvisorCheckRefreshStatuses(aws) {
        var checkIds = aws.params['checkIds'];
        if (! checkIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter checkIds"];
        }

        // TODO implement code

        var ret = {
            statuses: [ /*S1x*/{
                status: "",
                millisUntilNextRefreshable: 0 /*long*/,
                checkId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeSeverityLevels = function DescribeSeverityLevels(aws) {
        var language = aws.params['language'];


        // TODO implement code

        var ret = {
            severityLevels: [ {
                code: "",
                name: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
