'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * AWS Config version 2014-11-12
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol json
require('../../lib/aws-common/shape_http')('json', module.exports, null)
module.exports.DescribeConfigurationRecorders = function DescribeConfigurationRecorders(aws) {
        var ConfigurationRecorderNames = aws.params['ConfigurationRecorderNames'];


        // TODO implement code

        var ret = {
            ConfigurationRecorders: [ /*S1l*/{
                roleARN: "",
                recordingGroup: {
                    includeGlobalResourceTypes: false,
                    allSupported: false,
                    resourceTypes: [ "" /*, ...*/ ]
                },
                name: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeDeliveryChannelStatus = function DescribeDeliveryChannelStatus(aws) {
        var DeliveryChannelNames = aws.params['DeliveryChannelNames'];


        // TODO implement code

        var ret = {
            DeliveryChannelsStatus: [ {
                configStreamDeliveryInfo: {
                    lastStatusChangeTime: now(),
                    lastStatus: "",
                    lastErrorCode: "",
                    lastErrorMessage: ""
                },
                configSnapshotDeliveryInfo: /*S1w*/{
                    lastStatus: "",
                    lastErrorMessage: "",
                    lastErrorCode: "",
                    lastAttemptTime: now(),
                    nextDeliveryTime: now(),
                    lastSuccessfulTime: now()
                },
                configHistoryDeliveryInfo: /*S1w*/{
                    lastStatus: "",
                    lastErrorMessage: "",
                    lastErrorCode: "",
                    lastAttemptTime: now(),
                    nextDeliveryTime: now(),
                    lastSuccessfulTime: now()
                },
                name: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeliverConfigSnapshot = function DeliverConfigSnapshot(aws) {
        var deliveryChannelName = aws.params['deliveryChannelName'];
        if (! deliveryChannelName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter deliveryChannelName"];
        }


        // TODO implement code

        var ret = {
            configSnapshotId: ""
        };
        return [200, ret];
    }
module.exports.GetResourceConfigHistory = function GetResourceConfigHistory(aws) {
        var nextToken = aws.params['nextToken'];
        var resourceType = aws.params['resourceType'];
        var limit = aws.params['limit'] /* integer */;
        var resourceId = aws.params['resourceId'];
        var earlierTime = aws.params['earlierTime'] /* timestamp */;
        var laterTime = aws.params['laterTime'] /* timestamp */;
        var chronologicalOrder = aws.params['chronologicalOrder'];
        if (! resourceType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceType"];
        }
        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }


        // TODO implement code

        var ret = {
            nextToken: "",
            configurationItems: [ {
                configuration: "",
                resourceName: "",
                configurationItemMD5Hash: "",
                arn: "",
                relationships: [ {
                    relationshipName: "",
                    resourceId: "",
                    resourceType: "",
                    resourceName: ""
                } /*, ...*/ ],
                configurationStateId: "",
                awsRegion: "",
                accountId: "",
                version: "",
                configurationItemStatus: "",
                resourceType: "",
                configurationItemCaptureTime: now(),
                tags: {} /* map */,
                resourceId: "",
                relatedEvents: [ "" /*, ...*/ ],
                availabilityZone: "",
                resourceCreationTime: now()
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.GetComplianceSummaryByResourceType = function GetComplianceSummaryByResourceType(aws) {
        var ResourceTypes = aws.params['ResourceTypes'] /* list */;


        // TODO implement code

        var ret = {
            ComplianceSummariesByResourceType: [ {
                ResourceType: "",
                ComplianceSummary: /*S2d*/{
                    NonCompliantResourceCount: /*Sg*/{
                        CapExceeded: false,
                        CappedCount: 0
                    },
                    ComplianceSummaryTimestamp: now(),
                    CompliantResourceCount: /*Sg*/{
                        CapExceeded: false,
                        CappedCount: 0
                    }
                }
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteDeliveryChannel = function DeleteDeliveryChannel(aws) {
        var DeliveryChannelName = aws.params['DeliveryChannelName'];
        if (! DeliveryChannelName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DeliveryChannelName"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeConfigRuleEvaluationStatus = function DescribeConfigRuleEvaluationStatus(aws) {
        var ConfigRuleNames = aws.params['ConfigRuleNames'];


        // TODO implement code

        var ret = {
            ConfigRulesEvaluationStatus: [ {
                ConfigRuleArn: "",
                ConfigRuleName: "",
                LastSuccessfulEvaluationTime: now(),
                ConfigRuleId: "",
                FirstEvaluationStarted: false,
                LastErrorCode: "",
                LastSuccessfulInvocationTime: now(),
                LastErrorMessage: "",
                LastFailedEvaluationTime: now(),
                FirstActivatedTime: now(),
                LastFailedInvocationTime: now()
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.PutConfigRule = function PutConfigRule(aws) {
        var ConfigRule = aws.params['ConfigRule'];
        if (! ConfigRule) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ConfigRule"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.GetComplianceDetailsByConfigRule = function GetComplianceDetailsByConfigRule(aws) {
        var NextToken = aws.params['NextToken'];
        var ConfigRuleName = aws.params['ConfigRuleName'];
        var Limit = aws.params['Limit'] /* integer */;
        var ComplianceTypes = aws.params['ComplianceTypes'];
        if (! ConfigRuleName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ConfigRuleName"];
        }


        // TODO implement code

        var ret = {
            EvaluationResults: /*S26*/[ {
                ComplianceType: "",
                ResultRecordedTime: now(),
                ConfigRuleInvokedTime: now(),
                ResultToken: "",
                EvaluationResultIdentifier: {
                    OrderingTimestamp: now(),
                    EvaluationResultQualifier: {
                        ConfigRuleName: "",
                        ResourceType: "",
                        ResourceId: ""
                    }
                },
                Annotation: ""
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.DeleteConfigRule = function DeleteConfigRule(aws) {
        var ConfigRuleName = aws.params['ConfigRuleName'];
        if (! ConfigRuleName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ConfigRuleName"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.GetComplianceSummaryByConfigRule = function GetComplianceSummaryByConfigRule(aws) {


        // TODO implement code

        var ret = {
            ComplianceSummary: /*S2d*/{
                NonCompliantResourceCount: /*Sg*/{
                    CapExceeded: false,
                    CappedCount: 0
                },
                ComplianceSummaryTimestamp: now(),
                CompliantResourceCount: /*Sg*/{
                    CapExceeded: false,
                    CappedCount: 0
                }
            }
        };
        return [200, ret];
    }
module.exports.DescribeConfigRules = function DescribeConfigRules(aws) {
        var NextToken = aws.params['NextToken'];
        var ConfigRuleNames = aws.params['ConfigRuleNames'];


        // TODO implement code

        var ret = {
            ConfigRules: [ /*Sy*/{
                InputParameters: "",
                ConfigRuleArn: "",
                ConfigRuleName: "",
                Source: {
                    Owner: "",
                    SourceIdentifier: "",
                    SourceDetails: [ {
                        EventSource: "",
                        MessageType: ""
                    } /*, ...*/ ]
                },
                ConfigRuleId: "",
                MaximumExecutionFrequency: "",
                Scope: {
                    ComplianceResourceTypes: [ "" /*, ...*/ ],
                    ComplianceResourceId: "",
                    TagKey: "",
                    TagValue: ""
                },
                ConfigRuleState: "",
                Description: ""
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.PutDeliveryChannel = function PutDeliveryChannel(aws) {
        var DeliveryChannel = aws.params['DeliveryChannel'];
        if (! DeliveryChannel) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DeliveryChannel"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.StartConfigurationRecorder = function StartConfigurationRecorder(aws) {
        var ConfigurationRecorderName = aws.params['ConfigurationRecorderName'];
        if (! ConfigurationRecorderName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ConfigurationRecorderName"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeComplianceByResource = function DescribeComplianceByResource(aws) {
        var NextToken = aws.params['NextToken'];
        var ResourceId = aws.params['ResourceId'];
        var Limit = aws.params['Limit'] /* integer */;
        var ResourceType = aws.params['ResourceType'];
        var ComplianceTypes = aws.params['ComplianceTypes'];


        // TODO implement code

        var ret = {
            NextToken: "",
            ComplianceByResources: [ {
                ResourceId: "",
                ResourceType: "",
                Compliance: /*Sf*/{
                    ComplianceType: "",
                    ComplianceContributorCount: /*Sg*/{
                        CapExceeded: false,
                        CappedCount: 0
                    }
                }
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeComplianceByConfigRule = function DescribeComplianceByConfigRule(aws) {
        var NextToken = aws.params['NextToken'];
        var ComplianceTypes = aws.params['ComplianceTypes'];
        var ConfigRuleNames = aws.params['ConfigRuleNames'];


        // TODO implement code

        var ret = {
            NextToken: "",
            ComplianceByConfigRules: [ {
                ConfigRuleName: "",
                Compliance: /*Sf*/{
                    ComplianceType: "",
                    ComplianceContributorCount: /*Sg*/{
                        CapExceeded: false,
                        CappedCount: 0
                    }
                }
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.StopConfigurationRecorder = function StopConfigurationRecorder(aws) {
        var ConfigurationRecorderName = aws.params['ConfigurationRecorderName'];
        if (! ConfigurationRecorderName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ConfigurationRecorderName"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.PutEvaluations = function PutEvaluations(aws) {
        var Evaluations = aws.params['Evaluations'];
        var ResultToken = aws.params['ResultToken'];
        if (! ResultToken) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResultToken"];
        }


        // TODO implement code

        var ret = {
            FailedEvaluations: /*S3l*/[ {
                OrderingTimestamp: now(),
                ComplianceType: "",
                ComplianceResourceType: "",
                ComplianceResourceId: "",
                Annotation: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.PutConfigurationRecorder = function PutConfigurationRecorder(aws) {
        var ConfigurationRecorder = aws.params['ConfigurationRecorder'];
        if (! ConfigurationRecorder) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ConfigurationRecorder"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeDeliveryChannels = function DescribeDeliveryChannels(aws) {
        var DeliveryChannelNames = aws.params['DeliveryChannelNames'];


        // TODO implement code

        var ret = {
            DeliveryChannels: [ /*S22*/{
                s3KeyPrefix: "",
                s3BucketName: "",
                configSnapshotDeliveryProperties: {
                    deliveryFrequency: ""
                },
                snsTopicARN: "",
                name: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ListDiscoveredResources = function ListDiscoveredResources(aws) {
        var includeDeletedResources = aws.params['includeDeletedResources'] /* boolean */;
        var resourceType = aws.params['resourceType'];
        var limit = aws.params['limit'] /* integer */;
        var resourceName = aws.params['resourceName'];
        var nextToken = aws.params['nextToken'];
        var resourceIds = aws.params['resourceIds'] /* list */;
        if (! resourceType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceType"];
        }


        // TODO implement code

        var ret = {
            nextToken: "",
            resourceIdentifiers: [ {
                resourceId: "",
                resourceType: "",
                resourceName: "",
                resourceDeletionTime: now()
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.GetComplianceDetailsByResource = function GetComplianceDetailsByResource(aws) {
        var NextToken = aws.params['NextToken'];
        var ResourceId = aws.params['ResourceId'];
        var ResourceType = aws.params['ResourceType'];
        var ComplianceTypes = aws.params['ComplianceTypes'];
        if (! ResourceType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResourceType"];
        }
        if (! ResourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResourceId"];
        }


        // TODO implement code

        var ret = {
            EvaluationResults: /*S26*/[ {
                ComplianceType: "",
                ResultRecordedTime: now(),
                ConfigRuleInvokedTime: now(),
                ResultToken: "",
                EvaluationResultIdentifier: {
                    OrderingTimestamp: now(),
                    EvaluationResultQualifier: {
                        ConfigRuleName: "",
                        ResourceType: "",
                        ResourceId: ""
                    }
                },
                Annotation: ""
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.DescribeConfigurationRecorderStatus = function DescribeConfigurationRecorderStatus(aws) {
        var ConfigurationRecorderNames = aws.params['ConfigurationRecorderNames'];


        // TODO implement code

        var ret = {
            ConfigurationRecordersStatus: [ {
                lastStatus: "",
                lastStatusChangeTime: now(),
                lastErrorMessage: "",
                lastStartTime: now(),
                name: "",
                lastErrorCode: "",
                lastStopTime: now(),
                recording: false
            } /*, ...*/ ]
        };
        return [200, ret];
    }
