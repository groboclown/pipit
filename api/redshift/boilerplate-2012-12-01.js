'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * Amazon Redshift version 2012-12-01
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol query
require('../../lib/aws-common/shape_http')('query', module.exports, 'http://redshift.amazonaws.com/doc/2012-12-01/');
// -----------------------------------
module.exports.DeleteCluster = function DeleteCluster(aws) {
  var clusterIdentifier = aws.params.ClusterIdentifier;
  var skipFinalClusterSnapshot = aws.params.SkipFinalClusterSnapshot /* Type boolean */;
  var finalClusterSnapshotIdentifier = aws.params.FinalClusterSnapshotIdentifier;
  if (!clusterIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterIdentifier'];
  }


  // TODO implement code

  var ret = {
    Cluster: /*Su*/{
      NodeType: '',
      HsmStatus: {
        HsmConfigurationIdentifier: '',
        HsmClientCertificateIdentifier: '',
        Status: '',
      },
      DBName: '',
      ClusterSnapshotCopyStatus: {
        DestinationRegion: '',
        RetentionPeriod: 0 /*Long*/,
        SnapshotCopyGrantName: '',
      },
      PreferredMaintenanceWindow: '',
      PubliclyAccessible: false,
      ClusterSecurityGroups: [ {
        ClusterSecurityGroupName: '',
        Status: '',
      }, /* ...*/ ],
      NumberOfNodes: 0,
      ClusterIdentifier: '',
      RestoreStatus: {
        ProgressInMegaBytes: 0 /*Long*/,
        Status: '',
        EstimatedTimeToCompletionInSeconds: 0 /*Long*/,
        CurrentRestoreRateInMegaBytesPerSecond: 0.0 /*Double*/,
        SnapshotSizeInMegaBytes: 0 /*Long*/,
        ElapsedTimeInSeconds: 0 /*Long*/,
      },
      VpcId: '',
      AllowVersionUpgrade: false,
      AvailabilityZone: '',
      Encrypted: false,
      ClusterParameterGroups: [ {
        ParameterApplyStatus: '',
        ParameterGroupName: '',
        ClusterParameterStatusList: [ {
          ParameterName: '',
          ParameterApplyStatus: '',
          ParameterApplyErrorDescription: '',
        }, /* ...*/ ],
      }, /* ...*/ ],
      ClusterNodes: [ {
        PrivateIPAddress: '',
        PublicIPAddress: '',
        NodeRole: '',
      }, /* ...*/ ],
      ClusterRevisionNumber: '',
      Endpoint: {
        Address: '',
        Port: 0,
      },
      VpcSecurityGroups: [ {
        VpcSecurityGroupId: '',
        Status: '',
      }, /* ...*/ ],
      ClusterVersion: '',
      AutomatedSnapshotRetentionPeriod: 0,
      ClusterStatus: '',
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
      MasterUsername: '',
      ModifyStatus: '',
      ClusterSubnetGroupName: '',
      ElasticIpStatus: {
        ElasticIp: '',
        Status: '',
      },
      KmsKeyId: '',
      PendingModifiedValues: {
        ClusterIdentifier: '',
        NodeType: '',
        ClusterVersion: '',
        AutomatedSnapshotRetentionPeriod: 0,
        ClusterType: '',
        NumberOfNodes: 0,
        MasterUserPassword: '',
      },
      ClusterPublicKey: '',
      ClusterCreateTime: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RevokeSnapshotAccess = function RevokeSnapshotAccess(aws) {
  var accountWithRestoreAccess = aws.params.AccountWithRestoreAccess;
  var snapshotClusterIdentifier = aws.params.SnapshotClusterIdentifier;
  var snapshotIdentifier = aws.params.SnapshotIdentifier;
  if (!snapshotIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SnapshotIdentifier'];
  }
  if (!accountWithRestoreAccess) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AccountWithRestoreAccess'];
  }


  // TODO implement code

  var ret = {
    Snapshot: /*Sd*/{
      NodeType: '',
      SnapshotType: '',
      Status: '',
      DBName: '',
      OwnerAccount: '',
      SnapshotIdentifier: '',
      ElapsedTimeInSeconds: 0 /*Long*/,
      EstimatedSecondsToCompletion: 0 /*Long*/,
      SnapshotCreateTime: awsCommon.timestamp(),
      NumberOfNodes: 0,
      ClusterIdentifier: '',
      AccountsWithRestoreAccess: [ {
        AccountId: '',
      }, /* ...*/ ],
      VpcId: '',
      MasterUsername: '',
      AvailabilityZone: '',
      Encrypted: false,
      ActualIncrementalBackupSizeInMegaBytes: 0.0 /*Double*/,
      Port: 0,
      BackupProgressInMegaBytes: 0.0 /*Double*/,
      ClusterVersion: '',
      CurrentBackupRateInMegaBytesPerSecond: 0.0 /*Double*/,
      SourceRegion: '',
      EncryptedWithHSM: false,
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
      RestorableNodeTypes: [ '', /* ...*/ ],
      TotalBackupSizeInMegaBytes: 0.0 /*Double*/,
      KmsKeyId: '',
      ClusterCreateTime: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AuthorizeSnapshotAccess = function AuthorizeSnapshotAccess(aws) {
  var accountWithRestoreAccess = aws.params.AccountWithRestoreAccess;
  var snapshotClusterIdentifier = aws.params.SnapshotClusterIdentifier;
  var snapshotIdentifier = aws.params.SnapshotIdentifier;
  if (!snapshotIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SnapshotIdentifier'];
  }
  if (!accountWithRestoreAccess) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AccountWithRestoreAccess'];
  }


  // TODO implement code

  var ret = {
    Snapshot: /*Sd*/{
      NodeType: '',
      SnapshotType: '',
      Status: '',
      DBName: '',
      OwnerAccount: '',
      SnapshotIdentifier: '',
      ElapsedTimeInSeconds: 0 /*Long*/,
      EstimatedSecondsToCompletion: 0 /*Long*/,
      SnapshotCreateTime: awsCommon.timestamp(),
      NumberOfNodes: 0,
      ClusterIdentifier: '',
      AccountsWithRestoreAccess: [ {
        AccountId: '',
      }, /* ...*/ ],
      VpcId: '',
      MasterUsername: '',
      AvailabilityZone: '',
      Encrypted: false,
      ActualIncrementalBackupSizeInMegaBytes: 0.0 /*Double*/,
      Port: 0,
      BackupProgressInMegaBytes: 0.0 /*Double*/,
      ClusterVersion: '',
      CurrentBackupRateInMegaBytesPerSecond: 0.0 /*Double*/,
      SourceRegion: '',
      EncryptedWithHSM: false,
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
      RestorableNodeTypes: [ '', /* ...*/ ],
      TotalBackupSizeInMegaBytes: 0.0 /*Double*/,
      KmsKeyId: '',
      ClusterCreateTime: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeHsmClientCertificates = function DescribeHsmClientCertificates(aws) {
  var marker = aws.params.Marker;
  var tagKeys = aws.params.TagKeys;
  var tagValues = aws.params.TagValues;
  var hsmClientCertificateIdentifier = aws.params.HsmClientCertificateIdentifier;
  var maxRecords = aws.params.MaxRecords /* Type integer */;


  // TODO implement code

  var ret = {
    Marker: '',
    HsmClientCertificates: [ /*S1w*/{
      HsmClientCertificateIdentifier: '',
      HsmClientCertificatePublicKey: '',
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeLoggingStatus = function DescribeLoggingStatus(aws) {
  var clusterIdentifier = aws.params.ClusterIdentifier;
  if (!clusterIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterIdentifier'];
  }


  // TODO implement code

  var ret = /*S3u*/{
    BucketName: '',
    LastSuccessfulDeliveryTime: awsCommon.timestamp(),
    S3KeyPrefix: '',
    LoggingEnabled: false,
    LastFailureTime: awsCommon.timestamp(),
    LastFailureMessage: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ModifySnapshotCopyRetentionPeriod = function ModifySnapshotCopyRetentionPeriod(aws) {
  var clusterIdentifier = aws.params.ClusterIdentifier;
  var retentionPeriod = aws.params.RetentionPeriod /* Type integer */;
  if (!clusterIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterIdentifier'];
  }
  if (!retentionPeriod) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RetentionPeriod'];
  }


  // TODO implement code

  var ret = {
    Cluster: /*Su*/{
      NodeType: '',
      HsmStatus: {
        HsmConfigurationIdentifier: '',
        HsmClientCertificateIdentifier: '',
        Status: '',
      },
      DBName: '',
      ClusterSnapshotCopyStatus: {
        DestinationRegion: '',
        RetentionPeriod: 0 /*Long*/,
        SnapshotCopyGrantName: '',
      },
      PreferredMaintenanceWindow: '',
      PubliclyAccessible: false,
      ClusterSecurityGroups: [ {
        ClusterSecurityGroupName: '',
        Status: '',
      }, /* ...*/ ],
      NumberOfNodes: 0,
      ClusterIdentifier: '',
      RestoreStatus: {
        ProgressInMegaBytes: 0 /*Long*/,
        Status: '',
        EstimatedTimeToCompletionInSeconds: 0 /*Long*/,
        CurrentRestoreRateInMegaBytesPerSecond: 0.0 /*Double*/,
        SnapshotSizeInMegaBytes: 0 /*Long*/,
        ElapsedTimeInSeconds: 0 /*Long*/,
      },
      VpcId: '',
      AllowVersionUpgrade: false,
      AvailabilityZone: '',
      Encrypted: false,
      ClusterParameterGroups: [ {
        ParameterApplyStatus: '',
        ParameterGroupName: '',
        ClusterParameterStatusList: [ {
          ParameterName: '',
          ParameterApplyStatus: '',
          ParameterApplyErrorDescription: '',
        }, /* ...*/ ],
      }, /* ...*/ ],
      ClusterNodes: [ {
        PrivateIPAddress: '',
        PublicIPAddress: '',
        NodeRole: '',
      }, /* ...*/ ],
      ClusterRevisionNumber: '',
      Endpoint: {
        Address: '',
        Port: 0,
      },
      VpcSecurityGroups: [ {
        VpcSecurityGroupId: '',
        Status: '',
      }, /* ...*/ ],
      ClusterVersion: '',
      AutomatedSnapshotRetentionPeriod: 0,
      ClusterStatus: '',
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
      MasterUsername: '',
      ModifyStatus: '',
      ClusterSubnetGroupName: '',
      ElasticIpStatus: {
        ElasticIp: '',
        Status: '',
      },
      KmsKeyId: '',
      PendingModifiedValues: {
        ClusterIdentifier: '',
        NodeType: '',
        ClusterVersion: '',
        AutomatedSnapshotRetentionPeriod: 0,
        ClusterType: '',
        NumberOfNodes: 0,
        MasterUserPassword: '',
      },
      ClusterPublicKey: '',
      ClusterCreateTime: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteTags = function DeleteTags(aws) {
  var resourceName = aws.params.ResourceName;
  var tagKeys = aws.params.TagKeys;
  if (!resourceName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ResourceName'];
  }
  if (!tagKeys) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TagKeys'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.CreateCluster = function CreateCluster(aws) {
  var nodeType = aws.params.NodeType;
  var dBName = aws.params.DBName;
  var tags = aws.params.Tags;
  var publiclyAccessible = aws.params.PubliclyAccessible /* Type boolean */;
  var clusterSecurityGroups = aws.params.ClusterSecurityGroups;
  var numberOfNodes = aws.params.NumberOfNodes /* Type integer */;
  var clusterIdentifier = aws.params.ClusterIdentifier;
  var allowVersionUpgrade = aws.params.AllowVersionUpgrade /* Type boolean */;
  var availabilityZone = aws.params.AvailabilityZone;
  var encrypted = aws.params.Encrypted /* Type boolean */;
  var elasticIp = aws.params.ElasticIp;
  var hsmConfigurationIdentifier = aws.params.HsmConfigurationIdentifier;
  var port = aws.params.Port /* Type integer */;
  var vpcSecurityGroupIds = aws.params.VpcSecurityGroupIds;
  var masterUsername = aws.params.MasterUsername;
  var clusterVersion = aws.params.ClusterVersion;
  var masterUserPassword = aws.params.MasterUserPassword;
  var preferredMaintenanceWindow = aws.params.PreferredMaintenanceWindow;
  var clusterParameterGroupName = aws.params.ClusterParameterGroupName;
  var hsmClientCertificateIdentifier = aws.params.HsmClientCertificateIdentifier;
  var clusterSubnetGroupName = aws.params.ClusterSubnetGroupName;
  var automatedSnapshotRetentionPeriod = aws.params.AutomatedSnapshotRetentionPeriod /* Type integer */;
  var clusterType = aws.params.ClusterType;
  var kmsKeyId = aws.params.KmsKeyId;
  if (!clusterIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterIdentifier'];
  }
  if (!nodeType) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter NodeType'];
  }
  if (!masterUsername) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MasterUsername'];
  }
  if (!masterUserPassword) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MasterUserPassword'];
  }


  // TODO implement code

  var ret = {
    Cluster: /*Su*/{
      NodeType: '',
      HsmStatus: {
        HsmConfigurationIdentifier: '',
        HsmClientCertificateIdentifier: '',
        Status: '',
      },
      DBName: '',
      ClusterSnapshotCopyStatus: {
        DestinationRegion: '',
        RetentionPeriod: 0 /*Long*/,
        SnapshotCopyGrantName: '',
      },
      PreferredMaintenanceWindow: '',
      PubliclyAccessible: false,
      ClusterSecurityGroups: [ {
        ClusterSecurityGroupName: '',
        Status: '',
      }, /* ...*/ ],
      NumberOfNodes: 0,
      ClusterIdentifier: '',
      RestoreStatus: {
        ProgressInMegaBytes: 0 /*Long*/,
        Status: '',
        EstimatedTimeToCompletionInSeconds: 0 /*Long*/,
        CurrentRestoreRateInMegaBytesPerSecond: 0.0 /*Double*/,
        SnapshotSizeInMegaBytes: 0 /*Long*/,
        ElapsedTimeInSeconds: 0 /*Long*/,
      },
      VpcId: '',
      AllowVersionUpgrade: false,
      AvailabilityZone: '',
      Encrypted: false,
      ClusterParameterGroups: [ {
        ParameterApplyStatus: '',
        ParameterGroupName: '',
        ClusterParameterStatusList: [ {
          ParameterName: '',
          ParameterApplyStatus: '',
          ParameterApplyErrorDescription: '',
        }, /* ...*/ ],
      }, /* ...*/ ],
      ClusterNodes: [ {
        PrivateIPAddress: '',
        PublicIPAddress: '',
        NodeRole: '',
      }, /* ...*/ ],
      ClusterRevisionNumber: '',
      Endpoint: {
        Address: '',
        Port: 0,
      },
      VpcSecurityGroups: [ {
        VpcSecurityGroupId: '',
        Status: '',
      }, /* ...*/ ],
      ClusterVersion: '',
      AutomatedSnapshotRetentionPeriod: 0,
      ClusterStatus: '',
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
      MasterUsername: '',
      ModifyStatus: '',
      ClusterSubnetGroupName: '',
      ElasticIpStatus: {
        ElasticIp: '',
        Status: '',
      },
      KmsKeyId: '',
      PendingModifiedValues: {
        ClusterIdentifier: '',
        NodeType: '',
        ClusterVersion: '',
        AutomatedSnapshotRetentionPeriod: 0,
        ClusterType: '',
        NumberOfNodes: 0,
        MasterUserPassword: '',
      },
      ClusterPublicKey: '',
      ClusterCreateTime: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeClusterSnapshots = function DescribeClusterSnapshots(aws) {
  var endTime = aws.params.EndTime /* Type timestamp */;
  var tagKeys = aws.params.TagKeys;
  var startTime = aws.params.StartTime /* Type timestamp */;
  var snapshotType = aws.params.SnapshotType;
  var maxRecords = aws.params.MaxRecords /* Type integer */;
  var tagValues = aws.params.TagValues;
  var marker = aws.params.Marker;
  var clusterIdentifier = aws.params.ClusterIdentifier;
  var ownerAccount = aws.params.OwnerAccount;
  var snapshotIdentifier = aws.params.SnapshotIdentifier;


  // TODO implement code

  var ret = {
    Marker: '',
    Snapshots: [ /*Sd*/{
      NodeType: '',
      SnapshotType: '',
      Status: '',
      DBName: '',
      OwnerAccount: '',
      SnapshotIdentifier: '',
      ElapsedTimeInSeconds: 0 /*Long*/,
      EstimatedSecondsToCompletion: 0 /*Long*/,
      SnapshotCreateTime: awsCommon.timestamp(),
      NumberOfNodes: 0,
      ClusterIdentifier: '',
      AccountsWithRestoreAccess: [ {
        AccountId: '',
      }, /* ...*/ ],
      VpcId: '',
      MasterUsername: '',
      AvailabilityZone: '',
      Encrypted: false,
      ActualIncrementalBackupSizeInMegaBytes: 0.0 /*Double*/,
      Port: 0,
      BackupProgressInMegaBytes: 0.0 /*Double*/,
      ClusterVersion: '',
      CurrentBackupRateInMegaBytesPerSecond: 0.0 /*Double*/,
      SourceRegion: '',
      EncryptedWithHSM: false,
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
      RestorableNodeTypes: [ '', /* ...*/ ],
      TotalBackupSizeInMegaBytes: 0.0 /*Double*/,
      KmsKeyId: '',
      ClusterCreateTime: awsCommon.timestamp(),
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeEventSubscriptions = function DescribeEventSubscriptions(aws) {
  var marker = aws.params.Marker;
  var subscriptionName = aws.params.SubscriptionName;
  var maxRecords = aws.params.MaxRecords /* Type integer */;


  // TODO implement code

  var ret = {
    Marker: '',
    EventSubscriptionsList: [ /*S1t*/{
      EventCategoriesList: /*S1r*/[ '', /* ...*/ ],
      Enabled: false,
      SourceType: '',
      CustSubscriptionId: '',
      Status: '',
      SnsTopicArn: '',
      SourceIdsList: /*S1q*/[ '', /* ...*/ ],
      SubscriptionCreationTime: awsCommon.timestamp(),
      CustomerAwsId: '',
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
      Severity: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ModifyClusterParameterGroup = function ModifyClusterParameterGroup(aws) {
  var parameterGroupName = aws.params.ParameterGroupName;
  var parameters = aws.params.Parameters;
  if (!parameterGroupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ParameterGroupName'];
  }
  if (!parameters) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Parameters'];
  }


  // TODO implement code

  var ret = /*S4x*/{
    ParameterGroupStatus: '',
    ParameterGroupName: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateEventSubscription = function CreateEventSubscription(aws) {
  var enabled = aws.params.Enabled /* Type boolean */;
  var sourceType = aws.params.SourceType;
  var sourceIds = aws.params.SourceIds;
  var snsTopicArn = aws.params.SnsTopicArn;
  var subscriptionName = aws.params.SubscriptionName;
  var severity = aws.params.Severity;
  var tags = aws.params.Tags;
  var eventCategories = aws.params.EventCategories;
  if (!subscriptionName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SubscriptionName'];
  }
  if (!snsTopicArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SnsTopicArn'];
  }


  // TODO implement code

  var ret = {
    EventSubscription: /*S1t*/{
      EventCategoriesList: /*S1r*/[ '', /* ...*/ ],
      Enabled: false,
      SourceType: '',
      CustSubscriptionId: '',
      Status: '',
      SnsTopicArn: '',
      SourceIdsList: /*S1q*/[ '', /* ...*/ ],
      SubscriptionCreationTime: awsCommon.timestamp(),
      CustomerAwsId: '',
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
      Severity: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeDefaultClusterParameters = function DescribeDefaultClusterParameters(aws) {
  var marker = aws.params.Marker;
  var parameterGroupFamily = aws.params.ParameterGroupFamily;
  var maxRecords = aws.params.MaxRecords /* Type integer */;
  if (!parameterGroupFamily) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ParameterGroupFamily'];
  }


  // TODO implement code

  var ret = {
    DefaultClusterParameters: {
      Marker: '',
      ParameterGroupFamily: '',
      Parameters: /*S2n*/[ {
        ParameterValue: '',
        DataType: '',
        Description: '',
        MinimumEngineVersion: '',
        ParameterName: '',
        ApplyType: '',
        Source: '',
        AllowedValues: '',
        IsModifiable: false,
      }, /* ...*/ ],
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteEventSubscription = function DeleteEventSubscription(aws) {
  var subscriptionName = aws.params.SubscriptionName;
  if (!subscriptionName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SubscriptionName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteClusterSnapshot = function DeleteClusterSnapshot(aws) {
  var snapshotClusterIdentifier = aws.params.SnapshotClusterIdentifier;
  var snapshotIdentifier = aws.params.SnapshotIdentifier;
  if (!snapshotIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SnapshotIdentifier'];
  }


  // TODO implement code

  var ret = {
    Snapshot: /*Sd*/{
      NodeType: '',
      SnapshotType: '',
      Status: '',
      DBName: '',
      OwnerAccount: '',
      SnapshotIdentifier: '',
      ElapsedTimeInSeconds: 0 /*Long*/,
      EstimatedSecondsToCompletion: 0 /*Long*/,
      SnapshotCreateTime: awsCommon.timestamp(),
      NumberOfNodes: 0,
      ClusterIdentifier: '',
      AccountsWithRestoreAccess: [ {
        AccountId: '',
      }, /* ...*/ ],
      VpcId: '',
      MasterUsername: '',
      AvailabilityZone: '',
      Encrypted: false,
      ActualIncrementalBackupSizeInMegaBytes: 0.0 /*Double*/,
      Port: 0,
      BackupProgressInMegaBytes: 0.0 /*Double*/,
      ClusterVersion: '',
      CurrentBackupRateInMegaBytesPerSecond: 0.0 /*Double*/,
      SourceRegion: '',
      EncryptedWithHSM: false,
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
      RestorableNodeTypes: [ '', /* ...*/ ],
      TotalBackupSizeInMegaBytes: 0.0 /*Double*/,
      KmsKeyId: '',
      ClusterCreateTime: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.EnableLogging = function EnableLogging(aws) {
  var bucketName = aws.params.BucketName;
  var clusterIdentifier = aws.params.ClusterIdentifier;
  var s3KeyPrefix = aws.params.S3KeyPrefix;
  if (!clusterIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterIdentifier'];
  }
  if (!bucketName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter BucketName'];
  }


  // TODO implement code

  var ret = /*S3u*/{
    BucketName: '',
    LastSuccessfulDeliveryTime: awsCommon.timestamp(),
    S3KeyPrefix: '',
    LoggingEnabled: false,
    LastFailureTime: awsCommon.timestamp(),
    LastFailureMessage: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ModifyEventSubscription = function ModifyEventSubscription(aws) {
  var enabled = aws.params.Enabled /* Type boolean */;
  var sourceType = aws.params.SourceType;
  var sourceIds = aws.params.SourceIds;
  var snsTopicArn = aws.params.SnsTopicArn;
  var subscriptionName = aws.params.SubscriptionName;
  var severity = aws.params.Severity;
  var eventCategories = aws.params.EventCategories;
  if (!subscriptionName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SubscriptionName'];
  }


  // TODO implement code

  var ret = {
    EventSubscription: /*S1t*/{
      EventCategoriesList: /*S1r*/[ '', /* ...*/ ],
      Enabled: false,
      SourceType: '',
      CustSubscriptionId: '',
      Status: '',
      SnsTopicArn: '',
      SourceIdsList: /*S1q*/[ '', /* ...*/ ],
      SubscriptionCreationTime: awsCommon.timestamp(),
      CustomerAwsId: '',
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
      Severity: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteHsmClientCertificate = function DeleteHsmClientCertificate(aws) {
  var hsmClientCertificateIdentifier = aws.params.HsmClientCertificateIdentifier;
  if (!hsmClientCertificateIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter HsmClientCertificateIdentifier'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeClusterSecurityGroups = function DescribeClusterSecurityGroups(aws) {
  var marker = aws.params.Marker;
  var tagKeys = aws.params.TagKeys;
  var tagValues = aws.params.TagValues;
  var clusterSecurityGroupName = aws.params.ClusterSecurityGroupName;
  var maxRecords = aws.params.MaxRecords /* Type integer */;


  // TODO implement code

  var ret = {
    Marker: '',
    ClusterSecurityGroups: [ /*S4*/{
      Description: '',
      EC2SecurityGroups: [ {
        EC2SecurityGroupName: '',
        EC2SecurityGroupOwnerId: '',
        Status: '',
        Tags: /*S7*/[ /*S8*/{
          Value: '',
          Key: '',
        }, /* ...*/ ],
      }, /* ...*/ ],
      IPRanges: [ {
        CIDRIP: '',
        Tags: /*S7*/[ /*S8*/{
          Value: '',
          Key: '',
        }, /* ...*/ ],
        Status: '',
      }, /* ...*/ ],
      ClusterSecurityGroupName: '',
      Tags: /*S7*/[ /*S8*/{
          Value: '',
          Key: '',
        }, /* ...*/ ],
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeTags = function DescribeTags(aws) {
  var resourceName = aws.params.ResourceName;
  var resourceType = aws.params.ResourceType;
  var tagKeys = aws.params.TagKeys;
  var tagValues = aws.params.TagValues;
  var marker = aws.params.Marker;
  var maxRecords = aws.params.MaxRecords /* Type integer */;


  // TODO implement code

  var ret = {
    Marker: '',
    TaggedResources: [ {
      ResourceName: '',
      ResourceType: '',
      Tag: /*S8*/{
        Value: '',
        Key: '',
      },
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeClusters = function DescribeClusters(aws) {
  var marker = aws.params.Marker;
  var tagKeys = aws.params.TagKeys;
  var clusterIdentifier = aws.params.ClusterIdentifier;
  var tagValues = aws.params.TagValues;
  var maxRecords = aws.params.MaxRecords /* Type integer */;


  // TODO implement code

  var ret = {
    Marker: '',
    Clusters: [ /*Su*/{
      NodeType: '',
      HsmStatus: {
        HsmConfigurationIdentifier: '',
        HsmClientCertificateIdentifier: '',
        Status: '',
      },
      DBName: '',
      ClusterSnapshotCopyStatus: {
        DestinationRegion: '',
        RetentionPeriod: 0 /*Long*/,
        SnapshotCopyGrantName: '',
      },
      PreferredMaintenanceWindow: '',
      PubliclyAccessible: false,
      ClusterSecurityGroups: [ {
        ClusterSecurityGroupName: '',
        Status: '',
      }, /* ...*/ ],
      NumberOfNodes: 0,
      ClusterIdentifier: '',
      RestoreStatus: {
        ProgressInMegaBytes: 0 /*Long*/,
        Status: '',
        EstimatedTimeToCompletionInSeconds: 0 /*Long*/,
        CurrentRestoreRateInMegaBytesPerSecond: 0.0 /*Double*/,
        SnapshotSizeInMegaBytes: 0 /*Long*/,
        ElapsedTimeInSeconds: 0 /*Long*/,
      },
      VpcId: '',
      AllowVersionUpgrade: false,
      AvailabilityZone: '',
      Encrypted: false,
      ClusterParameterGroups: [ {
        ParameterApplyStatus: '',
        ParameterGroupName: '',
        ClusterParameterStatusList: [ {
          ParameterName: '',
          ParameterApplyStatus: '',
          ParameterApplyErrorDescription: '',
        }, /* ...*/ ],
      }, /* ...*/ ],
      ClusterNodes: [ {
        PrivateIPAddress: '',
        PublicIPAddress: '',
        NodeRole: '',
      }, /* ...*/ ],
      ClusterRevisionNumber: '',
      Endpoint: {
        Address: '',
        Port: 0,
      },
      VpcSecurityGroups: [ {
        VpcSecurityGroupId: '',
        Status: '',
      }, /* ...*/ ],
      ClusterVersion: '',
      AutomatedSnapshotRetentionPeriod: 0,
      ClusterStatus: '',
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
      MasterUsername: '',
      ModifyStatus: '',
      ClusterSubnetGroupName: '',
      ElasticIpStatus: {
        ElasticIp: '',
        Status: '',
      },
      KmsKeyId: '',
      PendingModifiedValues: {
        ClusterIdentifier: '',
        NodeType: '',
        ClusterVersion: '',
        AutomatedSnapshotRetentionPeriod: 0,
        ClusterType: '',
        NumberOfNodes: 0,
        MasterUserPassword: '',
      },
      ClusterPublicKey: '',
      ClusterCreateTime: awsCommon.timestamp(),
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ModifyClusterSubnetGroup = function ModifyClusterSubnetGroup(aws) {
  var description = aws.params.Description;
  var subnetIds = aws.params.SubnetIds;
  var clusterSubnetGroupName = aws.params.ClusterSubnetGroupName;
  if (!clusterSubnetGroupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterSubnetGroupName'];
  }
  if (!subnetIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SubnetIds'];
  }


  // TODO implement code

  var ret = {
    ClusterSubnetGroup: /*S1l*/{
      SubnetGroupStatus: '',
      Subnets: [ {
        SubnetAvailabilityZone: /*S1o*/{
          Name: '',
        },
        SubnetIdentifier: '',
        SubnetStatus: '',
      }, /* ...*/ ],
      ClusterSubnetGroupName: '',
      Description: '',
      VpcId: '',
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteHsmConfiguration = function DeleteHsmConfiguration(aws) {
  var hsmConfigurationIdentifier = aws.params.HsmConfigurationIdentifier;
  if (!hsmConfigurationIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter HsmConfigurationIdentifier'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ModifyCluster = function ModifyCluster(aws) {
  var hsmConfigurationIdentifier = aws.params.HsmConfigurationIdentifier;
  var nodeType = aws.params.NodeType;
  var vpcSecurityGroupIds = aws.params.VpcSecurityGroupIds;
  var clusterVersion = aws.params.ClusterVersion;
  var newClusterIdentifier = aws.params.NewClusterIdentifier;
  var automatedSnapshotRetentionPeriod = aws.params.AutomatedSnapshotRetentionPeriod /* Type integer */;
  var preferredMaintenanceWindow = aws.params.PreferredMaintenanceWindow;
  var clusterParameterGroupName = aws.params.ClusterParameterGroupName;
  var clusterSecurityGroups = aws.params.ClusterSecurityGroups;
  var hsmClientCertificateIdentifier = aws.params.HsmClientCertificateIdentifier;
  var clusterType = aws.params.ClusterType;
  var numberOfNodes = aws.params.NumberOfNodes /* Type integer */;
  var clusterIdentifier = aws.params.ClusterIdentifier;
  var allowVersionUpgrade = aws.params.AllowVersionUpgrade /* Type boolean */;
  var masterUserPassword = aws.params.MasterUserPassword;
  if (!clusterIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterIdentifier'];
  }


  // TODO implement code

  var ret = {
    Cluster: /*Su*/{
      NodeType: '',
      HsmStatus: {
        HsmConfigurationIdentifier: '',
        HsmClientCertificateIdentifier: '',
        Status: '',
      },
      DBName: '',
      ClusterSnapshotCopyStatus: {
        DestinationRegion: '',
        RetentionPeriod: 0 /*Long*/,
        SnapshotCopyGrantName: '',
      },
      PreferredMaintenanceWindow: '',
      PubliclyAccessible: false,
      ClusterSecurityGroups: [ {
        ClusterSecurityGroupName: '',
        Status: '',
      }, /* ...*/ ],
      NumberOfNodes: 0,
      ClusterIdentifier: '',
      RestoreStatus: {
        ProgressInMegaBytes: 0 /*Long*/,
        Status: '',
        EstimatedTimeToCompletionInSeconds: 0 /*Long*/,
        CurrentRestoreRateInMegaBytesPerSecond: 0.0 /*Double*/,
        SnapshotSizeInMegaBytes: 0 /*Long*/,
        ElapsedTimeInSeconds: 0 /*Long*/,
      },
      VpcId: '',
      AllowVersionUpgrade: false,
      AvailabilityZone: '',
      Encrypted: false,
      ClusterParameterGroups: [ {
        ParameterApplyStatus: '',
        ParameterGroupName: '',
        ClusterParameterStatusList: [ {
          ParameterName: '',
          ParameterApplyStatus: '',
          ParameterApplyErrorDescription: '',
        }, /* ...*/ ],
      }, /* ...*/ ],
      ClusterNodes: [ {
        PrivateIPAddress: '',
        PublicIPAddress: '',
        NodeRole: '',
      }, /* ...*/ ],
      ClusterRevisionNumber: '',
      Endpoint: {
        Address: '',
        Port: 0,
      },
      VpcSecurityGroups: [ {
        VpcSecurityGroupId: '',
        Status: '',
      }, /* ...*/ ],
      ClusterVersion: '',
      AutomatedSnapshotRetentionPeriod: 0,
      ClusterStatus: '',
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
      MasterUsername: '',
      ModifyStatus: '',
      ClusterSubnetGroupName: '',
      ElasticIpStatus: {
        ElasticIp: '',
        Status: '',
      },
      KmsKeyId: '',
      PendingModifiedValues: {
        ClusterIdentifier: '',
        NodeType: '',
        ClusterVersion: '',
        AutomatedSnapshotRetentionPeriod: 0,
        ClusterType: '',
        NumberOfNodes: 0,
        MasterUserPassword: '',
      },
      ClusterPublicKey: '',
      ClusterCreateTime: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.PurchaseReservedNodeOffering = function PurchaseReservedNodeOffering(aws) {
  var reservedNodeOfferingId = aws.params.ReservedNodeOfferingId;
  var nodeCount = aws.params.NodeCount /* Type integer */;
  if (!reservedNodeOfferingId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ReservedNodeOfferingId'];
  }


  // TODO implement code

  var ret = {
    ReservedNode: /*S49*/{
      UsagePrice: 0.0 /*Double*/,
      Duration: 0,
      StartTime: awsCommon.timestamp(),
      NodeType: '',
      ReservedNodeId: '',
      ReservedNodeOfferingId: '',
      OfferingType: '',
      NodeCount: 0,
      CurrencyCode: '',
      FixedPrice: 0.0 /*Double*/,
      RecurringCharges: /*S44*/[ {
        RecurringChargeFrequency: '',
        RecurringChargeAmount: 0.0 /*Double*/,
      }, /* ...*/ ],
      State: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeEvents = function DescribeEvents(aws) {
  var endTime = aws.params.EndTime /* Type timestamp */;
  var sourceType = aws.params.SourceType;
  var startTime = aws.params.StartTime /* Type timestamp */;
  var sourceIdentifier = aws.params.SourceIdentifier;
  var marker = aws.params.Marker;
  var duration = aws.params.Duration /* Type integer */;
  var maxRecords = aws.params.MaxRecords /* Type integer */;


  // TODO implement code

  var ret = {
    Marker: '',
    Events: [ {
      Message: '',
      SourceType: '',
      Date: awsCommon.timestamp(),
      SourceIdentifier: '',
      EventCategories: /*S1r*/[ '', /* ...*/ ],
      EventId: '',
      Severity: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeClusterVersions = function DescribeClusterVersions(aws) {
  var marker = aws.params.Marker;
  var clusterVersion = aws.params.ClusterVersion;
  var clusterParameterGroupFamily = aws.params.ClusterParameterGroupFamily;
  var maxRecords = aws.params.MaxRecords /* Type integer */;


  // TODO implement code

  var ret = {
    Marker: '',
    ClusterVersions: [ {
      Description: '',
      ClusterVersion: '',
      ClusterParameterGroupFamily: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RebootCluster = function RebootCluster(aws) {
  var clusterIdentifier = aws.params.ClusterIdentifier;
  if (!clusterIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterIdentifier'];
  }


  // TODO implement code

  var ret = {
    Cluster: /*Su*/{
      NodeType: '',
      HsmStatus: {
        HsmConfigurationIdentifier: '',
        HsmClientCertificateIdentifier: '',
        Status: '',
      },
      DBName: '',
      ClusterSnapshotCopyStatus: {
        DestinationRegion: '',
        RetentionPeriod: 0 /*Long*/,
        SnapshotCopyGrantName: '',
      },
      PreferredMaintenanceWindow: '',
      PubliclyAccessible: false,
      ClusterSecurityGroups: [ {
        ClusterSecurityGroupName: '',
        Status: '',
      }, /* ...*/ ],
      NumberOfNodes: 0,
      ClusterIdentifier: '',
      RestoreStatus: {
        ProgressInMegaBytes: 0 /*Long*/,
        Status: '',
        EstimatedTimeToCompletionInSeconds: 0 /*Long*/,
        CurrentRestoreRateInMegaBytesPerSecond: 0.0 /*Double*/,
        SnapshotSizeInMegaBytes: 0 /*Long*/,
        ElapsedTimeInSeconds: 0 /*Long*/,
      },
      VpcId: '',
      AllowVersionUpgrade: false,
      AvailabilityZone: '',
      Encrypted: false,
      ClusterParameterGroups: [ {
        ParameterApplyStatus: '',
        ParameterGroupName: '',
        ClusterParameterStatusList: [ {
          ParameterName: '',
          ParameterApplyStatus: '',
          ParameterApplyErrorDescription: '',
        }, /* ...*/ ],
      }, /* ...*/ ],
      ClusterNodes: [ {
        PrivateIPAddress: '',
        PublicIPAddress: '',
        NodeRole: '',
      }, /* ...*/ ],
      ClusterRevisionNumber: '',
      Endpoint: {
        Address: '',
        Port: 0,
      },
      VpcSecurityGroups: [ {
        VpcSecurityGroupId: '',
        Status: '',
      }, /* ...*/ ],
      ClusterVersion: '',
      AutomatedSnapshotRetentionPeriod: 0,
      ClusterStatus: '',
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
      MasterUsername: '',
      ModifyStatus: '',
      ClusterSubnetGroupName: '',
      ElasticIpStatus: {
        ElasticIp: '',
        Status: '',
      },
      KmsKeyId: '',
      PendingModifiedValues: {
        ClusterIdentifier: '',
        NodeType: '',
        ClusterVersion: '',
        AutomatedSnapshotRetentionPeriod: 0,
        ClusterType: '',
        NumberOfNodes: 0,
        MasterUserPassword: '',
      },
      ClusterPublicKey: '',
      ClusterCreateTime: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeClusterSubnetGroups = function DescribeClusterSubnetGroups(aws) {
  var marker = aws.params.Marker;
  var tagKeys = aws.params.TagKeys;
  var maxRecords = aws.params.MaxRecords /* Type integer */;
  var tagValues = aws.params.TagValues;
  var clusterSubnetGroupName = aws.params.ClusterSubnetGroupName;


  // TODO implement code

  var ret = {
    Marker: '',
    ClusterSubnetGroups: [ /*S1l*/{
      SubnetGroupStatus: '',
      Subnets: [ {
        SubnetAvailabilityZone: /*S1o*/{
          Name: '',
        },
        SubnetIdentifier: '',
        SubnetStatus: '',
      }, /* ...*/ ],
      ClusterSubnetGroupName: '',
      Description: '',
      VpcId: '',
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateClusterParameterGroup = function CreateClusterParameterGroup(aws) {
  var description = aws.params.Description;
  var parameterGroupFamily = aws.params.ParameterGroupFamily;
  var parameterGroupName = aws.params.ParameterGroupName;
  var tags = aws.params.Tags;
  if (!parameterGroupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ParameterGroupName'];
  }
  if (!parameterGroupFamily) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ParameterGroupFamily'];
  }
  if (!description) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Description'];
  }


  // TODO implement code

  var ret = {
    ClusterParameterGroup: /*S1d*/{
      Description: '',
      ParameterGroupFamily: '',
      ParameterGroupName: '',
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateHsmConfiguration = function CreateHsmConfiguration(aws) {
  var hsmIpAddress = aws.params.HsmIpAddress;
  var hsmConfigurationIdentifier = aws.params.HsmConfigurationIdentifier;
  var hsmServerPublicCertificate = aws.params.HsmServerPublicCertificate;
  var description = aws.params.Description;
  var hsmPartitionPassword = aws.params.HsmPartitionPassword;
  var tags = aws.params.Tags;
  var hsmPartitionName = aws.params.HsmPartitionName;
  if (!hsmConfigurationIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter HsmConfigurationIdentifier'];
  }
  if (!description) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Description'];
  }
  if (!hsmIpAddress) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter HsmIpAddress'];
  }
  if (!hsmPartitionName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter HsmPartitionName'];
  }
  if (!hsmPartitionPassword) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter HsmPartitionPassword'];
  }
  if (!hsmServerPublicCertificate) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter HsmServerPublicCertificate'];
  }


  // TODO implement code

  var ret = {
    HsmConfiguration: /*S1z*/{
      Description: '',
      HsmIpAddress: '',
      HsmConfigurationIdentifier: '',
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
      HsmPartitionName: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteClusterSecurityGroup = function DeleteClusterSecurityGroup(aws) {
  var clusterSecurityGroupName = aws.params.ClusterSecurityGroupName;
  if (!clusterSecurityGroupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterSecurityGroupName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.CreateClusterSubnetGroup = function CreateClusterSubnetGroup(aws) {
  var description = aws.params.Description;
  var subnetIds = aws.params.SubnetIds;
  var tags = aws.params.Tags;
  var clusterSubnetGroupName = aws.params.ClusterSubnetGroupName;
  if (!clusterSubnetGroupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterSubnetGroupName'];
  }
  if (!description) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Description'];
  }
  if (!subnetIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SubnetIds'];
  }


  // TODO implement code

  var ret = {
    ClusterSubnetGroup: /*S1l*/{
      SubnetGroupStatus: '',
      Subnets: [ {
        SubnetAvailabilityZone: /*S1o*/{
          Name: '',
        },
        SubnetIdentifier: '',
        SubnetStatus: '',
      }, /* ...*/ ],
      ClusterSubnetGroupName: '',
      Description: '',
      VpcId: '',
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DisableSnapshotCopy = function DisableSnapshotCopy(aws) {
  var clusterIdentifier = aws.params.ClusterIdentifier;
  if (!clusterIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterIdentifier'];
  }


  // TODO implement code

  var ret = {
    Cluster: /*Su*/{
      NodeType: '',
      HsmStatus: {
        HsmConfigurationIdentifier: '',
        HsmClientCertificateIdentifier: '',
        Status: '',
      },
      DBName: '',
      ClusterSnapshotCopyStatus: {
        DestinationRegion: '',
        RetentionPeriod: 0 /*Long*/,
        SnapshotCopyGrantName: '',
      },
      PreferredMaintenanceWindow: '',
      PubliclyAccessible: false,
      ClusterSecurityGroups: [ {
        ClusterSecurityGroupName: '',
        Status: '',
      }, /* ...*/ ],
      NumberOfNodes: 0,
      ClusterIdentifier: '',
      RestoreStatus: {
        ProgressInMegaBytes: 0 /*Long*/,
        Status: '',
        EstimatedTimeToCompletionInSeconds: 0 /*Long*/,
        CurrentRestoreRateInMegaBytesPerSecond: 0.0 /*Double*/,
        SnapshotSizeInMegaBytes: 0 /*Long*/,
        ElapsedTimeInSeconds: 0 /*Long*/,
      },
      VpcId: '',
      AllowVersionUpgrade: false,
      AvailabilityZone: '',
      Encrypted: false,
      ClusterParameterGroups: [ {
        ParameterApplyStatus: '',
        ParameterGroupName: '',
        ClusterParameterStatusList: [ {
          ParameterName: '',
          ParameterApplyStatus: '',
          ParameterApplyErrorDescription: '',
        }, /* ...*/ ],
      }, /* ...*/ ],
      ClusterNodes: [ {
        PrivateIPAddress: '',
        PublicIPAddress: '',
        NodeRole: '',
      }, /* ...*/ ],
      ClusterRevisionNumber: '',
      Endpoint: {
        Address: '',
        Port: 0,
      },
      VpcSecurityGroups: [ {
        VpcSecurityGroupId: '',
        Status: '',
      }, /* ...*/ ],
      ClusterVersion: '',
      AutomatedSnapshotRetentionPeriod: 0,
      ClusterStatus: '',
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
      MasterUsername: '',
      ModifyStatus: '',
      ClusterSubnetGroupName: '',
      ElasticIpStatus: {
        ElasticIp: '',
        Status: '',
      },
      KmsKeyId: '',
      PendingModifiedValues: {
        ClusterIdentifier: '',
        NodeType: '',
        ClusterVersion: '',
        AutomatedSnapshotRetentionPeriod: 0,
        ClusterType: '',
        NumberOfNodes: 0,
        MasterUserPassword: '',
      },
      ClusterPublicKey: '',
      ClusterCreateTime: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RestoreFromClusterSnapshot = function RestoreFromClusterSnapshot(aws) {
  var elasticIp = aws.params.ElasticIp;
  var hsmConfigurationIdentifier = aws.params.HsmConfigurationIdentifier;
  var kmsKeyId = aws.params.KmsKeyId;
  var port = aws.params.Port /* Type integer */;
  var snapshotClusterIdentifier = aws.params.SnapshotClusterIdentifier;
  var vpcSecurityGroupIds = aws.params.VpcSecurityGroupIds;
  var preferredMaintenanceWindow = aws.params.PreferredMaintenanceWindow;
  var ownerAccount = aws.params.OwnerAccount;
  var snapshotIdentifier = aws.params.SnapshotIdentifier;
  var publiclyAccessible = aws.params.PubliclyAccessible /* Type boolean */;
  var clusterParameterGroupName = aws.params.ClusterParameterGroupName;
  var clusterSecurityGroups = aws.params.ClusterSecurityGroups;
  var hsmClientCertificateIdentifier = aws.params.HsmClientCertificateIdentifier;
  var clusterSubnetGroupName = aws.params.ClusterSubnetGroupName;
  var automatedSnapshotRetentionPeriod = aws.params.AutomatedSnapshotRetentionPeriod /* Type integer */;
  var clusterIdentifier = aws.params.ClusterIdentifier;
  var nodeType = aws.params.NodeType;
  var allowVersionUpgrade = aws.params.AllowVersionUpgrade /* Type boolean */;
  var availabilityZone = aws.params.AvailabilityZone;
  if (!clusterIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterIdentifier'];
  }
  if (!snapshotIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SnapshotIdentifier'];
  }


  // TODO implement code

  var ret = {
    Cluster: /*Su*/{
      NodeType: '',
      HsmStatus: {
        HsmConfigurationIdentifier: '',
        HsmClientCertificateIdentifier: '',
        Status: '',
      },
      DBName: '',
      ClusterSnapshotCopyStatus: {
        DestinationRegion: '',
        RetentionPeriod: 0 /*Long*/,
        SnapshotCopyGrantName: '',
      },
      PreferredMaintenanceWindow: '',
      PubliclyAccessible: false,
      ClusterSecurityGroups: [ {
        ClusterSecurityGroupName: '',
        Status: '',
      }, /* ...*/ ],
      NumberOfNodes: 0,
      ClusterIdentifier: '',
      RestoreStatus: {
        ProgressInMegaBytes: 0 /*Long*/,
        Status: '',
        EstimatedTimeToCompletionInSeconds: 0 /*Long*/,
        CurrentRestoreRateInMegaBytesPerSecond: 0.0 /*Double*/,
        SnapshotSizeInMegaBytes: 0 /*Long*/,
        ElapsedTimeInSeconds: 0 /*Long*/,
      },
      VpcId: '',
      AllowVersionUpgrade: false,
      AvailabilityZone: '',
      Encrypted: false,
      ClusterParameterGroups: [ {
        ParameterApplyStatus: '',
        ParameterGroupName: '',
        ClusterParameterStatusList: [ {
          ParameterName: '',
          ParameterApplyStatus: '',
          ParameterApplyErrorDescription: '',
        }, /* ...*/ ],
      }, /* ...*/ ],
      ClusterNodes: [ {
        PrivateIPAddress: '',
        PublicIPAddress: '',
        NodeRole: '',
      }, /* ...*/ ],
      ClusterRevisionNumber: '',
      Endpoint: {
        Address: '',
        Port: 0,
      },
      VpcSecurityGroups: [ {
        VpcSecurityGroupId: '',
        Status: '',
      }, /* ...*/ ],
      ClusterVersion: '',
      AutomatedSnapshotRetentionPeriod: 0,
      ClusterStatus: '',
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
      MasterUsername: '',
      ModifyStatus: '',
      ClusterSubnetGroupName: '',
      ElasticIpStatus: {
        ElasticIp: '',
        Status: '',
      },
      KmsKeyId: '',
      PendingModifiedValues: {
        ClusterIdentifier: '',
        NodeType: '',
        ClusterVersion: '',
        AutomatedSnapshotRetentionPeriod: 0,
        ClusterType: '',
        NumberOfNodes: 0,
        MasterUserPassword: '',
      },
      ClusterPublicKey: '',
      ClusterCreateTime: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeEventCategories = function DescribeEventCategories(aws) {
  var sourceType = aws.params.SourceType;


  // TODO implement code

  var ret = {
    EventCategoriesMapList: [ {
      Events: [ {
        EventDescription: '',
        Severity: '',
        EventId: '',
        EventCategories: /*S1r*/[ '', /* ...*/ ],
      }, /* ...*/ ],
      SourceType: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteClusterSubnetGroup = function DeleteClusterSubnetGroup(aws) {
  var clusterSubnetGroupName = aws.params.ClusterSubnetGroupName;
  if (!clusterSubnetGroupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterSubnetGroupName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DisableLogging = function DisableLogging(aws) {
  var clusterIdentifier = aws.params.ClusterIdentifier;
  if (!clusterIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterIdentifier'];
  }


  // TODO implement code

  var ret = /*S3u*/{
    BucketName: '',
    LastSuccessfulDeliveryTime: awsCommon.timestamp(),
    S3KeyPrefix: '',
    LoggingEnabled: false,
    LastFailureTime: awsCommon.timestamp(),
    LastFailureMessage: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateClusterSnapshot = function CreateClusterSnapshot(aws) {
  var clusterIdentifier = aws.params.ClusterIdentifier;
  var tags = aws.params.Tags;
  var snapshotIdentifier = aws.params.SnapshotIdentifier;
  if (!snapshotIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SnapshotIdentifier'];
  }
  if (!clusterIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterIdentifier'];
  }


  // TODO implement code

  var ret = {
    Snapshot: /*Sd*/{
      NodeType: '',
      SnapshotType: '',
      Status: '',
      DBName: '',
      OwnerAccount: '',
      SnapshotIdentifier: '',
      ElapsedTimeInSeconds: 0 /*Long*/,
      EstimatedSecondsToCompletion: 0 /*Long*/,
      SnapshotCreateTime: awsCommon.timestamp(),
      NumberOfNodes: 0,
      ClusterIdentifier: '',
      AccountsWithRestoreAccess: [ {
        AccountId: '',
      }, /* ...*/ ],
      VpcId: '',
      MasterUsername: '',
      AvailabilityZone: '',
      Encrypted: false,
      ActualIncrementalBackupSizeInMegaBytes: 0.0 /*Double*/,
      Port: 0,
      BackupProgressInMegaBytes: 0.0 /*Double*/,
      ClusterVersion: '',
      CurrentBackupRateInMegaBytesPerSecond: 0.0 /*Double*/,
      SourceRegion: '',
      EncryptedWithHSM: false,
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
      RestorableNodeTypes: [ '', /* ...*/ ],
      TotalBackupSizeInMegaBytes: 0.0 /*Double*/,
      KmsKeyId: '',
      ClusterCreateTime: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteSnapshotCopyGrant = function DeleteSnapshotCopyGrant(aws) {
  var snapshotCopyGrantName = aws.params.SnapshotCopyGrantName;
  if (!snapshotCopyGrantName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SnapshotCopyGrantName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeOrderableClusterOptions = function DescribeOrderableClusterOptions(aws) {
  var marker = aws.params.Marker;
  var clusterVersion = aws.params.ClusterVersion;
  var nodeType = aws.params.NodeType;
  var maxRecords = aws.params.MaxRecords /* Type integer */;


  // TODO implement code

  var ret = {
    Marker: '',
    OrderableClusterOptions: [ {
      ClusterVersion: '',
      AvailabilityZones: [ /*S1o*/{
        Name: '',
      }, /* ...*/ ],
      NodeType: '',
      ClusterType: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeClusterParameterGroups = function DescribeClusterParameterGroups(aws) {
  var marker = aws.params.Marker;
  var tagKeys = aws.params.TagKeys;
  var tagValues = aws.params.TagValues;
  var parameterGroupName = aws.params.ParameterGroupName;
  var maxRecords = aws.params.MaxRecords /* Type integer */;


  // TODO implement code

  var ret = {
    Marker: '',
    ParameterGroups: [ /*S1d*/{
      Description: '',
      ParameterGroupFamily: '',
      ParameterGroupName: '',
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeClusterParameters = function DescribeClusterParameters(aws) {
  var source = aws.params.Source;
  var marker = aws.params.Marker;
  var parameterGroupName = aws.params.ParameterGroupName;
  var maxRecords = aws.params.MaxRecords /* Type integer */;
  if (!parameterGroupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ParameterGroupName'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    Parameters: /*S2n*/[ {
      ParameterValue: '',
      DataType: '',
      Description: '',
      MinimumEngineVersion: '',
      ParameterName: '',
      ApplyType: '',
      Source: '',
      AllowedValues: '',
      IsModifiable: false,
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeHsmConfigurations = function DescribeHsmConfigurations(aws) {
  var marker = aws.params.Marker;
  var tagKeys = aws.params.TagKeys;
  var hsmConfigurationIdentifier = aws.params.HsmConfigurationIdentifier;
  var tagValues = aws.params.TagValues;
  var maxRecords = aws.params.MaxRecords /* Type integer */;


  // TODO implement code

  var ret = {
    Marker: '',
    HsmConfigurations: [ /*S1z*/{
      Description: '',
      HsmIpAddress: '',
      HsmConfigurationIdentifier: '',
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
      HsmPartitionName: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CopyClusterSnapshot = function CopyClusterSnapshot(aws) {
  var sourceSnapshotClusterIdentifier = aws.params.SourceSnapshotClusterIdentifier;
  var targetSnapshotIdentifier = aws.params.TargetSnapshotIdentifier;
  var sourceSnapshotIdentifier = aws.params.SourceSnapshotIdentifier;
  if (!sourceSnapshotIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SourceSnapshotIdentifier'];
  }
  if (!targetSnapshotIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TargetSnapshotIdentifier'];
  }


  // TODO implement code

  var ret = {
    Snapshot: /*Sd*/{
      NodeType: '',
      SnapshotType: '',
      Status: '',
      DBName: '',
      OwnerAccount: '',
      SnapshotIdentifier: '',
      ElapsedTimeInSeconds: 0 /*Long*/,
      EstimatedSecondsToCompletion: 0 /*Long*/,
      SnapshotCreateTime: awsCommon.timestamp(),
      NumberOfNodes: 0,
      ClusterIdentifier: '',
      AccountsWithRestoreAccess: [ {
        AccountId: '',
      }, /* ...*/ ],
      VpcId: '',
      MasterUsername: '',
      AvailabilityZone: '',
      Encrypted: false,
      ActualIncrementalBackupSizeInMegaBytes: 0.0 /*Double*/,
      Port: 0,
      BackupProgressInMegaBytes: 0.0 /*Double*/,
      ClusterVersion: '',
      CurrentBackupRateInMegaBytesPerSecond: 0.0 /*Double*/,
      SourceRegion: '',
      EncryptedWithHSM: false,
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
      RestorableNodeTypes: [ '', /* ...*/ ],
      TotalBackupSizeInMegaBytes: 0.0 /*Double*/,
      KmsKeyId: '',
      ClusterCreateTime: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AuthorizeClusterSecurityGroupIngress = function AuthorizeClusterSecurityGroupIngress(aws) {
  var eC2SecurityGroupName = aws.params.EC2SecurityGroupName;
  var cIDRIP = aws.params.CIDRIP;
  var clusterSecurityGroupName = aws.params.ClusterSecurityGroupName;
  var eC2SecurityGroupOwnerId = aws.params.EC2SecurityGroupOwnerId;
  if (!clusterSecurityGroupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterSecurityGroupName'];
  }


  // TODO implement code

  var ret = {
    ClusterSecurityGroup: /*S4*/{
      Description: '',
      EC2SecurityGroups: [ {
        EC2SecurityGroupName: '',
        EC2SecurityGroupOwnerId: '',
        Status: '',
        Tags: /*S7*/[ /*S8*/{
          Value: '',
          Key: '',
        }, /* ...*/ ],
      }, /* ...*/ ],
      IPRanges: [ {
        CIDRIP: '',
        Tags: /*S7*/[ /*S8*/{
          Value: '',
          Key: '',
        }, /* ...*/ ],
        Status: '',
      }, /* ...*/ ],
      ClusterSecurityGroupName: '',
      Tags: /*S7*/[ /*S8*/{
          Value: '',
          Key: '',
        }, /* ...*/ ],
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateClusterSecurityGroup = function CreateClusterSecurityGroup(aws) {
  var description = aws.params.Description;
  var clusterSecurityGroupName = aws.params.ClusterSecurityGroupName;
  var tags = aws.params.Tags;
  if (!clusterSecurityGroupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterSecurityGroupName'];
  }
  if (!description) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Description'];
  }


  // TODO implement code

  var ret = {
    ClusterSecurityGroup: /*S4*/{
      Description: '',
      EC2SecurityGroups: [ {
        EC2SecurityGroupName: '',
        EC2SecurityGroupOwnerId: '',
        Status: '',
        Tags: /*S7*/[ /*S8*/{
          Value: '',
          Key: '',
        }, /* ...*/ ],
      }, /* ...*/ ],
      IPRanges: [ {
        CIDRIP: '',
        Tags: /*S7*/[ /*S8*/{
          Value: '',
          Key: '',
        }, /* ...*/ ],
        Status: '',
      }, /* ...*/ ],
      ClusterSecurityGroupName: '',
      Tags: /*S7*/[ /*S8*/{
          Value: '',
          Key: '',
        }, /* ...*/ ],
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeReservedNodes = function DescribeReservedNodes(aws) {
  var marker = aws.params.Marker;
  var reservedNodeId = aws.params.ReservedNodeId;
  var maxRecords = aws.params.MaxRecords /* Type integer */;


  // TODO implement code

  var ret = {
    Marker: '',
    ReservedNodes: [ /*S49*/{
      UsagePrice: 0.0 /*Double*/,
      Duration: 0,
      StartTime: awsCommon.timestamp(),
      NodeType: '',
      ReservedNodeId: '',
      ReservedNodeOfferingId: '',
      OfferingType: '',
      NodeCount: 0,
      CurrencyCode: '',
      FixedPrice: 0.0 /*Double*/,
      RecurringCharges: /*S44*/[ {
        RecurringChargeFrequency: '',
        RecurringChargeAmount: 0.0 /*Double*/,
      }, /* ...*/ ],
      State: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RevokeClusterSecurityGroupIngress = function RevokeClusterSecurityGroupIngress(aws) {
  var eC2SecurityGroupName = aws.params.EC2SecurityGroupName;
  var cIDRIP = aws.params.CIDRIP;
  var clusterSecurityGroupName = aws.params.ClusterSecurityGroupName;
  var eC2SecurityGroupOwnerId = aws.params.EC2SecurityGroupOwnerId;
  if (!clusterSecurityGroupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterSecurityGroupName'];
  }


  // TODO implement code

  var ret = {
    ClusterSecurityGroup: /*S4*/{
      Description: '',
      EC2SecurityGroups: [ {
        EC2SecurityGroupName: '',
        EC2SecurityGroupOwnerId: '',
        Status: '',
        Tags: /*S7*/[ /*S8*/{
          Value: '',
          Key: '',
        }, /* ...*/ ],
      }, /* ...*/ ],
      IPRanges: [ {
        CIDRIP: '',
        Tags: /*S7*/[ /*S8*/{
          Value: '',
          Key: '',
        }, /* ...*/ ],
        Status: '',
      }, /* ...*/ ],
      ClusterSecurityGroupName: '',
      Tags: /*S7*/[ /*S8*/{
          Value: '',
          Key: '',
        }, /* ...*/ ],
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeResize = function DescribeResize(aws) {
  var clusterIdentifier = aws.params.ClusterIdentifier;
  if (!clusterIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterIdentifier'];
  }


  // TODO implement code

  var ret = {
    ImportTablesNotStarted: [ '', /* ...*/ ],
    ProgressInMegaBytes: 0 /*Long*/,
    Status: '',
    EstimatedTimeToCompletionInSeconds: 0 /*Long*/,
    ImportTablesInProgress: [ '', /* ...*/ ],
    TargetNodeType: '',
    ImportTablesCompleted: [ '', /* ...*/ ],
    ElapsedTimeInSeconds: 0 /*Long*/,
    AvgResizeRateInMegaBytesPerSecond: 0.0 /*Double*/,
    TotalResizeDataInMegaBytes: 0 /*Long*/,
    TargetClusterType: '',
    TargetNumberOfNodes: 0,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeSnapshotCopyGrants = function DescribeSnapshotCopyGrants(aws) {
  var marker = aws.params.Marker;
  var tagKeys = aws.params.TagKeys;
  var snapshotCopyGrantName = aws.params.SnapshotCopyGrantName;
  var tagValues = aws.params.TagValues;
  var maxRecords = aws.params.MaxRecords /* Type integer */;


  // TODO implement code

  var ret = {
    Marker: '',
    SnapshotCopyGrants: [ /*S22*/{
      KmsKeyId: '',
      SnapshotCopyGrantName: '',
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateHsmClientCertificate = function CreateHsmClientCertificate(aws) {
  var hsmClientCertificateIdentifier = aws.params.HsmClientCertificateIdentifier;
  var tags = aws.params.Tags;
  if (!hsmClientCertificateIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter HsmClientCertificateIdentifier'];
  }


  // TODO implement code

  var ret = {
    HsmClientCertificate: /*S1w*/{
      HsmClientCertificateIdentifier: '',
      HsmClientCertificatePublicKey: '',
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeReservedNodeOfferings = function DescribeReservedNodeOfferings(aws) {
  var reservedNodeOfferingId = aws.params.ReservedNodeOfferingId;
  var marker = aws.params.Marker;
  var maxRecords = aws.params.MaxRecords /* Type integer */;


  // TODO implement code

  var ret = {
    Marker: '',
    ReservedNodeOfferings: [ {
      UsagePrice: 0.0 /*Double*/,
      FixedPrice: 0.0 /*Double*/,
      NodeType: '',
      CurrencyCode: '',
      RecurringCharges: /*S44*/[ {
        RecurringChargeFrequency: '',
        RecurringChargeAmount: 0.0 /*Double*/,
      }, /* ...*/ ],
      ReservedNodeOfferingId: '',
      OfferingType: '',
      Duration: 0,
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ResetClusterParameterGroup = function ResetClusterParameterGroup(aws) {
  var parameters = aws.params.Parameters;
  var parameterGroupName = aws.params.ParameterGroupName;
  var resetAllParameters = aws.params.ResetAllParameters /* Type boolean */;
  if (!parameterGroupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ParameterGroupName'];
  }


  // TODO implement code

  var ret = /*S4x*/{
    ParameterGroupStatus: '',
    ParameterGroupName: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RotateEncryptionKey = function RotateEncryptionKey(aws) {
  var clusterIdentifier = aws.params.ClusterIdentifier;
  if (!clusterIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterIdentifier'];
  }


  // TODO implement code

  var ret = {
    Cluster: /*Su*/{
      NodeType: '',
      HsmStatus: {
        HsmConfigurationIdentifier: '',
        HsmClientCertificateIdentifier: '',
        Status: '',
      },
      DBName: '',
      ClusterSnapshotCopyStatus: {
        DestinationRegion: '',
        RetentionPeriod: 0 /*Long*/,
        SnapshotCopyGrantName: '',
      },
      PreferredMaintenanceWindow: '',
      PubliclyAccessible: false,
      ClusterSecurityGroups: [ {
        ClusterSecurityGroupName: '',
        Status: '',
      }, /* ...*/ ],
      NumberOfNodes: 0,
      ClusterIdentifier: '',
      RestoreStatus: {
        ProgressInMegaBytes: 0 /*Long*/,
        Status: '',
        EstimatedTimeToCompletionInSeconds: 0 /*Long*/,
        CurrentRestoreRateInMegaBytesPerSecond: 0.0 /*Double*/,
        SnapshotSizeInMegaBytes: 0 /*Long*/,
        ElapsedTimeInSeconds: 0 /*Long*/,
      },
      VpcId: '',
      AllowVersionUpgrade: false,
      AvailabilityZone: '',
      Encrypted: false,
      ClusterParameterGroups: [ {
        ParameterApplyStatus: '',
        ParameterGroupName: '',
        ClusterParameterStatusList: [ {
          ParameterName: '',
          ParameterApplyStatus: '',
          ParameterApplyErrorDescription: '',
        }, /* ...*/ ],
      }, /* ...*/ ],
      ClusterNodes: [ {
        PrivateIPAddress: '',
        PublicIPAddress: '',
        NodeRole: '',
      }, /* ...*/ ],
      ClusterRevisionNumber: '',
      Endpoint: {
        Address: '',
        Port: 0,
      },
      VpcSecurityGroups: [ {
        VpcSecurityGroupId: '',
        Status: '',
      }, /* ...*/ ],
      ClusterVersion: '',
      AutomatedSnapshotRetentionPeriod: 0,
      ClusterStatus: '',
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
      MasterUsername: '',
      ModifyStatus: '',
      ClusterSubnetGroupName: '',
      ElasticIpStatus: {
        ElasticIp: '',
        Status: '',
      },
      KmsKeyId: '',
      PendingModifiedValues: {
        ClusterIdentifier: '',
        NodeType: '',
        ClusterVersion: '',
        AutomatedSnapshotRetentionPeriod: 0,
        ClusterType: '',
        NumberOfNodes: 0,
        MasterUserPassword: '',
      },
      ClusterPublicKey: '',
      ClusterCreateTime: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteClusterParameterGroup = function DeleteClusterParameterGroup(aws) {
  var parameterGroupName = aws.params.ParameterGroupName;
  if (!parameterGroupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ParameterGroupName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.CreateSnapshotCopyGrant = function CreateSnapshotCopyGrant(aws) {
  var kmsKeyId = aws.params.KmsKeyId;
  var snapshotCopyGrantName = aws.params.SnapshotCopyGrantName;
  var tags = aws.params.Tags;
  if (!snapshotCopyGrantName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SnapshotCopyGrantName'];
  }


  // TODO implement code

  var ret = {
    SnapshotCopyGrant: /*S22*/{
      KmsKeyId: '',
      SnapshotCopyGrantName: '',
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateTags = function CreateTags(aws) {
  var resourceName = aws.params.ResourceName;
  var tags = aws.params.Tags;
  if (!resourceName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ResourceName'];
  }
  if (!tags) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Tags'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.EnableSnapshotCopy = function EnableSnapshotCopy(aws) {
  var destinationRegion = aws.params.DestinationRegion;
  var clusterIdentifier = aws.params.ClusterIdentifier;
  var retentionPeriod = aws.params.RetentionPeriod /* Type integer */;
  var snapshotCopyGrantName = aws.params.SnapshotCopyGrantName;
  if (!clusterIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterIdentifier'];
  }
  if (!destinationRegion) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DestinationRegion'];
  }


  // TODO implement code

  var ret = {
    Cluster: /*Su*/{
      NodeType: '',
      HsmStatus: {
        HsmConfigurationIdentifier: '',
        HsmClientCertificateIdentifier: '',
        Status: '',
      },
      DBName: '',
      ClusterSnapshotCopyStatus: {
        DestinationRegion: '',
        RetentionPeriod: 0 /*Long*/,
        SnapshotCopyGrantName: '',
      },
      PreferredMaintenanceWindow: '',
      PubliclyAccessible: false,
      ClusterSecurityGroups: [ {
        ClusterSecurityGroupName: '',
        Status: '',
      }, /* ...*/ ],
      NumberOfNodes: 0,
      ClusterIdentifier: '',
      RestoreStatus: {
        ProgressInMegaBytes: 0 /*Long*/,
        Status: '',
        EstimatedTimeToCompletionInSeconds: 0 /*Long*/,
        CurrentRestoreRateInMegaBytesPerSecond: 0.0 /*Double*/,
        SnapshotSizeInMegaBytes: 0 /*Long*/,
        ElapsedTimeInSeconds: 0 /*Long*/,
      },
      VpcId: '',
      AllowVersionUpgrade: false,
      AvailabilityZone: '',
      Encrypted: false,
      ClusterParameterGroups: [ {
        ParameterApplyStatus: '',
        ParameterGroupName: '',
        ClusterParameterStatusList: [ {
          ParameterName: '',
          ParameterApplyStatus: '',
          ParameterApplyErrorDescription: '',
        }, /* ...*/ ],
      }, /* ...*/ ],
      ClusterNodes: [ {
        PrivateIPAddress: '',
        PublicIPAddress: '',
        NodeRole: '',
      }, /* ...*/ ],
      ClusterRevisionNumber: '',
      Endpoint: {
        Address: '',
        Port: 0,
      },
      VpcSecurityGroups: [ {
        VpcSecurityGroupId: '',
        Status: '',
      }, /* ...*/ ],
      ClusterVersion: '',
      AutomatedSnapshotRetentionPeriod: 0,
      ClusterStatus: '',
      Tags: /*S7*/[ /*S8*/{
        Value: '',
        Key: '',
      }, /* ...*/ ],
      MasterUsername: '',
      ModifyStatus: '',
      ClusterSubnetGroupName: '',
      ElasticIpStatus: {
        ElasticIp: '',
        Status: '',
      },
      KmsKeyId: '',
      PendingModifiedValues: {
        ClusterIdentifier: '',
        NodeType: '',
        ClusterVersion: '',
        AutomatedSnapshotRetentionPeriod: 0,
        ClusterType: '',
        NumberOfNodes: 0,
        MasterUserPassword: '',
      },
      ClusterPublicKey: '',
      ClusterCreateTime: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
