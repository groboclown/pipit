'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * Amazon WorkSpaces version 2015-04-08
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.TerminateWorkspaces = function TerminateWorkspaces(aws) {
        var TerminateWorkspaceRequests = aws.params.TerminateWorkspaceRequests /* list */;
        if (! TerminateWorkspaceRequests) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TerminateWorkspaceRequests"];
        }

        // TODO implement code

        var ret = {
            FailedRequests: [ /*S1m*/{
                ErrorMessage: "",
                WorkspaceId: "",
                ErrorCode: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeWorkspaces = function DescribeWorkspaces(aws) {
        var UserName = aws.params.UserName;
        var DirectoryId = aws.params.DirectoryId;
        var NextToken = aws.params.NextToken;
        var Limit = aws.params.Limit /* integer */;
        var WorkspaceIds = aws.params.WorkspaceIds /* list */;
        var BundleId = aws.params.BundleId;


        // TODO implement code

        var ret = {
            Workspaces: /*Se*/[ {
                DirectoryId: "",
                IpAddress: "",
                RootVolumeEncryptionEnabled: false,
                BundleId: "",
                SubnetId: "",
                ErrorCode: "",
                UserVolumeEncryptionEnabled: false,
                VolumeEncryptionKey: "",
                ErrorMessage: "",
                UserName: "",
                ComputerName: "",
                WorkspaceId: "",
                State: ""
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.DescribeWorkspaceBundles = function DescribeWorkspaceBundles(aws) {
        var BundleIds = aws.params.BundleIds /* list */;
        var Owner = aws.params.Owner;
        var NextToken = aws.params.NextToken;


        // TODO implement code

        var ret = {
            Bundles: [ {
                Name: "",
                ComputeType: {
                    Name: ""
                },
                BundleId: "",
                UserStorage: {
                    Capacity: ""
                },
                Description: "",
                Owner: ""
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.DescribeWorkspaceDirectories = function DescribeWorkspaceDirectories(aws) {
        var DirectoryIds = aws.params.DirectoryIds /* list */;
        var NextToken = aws.params.NextToken;


        // TODO implement code

        var ret = {
            Directories: [ {
                CustomerUserName: "",
                DirectoryId: "",
                IamRoleId: "",
                RegistrationCode: "",
                SubnetIds: [ "" /*, ...*/ ],
                WorkspaceSecurityGroupId: "",
                DnsIpAddresses: [ "" /*, ...*/ ],
                Alias: "",
                DirectoryName: "",
                WorkspaceCreationProperties: {
                    DefaultOu: "",
                    UserEnabledAsLocalAdministrator: false,
                    CustomSecurityGroupId: "",
                    EnableInternetAccess: false,
                    EnableWorkDocs: false
                },
                State: "",
                DirectoryType: ""
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.CreateWorkspaces = function CreateWorkspaces(aws) {
        var Workspaces = aws.params.Workspaces /* list */;
        if (! Workspaces) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Workspaces"];
        }

        // TODO implement code

        var ret = {
            FailedRequests: [ {
                ErrorMessage: "",
                WorkspaceRequest: /*S3*/{
                    VolumeEncryptionKey: "",
                    DirectoryId: "",
                    BundleId: "",
                    UserName: "",
                    RootVolumeEncryptionEnabled: false,
                    UserVolumeEncryptionEnabled: false
                },
                ErrorCode: ""
            } /*, ...*/ ],
            PendingRequests: /*Se*/[ {
                DirectoryId: "",
                IpAddress: "",
                RootVolumeEncryptionEnabled: false,
                BundleId: "",
                SubnetId: "",
                ErrorCode: "",
                UserVolumeEncryptionEnabled: false,
                VolumeEncryptionKey: "",
                ErrorMessage: "",
                UserName: "",
                ComputerName: "",
                WorkspaceId: "",
                State: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.RebuildWorkspaces = function RebuildWorkspaces(aws) {
        var RebuildWorkspaceRequests = aws.params.RebuildWorkspaceRequests /* list */;
        if (! RebuildWorkspaceRequests) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RebuildWorkspaceRequests"];
        }

        // TODO implement code

        var ret = {
            FailedRequests: [ /*S1m*/{
                ErrorMessage: "",
                WorkspaceId: "",
                ErrorCode: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.RebootWorkspaces = function RebootWorkspaces(aws) {
        var RebootWorkspaceRequests = aws.params.RebootWorkspaceRequests /* list */;
        if (! RebootWorkspaceRequests) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RebootWorkspaceRequests"];
        }

        // TODO implement code

        var ret = {
            FailedRequests: [ /*S1m*/{
                ErrorMessage: "",
                WorkspaceId: "",
                ErrorCode: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
