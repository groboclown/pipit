'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * Amazon WorkSpaces version 2015-04-08
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol json
require('../../lib/aws-common/shape_http')('json', module.exports, null)
// -----------------------------------
module.exports.DescribeWorkspaceBundles = function DescribeWorkspaceBundles(aws) {
  var BundleIds = aws.params['BundleIds'] /* Type list */;
  var Owner = aws.params['Owner'];
  var NextToken = aws.params['NextToken'];


  // TODO implement code

  var ret = {
    Bundles: [ {
      BundleId: '',
      ComputeType: {
        Name: '',
      },
      Name: '',
      Owner: '',
      UserStorage: {
        Capacity: '',
      },
      Description: '',
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeWorkspaceDirectories = function DescribeWorkspaceDirectories(aws) {
  var DirectoryIds = aws.params['DirectoryIds'] /* Type list */;
  var NextToken = aws.params['NextToken'];


  // TODO implement code

  var ret = {
    Directories: [ {
      DirectoryId: '',
      RegistrationCode: '',
      DirectoryName: '',
      Alias: '',
      CustomerUserName: '',
      WorkspaceCreationProperties: {
        UserEnabledAsLocalAdministrator: false,
        DefaultOu: '',
        EnableWorkDocs: false,
        EnableInternetAccess: false,
        CustomSecurityGroupId: '',
      },
      State: '',
      WorkspaceSecurityGroupId: '',
      IamRoleId: '',
      DnsIpAddresses: [ '', /* ...*/ ],
      DirectoryType: '',
      SubnetIds: [ '', /* ...*/ ],
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.TerminateWorkspaces = function TerminateWorkspaces(aws) {
  var TerminateWorkspaceRequests = aws.params['TerminateWorkspaceRequests'] /* Type list */;
  if (!TerminateWorkspaceRequests) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TerminateWorkspaceRequests'];
  }


  // TODO implement code

  var ret = {
    FailedRequests: [ /*S1m*/{
      ErrorCode: '',
      ErrorMessage: '',
      WorkspaceId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RebuildWorkspaces = function RebuildWorkspaces(aws) {
  var RebuildWorkspaceRequests = aws.params['RebuildWorkspaceRequests'] /* Type list */;
  if (!RebuildWorkspaceRequests) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RebuildWorkspaceRequests'];
  }


  // TODO implement code

  var ret = {
    FailedRequests: [ /*S1m*/{
      ErrorCode: '',
      ErrorMessage: '',
      WorkspaceId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RebootWorkspaces = function RebootWorkspaces(aws) {
  var RebootWorkspaceRequests = aws.params['RebootWorkspaceRequests'] /* Type list */;
  if (!RebootWorkspaceRequests) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RebootWorkspaceRequests'];
  }


  // TODO implement code

  var ret = {
    FailedRequests: [ /*S1m*/{
      ErrorCode: '',
      ErrorMessage: '',
      WorkspaceId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeWorkspaces = function DescribeWorkspaces(aws) {
  var DirectoryId = aws.params['DirectoryId'];
  var Limit = aws.params['Limit'] /* Type integer */;
  var NextToken = aws.params['NextToken'];
  var UserName = aws.params['UserName'];
  var BundleId = aws.params['BundleId'];
  var WorkspaceIds = aws.params['WorkspaceIds'] /* Type list */;


  // TODO implement code

  var ret = {
    Workspaces: /*Se*/[ {
      DirectoryId: '',
      UserVolumeEncryptionEnabled: false,
      UserName: '',
      BundleId: '',
      IpAddress: '',
      VolumeEncryptionKey: '',
      RootVolumeEncryptionEnabled: false,
      ErrorMessage: '',
      ComputerName: '',
      ErrorCode: '',
      State: '',
      WorkspaceId: '',
      SubnetId: '',
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateWorkspaces = function CreateWorkspaces(aws) {
  var Workspaces = aws.params['Workspaces'] /* Type list */;
  if (!Workspaces) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Workspaces'];
  }


  // TODO implement code

  var ret = {
    PendingRequests: /*Se*/[ {
      DirectoryId: '',
      UserVolumeEncryptionEnabled: false,
      UserName: '',
      BundleId: '',
      IpAddress: '',
      VolumeEncryptionKey: '',
      RootVolumeEncryptionEnabled: false,
      ErrorMessage: '',
      ComputerName: '',
      ErrorCode: '',
      State: '',
      WorkspaceId: '',
      SubnetId: '',
    }, /* ...*/ ],
    FailedRequests: [ {
      ErrorCode: '',
      ErrorMessage: '',
      WorkspaceRequest: /*S3*/{
        VolumeEncryptionKey: '',
        RootVolumeEncryptionEnabled: false,
        DirectoryId: '',
        UserVolumeEncryptionEnabled: false,
        UserName: '',
        BundleId: '',
      },
    }, /* ...*/ ],
  };
  return [200, ret];
};
