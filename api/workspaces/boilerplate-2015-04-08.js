'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * Amazon WorkSpaces version 2015-04-08
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol json
require('../../lib/aws-common/shape_http')('json', module.exports, null);
// -----------------------------------
module.exports.DescribeWorkspaceDirectories = function DescribeWorkspaceDirectories(aws) {
  var nextToken = aws.params.NextToken;
  var directoryIds = aws.params.DirectoryIds /* Type list */;


  // TODO implement code

  var ret = {
    NextToken: '',
    Directories: [ {
      SubnetIds: [ '', /* ...*/ ],
      DirectoryId: '',
      Alias: '',
      WorkspaceSecurityGroupId: '',
      DirectoryName: '',
      WorkspaceCreationProperties: {
        EnableWorkDocs: false,
        CustomSecurityGroupId: '',
        DefaultOu: '',
        UserEnabledAsLocalAdministrator: false,
        EnableInternetAccess: false,
      },
      DirectoryType: '',
      DnsIpAddresses: [ '', /* ...*/ ],
      IamRoleId: '',
      RegistrationCode: '',
      State: '',
      CustomerUserName: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RebootWorkspaces = function RebootWorkspaces(aws) {
  var rebootWorkspaceRequests = aws.params.RebootWorkspaceRequests /* Type list */;
  if (!rebootWorkspaceRequests) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RebootWorkspaceRequests'];
  }


  // TODO implement code

  var ret = {
    FailedRequests: [ /*S1m*/{
      ErrorCode: '',
      ErrorMessage: '',
      WorkspaceId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeWorkspaces = function DescribeWorkspaces(aws) {
  var limit = aws.params.Limit /* Type integer */;
  var directoryId = aws.params.DirectoryId;
  var nextToken = aws.params.NextToken;
  var workspaceIds = aws.params.WorkspaceIds /* Type list */;
  var bundleId = aws.params.BundleId;
  var userName = aws.params.UserName;


  // TODO implement code

  var ret = {
    NextToken: '',
    Workspaces: /*Se*/[ {
      ErrorCode: '',
      UserVolumeEncryptionEnabled: false,
      DirectoryId: '',
      BundleId: '',
      VolumeEncryptionKey: '',
      ComputerName: '',
      IpAddress: '',
      WorkspaceId: '',
      State: '',
      UserName: '',
      RootVolumeEncryptionEnabled: false,
      SubnetId: '',
      ErrorMessage: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeWorkspaceBundles = function DescribeWorkspaceBundles(aws) {
  var nextToken = aws.params.NextToken;
  var bundleIds = aws.params.BundleIds /* Type list */;
  var owner = aws.params.Owner;


  // TODO implement code

  var ret = {
    NextToken: '',
    Bundles: [ {
      ComputeType: {
        Name: '',
      },
      UserStorage: {
        Capacity: '',
      },
      Description: '',
      Name: '',
      BundleId: '',
      Owner: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.TerminateWorkspaces = function TerminateWorkspaces(aws) {
  var terminateWorkspaceRequests = aws.params.TerminateWorkspaceRequests /* Type list */;
  if (!terminateWorkspaceRequests) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TerminateWorkspaceRequests'];
  }


  // TODO implement code

  var ret = {
    FailedRequests: [ /*S1m*/{
      ErrorCode: '',
      ErrorMessage: '',
      WorkspaceId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateWorkspaces = function CreateWorkspaces(aws) {
  var workspaces = aws.params.Workspaces /* Type list */;
  if (!workspaces) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Workspaces'];
  }


  // TODO implement code

  var ret = {
    PendingRequests: /*Se*/[ {
      ErrorCode: '',
      UserVolumeEncryptionEnabled: false,
      DirectoryId: '',
      BundleId: '',
      VolumeEncryptionKey: '',
      ComputerName: '',
      IpAddress: '',
      WorkspaceId: '',
      State: '',
      UserName: '',
      RootVolumeEncryptionEnabled: false,
      SubnetId: '',
      ErrorMessage: '',
    }, /* ...*/ ],
    FailedRequests: [ {
      ErrorCode: '',
      WorkspaceRequest: /*S3*/{
        UserVolumeEncryptionEnabled: false,
        RootVolumeEncryptionEnabled: false,
        DirectoryId: '',
        UserName: '',
        BundleId: '',
        VolumeEncryptionKey: '',
      },
      ErrorMessage: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RebuildWorkspaces = function RebuildWorkspaces(aws) {
  var rebuildWorkspaceRequests = aws.params.RebuildWorkspaceRequests /* Type list */;
  if (!rebuildWorkspaceRequests) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RebuildWorkspaceRequests'];
  }


  // TODO implement code

  var ret = {
    FailedRequests: [ /*S1m*/{
      ErrorCode: '',
      ErrorMessage: '',
      WorkspaceId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
