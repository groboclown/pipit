'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * Amazon EC2 Container Service version 2014-11-13
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.DescribeTasks = function DescribeTasks(aws) {
        var tasks = aws.params.tasks;
        var cluster = aws.params.cluster;
        if (! tasks) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter tasks"];
        }

        // TODO implement code

        var ret = {
            tasks: /*S27*/[ /*S28*/{
                createdAt: now(),
                stoppedReason: "",
                startedAt: now(),
                clusterArn: "",
                desiredStatus: "",
                taskArn: "",
                lastStatus: "",
                stoppedAt: now(),
                taskDefinitionArn: "",
                containerInstanceArn: "",
                overrides: /*S29*/{
                    containerOverrides: [ {
                        name: "",
                        command: /*Sv*/[ "" /*, ...*/ ],
                        environment: /*S18*/[ {
                            value: "",
                            name: ""
                        } /*, ...*/ ]
                    } /*, ...*/ ]
                },
                startedBy: "",
                containers: [ {
                    taskArn: "",
                    exitCode: 0,
                    name: "",
                    networkBindings: /*S2e*/[ {
                        hostPort: 0,
                        bindIP: "",
                        protocol: "",
                        containerPort: 0
                    } /*, ...*/ ],
                    lastStatus: "",
                    containerArn: "",
                    reason: ""
                } /*, ...*/ ]
            } /*, ...*/ ],
            failures: /*S1v*/[ {
                arn: "",
                reason: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeTaskDefinition = function DescribeTaskDefinition(aws) {
        var taskDefinition = aws.params.taskDefinition;
        if (! taskDefinition) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter taskDefinition"];
        }

        // TODO implement code

        var ret = {
            taskDefinition: /*S12*/{
                containerDefinitions: /*S13*/[ {
                    privileged: false,
                    ulimits: [ {
                        softLimit: 0,
                        name: "",
                        hardLimit: 0
                    } /*, ...*/ ],
                    links: /*Sv*/[ "" /*, ...*/ ],
                    readonlyRootFilesystem: false,
                    workingDirectory: "",
                    essential: false,
                    dockerLabels: {} /* map */,
                    portMappings: [ {
                        hostPort: 0,
                        protocol: "",
                        containerPort: 0
                    } /*, ...*/ ],
                    entryPoint: /*Sv*/[ "" /*, ...*/ ],
                    extraHosts: [ {
                        hostname: "",
                        ipAddress: ""
                    } /*, ...*/ ],
                    dnsSearchDomains: /*Sv*/[ "" /*, ...*/ ],
                    disableNetworking: false,
                    dnsServers: /*Sv*/[ "" /*, ...*/ ],
                    cpu: 0,
                    memory: 0,
                    command: /*Sv*/[ "" /*, ...*/ ],
                    user: "",
                    name: "",
                    environment: /*S18*/[ {
                        value: "",
                        name: ""
                    } /*, ...*/ ],
                    logConfiguration: {
                        logDriver: "",
                        options: {} /* map */
                    },
                    dockerSecurityOptions: /*Sv*/[ "" /*, ...*/ ],
                    hostname: "",
                    image: "",
                    mountPoints: [ {
                        containerPath: "",
                        sourceVolume: "",
                        readOnly: false
                    } /*, ...*/ ],
                    volumesFrom: [ {
                        readOnly: false,
                        sourceContainer: ""
                    } /*, ...*/ ]
                } /*, ...*/ ],
                requiresAttributes: [ /*Sz*/{
                    value: "",
                    name: ""
                } /*, ...*/ ],
                revision: 0,
                volumes: /*S1n*/[ {
                    name: "",
                    host: {
                        sourcePath: ""
                    }
                } /*, ...*/ ],
                status: "",
                family: "",
                taskDefinitionArn: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeClusters = function DescribeClusters(aws) {
        var clusters = aws.params.clusters;


        // TODO implement code

        var ret = {
            failures: /*S1v*/[ {
                arn: "",
                reason: ""
            } /*, ...*/ ],
            clusters: [ /*S4*/{
                clusterName: "",
                registeredContainerInstancesCount: 0,
                runningTasksCount: 0,
                pendingTasksCount: 0,
                status: "",
                activeServicesCount: 0,
                clusterArn: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.StartTask = function StartTask(aws) {
        var overrides = aws.params.overrides;
        var startedBy = aws.params.startedBy;
        var taskDefinition = aws.params.taskDefinition;
        var containerInstances = aws.params.containerInstances;
        var cluster = aws.params.cluster;
        if (! taskDefinition) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter taskDefinition"];
        }        if (! containerInstances) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter containerInstances"];
        }

        // TODO implement code

        var ret = {
            tasks: /*S27*/[ /*S28*/{
                createdAt: now(),
                stoppedReason: "",
                startedAt: now(),
                clusterArn: "",
                desiredStatus: "",
                taskArn: "",
                lastStatus: "",
                stoppedAt: now(),
                taskDefinitionArn: "",
                containerInstanceArn: "",
                overrides: /*S29*/{
                    containerOverrides: [ {
                        name: "",
                        command: /*Sv*/[ "" /*, ...*/ ],
                        environment: /*S18*/[ {
                            value: "",
                            name: ""
                        } /*, ...*/ ]
                    } /*, ...*/ ]
                },
                startedBy: "",
                containers: [ {
                    taskArn: "",
                    exitCode: 0,
                    name: "",
                    networkBindings: /*S2e*/[ {
                        hostPort: 0,
                        bindIP: "",
                        protocol: "",
                        containerPort: 0
                    } /*, ...*/ ],
                    lastStatus: "",
                    containerArn: "",
                    reason: ""
                } /*, ...*/ ]
            } /*, ...*/ ],
            failures: /*S1v*/[ {
                arn: "",
                reason: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.RunTask = function RunTask(aws) {
        var count = aws.params.count /* integer */;
        var overrides = aws.params.overrides;
        var taskDefinition = aws.params.taskDefinition;
        var startedBy = aws.params.startedBy;
        var cluster = aws.params.cluster;
        if (! taskDefinition) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter taskDefinition"];
        }

        // TODO implement code

        var ret = {
            tasks: /*S27*/[ /*S28*/{
                createdAt: now(),
                stoppedReason: "",
                startedAt: now(),
                clusterArn: "",
                desiredStatus: "",
                taskArn: "",
                lastStatus: "",
                stoppedAt: now(),
                taskDefinitionArn: "",
                containerInstanceArn: "",
                overrides: /*S29*/{
                    containerOverrides: [ {
                        name: "",
                        command: /*Sv*/[ "" /*, ...*/ ],
                        environment: /*S18*/[ {
                            value: "",
                            name: ""
                        } /*, ...*/ ]
                    } /*, ...*/ ]
                },
                startedBy: "",
                containers: [ {
                    taskArn: "",
                    exitCode: 0,
                    name: "",
                    networkBindings: /*S2e*/[ {
                        hostPort: 0,
                        bindIP: "",
                        protocol: "",
                        containerPort: 0
                    } /*, ...*/ ],
                    lastStatus: "",
                    containerArn: "",
                    reason: ""
                } /*, ...*/ ]
            } /*, ...*/ ],
            failures: /*S1v*/[ {
                arn: "",
                reason: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateCluster = function CreateCluster(aws) {
        var clusterName = aws.params.clusterName;


        // TODO implement code

        var ret = {
            cluster: /*S4*/{
                clusterName: "",
                registeredContainerInstancesCount: 0,
                runningTasksCount: 0,
                pendingTasksCount: 0,
                status: "",
                activeServicesCount: 0,
                clusterArn: ""
            }
        };
        return [200, ret];
    }
module.exports.ListContainerInstances = function ListContainerInstances(aws) {
        var maxResults = aws.params.maxResults /* integer */;
        var nextToken = aws.params.nextToken;
        var cluster = aws.params.cluster;


        // TODO implement code

        var ret = {
            containerInstanceArns: /*Sv*/[ "" /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.StopTask = function StopTask(aws) {
        var task = aws.params.task;
        var reason = aws.params.reason;
        var cluster = aws.params.cluster;
        if (! task) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter task"];
        }

        // TODO implement code

        var ret = {
            task: /*S28*/{
                createdAt: now(),
                stoppedReason: "",
                startedAt: now(),
                clusterArn: "",
                desiredStatus: "",
                taskArn: "",
                lastStatus: "",
                stoppedAt: now(),
                taskDefinitionArn: "",
                containerInstanceArn: "",
                overrides: /*S29*/{
                    containerOverrides: [ {
                        name: "",
                        command: /*Sv*/[ "" /*, ...*/ ],
                        environment: /*S18*/[ {
                            value: "",
                            name: ""
                        } /*, ...*/ ]
                    } /*, ...*/ ]
                },
                startedBy: "",
                containers: [ {
                    taskArn: "",
                    exitCode: 0,
                    name: "",
                    networkBindings: /*S2e*/[ {
                        hostPort: 0,
                        bindIP: "",
                        protocol: "",
                        containerPort: 0
                    } /*, ...*/ ],
                    lastStatus: "",
                    containerArn: "",
                    reason: ""
                } /*, ...*/ ]
            }
        };
        return [200, ret];
    }
module.exports.RegisterTaskDefinition = function RegisterTaskDefinition(aws) {
        var containerDefinitions = aws.params.containerDefinitions;
        var family = aws.params.family;
        var volumes = aws.params.volumes;
        if (! family) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter family"];
        }        if (! containerDefinitions) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter containerDefinitions"];
        }

        // TODO implement code

        var ret = {
            taskDefinition: /*S12*/{
                containerDefinitions: /*S13*/[ {
                    privileged: false,
                    ulimits: [ {
                        softLimit: 0,
                        name: "",
                        hardLimit: 0
                    } /*, ...*/ ],
                    links: /*Sv*/[ "" /*, ...*/ ],
                    readonlyRootFilesystem: false,
                    workingDirectory: "",
                    essential: false,
                    dockerLabels: {} /* map */,
                    portMappings: [ {
                        hostPort: 0,
                        protocol: "",
                        containerPort: 0
                    } /*, ...*/ ],
                    entryPoint: /*Sv*/[ "" /*, ...*/ ],
                    extraHosts: [ {
                        hostname: "",
                        ipAddress: ""
                    } /*, ...*/ ],
                    dnsSearchDomains: /*Sv*/[ "" /*, ...*/ ],
                    disableNetworking: false,
                    dnsServers: /*Sv*/[ "" /*, ...*/ ],
                    cpu: 0,
                    memory: 0,
                    command: /*Sv*/[ "" /*, ...*/ ],
                    user: "",
                    name: "",
                    environment: /*S18*/[ {
                        value: "",
                        name: ""
                    } /*, ...*/ ],
                    logConfiguration: {
                        logDriver: "",
                        options: {} /* map */
                    },
                    dockerSecurityOptions: /*Sv*/[ "" /*, ...*/ ],
                    hostname: "",
                    image: "",
                    mountPoints: [ {
                        containerPath: "",
                        sourceVolume: "",
                        readOnly: false
                    } /*, ...*/ ],
                    volumesFrom: [ {
                        readOnly: false,
                        sourceContainer: ""
                    } /*, ...*/ ]
                } /*, ...*/ ],
                requiresAttributes: [ /*Sz*/{
                    value: "",
                    name: ""
                } /*, ...*/ ],
                revision: 0,
                volumes: /*S1n*/[ {
                    name: "",
                    host: {
                        sourcePath: ""
                    }
                } /*, ...*/ ],
                status: "",
                family: "",
                taskDefinitionArn: ""
            }
        };
        return [200, ret];
    }
module.exports.DeregisterContainerInstance = function DeregisterContainerInstance(aws) {
        var containerInstance = aws.params.containerInstance;
        var force = aws.params.force /* boolean */;
        var cluster = aws.params.cluster;
        if (! containerInstance) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter containerInstance"];
        }

        // TODO implement code

        var ret = {
            containerInstance: /*Sp*/{
                registeredResources: /*Sr*/[ {
                    name: "",
                    stringSetValue: /*Sv*/[ "" /*, ...*/ ],
                    type: "",
                    longValue: 0 /*long*/,
                    doubleValue: 0.0 /*double*/,
                    integerValue: 0
                } /*, ...*/ ],
                agentUpdateStatus: "",
                remainingResources: /*Sr*/[ {
                    name: "",
                    stringSetValue: /*Sv*/[ "" /*, ...*/ ],
                    type: "",
                    longValue: 0 /*long*/,
                    doubleValue: 0.0 /*double*/,
                    integerValue: 0
                } /*, ...*/ ],
                ec2InstanceId: "",
                containerInstanceArn: "",
                runningTasksCount: 0,
                attributes: /*Sy*/[ /*Sz*/{
                    value: "",
                    name: ""
                } /*, ...*/ ],
                pendingTasksCount: 0,
                status: "",
                agentConnected: false,
                versionInfo: /*Sq*/{
                    agentVersion: "",
                    dockerVersion: "",
                    agentHash: ""
                }
            }
        };
        return [200, ret];
    }
module.exports.DeleteCluster = function DeleteCluster(aws) {
        var cluster = aws.params.cluster;
        if (! cluster) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter cluster"];
        }

        // TODO implement code

        var ret = {
            cluster: /*S4*/{
                clusterName: "",
                registeredContainerInstancesCount: 0,
                runningTasksCount: 0,
                pendingTasksCount: 0,
                status: "",
                activeServicesCount: 0,
                clusterArn: ""
            }
        };
        return [200, ret];
    }
module.exports.ListClusters = function ListClusters(aws) {
        var maxResults = aws.params.maxResults /* integer */;
        var nextToken = aws.params.nextToken;


        // TODO implement code

        var ret = {
            clusterArns: /*Sv*/[ "" /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.ListTaskDefinitionFamilies = function ListTaskDefinitionFamilies(aws) {
        var maxResults = aws.params.maxResults /* integer */;
        var nextToken = aws.params.nextToken;
        var familyPrefix = aws.params.familyPrefix;


        // TODO implement code

        var ret = {
            families: /*Sv*/[ "" /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.CreateService = function CreateService(aws) {
        var clientToken = aws.params.clientToken;
        var taskDefinition = aws.params.taskDefinition;
        var cluster = aws.params.cluster;
        var loadBalancers = aws.params.loadBalancers;
        var deploymentConfiguration = aws.params.deploymentConfiguration;
        var desiredCount = aws.params.desiredCount /* integer */;
        var serviceName = aws.params.serviceName;
        var role = aws.params.role;
        if (! serviceName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter serviceName"];
        }        if (! taskDefinition) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter taskDefinition"];
        }        if (! desiredCount) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter desiredCount"];
        }

        // TODO implement code

        var ret = {
            service: /*Sc*/{
                events: [ {
                    createdAt: now(),
                    id: "",
                    message: ""
                } /*, ...*/ ],
                status: "",
                runningCount: 0,
                pendingCount: 0,
                desiredCount: 0,
                serviceName: "",
                roleArn: "",
                clusterArn: "",
                deploymentConfiguration: /*Sa*/{
                    minimumHealthyPercent: 0,
                    maximumPercent: 0
                },
                taskDefinition: "",
                serviceArn: "",
                loadBalancers: /*S7*/[ {
                    containerName: "",
                    loadBalancerName: "",
                    containerPort: 0
                } /*, ...*/ ],
                deployments: [ {
                    runningCount: 0,
                    createdAt: now(),
                    taskDefinition: "",
                    pendingCount: 0,
                    desiredCount: 0,
                    updatedAt: now(),
                    status: "",
                    id: ""
                } /*, ...*/ ]
            }
        };
        return [200, ret];
    }
module.exports.DeleteService = function DeleteService(aws) {
        var service = aws.params.service;
        var cluster = aws.params.cluster;
        if (! service) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter service"];
        }

        // TODO implement code

        var ret = {
            service: /*Sc*/{
                events: [ {
                    createdAt: now(),
                    id: "",
                    message: ""
                } /*, ...*/ ],
                status: "",
                runningCount: 0,
                pendingCount: 0,
                desiredCount: 0,
                serviceName: "",
                roleArn: "",
                clusterArn: "",
                deploymentConfiguration: /*Sa*/{
                    minimumHealthyPercent: 0,
                    maximumPercent: 0
                },
                taskDefinition: "",
                serviceArn: "",
                loadBalancers: /*S7*/[ {
                    containerName: "",
                    loadBalancerName: "",
                    containerPort: 0
                } /*, ...*/ ],
                deployments: [ {
                    runningCount: 0,
                    createdAt: now(),
                    taskDefinition: "",
                    pendingCount: 0,
                    desiredCount: 0,
                    updatedAt: now(),
                    status: "",
                    id: ""
                } /*, ...*/ ]
            }
        };
        return [200, ret];
    }
module.exports.SubmitContainerStateChange = function SubmitContainerStateChange(aws) {
        var containerName = aws.params.containerName;
        var exitCode = aws.params.exitCode /* integer */;
        var task = aws.params.task;
        var networkBindings = aws.params.networkBindings;
        var cluster = aws.params.cluster;
        var status = aws.params.status;
        var reason = aws.params.reason;


        // TODO implement code

        var ret = {
            acknowledgment: ""
        };
        return [200, ret];
    }
module.exports.DeregisterTaskDefinition = function DeregisterTaskDefinition(aws) {
        var taskDefinition = aws.params.taskDefinition;
        if (! taskDefinition) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter taskDefinition"];
        }

        // TODO implement code

        var ret = {
            taskDefinition: /*S12*/{
                containerDefinitions: /*S13*/[ {
                    privileged: false,
                    ulimits: [ {
                        softLimit: 0,
                        name: "",
                        hardLimit: 0
                    } /*, ...*/ ],
                    links: /*Sv*/[ "" /*, ...*/ ],
                    readonlyRootFilesystem: false,
                    workingDirectory: "",
                    essential: false,
                    dockerLabels: {} /* map */,
                    portMappings: [ {
                        hostPort: 0,
                        protocol: "",
                        containerPort: 0
                    } /*, ...*/ ],
                    entryPoint: /*Sv*/[ "" /*, ...*/ ],
                    extraHosts: [ {
                        hostname: "",
                        ipAddress: ""
                    } /*, ...*/ ],
                    dnsSearchDomains: /*Sv*/[ "" /*, ...*/ ],
                    disableNetworking: false,
                    dnsServers: /*Sv*/[ "" /*, ...*/ ],
                    cpu: 0,
                    memory: 0,
                    command: /*Sv*/[ "" /*, ...*/ ],
                    user: "",
                    name: "",
                    environment: /*S18*/[ {
                        value: "",
                        name: ""
                    } /*, ...*/ ],
                    logConfiguration: {
                        logDriver: "",
                        options: {} /* map */
                    },
                    dockerSecurityOptions: /*Sv*/[ "" /*, ...*/ ],
                    hostname: "",
                    image: "",
                    mountPoints: [ {
                        containerPath: "",
                        sourceVolume: "",
                        readOnly: false
                    } /*, ...*/ ],
                    volumesFrom: [ {
                        readOnly: false,
                        sourceContainer: ""
                    } /*, ...*/ ]
                } /*, ...*/ ],
                requiresAttributes: [ /*Sz*/{
                    value: "",
                    name: ""
                } /*, ...*/ ],
                revision: 0,
                volumes: /*S1n*/[ {
                    name: "",
                    host: {
                        sourcePath: ""
                    }
                } /*, ...*/ ],
                status: "",
                family: "",
                taskDefinitionArn: ""
            }
        };
        return [200, ret];
    }
module.exports.ListServices = function ListServices(aws) {
        var maxResults = aws.params.maxResults /* integer */;
        var nextToken = aws.params.nextToken;
        var cluster = aws.params.cluster;


        // TODO implement code

        var ret = {
            serviceArns: /*Sv*/[ "" /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.UpdateService = function UpdateService(aws) {
        var desiredCount = aws.params.desiredCount /* integer */;
        var deploymentConfiguration = aws.params.deploymentConfiguration;
        var service = aws.params.service;
        var taskDefinition = aws.params.taskDefinition;
        var cluster = aws.params.cluster;
        if (! service) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter service"];
        }

        // TODO implement code

        var ret = {
            service: /*Sc*/{
                events: [ {
                    createdAt: now(),
                    id: "",
                    message: ""
                } /*, ...*/ ],
                status: "",
                runningCount: 0,
                pendingCount: 0,
                desiredCount: 0,
                serviceName: "",
                roleArn: "",
                clusterArn: "",
                deploymentConfiguration: /*Sa*/{
                    minimumHealthyPercent: 0,
                    maximumPercent: 0
                },
                taskDefinition: "",
                serviceArn: "",
                loadBalancers: /*S7*/[ {
                    containerName: "",
                    loadBalancerName: "",
                    containerPort: 0
                } /*, ...*/ ],
                deployments: [ {
                    runningCount: 0,
                    createdAt: now(),
                    taskDefinition: "",
                    pendingCount: 0,
                    desiredCount: 0,
                    updatedAt: now(),
                    status: "",
                    id: ""
                } /*, ...*/ ]
            }
        };
        return [200, ret];
    }
module.exports.RegisterContainerInstance = function RegisterContainerInstance(aws) {
        var totalResources = aws.params.totalResources;
        var versionInfo = aws.params.versionInfo;
        var containerInstanceArn = aws.params.containerInstanceArn;
        var instanceIdentityDocumentSignature = aws.params.instanceIdentityDocumentSignature;
        var attributes = aws.params.attributes;
        var instanceIdentityDocument = aws.params.instanceIdentityDocument;
        var cluster = aws.params.cluster;


        // TODO implement code

        var ret = {
            containerInstance: /*Sp*/{
                registeredResources: /*Sr*/[ {
                    name: "",
                    stringSetValue: /*Sv*/[ "" /*, ...*/ ],
                    type: "",
                    longValue: 0 /*long*/,
                    doubleValue: 0.0 /*double*/,
                    integerValue: 0
                } /*, ...*/ ],
                agentUpdateStatus: "",
                remainingResources: /*Sr*/[ {
                    name: "",
                    stringSetValue: /*Sv*/[ "" /*, ...*/ ],
                    type: "",
                    longValue: 0 /*long*/,
                    doubleValue: 0.0 /*double*/,
                    integerValue: 0
                } /*, ...*/ ],
                ec2InstanceId: "",
                containerInstanceArn: "",
                runningTasksCount: 0,
                attributes: /*Sy*/[ /*Sz*/{
                    value: "",
                    name: ""
                } /*, ...*/ ],
                pendingTasksCount: 0,
                status: "",
                agentConnected: false,
                versionInfo: /*Sq*/{
                    agentVersion: "",
                    dockerVersion: "",
                    agentHash: ""
                }
            }
        };
        return [200, ret];
    }
module.exports.SubmitTaskStateChange = function SubmitTaskStateChange(aws) {
        var status = aws.params.status;
        var task = aws.params.task;
        var reason = aws.params.reason;
        var cluster = aws.params.cluster;


        // TODO implement code

        var ret = {
            acknowledgment: ""
        };
        return [200, ret];
    }
module.exports.ListTasks = function ListTasks(aws) {
        var containerInstance = aws.params.containerInstance;
        var desiredStatus = aws.params.desiredStatus;
        var maxResults = aws.params.maxResults /* integer */;
        var serviceName = aws.params.serviceName;
        var cluster = aws.params.cluster;
        var family = aws.params.family;
        var startedBy = aws.params.startedBy;
        var nextToken = aws.params.nextToken;


        // TODO implement code

        var ret = {
            taskArns: /*Sv*/[ "" /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.UpdateContainerAgent = function UpdateContainerAgent(aws) {
        var containerInstance = aws.params.containerInstance;
        var cluster = aws.params.cluster;
        if (! containerInstance) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter containerInstance"];
        }

        // TODO implement code

        var ret = {
            containerInstance: /*Sp*/{
                registeredResources: /*Sr*/[ {
                    name: "",
                    stringSetValue: /*Sv*/[ "" /*, ...*/ ],
                    type: "",
                    longValue: 0 /*long*/,
                    doubleValue: 0.0 /*double*/,
                    integerValue: 0
                } /*, ...*/ ],
                agentUpdateStatus: "",
                remainingResources: /*Sr*/[ {
                    name: "",
                    stringSetValue: /*Sv*/[ "" /*, ...*/ ],
                    type: "",
                    longValue: 0 /*long*/,
                    doubleValue: 0.0 /*double*/,
                    integerValue: 0
                } /*, ...*/ ],
                ec2InstanceId: "",
                containerInstanceArn: "",
                runningTasksCount: 0,
                attributes: /*Sy*/[ /*Sz*/{
                    value: "",
                    name: ""
                } /*, ...*/ ],
                pendingTasksCount: 0,
                status: "",
                agentConnected: false,
                versionInfo: /*Sq*/{
                    agentVersion: "",
                    dockerVersion: "",
                    agentHash: ""
                }
            }
        };
        return [200, ret];
    }
module.exports.DescribeServices = function DescribeServices(aws) {
        var services = aws.params.services;
        var cluster = aws.params.cluster;
        if (! services) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter services"];
        }

        // TODO implement code

        var ret = {
            services: [ /*Sc*/{
                events: [ {
                    createdAt: now(),
                    id: "",
                    message: ""
                } /*, ...*/ ],
                status: "",
                runningCount: 0,
                pendingCount: 0,
                desiredCount: 0,
                serviceName: "",
                roleArn: "",
                clusterArn: "",
                deploymentConfiguration: /*Sa*/{
                    minimumHealthyPercent: 0,
                    maximumPercent: 0
                },
                taskDefinition: "",
                serviceArn: "",
                loadBalancers: /*S7*/[ {
                    containerName: "",
                    loadBalancerName: "",
                    containerPort: 0
                } /*, ...*/ ],
                deployments: [ {
                    runningCount: 0,
                    createdAt: now(),
                    taskDefinition: "",
                    pendingCount: 0,
                    desiredCount: 0,
                    updatedAt: now(),
                    status: "",
                    id: ""
                } /*, ...*/ ]
            } /*, ...*/ ],
            failures: /*S1v*/[ {
                arn: "",
                reason: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ListTaskDefinitions = function ListTaskDefinitions(aws) {
        var nextToken = aws.params.nextToken;
        var sort = aws.params.sort;
        var status = aws.params.status;
        var maxResults = aws.params.maxResults /* integer */;
        var familyPrefix = aws.params.familyPrefix;


        // TODO implement code

        var ret = {
            taskDefinitionArns: /*Sv*/[ "" /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.DiscoverPollEndpoint = function DiscoverPollEndpoint(aws) {
        var containerInstance = aws.params.containerInstance;
        var cluster = aws.params.cluster;


        // TODO implement code

        var ret = {
            endpoint: "",
            telemetryEndpoint: ""
        };
        return [200, ret];
    }
module.exports.DescribeContainerInstances = function DescribeContainerInstances(aws) {
        var containerInstances = aws.params.containerInstances;
        var cluster = aws.params.cluster;
        if (! containerInstances) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter containerInstances"];
        }

        // TODO implement code

        var ret = {
            containerInstances: [ /*Sp*/{
                registeredResources: /*Sr*/[ {
                    name: "",
                    stringSetValue: /*Sv*/[ "" /*, ...*/ ],
                    type: "",
                    longValue: 0 /*long*/,
                    doubleValue: 0.0 /*double*/,
                    integerValue: 0
                } /*, ...*/ ],
                agentUpdateStatus: "",
                remainingResources: /*Sr*/[ {
                    name: "",
                    stringSetValue: /*Sv*/[ "" /*, ...*/ ],
                    type: "",
                    longValue: 0 /*long*/,
                    doubleValue: 0.0 /*double*/,
                    integerValue: 0
                } /*, ...*/ ],
                ec2InstanceId: "",
                containerInstanceArn: "",
                runningTasksCount: 0,
                attributes: /*Sy*/[ /*Sz*/{
                    value: "",
                    name: ""
                } /*, ...*/ ],
                pendingTasksCount: 0,
                status: "",
                agentConnected: false,
                versionInfo: /*Sq*/{
                    agentVersion: "",
                    dockerVersion: "",
                    agentHash: ""
                }
            } /*, ...*/ ],
            failures: /*S1v*/[ {
                arn: "",
                reason: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
