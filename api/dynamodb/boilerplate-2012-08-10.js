'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * Amazon DynamoDB version 2012-08-10
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.DeleteTable = function DeleteTable(aws) {
        var TableName = aws.params.TableName;
        if (! TableName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TableName"];
        }

        // TODO implement code

        var ret = {
            TableDescription: /*S20*/{
                LatestStreamArn: "",
                ProvisionedThroughput: /*S23*/{
                    LastDecreaseDateTime: now(),
                    LastIncreaseDateTime: now(),
                    WriteCapacityUnits: 0 /*long*/,
                    NumberOfDecreasesToday: 0 /*long*/,
                    ReadCapacityUnits: 0 /*long*/
                },
                CreationDateTime: now(),
                GlobalSecondaryIndexes: [ {
                    ItemCount: 0 /*long*/,
                    Projection: /*S1o*/{
                        ProjectionType: "",
                        NonKeyAttributes: [ "" /*, ...*/ ]
                    },
                    IndexStatus: "",
                    IndexName: "",
                    IndexSizeBytes: 0 /*long*/,
                    IndexArn: "",
                    Backfilling: false,
                    KeySchema: /*S1j*/[ {
                        AttributeName: "",
                        KeyType: ""
                    } /*, ...*/ ],
                    ProvisionedThroughput: /*S23*/{
                    LastDecreaseDateTime: now(),
                    LastIncreaseDateTime: now(),
                    WriteCapacityUnits: 0 /*long*/,
                    NumberOfDecreasesToday: 0 /*long*/,
                    ReadCapacityUnits: 0 /*long*/
                }
                } /*, ...*/ ],
                AttributeDefinitions: /*S1f*/[ {
                    AttributeName: "",
                    AttributeType: ""
                } /*, ...*/ ],
                TableName: "",
                TableStatus: "",
                ItemCount: 0 /*long*/,
                TableArn: "",
                TableSizeBytes: 0 /*long*/,
                LatestStreamLabel: "",
                LocalSecondaryIndexes: [ {
                    ItemCount: 0 /*long*/,
                    IndexName: "",
                    Projection: /*S1o*/{
                        ProjectionType: "",
                        NonKeyAttributes: [ "" /*, ...*/ ]
                    },
                    IndexSizeBytes: 0 /*long*/,
                    KeySchema: /*S1j*/[ {
                        AttributeName: "",
                        KeyType: ""
                    } /*, ...*/ ],
                    IndexArn: ""
                } /*, ...*/ ],
                KeySchema: /*S1j*/[ {
                        AttributeName: "",
                        KeyType: ""
                    } /*, ...*/ ],
                StreamSpecification: /*S1w*/{
                    StreamViewType: "",
                    StreamEnabled: false
                }
            }
        };
        return [200, ret];
    }
module.exports.UpdateTable = function UpdateTable(aws) {
        var GlobalSecondaryIndexUpdates = aws.params.GlobalSecondaryIndexUpdates /* list */;
        var StreamSpecification = aws.params.StreamSpecification;
        var ProvisionedThroughput = aws.params.ProvisionedThroughput;
        var AttributeDefinitions = aws.params.AttributeDefinitions;
        var TableName = aws.params.TableName;
        if (! TableName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TableName"];
        }

        // TODO implement code

        var ret = {
            TableDescription: /*S20*/{
                LatestStreamArn: "",
                ProvisionedThroughput: /*S23*/{
                    LastDecreaseDateTime: now(),
                    LastIncreaseDateTime: now(),
                    WriteCapacityUnits: 0 /*long*/,
                    NumberOfDecreasesToday: 0 /*long*/,
                    ReadCapacityUnits: 0 /*long*/
                },
                CreationDateTime: now(),
                GlobalSecondaryIndexes: [ {
                    ItemCount: 0 /*long*/,
                    Projection: /*S1o*/{
                        ProjectionType: "",
                        NonKeyAttributes: [ "" /*, ...*/ ]
                    },
                    IndexStatus: "",
                    IndexName: "",
                    IndexSizeBytes: 0 /*long*/,
                    IndexArn: "",
                    Backfilling: false,
                    KeySchema: /*S1j*/[ {
                        AttributeName: "",
                        KeyType: ""
                    } /*, ...*/ ],
                    ProvisionedThroughput: /*S23*/{
                    LastDecreaseDateTime: now(),
                    LastIncreaseDateTime: now(),
                    WriteCapacityUnits: 0 /*long*/,
                    NumberOfDecreasesToday: 0 /*long*/,
                    ReadCapacityUnits: 0 /*long*/
                }
                } /*, ...*/ ],
                AttributeDefinitions: /*S1f*/[ {
                    AttributeName: "",
                    AttributeType: ""
                } /*, ...*/ ],
                TableName: "",
                TableStatus: "",
                ItemCount: 0 /*long*/,
                TableArn: "",
                TableSizeBytes: 0 /*long*/,
                LatestStreamLabel: "",
                LocalSecondaryIndexes: [ {
                    ItemCount: 0 /*long*/,
                    IndexName: "",
                    Projection: /*S1o*/{
                        ProjectionType: "",
                        NonKeyAttributes: [ "" /*, ...*/ ]
                    },
                    IndexSizeBytes: 0 /*long*/,
                    KeySchema: /*S1j*/[ {
                        AttributeName: "",
                        KeyType: ""
                    } /*, ...*/ ],
                    IndexArn: ""
                } /*, ...*/ ],
                KeySchema: /*S1j*/[ {
                        AttributeName: "",
                        KeyType: ""
                    } /*, ...*/ ],
                StreamSpecification: /*S1w*/{
                    StreamViewType: "",
                    StreamEnabled: false
                }
            }
        };
        return [200, ret];
    }
module.exports.UpdateItem = function UpdateItem(aws) {
        var UpdateExpression = aws.params.UpdateExpression;
        var ConditionalOperator = aws.params.ConditionalOperator;
        var ReturnConsumedCapacity = aws.params.ReturnConsumedCapacity;
        var ExpressionAttributeNames = aws.params.ExpressionAttributeNames;
        var AttributeUpdates = aws.params.AttributeUpdates /* map */;
        var ReturnValues = aws.params.ReturnValues;
        var TableName = aws.params.TableName;
        var ExpressionAttributeValues = aws.params.ExpressionAttributeValues;
        var Expected = aws.params.Expected;
        var Key = aws.params.Key;
        var ConditionExpression = aws.params.ConditionExpression;
        var ReturnItemCollectionMetrics = aws.params.ReturnItemCollectionMetrics;
        if (! TableName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TableName"];
        }        if (! Key) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Key"];
        }

        // TODO implement code

        var ret = {
            Attributes: /*Ss*/{} /* map */,
            ItemCollectionMetrics: /*S1a*/{
                ItemCollectionKey: {} /* map */,
                SizeEstimateRangeGB: [ 0.0 /*double*/ /*, ...*/ ]
            },
            ConsumedCapacity: /*Su*/{
                GlobalSecondaryIndexes: /*Sx*/{} /* map */,
                Table: /*Sw*/{
                    CapacityUnits: 0.0 /*double*/
                },
                LocalSecondaryIndexes: /*Sx*/{} /* map */,
                CapacityUnits: 0.0 /*double*/,
                TableName: ""
            }
        };
        return [200, ret];
    }
module.exports.ListTables = function ListTables(aws) {
        var Limit = aws.params.Limit /* integer */;
        var ExclusiveStartTableName = aws.params.ExclusiveStartTableName;


        // TODO implement code

        var ret = {
            TableNames: [ "" /*, ...*/ ],
            LastEvaluatedTableName: ""
        };
        return [200, ret];
    }
module.exports.Query = function Query(aws) {
        var ExpressionAttributeNames = aws.params.ExpressionAttributeNames;
        var ReturnConsumedCapacity = aws.params.ReturnConsumedCapacity;
        var KeyConditions = aws.params.KeyConditions /* map */;
        var ConditionalOperator = aws.params.ConditionalOperator;
        var AttributesToGet = aws.params.AttributesToGet;
        var FilterExpression = aws.params.FilterExpression;
        var ProjectionExpression = aws.params.ProjectionExpression;
        var KeyConditionExpression = aws.params.KeyConditionExpression;
        var Select = aws.params.Select;
        var ExclusiveStartKey = aws.params.ExclusiveStartKey;
        var ExpressionAttributeValues = aws.params.ExpressionAttributeValues;
        var Limit = aws.params.Limit /* integer */;
        var ScanIndexForward = aws.params.ScanIndexForward /* boolean */;
        var IndexName = aws.params.IndexName;
        var QueryFilter = aws.params.QueryFilter;
        var TableName = aws.params.TableName;
        var ConsistentRead = aws.params.ConsistentRead /* boolean */;
        if (! TableName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TableName"];
        }

        // TODO implement code

        var ret = {
            Count: 0,
            Items: /*Sr*/[ /*Ss*/{} /* map */ /*, ...*/ ],
            ScannedCount: 0,
            LastEvaluatedKey: /*S6*/{} /* map */,
            ConsumedCapacity: /*Su*/{
                GlobalSecondaryIndexes: /*Sx*/{} /* map */,
                Table: /*Sw*/{
                    CapacityUnits: 0.0 /*double*/
                },
                LocalSecondaryIndexes: /*Sx*/{} /* map */,
                CapacityUnits: 0.0 /*double*/,
                TableName: ""
            }
        };
        return [200, ret];
    }
module.exports.BatchWriteItem = function BatchWriteItem(aws) {
        var RequestItems = aws.params.RequestItems;
        var ReturnItemCollectionMetrics = aws.params.ReturnItemCollectionMetrics;
        var ReturnConsumedCapacity = aws.params.ReturnConsumedCapacity;
        if (! RequestItems) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RequestItems"];
        }

        // TODO implement code

        var ret = {
            UnprocessedItems: /*S10*/{} /* map */,
            ItemCollectionMetrics: {} /* map */,
            ConsumedCapacity: /*St*/[ /*Su*/{
                GlobalSecondaryIndexes: /*Sx*/{} /* map */,
                Table: /*Sw*/{
                    CapacityUnits: 0.0 /*double*/
                },
                LocalSecondaryIndexes: /*Sx*/{} /* map */,
                CapacityUnits: 0.0 /*double*/,
                TableName: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.Scan = function Scan(aws) {
        var ConsistentRead = aws.params.ConsistentRead /* boolean */;
        var ExpressionAttributeNames = aws.params.ExpressionAttributeNames;
        var ScanFilter = aws.params.ScanFilter;
        var ConditionalOperator = aws.params.ConditionalOperator;
        var ReturnConsumedCapacity = aws.params.ReturnConsumedCapacity;
        var AttributesToGet = aws.params.AttributesToGet;
        var FilterExpression = aws.params.FilterExpression;
        var ProjectionExpression = aws.params.ProjectionExpression;
        var Select = aws.params.Select;
        var ExclusiveStartKey = aws.params.ExclusiveStartKey;
        var ExpressionAttributeValues = aws.params.ExpressionAttributeValues;
        var Limit = aws.params.Limit /* integer */;
        var Segment = aws.params.Segment /* integer */;
        var IndexName = aws.params.IndexName;
        var TableName = aws.params.TableName;
        var TotalSegments = aws.params.TotalSegments /* integer */;
        if (! TableName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TableName"];
        }

        // TODO implement code

        var ret = {
            Count: 0,
            Items: /*Sr*/[ /*Ss*/{} /* map */ /*, ...*/ ],
            ScannedCount: 0,
            LastEvaluatedKey: /*S6*/{} /* map */,
            ConsumedCapacity: /*Su*/{
                GlobalSecondaryIndexes: /*Sx*/{} /* map */,
                Table: /*Sw*/{
                    CapacityUnits: 0.0 /*double*/
                },
                LocalSecondaryIndexes: /*Sx*/{} /* map */,
                CapacityUnits: 0.0 /*double*/,
                TableName: ""
            }
        };
        return [200, ret];
    }
module.exports.GetItem = function GetItem(aws) {
        var ExpressionAttributeNames = aws.params.ExpressionAttributeNames;
        var Key = aws.params.Key;
        var ReturnConsumedCapacity = aws.params.ReturnConsumedCapacity;
        var AttributesToGet = aws.params.AttributesToGet;
        var ConsistentRead = aws.params.ConsistentRead /* boolean */;
        var ProjectionExpression = aws.params.ProjectionExpression;
        var TableName = aws.params.TableName;
        if (! TableName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TableName"];
        }        if (! Key) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Key"];
        }

        // TODO implement code

        var ret = {
            Item: /*Ss*/{} /* map */,
            ConsumedCapacity: /*Su*/{
                GlobalSecondaryIndexes: /*Sx*/{} /* map */,
                Table: /*Sw*/{
                    CapacityUnits: 0.0 /*double*/
                },
                LocalSecondaryIndexes: /*Sx*/{} /* map */,
                CapacityUnits: 0.0 /*double*/,
                TableName: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeTable = function DescribeTable(aws) {
        var TableName = aws.params.TableName;
        if (! TableName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TableName"];
        }

        // TODO implement code

        var ret = {
            Table: /*S20*/{
                LatestStreamArn: "",
                ProvisionedThroughput: /*S23*/{
                    LastDecreaseDateTime: now(),
                    LastIncreaseDateTime: now(),
                    WriteCapacityUnits: 0 /*long*/,
                    NumberOfDecreasesToday: 0 /*long*/,
                    ReadCapacityUnits: 0 /*long*/
                },
                CreationDateTime: now(),
                GlobalSecondaryIndexes: [ {
                    ItemCount: 0 /*long*/,
                    Projection: /*S1o*/{
                        ProjectionType: "",
                        NonKeyAttributes: [ "" /*, ...*/ ]
                    },
                    IndexStatus: "",
                    IndexName: "",
                    IndexSizeBytes: 0 /*long*/,
                    IndexArn: "",
                    Backfilling: false,
                    KeySchema: /*S1j*/[ {
                        AttributeName: "",
                        KeyType: ""
                    } /*, ...*/ ],
                    ProvisionedThroughput: /*S23*/{
                    LastDecreaseDateTime: now(),
                    LastIncreaseDateTime: now(),
                    WriteCapacityUnits: 0 /*long*/,
                    NumberOfDecreasesToday: 0 /*long*/,
                    ReadCapacityUnits: 0 /*long*/
                }
                } /*, ...*/ ],
                AttributeDefinitions: /*S1f*/[ {
                    AttributeName: "",
                    AttributeType: ""
                } /*, ...*/ ],
                TableName: "",
                TableStatus: "",
                ItemCount: 0 /*long*/,
                TableArn: "",
                TableSizeBytes: 0 /*long*/,
                LatestStreamLabel: "",
                LocalSecondaryIndexes: [ {
                    ItemCount: 0 /*long*/,
                    IndexName: "",
                    Projection: /*S1o*/{
                        ProjectionType: "",
                        NonKeyAttributes: [ "" /*, ...*/ ]
                    },
                    IndexSizeBytes: 0 /*long*/,
                    KeySchema: /*S1j*/[ {
                        AttributeName: "",
                        KeyType: ""
                    } /*, ...*/ ],
                    IndexArn: ""
                } /*, ...*/ ],
                KeySchema: /*S1j*/[ {
                        AttributeName: "",
                        KeyType: ""
                    } /*, ...*/ ],
                StreamSpecification: /*S1w*/{
                    StreamViewType: "",
                    StreamEnabled: false
                }
            }
        };
        return [200, ret];
    }
module.exports.PutItem = function PutItem(aws) {
        var ExpressionAttributeValues = aws.params.ExpressionAttributeValues;
        var Item = aws.params.Item;
        var Expected = aws.params.Expected;
        var ReturnItemCollectionMetrics = aws.params.ReturnItemCollectionMetrics;
        var ReturnConsumedCapacity = aws.params.ReturnConsumedCapacity;
        var ExpressionAttributeNames = aws.params.ExpressionAttributeNames;
        var ConditionExpression = aws.params.ConditionExpression;
        var ReturnValues = aws.params.ReturnValues;
        var ConditionalOperator = aws.params.ConditionalOperator;
        var TableName = aws.params.TableName;
        if (! TableName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TableName"];
        }        if (! Item) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Item"];
        }

        // TODO implement code

        var ret = {
            Attributes: /*Ss*/{} /* map */,
            ItemCollectionMetrics: /*S1a*/{
                ItemCollectionKey: {} /* map */,
                SizeEstimateRangeGB: [ 0.0 /*double*/ /*, ...*/ ]
            },
            ConsumedCapacity: /*Su*/{
                GlobalSecondaryIndexes: /*Sx*/{} /* map */,
                Table: /*Sw*/{
                    CapacityUnits: 0.0 /*double*/
                },
                LocalSecondaryIndexes: /*Sx*/{} /* map */,
                CapacityUnits: 0.0 /*double*/,
                TableName: ""
            }
        };
        return [200, ret];
    }
module.exports.CreateTable = function CreateTable(aws) {
        var AttributeDefinitions = aws.params.AttributeDefinitions;
        var ProvisionedThroughput = aws.params.ProvisionedThroughput;
        var LocalSecondaryIndexes = aws.params.LocalSecondaryIndexes /* list */;
        var GlobalSecondaryIndexes = aws.params.GlobalSecondaryIndexes /* list */;
        var StreamSpecification = aws.params.StreamSpecification;
        var KeySchema = aws.params.KeySchema;
        var TableName = aws.params.TableName;
        if (! AttributeDefinitions) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AttributeDefinitions"];
        }        if (! TableName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TableName"];
        }        if (! KeySchema) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter KeySchema"];
        }        if (! ProvisionedThroughput) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ProvisionedThroughput"];
        }

        // TODO implement code

        var ret = {
            TableDescription: /*S20*/{
                LatestStreamArn: "",
                ProvisionedThroughput: /*S23*/{
                    LastDecreaseDateTime: now(),
                    LastIncreaseDateTime: now(),
                    WriteCapacityUnits: 0 /*long*/,
                    NumberOfDecreasesToday: 0 /*long*/,
                    ReadCapacityUnits: 0 /*long*/
                },
                CreationDateTime: now(),
                GlobalSecondaryIndexes: [ {
                    ItemCount: 0 /*long*/,
                    Projection: /*S1o*/{
                        ProjectionType: "",
                        NonKeyAttributes: [ "" /*, ...*/ ]
                    },
                    IndexStatus: "",
                    IndexName: "",
                    IndexSizeBytes: 0 /*long*/,
                    IndexArn: "",
                    Backfilling: false,
                    KeySchema: /*S1j*/[ {
                        AttributeName: "",
                        KeyType: ""
                    } /*, ...*/ ],
                    ProvisionedThroughput: /*S23*/{
                    LastDecreaseDateTime: now(),
                    LastIncreaseDateTime: now(),
                    WriteCapacityUnits: 0 /*long*/,
                    NumberOfDecreasesToday: 0 /*long*/,
                    ReadCapacityUnits: 0 /*long*/
                }
                } /*, ...*/ ],
                AttributeDefinitions: /*S1f*/[ {
                    AttributeName: "",
                    AttributeType: ""
                } /*, ...*/ ],
                TableName: "",
                TableStatus: "",
                ItemCount: 0 /*long*/,
                TableArn: "",
                TableSizeBytes: 0 /*long*/,
                LatestStreamLabel: "",
                LocalSecondaryIndexes: [ {
                    ItemCount: 0 /*long*/,
                    IndexName: "",
                    Projection: /*S1o*/{
                        ProjectionType: "",
                        NonKeyAttributes: [ "" /*, ...*/ ]
                    },
                    IndexSizeBytes: 0 /*long*/,
                    KeySchema: /*S1j*/[ {
                        AttributeName: "",
                        KeyType: ""
                    } /*, ...*/ ],
                    IndexArn: ""
                } /*, ...*/ ],
                KeySchema: /*S1j*/[ {
                        AttributeName: "",
                        KeyType: ""
                    } /*, ...*/ ],
                StreamSpecification: /*S1w*/{
                    StreamViewType: "",
                    StreamEnabled: false
                }
            }
        };
        return [200, ret];
    }
module.exports.BatchGetItem = function BatchGetItem(aws) {
        var RequestItems = aws.params.RequestItems;
        var ReturnConsumedCapacity = aws.params.ReturnConsumedCapacity;
        if (! RequestItems) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RequestItems"];
        }

        // TODO implement code

        var ret = {
            UnprocessedKeys: /*S2*/{} /* map */,
            ConsumedCapacity: /*St*/[ /*Su*/{
                GlobalSecondaryIndexes: /*Sx*/{} /* map */,
                Table: /*Sw*/{
                    CapacityUnits: 0.0 /*double*/
                },
                LocalSecondaryIndexes: /*Sx*/{} /* map */,
                CapacityUnits: 0.0 /*double*/,
                TableName: ""
            } /*, ...*/ ],
            Responses: {} /* map */
        };
        return [200, ret];
    }
module.exports.DeleteItem = function DeleteItem(aws) {
        var ExpressionAttributeValues = aws.params.ExpressionAttributeValues;
        var ExpressionAttributeNames = aws.params.ExpressionAttributeNames;
        var Expected = aws.params.Expected;
        var Key = aws.params.Key;
        var ReturnConsumedCapacity = aws.params.ReturnConsumedCapacity;
        var ConditionalOperator = aws.params.ConditionalOperator;
        var ConditionExpression = aws.params.ConditionExpression;
        var ReturnValues = aws.params.ReturnValues;
        var ReturnItemCollectionMetrics = aws.params.ReturnItemCollectionMetrics;
        var TableName = aws.params.TableName;
        if (! TableName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TableName"];
        }        if (! Key) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Key"];
        }

        // TODO implement code

        var ret = {
            Attributes: /*Ss*/{} /* map */,
            ItemCollectionMetrics: /*S1a*/{
                ItemCollectionKey: {} /* map */,
                SizeEstimateRangeGB: [ 0.0 /*double*/ /*, ...*/ ]
            },
            ConsumedCapacity: /*Su*/{
                GlobalSecondaryIndexes: /*Sx*/{} /* map */,
                Table: /*Sw*/{
                    CapacityUnits: 0.0 /*double*/
                },
                LocalSecondaryIndexes: /*Sx*/{} /* map */,
                CapacityUnits: 0.0 /*double*/,
                TableName: ""
            }
        };
        return [200, ret];
    }
