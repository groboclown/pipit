'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * Amazon DynamoDB version 2012-08-10
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol json
require('../../lib/aws-common/shape_http')('json', module.exports, null);
// -----------------------------------
module.exports.DeleteTable = function DeleteTable(aws) {
  var tableName = aws.params.TableName;
  if (!tableName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TableName'];
  }


  // TODO implement code

  var ret = {
    TableDescription: /*S20*/{
      LatestStreamLabel: '',
      TableSizeBytes: 0 /*Long*/,
      TableName: '',
      KeySchema: /*S1j*/[ {
        AttributeName: '',
        KeyType: '',
      }, /* ...*/ ],
      StreamSpecification: /*S1w*/{
        StreamEnabled: false,
        StreamViewType: '',
      },
      ItemCount: 0 /*Long*/,
      ProvisionedThroughput: /*S23*/{
        LastIncreaseDateTime: awsCommon.timestamp(),
        LastDecreaseDateTime: awsCommon.timestamp(),
        NumberOfDecreasesToday: 0 /*Long*/,
        WriteCapacityUnits: 0 /*Long*/,
        ReadCapacityUnits: 0 /*Long*/,
      },
      LocalSecondaryIndexes: [ {
        ItemCount: 0 /*Long*/,
        Projection: /*S1o*/{
          ProjectionType: '',
          NonKeyAttributes: [ '', /* ...*/ ],
        },
        KeySchema: /*S1j*/[ {
        AttributeName: '',
        KeyType: '',
      }, /* ...*/ ],
        IndexSizeBytes: 0 /*Long*/,
        IndexName: '',
        IndexArn: '',
      }, /* ...*/ ],
      LatestStreamArn: '',
      CreationDateTime: awsCommon.timestamp(),
      GlobalSecondaryIndexes: [ {
        ItemCount: 0 /*Long*/,
        Projection: /*S1o*/{
          ProjectionType: '',
          NonKeyAttributes: [ '', /* ...*/ ],
        },
        IndexStatus: '',
        KeySchema: /*S1j*/[ {
        AttributeName: '',
        KeyType: '',
      }, /* ...*/ ],
        ProvisionedThroughput: /*S23*/{
        LastIncreaseDateTime: awsCommon.timestamp(),
        LastDecreaseDateTime: awsCommon.timestamp(),
        NumberOfDecreasesToday: 0 /*Long*/,
        WriteCapacityUnits: 0 /*Long*/,
        ReadCapacityUnits: 0 /*Long*/,
      },
        Backfilling: false,
        IndexName: '',
        IndexArn: '',
        IndexSizeBytes: 0 /*Long*/,
      }, /* ...*/ ],
      TableArn: '',
      AttributeDefinitions: /*S1f*/[ {
        AttributeName: '',
        AttributeType: '',
      }, /* ...*/ ],
      TableStatus: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.BatchGetItem = function BatchGetItem(aws) {
  var returnConsumedCapacity = aws.params.ReturnConsumedCapacity;
  var requestItems = aws.params.RequestItems;
  if (!requestItems) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RequestItems'];
  }


  // TODO implement code

  var ret = {
    UnprocessedKeys: /*S2*/{} /*Map*/,
    Responses: {} /*Map*/,
    ConsumedCapacity: /*St*/[ /*Su*/{
      Table: /*Sw*/{
        CapacityUnits: 0.0 /*Double*/,
      },
      GlobalSecondaryIndexes: /*Sx*/{} /*Map*/,
      TableName: '',
      LocalSecondaryIndexes: /*Sx*/{} /*Map*/,
      CapacityUnits: 0.0 /*Double*/,
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.BatchWriteItem = function BatchWriteItem(aws) {
  var returnConsumedCapacity = aws.params.ReturnConsumedCapacity;
  var returnItemCollectionMetrics = aws.params.ReturnItemCollectionMetrics;
  var requestItems = aws.params.RequestItems;
  if (!requestItems) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RequestItems'];
  }


  // TODO implement code

  var ret = {
    UnprocessedItems: /*S10*/{} /*Map*/,
    ItemCollectionMetrics: {} /*Map*/,
    ConsumedCapacity: /*St*/[ /*Su*/{
      Table: /*Sw*/{
        CapacityUnits: 0.0 /*Double*/,
      },
      GlobalSecondaryIndexes: /*Sx*/{} /*Map*/,
      TableName: '',
      LocalSecondaryIndexes: /*Sx*/{} /*Map*/,
      CapacityUnits: 0.0 /*Double*/,
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetItem = function GetItem(aws) {
  var consistentRead = aws.params.ConsistentRead /* Type boolean */;
  var projectionExpression = aws.params.ProjectionExpression;
  var tableName = aws.params.TableName;
  var key = aws.params.Key;
  var attributesToGet = aws.params.AttributesToGet;
  var expressionAttributeNames = aws.params.ExpressionAttributeNames;
  var returnConsumedCapacity = aws.params.ReturnConsumedCapacity;
  if (!tableName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TableName'];
  }
  if (!key) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Key'];
  }


  // TODO implement code

  var ret = {
    Item: /*Ss*/{} /*Map*/,
    ConsumedCapacity: /*Su*/{
      Table: /*Sw*/{
        CapacityUnits: 0.0 /*Double*/,
      },
      GlobalSecondaryIndexes: /*Sx*/{} /*Map*/,
      TableName: '',
      LocalSecondaryIndexes: /*Sx*/{} /*Map*/,
      CapacityUnits: 0.0 /*Double*/,
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.Query = function Query(aws) {
  var projectionExpression = aws.params.ProjectionExpression;
  var tableName = aws.params.TableName;
  var select = aws.params.Select;
  var scanIndexForward = aws.params.ScanIndexForward /* Type boolean */;
  var expressionAttributeValues = aws.params.ExpressionAttributeValues;
  var attributesToGet = aws.params.AttributesToGet;
  var expressionAttributeNames = aws.params.ExpressionAttributeNames;
  var indexName = aws.params.IndexName;
  var queryFilter = aws.params.QueryFilter;
  var filterExpression = aws.params.FilterExpression;
  var keyConditions = aws.params.KeyConditions /* Type map */;
  var consistentRead = aws.params.ConsistentRead /* Type boolean */;
  var keyConditionExpression = aws.params.KeyConditionExpression;
  var limit = aws.params.Limit /* Type integer */;
  var returnConsumedCapacity = aws.params.ReturnConsumedCapacity;
  var exclusiveStartKey = aws.params.ExclusiveStartKey;
  var conditionalOperator = aws.params.ConditionalOperator;
  if (!tableName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TableName'];
  }


  // TODO implement code

  var ret = {
    LastEvaluatedKey: /*S6*/{} /*Map*/,
    Count: 0,
    Items: /*Sr*/[ /*Ss*/{} /*Map*/, /* ...*/ ],
    ConsumedCapacity: /*Su*/{
      Table: /*Sw*/{
        CapacityUnits: 0.0 /*Double*/,
      },
      GlobalSecondaryIndexes: /*Sx*/{} /*Map*/,
      TableName: '',
      LocalSecondaryIndexes: /*Sx*/{} /*Map*/,
      CapacityUnits: 0.0 /*Double*/,
    },
    ScannedCount: 0,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListTables = function ListTables(aws) {
  var exclusiveStartTableName = aws.params.ExclusiveStartTableName;
  var limit = aws.params.Limit /* Type integer */;


  // TODO implement code

  var ret = {
    LastEvaluatedTableName: '',
    TableNames: [ '', /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteItem = function DeleteItem(aws) {
  var tableName = aws.params.TableName;
  var returnItemCollectionMetrics = aws.params.ReturnItemCollectionMetrics;
  var key = aws.params.Key;
  var expressionAttributeValues = aws.params.ExpressionAttributeValues;
  var returnValues = aws.params.ReturnValues;
  var expressionAttributeNames = aws.params.ExpressionAttributeNames;
  var conditionExpression = aws.params.ConditionExpression;
  var returnConsumedCapacity = aws.params.ReturnConsumedCapacity;
  var expected = aws.params.Expected;
  var conditionalOperator = aws.params.ConditionalOperator;
  if (!tableName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TableName'];
  }
  if (!key) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Key'];
  }


  // TODO implement code

  var ret = {
    Attributes: /*Ss*/{} /*Map*/,
    ItemCollectionMetrics: /*S1a*/{
      ItemCollectionKey: {} /*Map*/,
      SizeEstimateRangeGB: [ 0.0 /*Double*/, /* ...*/ ],
    },
    ConsumedCapacity: /*Su*/{
      Table: /*Sw*/{
        CapacityUnits: 0.0 /*Double*/,
      },
      GlobalSecondaryIndexes: /*Sx*/{} /*Map*/,
      TableName: '',
      LocalSecondaryIndexes: /*Sx*/{} /*Map*/,
      CapacityUnits: 0.0 /*Double*/,
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeTable = function DescribeTable(aws) {
  var tableName = aws.params.TableName;
  if (!tableName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TableName'];
  }


  // TODO implement code

  var ret = {
    Table: /*S20*/{
      LatestStreamLabel: '',
      TableSizeBytes: 0 /*Long*/,
      TableName: '',
      KeySchema: /*S1j*/[ {
        AttributeName: '',
        KeyType: '',
      }, /* ...*/ ],
      StreamSpecification: /*S1w*/{
        StreamEnabled: false,
        StreamViewType: '',
      },
      ItemCount: 0 /*Long*/,
      ProvisionedThroughput: /*S23*/{
        LastIncreaseDateTime: awsCommon.timestamp(),
        LastDecreaseDateTime: awsCommon.timestamp(),
        NumberOfDecreasesToday: 0 /*Long*/,
        WriteCapacityUnits: 0 /*Long*/,
        ReadCapacityUnits: 0 /*Long*/,
      },
      LocalSecondaryIndexes: [ {
        ItemCount: 0 /*Long*/,
        Projection: /*S1o*/{
          ProjectionType: '',
          NonKeyAttributes: [ '', /* ...*/ ],
        },
        KeySchema: /*S1j*/[ {
        AttributeName: '',
        KeyType: '',
      }, /* ...*/ ],
        IndexSizeBytes: 0 /*Long*/,
        IndexName: '',
        IndexArn: '',
      }, /* ...*/ ],
      LatestStreamArn: '',
      CreationDateTime: awsCommon.timestamp(),
      GlobalSecondaryIndexes: [ {
        ItemCount: 0 /*Long*/,
        Projection: /*S1o*/{
          ProjectionType: '',
          NonKeyAttributes: [ '', /* ...*/ ],
        },
        IndexStatus: '',
        KeySchema: /*S1j*/[ {
        AttributeName: '',
        KeyType: '',
      }, /* ...*/ ],
        ProvisionedThroughput: /*S23*/{
        LastIncreaseDateTime: awsCommon.timestamp(),
        LastDecreaseDateTime: awsCommon.timestamp(),
        NumberOfDecreasesToday: 0 /*Long*/,
        WriteCapacityUnits: 0 /*Long*/,
        ReadCapacityUnits: 0 /*Long*/,
      },
        Backfilling: false,
        IndexName: '',
        IndexArn: '',
        IndexSizeBytes: 0 /*Long*/,
      }, /* ...*/ ],
      TableArn: '',
      AttributeDefinitions: /*S1f*/[ {
        AttributeName: '',
        AttributeType: '',
      }, /* ...*/ ],
      TableStatus: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.PutItem = function PutItem(aws) {
  var tableName = aws.params.TableName;
  var item = aws.params.Item;
  var expressionAttributeValues = aws.params.ExpressionAttributeValues;
  var expressionAttributeNames = aws.params.ExpressionAttributeNames;
  var returnValues = aws.params.ReturnValues;
  var returnItemCollectionMetrics = aws.params.ReturnItemCollectionMetrics;
  var conditionExpression = aws.params.ConditionExpression;
  var returnConsumedCapacity = aws.params.ReturnConsumedCapacity;
  var expected = aws.params.Expected;
  var conditionalOperator = aws.params.ConditionalOperator;
  if (!tableName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TableName'];
  }
  if (!item) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Item'];
  }


  // TODO implement code

  var ret = {
    Attributes: /*Ss*/{} /*Map*/,
    ItemCollectionMetrics: /*S1a*/{
      ItemCollectionKey: {} /*Map*/,
      SizeEstimateRangeGB: [ 0.0 /*Double*/, /* ...*/ ],
    },
    ConsumedCapacity: /*Su*/{
      Table: /*Sw*/{
        CapacityUnits: 0.0 /*Double*/,
      },
      GlobalSecondaryIndexes: /*Sx*/{} /*Map*/,
      TableName: '',
      LocalSecondaryIndexes: /*Sx*/{} /*Map*/,
      CapacityUnits: 0.0 /*Double*/,
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateTable = function UpdateTable(aws) {
  var tableName = aws.params.TableName;
  var streamSpecification = aws.params.StreamSpecification;
  var globalSecondaryIndexUpdates = aws.params.GlobalSecondaryIndexUpdates /* Type list */;
  var attributeDefinitions = aws.params.AttributeDefinitions;
  var provisionedThroughput = aws.params.ProvisionedThroughput;
  if (!tableName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TableName'];
  }


  // TODO implement code

  var ret = {
    TableDescription: /*S20*/{
      LatestStreamLabel: '',
      TableSizeBytes: 0 /*Long*/,
      TableName: '',
      KeySchema: /*S1j*/[ {
        AttributeName: '',
        KeyType: '',
      }, /* ...*/ ],
      StreamSpecification: /*S1w*/{
        StreamEnabled: false,
        StreamViewType: '',
      },
      ItemCount: 0 /*Long*/,
      ProvisionedThroughput: /*S23*/{
        LastIncreaseDateTime: awsCommon.timestamp(),
        LastDecreaseDateTime: awsCommon.timestamp(),
        NumberOfDecreasesToday: 0 /*Long*/,
        WriteCapacityUnits: 0 /*Long*/,
        ReadCapacityUnits: 0 /*Long*/,
      },
      LocalSecondaryIndexes: [ {
        ItemCount: 0 /*Long*/,
        Projection: /*S1o*/{
          ProjectionType: '',
          NonKeyAttributes: [ '', /* ...*/ ],
        },
        KeySchema: /*S1j*/[ {
        AttributeName: '',
        KeyType: '',
      }, /* ...*/ ],
        IndexSizeBytes: 0 /*Long*/,
        IndexName: '',
        IndexArn: '',
      }, /* ...*/ ],
      LatestStreamArn: '',
      CreationDateTime: awsCommon.timestamp(),
      GlobalSecondaryIndexes: [ {
        ItemCount: 0 /*Long*/,
        Projection: /*S1o*/{
          ProjectionType: '',
          NonKeyAttributes: [ '', /* ...*/ ],
        },
        IndexStatus: '',
        KeySchema: /*S1j*/[ {
        AttributeName: '',
        KeyType: '',
      }, /* ...*/ ],
        ProvisionedThroughput: /*S23*/{
        LastIncreaseDateTime: awsCommon.timestamp(),
        LastDecreaseDateTime: awsCommon.timestamp(),
        NumberOfDecreasesToday: 0 /*Long*/,
        WriteCapacityUnits: 0 /*Long*/,
        ReadCapacityUnits: 0 /*Long*/,
      },
        Backfilling: false,
        IndexName: '',
        IndexArn: '',
        IndexSizeBytes: 0 /*Long*/,
      }, /* ...*/ ],
      TableArn: '',
      AttributeDefinitions: /*S1f*/[ {
        AttributeName: '',
        AttributeType: '',
      }, /* ...*/ ],
      TableStatus: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateItem = function UpdateItem(aws) {
  var tableName = aws.params.TableName;
  var expected = aws.params.Expected;
  var attributeUpdates = aws.params.AttributeUpdates /* Type map */;
  var expressionAttributeNames = aws.params.ExpressionAttributeNames;
  var conditionExpression = aws.params.ConditionExpression;
  var updateExpression = aws.params.UpdateExpression;
  var expressionAttributeValues = aws.params.ExpressionAttributeValues;
  var returnItemCollectionMetrics = aws.params.ReturnItemCollectionMetrics;
  var key = aws.params.Key;
  var returnValues = aws.params.ReturnValues;
  var returnConsumedCapacity = aws.params.ReturnConsumedCapacity;
  var conditionalOperator = aws.params.ConditionalOperator;
  if (!tableName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TableName'];
  }
  if (!key) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Key'];
  }


  // TODO implement code

  var ret = {
    Attributes: /*Ss*/{} /*Map*/,
    ItemCollectionMetrics: /*S1a*/{
      ItemCollectionKey: {} /*Map*/,
      SizeEstimateRangeGB: [ 0.0 /*Double*/, /* ...*/ ],
    },
    ConsumedCapacity: /*Su*/{
      Table: /*Sw*/{
        CapacityUnits: 0.0 /*Double*/,
      },
      GlobalSecondaryIndexes: /*Sx*/{} /*Map*/,
      TableName: '',
      LocalSecondaryIndexes: /*Sx*/{} /*Map*/,
      CapacityUnits: 0.0 /*Double*/,
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.Scan = function Scan(aws) {
  var projectionExpression = aws.params.ProjectionExpression;
  var tableName = aws.params.TableName;
  var select = aws.params.Select;
  var attributesToGet = aws.params.AttributesToGet;
  var totalSegments = aws.params.TotalSegments /* Type integer */;
  var expressionAttributeNames = aws.params.ExpressionAttributeNames;
  var indexName = aws.params.IndexName;
  var filterExpression = aws.params.FilterExpression;
  var consistentRead = aws.params.ConsistentRead /* Type boolean */;
  var limit = aws.params.Limit /* Type integer */;
  var expressionAttributeValues = aws.params.ExpressionAttributeValues;
  var exclusiveStartKey = aws.params.ExclusiveStartKey;
  var segment = aws.params.Segment /* Type integer */;
  var returnConsumedCapacity = aws.params.ReturnConsumedCapacity;
  var conditionalOperator = aws.params.ConditionalOperator;
  var scanFilter = aws.params.ScanFilter;
  if (!tableName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TableName'];
  }


  // TODO implement code

  var ret = {
    LastEvaluatedKey: /*S6*/{} /*Map*/,
    Count: 0,
    Items: /*Sr*/[ /*Ss*/{} /*Map*/, /* ...*/ ],
    ConsumedCapacity: /*Su*/{
      Table: /*Sw*/{
        CapacityUnits: 0.0 /*Double*/,
      },
      GlobalSecondaryIndexes: /*Sx*/{} /*Map*/,
      TableName: '',
      LocalSecondaryIndexes: /*Sx*/{} /*Map*/,
      CapacityUnits: 0.0 /*Double*/,
    },
    ScannedCount: 0,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateTable = function CreateTable(aws) {
  var localSecondaryIndexes = aws.params.LocalSecondaryIndexes /* Type list */;
  var keySchema = aws.params.KeySchema;
  var streamSpecification = aws.params.StreamSpecification;
  var provisionedThroughput = aws.params.ProvisionedThroughput;
  var globalSecondaryIndexes = aws.params.GlobalSecondaryIndexes /* Type list */;
  var tableName = aws.params.TableName;
  var attributeDefinitions = aws.params.AttributeDefinitions;
  if (!attributeDefinitions) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AttributeDefinitions'];
  }
  if (!tableName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TableName'];
  }
  if (!keySchema) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter KeySchema'];
  }
  if (!provisionedThroughput) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ProvisionedThroughput'];
  }


  // TODO implement code

  var ret = {
    TableDescription: /*S20*/{
      LatestStreamLabel: '',
      TableSizeBytes: 0 /*Long*/,
      TableName: '',
      KeySchema: /*S1j*/[ {
        AttributeName: '',
        KeyType: '',
      }, /* ...*/ ],
      StreamSpecification: /*S1w*/{
        StreamEnabled: false,
        StreamViewType: '',
      },
      ItemCount: 0 /*Long*/,
      ProvisionedThroughput: /*S23*/{
        LastIncreaseDateTime: awsCommon.timestamp(),
        LastDecreaseDateTime: awsCommon.timestamp(),
        NumberOfDecreasesToday: 0 /*Long*/,
        WriteCapacityUnits: 0 /*Long*/,
        ReadCapacityUnits: 0 /*Long*/,
      },
      LocalSecondaryIndexes: [ {
        ItemCount: 0 /*Long*/,
        Projection: /*S1o*/{
          ProjectionType: '',
          NonKeyAttributes: [ '', /* ...*/ ],
        },
        KeySchema: /*S1j*/[ {
        AttributeName: '',
        KeyType: '',
      }, /* ...*/ ],
        IndexSizeBytes: 0 /*Long*/,
        IndexName: '',
        IndexArn: '',
      }, /* ...*/ ],
      LatestStreamArn: '',
      CreationDateTime: awsCommon.timestamp(),
      GlobalSecondaryIndexes: [ {
        ItemCount: 0 /*Long*/,
        Projection: /*S1o*/{
          ProjectionType: '',
          NonKeyAttributes: [ '', /* ...*/ ],
        },
        IndexStatus: '',
        KeySchema: /*S1j*/[ {
        AttributeName: '',
        KeyType: '',
      }, /* ...*/ ],
        ProvisionedThroughput: /*S23*/{
        LastIncreaseDateTime: awsCommon.timestamp(),
        LastDecreaseDateTime: awsCommon.timestamp(),
        NumberOfDecreasesToday: 0 /*Long*/,
        WriteCapacityUnits: 0 /*Long*/,
        ReadCapacityUnits: 0 /*Long*/,
      },
        Backfilling: false,
        IndexName: '',
        IndexArn: '',
        IndexSizeBytes: 0 /*Long*/,
      }, /* ...*/ ],
      TableArn: '',
      AttributeDefinitions: /*S1f*/[ {
        AttributeName: '',
        AttributeType: '',
      }, /* ...*/ ],
      TableStatus: '',
    },
  };
  return [200, ret];
};
