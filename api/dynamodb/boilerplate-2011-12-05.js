'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * Amazon DynamoDB version 2011-12-05
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.UpdateItem = function UpdateItem(aws) {
        var ReturnValues = aws.params['ReturnValues'];
        var TableName = aws.params['TableName'];
        var Key = aws.params['Key'];
        var Expected = aws.params['Expected'];
        var AttributeUpdates = aws.params['AttributeUpdates'] /* map */;
        if (! TableName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TableName"];
        }        if (! Key) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Key"];
        }        if (! AttributeUpdates) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AttributeUpdates"];
        }

        // TODO implement code

        var ret = {
            Attributes: /*Sl*/{} /* map */,
            ConsumedCapacityUnits: 0.0 /*double*/
        };
        return [200, ret];
    }
module.exports.Query = function Query(aws) {
        var TableName = aws.params['TableName'];
        var Count = aws.params['Count'] /* boolean */;
        var AttributesToGet = aws.params['AttributesToGet'];
        var Limit = aws.params['Limit'] /* integer */;
        var ScanIndexForward = aws.params['ScanIndexForward'] /* boolean */;
        var HashKeyValue = aws.params['HashKeyValue'];
        var ConsistentRead = aws.params['ConsistentRead'] /* boolean */;
        var ExclusiveStartKey = aws.params['ExclusiveStartKey'];
        var RangeKeyCondition = aws.params['RangeKeyCondition'];
        if (! TableName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TableName"];
        }        if (! HashKeyValue) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter HashKeyValue"];
        }

        // TODO implement code

        var ret = {
            Items: /*Sk*/[ /*Sl*/{} /* map */ /*, ...*/ ],
            Count: 0,
            ConsumedCapacityUnits: 0.0 /*double*/,
            LastEvaluatedKey: /*S6*/{
                HashKeyElement: /*S7*/{
                    NS: [ "" /*, ...*/ ],
                    B: null /*blob*/,
                    S: "",
                    BS: [ null /*blob*/ /*, ...*/ ],
                    N: "",
                    SS: [ "" /*, ...*/ ]
                },
                RangeKeyElement: /*S7*/{
                    NS: [ "" /*, ...*/ ],
                    B: null /*blob*/,
                    S: "",
                    BS: [ null /*blob*/ /*, ...*/ ],
                    N: "",
                    SS: [ "" /*, ...*/ ]
                }
            }
        };
        return [200, ret];
    }
module.exports.UpdateTable = function UpdateTable(aws) {
        var TableName = aws.params['TableName'];
        var ProvisionedThroughput = aws.params['ProvisionedThroughput'];
        if (! TableName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TableName"];
        }        if (! ProvisionedThroughput) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ProvisionedThroughput"];
        }

        // TODO implement code

        var ret = {
            TableDescription: /*S15*/{
                KeySchema: /*Sy*/{
                    HashKeyElement: /*Sz*/{
                        AttributeType: "",
                        AttributeName: ""
                    },
                    RangeKeyElement: /*Sz*/{
                        AttributeType: "",
                        AttributeName: ""
                    }
                },
                TableName: "",
                TableSizeBytes: 0 /*long*/,
                ItemCount: 0 /*long*/,
                CreationDateTime: now(),
                ProvisionedThroughput: {
                    LastIncreaseDateTime: now(),
                    LastDecreaseDateTime: now(),
                    ReadCapacityUnits: 0 /*long*/,
                    NumberOfDecreasesToday: 0 /*long*/,
                    WriteCapacityUnits: 0 /*long*/
                },
                TableStatus: ""
            }
        };
        return [200, ret];
    }
module.exports.PutItem = function PutItem(aws) {
        var Item = aws.params['Item'];
        var TableName = aws.params['TableName'];
        var Expected = aws.params['Expected'];
        var ReturnValues = aws.params['ReturnValues'];
        if (! TableName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TableName"];
        }        if (! Item) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Item"];
        }

        // TODO implement code

        var ret = {
            Attributes: /*Sl*/{} /* map */,
            ConsumedCapacityUnits: 0.0 /*double*/
        };
        return [200, ret];
    }
module.exports.GetItem = function GetItem(aws) {
        var TableName = aws.params['TableName'];
        var Key = aws.params['Key'];
        var AttributesToGet = aws.params['AttributesToGet'];
        var ConsistentRead = aws.params['ConsistentRead'] /* boolean */;
        if (! TableName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TableName"];
        }        if (! Key) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Key"];
        }

        // TODO implement code

        var ret = {
            Item: /*Sl*/{} /* map */,
            ConsumedCapacityUnits: 0.0 /*double*/
        };
        return [200, ret];
    }
module.exports.BatchWriteItem = function BatchWriteItem(aws) {
        var RequestItems = aws.params['RequestItems'];
        if (! RequestItems) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RequestItems"];
        }

        // TODO implement code

        var ret = {
            UnprocessedItems: /*So*/{} /* map */,
            Responses: {} /* map */
        };
        return [200, ret];
    }
module.exports.DeleteTable = function DeleteTable(aws) {
        var TableName = aws.params['TableName'];
        if (! TableName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TableName"];
        }

        // TODO implement code

        var ret = {
            TableDescription: /*S15*/{
                KeySchema: /*Sy*/{
                    HashKeyElement: /*Sz*/{
                        AttributeType: "",
                        AttributeName: ""
                    },
                    RangeKeyElement: /*Sz*/{
                        AttributeType: "",
                        AttributeName: ""
                    }
                },
                TableName: "",
                TableSizeBytes: 0 /*long*/,
                ItemCount: 0 /*long*/,
                CreationDateTime: now(),
                ProvisionedThroughput: {
                    LastIncreaseDateTime: now(),
                    LastDecreaseDateTime: now(),
                    ReadCapacityUnits: 0 /*long*/,
                    NumberOfDecreasesToday: 0 /*long*/,
                    WriteCapacityUnits: 0 /*long*/
                },
                TableStatus: ""
            }
        };
        return [200, ret];
    }
module.exports.CreateTable = function CreateTable(aws) {
        var KeySchema = aws.params['KeySchema'];
        var TableName = aws.params['TableName'];
        var ProvisionedThroughput = aws.params['ProvisionedThroughput'];
        if (! TableName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TableName"];
        }        if (! KeySchema) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter KeySchema"];
        }        if (! ProvisionedThroughput) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ProvisionedThroughput"];
        }

        // TODO implement code

        var ret = {
            TableDescription: /*S15*/{
                KeySchema: /*Sy*/{
                    HashKeyElement: /*Sz*/{
                        AttributeType: "",
                        AttributeName: ""
                    },
                    RangeKeyElement: /*Sz*/{
                        AttributeType: "",
                        AttributeName: ""
                    }
                },
                TableName: "",
                TableSizeBytes: 0 /*long*/,
                ItemCount: 0 /*long*/,
                CreationDateTime: now(),
                ProvisionedThroughput: {
                    LastIncreaseDateTime: now(),
                    LastDecreaseDateTime: now(),
                    ReadCapacityUnits: 0 /*long*/,
                    NumberOfDecreasesToday: 0 /*long*/,
                    WriteCapacityUnits: 0 /*long*/
                },
                TableStatus: ""
            }
        };
        return [200, ret];
    }
module.exports.BatchGetItem = function BatchGetItem(aws) {
        var RequestItems = aws.params['RequestItems'];
        if (! RequestItems) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RequestItems"];
        }

        // TODO implement code

        var ret = {
            Responses: {} /* map */,
            UnprocessedKeys: /*S2*/{} /* map */
        };
        return [200, ret];
    }
module.exports.ListTables = function ListTables(aws) {
        var ExclusiveStartTableName = aws.params['ExclusiveStartTableName'];
        var Limit = aws.params['Limit'] /* integer */;


        // TODO implement code

        var ret = {
            LastEvaluatedTableName: "",
            TableNames: [ "" /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeTable = function DescribeTable(aws) {
        var TableName = aws.params['TableName'];
        if (! TableName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TableName"];
        }

        // TODO implement code

        var ret = {
            Table: /*S15*/{
                KeySchema: /*Sy*/{
                    HashKeyElement: /*Sz*/{
                        AttributeType: "",
                        AttributeName: ""
                    },
                    RangeKeyElement: /*Sz*/{
                        AttributeType: "",
                        AttributeName: ""
                    }
                },
                TableName: "",
                TableSizeBytes: 0 /*long*/,
                ItemCount: 0 /*long*/,
                CreationDateTime: now(),
                ProvisionedThroughput: {
                    LastIncreaseDateTime: now(),
                    LastDecreaseDateTime: now(),
                    ReadCapacityUnits: 0 /*long*/,
                    NumberOfDecreasesToday: 0 /*long*/,
                    WriteCapacityUnits: 0 /*long*/
                },
                TableStatus: ""
            }
        };
        return [200, ret];
    }
module.exports.DeleteItem = function DeleteItem(aws) {
        var TableName = aws.params['TableName'];
        var Key = aws.params['Key'];
        var Expected = aws.params['Expected'];
        var ReturnValues = aws.params['ReturnValues'];
        if (! TableName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TableName"];
        }        if (! Key) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Key"];
        }

        // TODO implement code

        var ret = {
            Attributes: /*Sl*/{} /* map */,
            ConsumedCapacityUnits: 0.0 /*double*/
        };
        return [200, ret];
    }
module.exports.Scan = function Scan(aws) {
        var TableName = aws.params['TableName'];
        var AttributesToGet = aws.params['AttributesToGet'];
        var Limit = aws.params['Limit'] /* integer */;
        var Count = aws.params['Count'] /* boolean */;
        var ExclusiveStartKey = aws.params['ExclusiveStartKey'];
        var ScanFilter = aws.params['ScanFilter'] /* map */;
        if (! TableName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TableName"];
        }

        // TODO implement code

        var ret = {
            ScannedCount: 0,
            Items: /*Sk*/[ /*Sl*/{} /* map */ /*, ...*/ ],
            Count: 0,
            ConsumedCapacityUnits: 0.0 /*double*/,
            LastEvaluatedKey: /*S6*/{
                HashKeyElement: /*S7*/{
                    NS: [ "" /*, ...*/ ],
                    B: null /*blob*/,
                    S: "",
                    BS: [ null /*blob*/ /*, ...*/ ],
                    N: "",
                    SS: [ "" /*, ...*/ ]
                },
                RangeKeyElement: /*S7*/{
                    NS: [ "" /*, ...*/ ],
                    B: null /*blob*/,
                    S: "",
                    BS: [ null /*blob*/ /*, ...*/ ],
                    N: "",
                    SS: [ "" /*, ...*/ ]
                }
            }
        };
        return [200, ret];
    }
