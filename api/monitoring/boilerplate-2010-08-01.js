'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * Amazon CloudWatch version 2010-08-01
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.EnableAlarmActions = function EnableAlarmActions(aws) {
        var AlarmNames = aws.params.AlarmNames;
        if (! AlarmNames) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AlarmNames"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.PutMetricAlarm = function PutMetricAlarm(aws) {
        var AlarmActions = aws.params.AlarmActions;
        var AlarmDescription = aws.params.AlarmDescription;
        var OKActions = aws.params.OKActions;
        var InsufficientDataActions = aws.params.InsufficientDataActions;
        var ActionsEnabled = aws.params.ActionsEnabled /* boolean */;
        var Statistic = aws.params.Statistic;
        var ComparisonOperator = aws.params.ComparisonOperator;
        var Threshold = aws.params.Threshold /* double */;
        var Unit = aws.params.Unit;
        var AlarmName = aws.params.AlarmName;
        var Namespace = aws.params.Namespace;
        var MetricName = aws.params.MetricName;
        var EvaluationPeriods = aws.params.EvaluationPeriods /* integer */;
        var Dimensions = aws.params.Dimensions;
        var Period = aws.params.Period /* integer */;
        if (! AlarmName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AlarmName"];
        }        if (! MetricName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MetricName"];
        }        if (! Namespace) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Namespace"];
        }        if (! Statistic) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Statistic"];
        }        if (! Period) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Period"];
        }        if (! EvaluationPeriods) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter EvaluationPeriods"];
        }        if (! Threshold) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Threshold"];
        }        if (! ComparisonOperator) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ComparisonOperator"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeAlarmHistory = function DescribeAlarmHistory(aws) {
        var AlarmName = aws.params.AlarmName;
        var StartDate = aws.params.StartDate /* timestamp */;
        var EndDate = aws.params.EndDate /* timestamp */;
        var NextToken = aws.params.NextToken;
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var HistoryItemType = aws.params.HistoryItemType;


        // TODO implement code

        var ret = {
            AlarmHistoryItems: [ {
                AlarmName: "",
                HistorySummary: "",
                HistoryData: "",
                Timestamp: now(),
                HistoryItemType: ""
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.ListMetrics = function ListMetrics(aws) {
        var Dimensions = aws.params.Dimensions /* list */;
        var Namespace = aws.params.Namespace;
        var MetricName = aws.params.MetricName;
        var NextToken = aws.params.NextToken;


        // TODO implement code

        var ret = {
            Metrics: [ {
                Dimensions: /*Sv*/[ {
                    Name: "",
                    Value: ""
                } /*, ...*/ ],
                Namespace: "",
                MetricName: ""
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.DisableAlarmActions = function DisableAlarmActions(aws) {
        var AlarmNames = aws.params.AlarmNames;
        if (! AlarmNames) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AlarmNames"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.SetAlarmState = function SetAlarmState(aws) {
        var AlarmName = aws.params.AlarmName;
        var StateValue = aws.params.StateValue;
        var StateReason = aws.params.StateReason;
        var StateReasonData = aws.params.StateReasonData;
        if (! AlarmName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AlarmName"];
        }        if (! StateValue) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StateValue"];
        }        if (! StateReason) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StateReason"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.PutMetricData = function PutMetricData(aws) {
        var Namespace = aws.params.Namespace;
        var MetricData = aws.params.MetricData /* list */;
        if (! Namespace) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Namespace"];
        }        if (! MetricData) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MetricData"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeAlarms = function DescribeAlarms(aws) {
        var StateValue = aws.params.StateValue;
        var AlarmNamePrefix = aws.params.AlarmNamePrefix;
        var AlarmNames = aws.params.AlarmNames;
        var ActionPrefix = aws.params.ActionPrefix;
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var NextToken = aws.params.NextToken;


        // TODO implement code

        var ret = {
            MetricAlarms: /*Sj*/[ {
                AlarmActions: /*So*/[ "" /*, ...*/ ],
                AlarmDescription: "",
                OKActions: /*So*/[ "" /*, ...*/ ],
                InsufficientDataActions: /*So*/[ "" /*, ...*/ ],
                StateUpdatedTimestamp: now(),
                ActionsEnabled: false,
                AlarmConfigurationUpdatedTimestamp: now(),
                StateReason: "",
                ComparisonOperator: "",
                Threshold: 0.0 /*double*/,
                Unit: "",
                AlarmName: "",
                Dimensions: /*Sv*/[ {
                    Name: "",
                    Value: ""
                } /*, ...*/ ],
                Namespace: "",
                MetricName: "",
                EvaluationPeriods: 0,
                StateValue: "",
                AlarmArn: "",
                Statistic: "",
                Period: 0,
                StateReasonData: ""
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.GetMetricStatistics = function GetMetricStatistics(aws) {
        var EndTime = aws.params.EndTime /* timestamp */;
        var Namespace = aws.params.Namespace;
        var Dimensions = aws.params.Dimensions;
        var Statistics = aws.params.Statistics /* list */;
        var StartTime = aws.params.StartTime /* timestamp */;
        var MetricName = aws.params.MetricName;
        var Period = aws.params.Period /* integer */;
        var Unit = aws.params.Unit;
        if (! Namespace) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Namespace"];
        }        if (! MetricName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MetricName"];
        }        if (! StartTime) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StartTime"];
        }        if (! EndTime) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter EndTime"];
        }        if (! Period) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Period"];
        }        if (! Statistics) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Statistics"];
        }

        // TODO implement code

        var ret = {
            Label: "",
            Datapoints: [ {
                Maximum: 0.0 /*double*/,
                Average: 0.0 /*double*/,
                Minimum: 0.0 /*double*/,
                SampleCount: 0.0 /*double*/,
                Sum: 0.0 /*double*/,
                Timestamp: now(),
                Unit: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteAlarms = function DeleteAlarms(aws) {
        var AlarmNames = aws.params.AlarmNames;
        if (! AlarmNames) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AlarmNames"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeAlarmsForMetric = function DescribeAlarmsForMetric(aws) {
        var Statistic = aws.params.Statistic;
        var Namespace = aws.params.Namespace;
        var MetricName = aws.params.MetricName;
        var Dimensions = aws.params.Dimensions;
        var Period = aws.params.Period /* integer */;
        var Unit = aws.params.Unit;
        if (! MetricName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MetricName"];
        }        if (! Namespace) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Namespace"];
        }

        // TODO implement code

        var ret = {
            MetricAlarms: /*Sj*/[ {
                AlarmActions: /*So*/[ "" /*, ...*/ ],
                AlarmDescription: "",
                OKActions: /*So*/[ "" /*, ...*/ ],
                InsufficientDataActions: /*So*/[ "" /*, ...*/ ],
                StateUpdatedTimestamp: now(),
                ActionsEnabled: false,
                AlarmConfigurationUpdatedTimestamp: now(),
                StateReason: "",
                ComparisonOperator: "",
                Threshold: 0.0 /*double*/,
                Unit: "",
                AlarmName: "",
                Dimensions: /*Sv*/[ {
                    Name: "",
                    Value: ""
                } /*, ...*/ ],
                Namespace: "",
                MetricName: "",
                EvaluationPeriods: 0,
                StateValue: "",
                AlarmArn: "",
                Statistic: "",
                Period: 0,
                StateReasonData: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
