'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * Amazon CloudWatch version 2010-08-01
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol query
require('../../lib/aws-common/shape_http')('query', module.exports, 'http://monitoring.amazonaws.com/doc/2010-08-01/');
// -----------------------------------
module.exports.DescribeAlarms = function DescribeAlarms(aws) {
  var alarmNames = aws.params.AlarmNames;
  var actionPrefix = aws.params.ActionPrefix;
  var alarmNamePrefix = aws.params.AlarmNamePrefix;
  var nextToken = aws.params.NextToken;
  var stateValue = aws.params.StateValue;
  var maxRecords = aws.params.MaxRecords /* Type integer */;


  // TODO implement code

  var ret = {
    MetricAlarms: /*Sj*/[ {
      OKActions: /*So*/[ '', /* ...*/ ],
      Unit: '',
      AlarmArn: '',
      Statistic: '',
      Period: 0,
      Dimensions: /*Sv*/[ {
        Name: '',
        Value: '',
      }, /* ...*/ ],
      StateUpdatedTimestamp: awsCommon.timestamp(),
      EvaluationPeriods: 0,
      AlarmConfigurationUpdatedTimestamp: awsCommon.timestamp(),
      Namespace: '',
      InsufficientDataActions: /*So*/[ '', /* ...*/ ],
      Threshold: 0.0 /*Double*/,
      ActionsEnabled: false,
      MetricName: '',
      ComparisonOperator: '',
      AlarmActions: /*So*/[ '', /* ...*/ ],
      StateReason: '',
      AlarmDescription: '',
      StateReasonData: '',
      StateValue: '',
      AlarmName: '',
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetMetricStatistics = function GetMetricStatistics(aws) {
  var endTime = aws.params.EndTime /* Type timestamp */;
  var unit = aws.params.Unit;
  var startTime = aws.params.StartTime /* Type timestamp */;
  var namespace = aws.params.Namespace;
  var period = aws.params.Period /* Type integer */;
  var statistics = aws.params.Statistics /* Type list */;
  var metricName = aws.params.MetricName;
  var dimensions = aws.params.Dimensions;
  if (!namespace) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Namespace'];
  }
  if (!metricName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MetricName'];
  }
  if (!startTime) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter StartTime'];
  }
  if (!endTime) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EndTime'];
  }
  if (!period) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Period'];
  }
  if (!statistics) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Statistics'];
  }


  // TODO implement code

  var ret = {
    Datapoints: [ {
      Average: 0.0 /*Double*/,
      Sum: 0.0 /*Double*/,
      SampleCount: 0.0 /*Double*/,
      Unit: '',
      Timestamp: awsCommon.timestamp(),
      Maximum: 0.0 /*Double*/,
      Minimum: 0.0 /*Double*/,
    }, /* ...*/ ],
    Label: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.PutMetricData = function PutMetricData(aws) {
  var namespace = aws.params.Namespace;
  var metricData = aws.params.MetricData /* Type list */;
  if (!namespace) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Namespace'];
  }
  if (!metricData) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MetricData'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeAlarmsForMetric = function DescribeAlarmsForMetric(aws) {
  var unit = aws.params.Unit;
  var namespace = aws.params.Namespace;
  var period = aws.params.Period /* Type integer */;
  var metricName = aws.params.MetricName;
  var dimensions = aws.params.Dimensions;
  var statistic = aws.params.Statistic;
  if (!metricName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MetricName'];
  }
  if (!namespace) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Namespace'];
  }


  // TODO implement code

  var ret = {
    MetricAlarms: /*Sj*/[ {
      OKActions: /*So*/[ '', /* ...*/ ],
      Unit: '',
      AlarmArn: '',
      Statistic: '',
      Period: 0,
      Dimensions: /*Sv*/[ {
        Name: '',
        Value: '',
      }, /* ...*/ ],
      StateUpdatedTimestamp: awsCommon.timestamp(),
      EvaluationPeriods: 0,
      AlarmConfigurationUpdatedTimestamp: awsCommon.timestamp(),
      Namespace: '',
      InsufficientDataActions: /*So*/[ '', /* ...*/ ],
      Threshold: 0.0 /*Double*/,
      ActionsEnabled: false,
      MetricName: '',
      ComparisonOperator: '',
      AlarmActions: /*So*/[ '', /* ...*/ ],
      StateReason: '',
      AlarmDescription: '',
      StateReasonData: '',
      StateValue: '',
      AlarmName: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.SetAlarmState = function SetAlarmState(aws) {
  var stateReason = aws.params.StateReason;
  var stateReasonData = aws.params.StateReasonData;
  var stateValue = aws.params.StateValue;
  var alarmName = aws.params.AlarmName;
  if (!alarmName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AlarmName'];
  }
  if (!stateValue) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter StateValue'];
  }
  if (!stateReason) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter StateReason'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.EnableAlarmActions = function EnableAlarmActions(aws) {
  var alarmNames = aws.params.AlarmNames;
  if (!alarmNames) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AlarmNames'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DisableAlarmActions = function DisableAlarmActions(aws) {
  var alarmNames = aws.params.AlarmNames;
  if (!alarmNames) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AlarmNames'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.PutMetricAlarm = function PutMetricAlarm(aws) {
  var oKActions = aws.params.OKActions;
  var unit = aws.params.Unit;
  var dimensions = aws.params.Dimensions;
  var evaluationPeriods = aws.params.EvaluationPeriods /* Type integer */;
  var insufficientDataActions = aws.params.InsufficientDataActions;
  var threshold = aws.params.Threshold /* Type double */;
  var namespace = aws.params.Namespace;
  var alarmDescription = aws.params.AlarmDescription;
  var period = aws.params.Period /* Type integer */;
  var comparisonOperator = aws.params.ComparisonOperator;
  var alarmActions = aws.params.AlarmActions;
  var metricName = aws.params.MetricName;
  var alarmName = aws.params.AlarmName;
  var actionsEnabled = aws.params.ActionsEnabled /* Type boolean */;
  var statistic = aws.params.Statistic;
  if (!alarmName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AlarmName'];
  }
  if (!metricName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MetricName'];
  }
  if (!namespace) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Namespace'];
  }
  if (!statistic) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Statistic'];
  }
  if (!period) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Period'];
  }
  if (!evaluationPeriods) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EvaluationPeriods'];
  }
  if (!threshold) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Threshold'];
  }
  if (!comparisonOperator) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ComparisonOperator'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeAlarmHistory = function DescribeAlarmHistory(aws) {
  var historyItemType = aws.params.HistoryItemType;
  var startDate = aws.params.StartDate /* Type timestamp */;
  var nextToken = aws.params.NextToken;
  var endDate = aws.params.EndDate /* Type timestamp */;
  var alarmName = aws.params.AlarmName;
  var maxRecords = aws.params.MaxRecords /* Type integer */;


  // TODO implement code

  var ret = {
    NextToken: '',
    AlarmHistoryItems: [ {
      Timestamp: awsCommon.timestamp(),
      HistoryData: '',
      HistorySummary: '',
      HistoryItemType: '',
      AlarmName: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteAlarms = function DeleteAlarms(aws) {
  var alarmNames = aws.params.AlarmNames;
  if (!alarmNames) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AlarmNames'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ListMetrics = function ListMetrics(aws) {
  var nextToken = aws.params.NextToken;
  var metricName = aws.params.MetricName;
  var dimensions = aws.params.Dimensions /* Type list */;
  var namespace = aws.params.Namespace;


  // TODO implement code

  var ret = {
    NextToken: '',
    Metrics: [ {
      MetricName: '',
      Dimensions: /*Sv*/[ {
        Name: '',
        Value: '',
      }, /* ...*/ ],
      Namespace: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
