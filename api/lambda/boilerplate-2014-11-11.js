'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * AWS Lambda version 2014-11-11
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol rest-json
require('../../lib/aws-common/shape_http')('rest-json', module.exports, null)
// -----------------------------------
module.exports.ListFunctions = awsCommon.as(
  'GET',
  '/2014-11-13/functions/',
  function ListFunctions(aws) {
  var Marker = aws.params['Marker'];
  var MaxItems = aws.params['MaxItems'] /* Type integer */;


  // TODO implement code

  var ret = {
    NextMarker: '',
    Functions: [ /*Se*/{
      Description: '',
      Handler: '',
      ConfigurationId: '',
      CodeSize: 0 /*Long*/,
      MemorySize: 0,
      Runtime: '',
      LastModified: awsCommon.timestamp(),
      Mode: '',
      Role: '',
      FunctionARN: '',
      Timeout: 0,
      FunctionName: '',
    }, /* ...*/ ],
  };
  return [200, ret];
});
// -----------------------------------
module.exports.GetFunctionConfiguration = awsCommon.as(
  'GET',
  '/2014-11-13/functions/:FunctionName/configuration',
  function GetFunctionConfiguration(aws) {
  var FunctionName = aws.reqParams['FunctionName'];
  if (!FunctionName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FunctionName'];
  }


  // TODO implement code

  var ret = /*Se*/{
    Description: '',
    Handler: '',
    ConfigurationId: '',
    CodeSize: 0 /*Long*/,
    MemorySize: 0,
    Runtime: '',
    LastModified: awsCommon.timestamp(),
    Mode: '',
    Role: '',
    FunctionARN: '',
    Timeout: 0,
    FunctionName: '',
  };
  return [200, ret];
});
// -----------------------------------
module.exports.DeleteFunction = awsCommon.as(
  'DELETE',
  '/2014-11-13/functions/:FunctionName',
  function DeleteFunction(aws) {
  var FunctionName = aws.reqParams['FunctionName'];
  if (!FunctionName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FunctionName'];
  }


  // TODO implement code

  var ret = {};
  return [204, ret];
});
// -----------------------------------
module.exports.UploadFunction = awsCommon.as(
  'PUT',
  '/2014-11-13/functions/:FunctionName',
  function UploadFunction(aws) {
  var MemorySize = aws.params['MemorySize'] /* Type integer */;
  var Description = aws.params['Description'];
  var FunctionName = aws.reqParams['FunctionName'];
  var Mode = aws.params['Mode'];
  var Role = aws.params['Role'];
  var Handler = aws.params['Handler'];
  var Timeout = aws.params['Timeout'] /* Type integer */;
  var FunctionZip = aws.params['FunctionZip'];
  var Runtime = aws.params['Runtime'];
  if (!FunctionName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FunctionName'];
  }
  if (!FunctionZip) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FunctionZip'];
  }
  if (!Runtime) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Runtime'];
  }
  if (!Role) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Role'];
  }
  if (!Handler) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Handler'];
  }
  if (!Mode) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Mode'];
  }


  // TODO implement code

  var ret = /*Se*/{
    Description: '',
    Handler: '',
    ConfigurationId: '',
    CodeSize: 0 /*Long*/,
    MemorySize: 0,
    Runtime: '',
    LastModified: awsCommon.timestamp(),
    Mode: '',
    Role: '',
    FunctionARN: '',
    Timeout: 0,
    FunctionName: '',
  };
  return [201, ret];
});
// -----------------------------------
module.exports.GetEventSource = awsCommon.as(
  'GET',
  '/2014-11-13/event-source-mappings/:UUID',
  function GetEventSource(aws) {
  var UUID = aws.reqParams['UUID'];
  if (!UUID) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UUID'];
  }


  // TODO implement code

  var ret = /*S7*/{
    BatchSize: 0,
    Parameters: /*S6*/{} /*Map*/,
    Role: '',
    IsActive: false,
    FunctionName: '',
    LastModified: awsCommon.timestamp(),
    UUID: '',
    EventSource: '',
    Status: '',
  };
  return [200, ret];
});
// -----------------------------------
module.exports.RemoveEventSource = awsCommon.as(
  'DELETE',
  '/2014-11-13/event-source-mappings/:UUID',
  function RemoveEventSource(aws) {
  var UUID = aws.reqParams['UUID'];
  if (!UUID) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UUID'];
  }


  // TODO implement code

  var ret = {};
  return [204, ret];
});
// -----------------------------------
module.exports.UpdateFunctionConfiguration = awsCommon.as(
  'PUT',
  '/2014-11-13/functions/:FunctionName/configuration',
  function UpdateFunctionConfiguration(aws) {
  var Description = aws.params['Description'];
  var FunctionName = aws.reqParams['FunctionName'];
  var MemorySize = aws.params['MemorySize'] /* Type integer */;
  var Role = aws.params['Role'];
  var Handler = aws.params['Handler'];
  var Timeout = aws.params['Timeout'] /* Type integer */;
  if (!FunctionName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FunctionName'];
  }


  // TODO implement code

  var ret = /*Se*/{
    Description: '',
    Handler: '',
    ConfigurationId: '',
    CodeSize: 0 /*Long*/,
    MemorySize: 0,
    Runtime: '',
    LastModified: awsCommon.timestamp(),
    Mode: '',
    Role: '',
    FunctionARN: '',
    Timeout: 0,
    FunctionName: '',
  };
  return [200, ret];
});
// -----------------------------------
module.exports.InvokeAsync = awsCommon.as(
  '/2014-11-13/functions/:FunctionName/invoke-async/',
  function InvokeAsync(aws) {
  var InvokeArgs = aws.params['InvokeArgs'];
  var FunctionName = aws.reqParams['FunctionName'];
  if (!FunctionName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FunctionName'];
  }
  if (!InvokeArgs) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InvokeArgs'];
  }


  // TODO implement code

  var ret = {
    Status: 0,
  };
  return [202, ret];
});
// -----------------------------------
module.exports.GetFunction = awsCommon.as(
  'GET',
  '/2014-11-13/functions/:FunctionName',
  function GetFunction(aws) {
  var FunctionName = aws.reqParams['FunctionName'];
  if (!FunctionName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FunctionName'];
  }


  // TODO implement code

  var ret = {
    Code: {
      RepositoryType: '',
      Location: '',
    },
    Configuration: /*Se*/{
      Description: '',
      Handler: '',
      ConfigurationId: '',
      CodeSize: 0 /*Long*/,
      MemorySize: 0,
      Runtime: '',
      LastModified: awsCommon.timestamp(),
      Mode: '',
      Role: '',
      FunctionARN: '',
      Timeout: 0,
      FunctionName: '',
    },
  };
  return [200, ret];
});
// -----------------------------------
module.exports.AddEventSource = awsCommon.as(
  '/2014-11-13/event-source-mappings/',
  function AddEventSource(aws) {
  var BatchSize = aws.params['BatchSize'] /* Type integer */;
  var Parameters = aws.params['Parameters'];
  var EventSource = aws.params['EventSource'];
  var FunctionName = aws.params['FunctionName'];
  var Role = aws.params['Role'];
  if (!EventSource) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EventSource'];
  }
  if (!FunctionName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FunctionName'];
  }
  if (!Role) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Role'];
  }


  // TODO implement code

  var ret = /*S7*/{
    BatchSize: 0,
    Parameters: /*S6*/{} /*Map*/,
    Role: '',
    IsActive: false,
    FunctionName: '',
    LastModified: awsCommon.timestamp(),
    UUID: '',
    EventSource: '',
    Status: '',
  };
  return [200, ret];
});
// -----------------------------------
module.exports.ListEventSources = awsCommon.as(
  'GET',
  '/2014-11-13/event-source-mappings/',
  function ListEventSources(aws) {
  var Marker = aws.params['Marker'];
  var EventSourceArn = aws.params['EventSourceArn'];
  var FunctionName = aws.params['FunctionName'];
  var MaxItems = aws.params['MaxItems'] /* Type integer */;


  // TODO implement code

  var ret = {
    NextMarker: '',
    EventSources: [ /*S7*/{
      BatchSize: 0,
      Parameters: /*S6*/{} /*Map*/,
      Role: '',
      IsActive: false,
      FunctionName: '',
      LastModified: awsCommon.timestamp(),
      UUID: '',
      EventSource: '',
      Status: '',
    }, /* ...*/ ],
  };
  return [200, ret];
});
