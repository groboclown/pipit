'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * AWS Lambda version 2015-03-31
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.CreateFunction = aws_common.as(
    "/2015-03-31/functions",
    function CreateFunction(aws) {
        var Publish = aws.params.Publish /* boolean */;
        var FunctionName = aws.params.FunctionName;
        var Handler = aws.params.Handler;
        var Runtime = aws.params.Runtime;
        var Description = aws.params.Description;
        var MemorySize = aws.params.MemorySize /* integer */;
        var Timeout = aws.params.Timeout /* integer */;
        var Code = aws.params.Code /* structure */;
        var Role = aws.params.Role;
        if (! FunctionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter FunctionName"];
        }        if (! Runtime) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Runtime"];
        }        if (! Role) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Role"];
        }        if (! Handler) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Handler"];
        }        if (! Code) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Code"];
        }

        // TODO implement code

        var ret = /*Sz*/{
            LastModified: "",
            Handler: "",
            Description: "",
            Role: "",
            Version: "",
            FunctionName: "",
            Runtime: "",
            CodeSize: 0 /*long*/,
            MemorySize: 0,
            Timeout: 0,
            CodeSha256: "",
            FunctionArn: ""
        };
        return [201, ret];
    });
module.exports.DeleteEventSourceMapping = aws_common.as(
    "DELETE",
    "/2015-03-31/event-source-mappings/:UUID",
    function DeleteEventSourceMapping(aws) {
        var UUID = aws.reqParams.UUID;
        if (! UUID) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter UUID"];
        }

        // TODO implement code

        var ret = /*Sl*/{
            State: "",
            EventSourceArn: "",
            LastModified: now(),
            UUID: "",
            BatchSize: 0,
            StateTransitionReason: "",
            LastProcessingResult: "",
            FunctionArn: ""
        };
        return [202, ret];
    });
module.exports.InvokeAsync = aws_common.as(
    "/2014-11-13/functions/:FunctionName/invoke-async/",
    function InvokeAsync(aws) {
        var FunctionName = aws.reqParams.FunctionName;
        var InvokeArgs = aws.params.InvokeArgs /* blob */;
        if (! FunctionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter FunctionName"];
        }        if (! InvokeArgs) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InvokeArgs"];
        }

        // TODO implement code

        var ret = {
            Status: 0
        };
        return [202, ret];
    });
module.exports.UpdateFunctionCode = aws_common.as(
    "PUT",
    "/2015-03-31/functions/:FunctionName/code",
    function UpdateFunctionCode(aws) {
        var S3ObjectVersion = aws.params.S3ObjectVersion;
        var S3Key = aws.params.S3Key;
        var Publish = aws.params.Publish /* boolean */;
        var FunctionName = aws.reqParams.FunctionName;
        var S3Bucket = aws.params.S3Bucket;
        var ZipFile = aws.params.ZipFile /* blob */;
        if (! FunctionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter FunctionName"];
        }

        // TODO implement code

        var ret = /*Sz*/{
            LastModified: "",
            Handler: "",
            Description: "",
            Role: "",
            Version: "",
            FunctionName: "",
            Runtime: "",
            CodeSize: 0 /*long*/,
            MemorySize: 0,
            Timeout: 0,
            CodeSha256: "",
            FunctionArn: ""
        };
        return [200, ret];
    });
module.exports.GetEventSourceMapping = aws_common.as(
    "GET",
    "/2015-03-31/event-source-mappings/:UUID",
    function GetEventSourceMapping(aws) {
        var UUID = aws.reqParams.UUID;
        if (! UUID) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter UUID"];
        }

        // TODO implement code

        var ret = /*Sl*/{
            State: "",
            EventSourceArn: "",
            LastModified: now(),
            UUID: "",
            BatchSize: 0,
            StateTransitionReason: "",
            LastProcessingResult: "",
            FunctionArn: ""
        };
        return [200, ret];
    });
module.exports.ListVersionsByFunction = aws_common.as(
    "GET",
    "/2015-03-31/functions/:FunctionName/versions",
    function ListVersionsByFunction(aws) {
        var FunctionName = aws.reqParams.FunctionName;
        var MaxItems = aws.params.MaxItems /* integer */;
        var Marker = aws.params.Marker;
        if (! FunctionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter FunctionName"];
        }

        // TODO implement code

        var ret = {
            Versions: /*S1v*/[ /*Sz*/{
                LastModified: "",
                Handler: "",
                Description: "",
                Role: "",
                Version: "",
                FunctionName: "",
                Runtime: "",
                CodeSize: 0 /*long*/,
                MemorySize: 0,
                Timeout: 0,
                CodeSha256: "",
                FunctionArn: ""
            } /*, ...*/ ],
            NextMarker: ""
        };
        return [200, ret];
    });
module.exports.UpdateFunctionConfiguration = aws_common.as(
    "PUT",
    "/2015-03-31/functions/:FunctionName/configuration",
    function UpdateFunctionConfiguration(aws) {
        var FunctionName = aws.reqParams.FunctionName;
        var Handler = aws.params.Handler;
        var Timeout = aws.params.Timeout /* integer */;
        var Description = aws.params.Description;
        var MemorySize = aws.params.MemorySize /* integer */;
        var Role = aws.params.Role;
        if (! FunctionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter FunctionName"];
        }

        // TODO implement code

        var ret = /*Sz*/{
            LastModified: "",
            Handler: "",
            Description: "",
            Role: "",
            Version: "",
            FunctionName: "",
            Runtime: "",
            CodeSize: 0 /*long*/,
            MemorySize: 0,
            Timeout: 0,
            CodeSha256: "",
            FunctionArn: ""
        };
        return [200, ret];
    });
module.exports.ListEventSourceMappings = aws_common.as(
    "GET",
    "/2015-03-31/event-source-mappings/",
    function ListEventSourceMappings(aws) {
        var FunctionName = aws.params.FunctionName;
        var Marker = aws.params.Marker;
        var EventSourceArn = aws.params.EventSourceArn;
        var MaxItems = aws.params.MaxItems /* integer */;


        // TODO implement code

        var ret = {
            NextMarker: "",
            EventSourceMappings: [ /*Sl*/{
                State: "",
                EventSourceArn: "",
                LastModified: now(),
                UUID: "",
                BatchSize: 0,
                StateTransitionReason: "",
                LastProcessingResult: "",
                FunctionArn: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.ListFunctions = aws_common.as(
    "GET",
    "/2015-03-31/functions/",
    function ListFunctions(aws) {
        var MaxItems = aws.params.MaxItems /* integer */;
        var Marker = aws.params.Marker;


        // TODO implement code

        var ret = {
            NextMarker: "",
            Functions: /*S1v*/[ /*Sz*/{
                LastModified: "",
                Handler: "",
                Description: "",
                Role: "",
                Version: "",
                FunctionName: "",
                Runtime: "",
                CodeSize: 0 /*long*/,
                MemorySize: 0,
                Timeout: 0,
                CodeSha256: "",
                FunctionArn: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.AddPermission = aws_common.as(
    "/2015-03-31/functions/:FunctionName/policy",
    function AddPermission(aws) {
        var SourceArn = aws.params.SourceArn;
        var Qualifier = aws.params.Qualifier;
        var SourceAccount = aws.params.SourceAccount;
        var FunctionName = aws.reqParams.FunctionName;
        var StatementId = aws.params.StatementId;
        var Principal = aws.params.Principal;
        var Action = aws.params.Action;
        if (! FunctionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter FunctionName"];
        }        if (! StatementId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StatementId"];
        }        if (! Action) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Action"];
        }        if (! Principal) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Principal"];
        }

        // TODO implement code

        var ret = {
            Statement: ""
        };
        return [201, ret];
    });
module.exports.UpdateAlias = aws_common.as(
    "PUT",
    "/2015-03-31/functions/:FunctionName/aliases/:Name",
    function UpdateAlias(aws) {
        var FunctionName = aws.reqParams.FunctionName;
        var Name = aws.reqParams.Name;
        var FunctionVersion = aws.params.FunctionVersion;
        var Description = aws.params.Description;
        if (! FunctionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter FunctionName"];
        }        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }

        // TODO implement code

        var ret = /*Sf*/{
            Name: "",
            FunctionVersion: "",
            Description: "",
            AliasArn: ""
        };
        return [200, ret];
    });
module.exports.GetPolicy = aws_common.as(
    "GET",
    "/2015-03-31/functions/:FunctionName/policy",
    function GetPolicy(aws) {
        var FunctionName = aws.reqParams.FunctionName;
        var Qualifier = aws.params.Qualifier;
        if (! FunctionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter FunctionName"];
        }

        // TODO implement code

        var ret = {
            Policy: ""
        };
        return [200, ret];
    });
module.exports.CreateEventSourceMapping = aws_common.as(
    "/2015-03-31/event-source-mappings/",
    function CreateEventSourceMapping(aws) {
        var FunctionName = aws.params.FunctionName;
        var StartingPosition = aws.params.StartingPosition;
        var EventSourceArn = aws.params.EventSourceArn;
        var Enabled = aws.params.Enabled /* boolean */;
        var BatchSize = aws.params.BatchSize /* integer */;
        if (! EventSourceArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter EventSourceArn"];
        }        if (! FunctionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter FunctionName"];
        }        if (! StartingPosition) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StartingPosition"];
        }

        // TODO implement code

        var ret = /*Sl*/{
            State: "",
            EventSourceArn: "",
            LastModified: now(),
            UUID: "",
            BatchSize: 0,
            StateTransitionReason: "",
            LastProcessingResult: "",
            FunctionArn: ""
        };
        return [202, ret];
    });
module.exports.DeleteAlias = aws_common.as(
    "DELETE",
    "/2015-03-31/functions/:FunctionName/aliases/:Name",
    function DeleteAlias(aws) {
        var FunctionName = aws.reqParams.FunctionName;
        var Name = aws.reqParams.Name;
        if (! FunctionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter FunctionName"];
        }        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }

        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.Invoke = aws_common.as(
    "/2015-03-31/functions/:FunctionName/invocations",
    function Invoke(aws) {
        var Qualifier = aws.params.Qualifier;
        var ClientContext = aws.params.ClientContext;
        var LogType = aws.params.LogType;
        var FunctionName = aws.reqParams.FunctionName;
        var InvocationType = aws.params.InvocationType;
        var Payload = aws.params.Payload /* blob */;
        if (! FunctionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter FunctionName"];
        }

        // TODO implement code

        var ret = {
            Payload: null /*blob*/,
            LogResult: "",
            FunctionError: "",
            StatusCode: 0
        };
        return [200, ret];
    });
module.exports.DeleteFunction = aws_common.as(
    "DELETE",
    "/2015-03-31/functions/:FunctionName",
    function DeleteFunction(aws) {
        var FunctionName = aws.reqParams.FunctionName;
        var Qualifier = aws.params.Qualifier;
        if (! FunctionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter FunctionName"];
        }

        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.RemovePermission = aws_common.as(
    "DELETE",
    "/2015-03-31/functions/:FunctionName/policy/:StatementId",
    function RemovePermission(aws) {
        var FunctionName = aws.reqParams.FunctionName;
        var StatementId = aws.reqParams.StatementId;
        var Qualifier = aws.params.Qualifier;
        if (! FunctionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter FunctionName"];
        }        if (! StatementId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StatementId"];
        }

        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.ListAliases = aws_common.as(
    "GET",
    "/2015-03-31/functions/:FunctionName/aliases",
    function ListAliases(aws) {
        var FunctionName = aws.reqParams.FunctionName;
        var FunctionVersion = aws.params.FunctionVersion;
        var Marker = aws.params.Marker;
        var MaxItems = aws.params.MaxItems /* integer */;
        if (! FunctionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter FunctionName"];
        }

        // TODO implement code

        var ret = {
            NextMarker: "",
            Aliases: [ /*Sf*/{
                Name: "",
                FunctionVersion: "",
                Description: "",
                AliasArn: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.CreateAlias = aws_common.as(
    "/2015-03-31/functions/:FunctionName/aliases",
    function CreateAlias(aws) {
        var FunctionName = aws.reqParams.FunctionName;
        var Name = aws.params.Name;
        var FunctionVersion = aws.params.FunctionVersion;
        var Description = aws.params.Description;
        if (! FunctionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter FunctionName"];
        }        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }        if (! FunctionVersion) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter FunctionVersion"];
        }

        // TODO implement code

        var ret = /*Sf*/{
            Name: "",
            FunctionVersion: "",
            Description: "",
            AliasArn: ""
        };
        return [201, ret];
    });
module.exports.GetAlias = aws_common.as(
    "GET",
    "/2015-03-31/functions/:FunctionName/aliases/:Name",
    function GetAlias(aws) {
        var FunctionName = aws.reqParams.FunctionName;
        var Name = aws.reqParams.Name;
        if (! FunctionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter FunctionName"];
        }        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }

        // TODO implement code

        var ret = /*Sf*/{
            Name: "",
            FunctionVersion: "",
            Description: "",
            AliasArn: ""
        };
        return [200, ret];
    });
module.exports.PublishVersion = aws_common.as(
    "/2015-03-31/functions/:FunctionName/versions",
    function PublishVersion(aws) {
        var FunctionName = aws.reqParams.FunctionName;
        var Description = aws.params.Description;
        var CodeSha256 = aws.params.CodeSha256;
        if (! FunctionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter FunctionName"];
        }

        // TODO implement code

        var ret = /*Sz*/{
            LastModified: "",
            Handler: "",
            Description: "",
            Role: "",
            Version: "",
            FunctionName: "",
            Runtime: "",
            CodeSize: 0 /*long*/,
            MemorySize: 0,
            Timeout: 0,
            CodeSha256: "",
            FunctionArn: ""
        };
        return [201, ret];
    });
module.exports.UpdateEventSourceMapping = aws_common.as(
    "PUT",
    "/2015-03-31/event-source-mappings/:UUID",
    function UpdateEventSourceMapping(aws) {
        var FunctionName = aws.params.FunctionName;
        var BatchSize = aws.params.BatchSize /* integer */;
        var Enabled = aws.params.Enabled /* boolean */;
        var UUID = aws.reqParams.UUID;
        if (! UUID) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter UUID"];
        }

        // TODO implement code

        var ret = /*Sl*/{
            State: "",
            EventSourceArn: "",
            LastModified: now(),
            UUID: "",
            BatchSize: 0,
            StateTransitionReason: "",
            LastProcessingResult: "",
            FunctionArn: ""
        };
        return [202, ret];
    });
module.exports.GetFunction = aws_common.as(
    "GET",
    "/2015-03-31/functions/:FunctionName",
    function GetFunction(aws) {
        var FunctionName = aws.reqParams.FunctionName;
        var Qualifier = aws.params.Qualifier;
        if (! FunctionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter FunctionName"];
        }

        // TODO implement code

        var ret = {
            Code: {
                Location: "",
                RepositoryType: ""
            },
            Configuration: /*Sz*/{
                LastModified: "",
                Handler: "",
                Description: "",
                Role: "",
                Version: "",
                FunctionName: "",
                Runtime: "",
                CodeSize: 0 /*long*/,
                MemorySize: 0,
                Timeout: 0,
                CodeSha256: "",
                FunctionArn: ""
            }
        };
        return [200, ret];
    });
module.exports.GetFunctionConfiguration = aws_common.as(
    "GET",
    "/2015-03-31/functions/:FunctionName/configuration",
    function GetFunctionConfiguration(aws) {
        var FunctionName = aws.reqParams.FunctionName;
        var Qualifier = aws.params.Qualifier;
        if (! FunctionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter FunctionName"];
        }

        // TODO implement code

        var ret = /*Sz*/{
            LastModified: "",
            Handler: "",
            Description: "",
            Role: "",
            Version: "",
            FunctionName: "",
            Runtime: "",
            CodeSize: 0 /*long*/,
            MemorySize: 0,
            Timeout: 0,
            CodeSha256: "",
            FunctionArn: ""
        };
        return [200, ret];
    });
