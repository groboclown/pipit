'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * Amazon Kinesis Firehose version 2015-08-04
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol json
require('../../lib/aws-common/shape_http')('json', module.exports, null);
// -----------------------------------
module.exports.CreateDeliveryStream = function CreateDeliveryStream(aws) {
  var deliveryStreamName = aws.params.DeliveryStreamName;
  var elasticsearchDestinationConfiguration = aws.params.ElasticsearchDestinationConfiguration /* Type structure */;
  var redshiftDestinationConfiguration = aws.params.RedshiftDestinationConfiguration /* Type structure */;
  var s3DestinationConfiguration = aws.params.S3DestinationConfiguration;
  if (!deliveryStreamName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DeliveryStreamName'];
  }


  // TODO implement code

  var ret = {
    DeliveryStreamARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteDeliveryStream = function DeleteDeliveryStream(aws) {
  var deliveryStreamName = aws.params.DeliveryStreamName;
  if (!deliveryStreamName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DeliveryStreamName'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeDeliveryStream = function DescribeDeliveryStream(aws) {
  var deliveryStreamName = aws.params.DeliveryStreamName;
  var exclusiveStartDestinationId = aws.params.ExclusiveStartDestinationId;
  var limit = aws.params.Limit /* Type integer */;
  if (!deliveryStreamName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DeliveryStreamName'];
  }


  // TODO implement code

  var ret = {
    DeliveryStreamDescription: {
      CreateTimestamp: awsCommon.timestamp(),
      DeliveryStreamARN: '',
      DeliveryStreamName: '',
      DeliveryStreamStatus: '',
      Destinations: [ {
        DestinationId: '',
        ElasticsearchDestinationDescription: {
          BufferingHints: /*Sw*/{
            IntervalInSeconds: 0,
            SizeInMBs: 0,
          },
          CloudWatchLoggingOptions: /*Sf*/{
            Enabled: false,
            LogGroupName: '',
            LogStreamName: '',
          },
          DomainARN: '',
          IndexName: '',
          IndexRotationPeriod: '',
          RetryOptions: /*Sz*/{
            DurationInSeconds: 0,
          },
          RoleARN: '',
          S3BackupMode: '',
          S3DestinationDescription: /*S1g*/{
            BucketARN: '',
            BufferingHints: /*S7*/{
              IntervalInSeconds: 0,
              SizeInMBs: 0,
            },
            CloudWatchLoggingOptions: /*Sf*/{
            Enabled: false,
            LogGroupName: '',
            LogStreamName: '',
          },
            CompressionFormat: '',
            EncryptionConfiguration: /*Sb*/{
              KMSEncryptionConfig: {
                AWSKMSKeyARN: '',
              },
              NoEncryptionConfig: '',
            },
            Prefix: '',
            RoleARN: '',
          },
          TypeName: '',
        },
        RedshiftDestinationDescription: {
          CloudWatchLoggingOptions: /*Sf*/{
            Enabled: false,
            LogGroupName: '',
            LogStreamName: '',
          },
          ClusterJDBCURL: '',
          CopyCommand: /*Sl*/{
            CopyOptions: '',
            DataTableColumns: '',
            DataTableName: '',
          },
          RoleARN: '',
          S3DestinationDescription: /*S1g*/{
            BucketARN: '',
            BufferingHints: /*S7*/{
              IntervalInSeconds: 0,
              SizeInMBs: 0,
            },
            CloudWatchLoggingOptions: /*Sf*/{
            Enabled: false,
            LogGroupName: '',
            LogStreamName: '',
          },
            CompressionFormat: '',
            EncryptionConfiguration: /*Sb*/{
              KMSEncryptionConfig: {
                AWSKMSKeyARN: '',
              },
              NoEncryptionConfig: '',
            },
            Prefix: '',
            RoleARN: '',
          },
          Username: /*Sp*/'',
        },
        S3DestinationDescription: /*S1g*/{
            BucketARN: '',
            BufferingHints: /*S7*/{
              IntervalInSeconds: 0,
              SizeInMBs: 0,
            },
            CloudWatchLoggingOptions: /*Sf*/{
            Enabled: false,
            LogGroupName: '',
            LogStreamName: '',
          },
            CompressionFormat: '',
            EncryptionConfiguration: /*Sb*/{
              KMSEncryptionConfig: {
                AWSKMSKeyARN: '',
              },
              NoEncryptionConfig: '',
            },
            Prefix: '',
            RoleARN: '',
          },
      }, /* ...*/ ],
      HasMoreDestinations: false,
      LastUpdateTimestamp: awsCommon.timestamp(),
      VersionId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListDeliveryStreams = function ListDeliveryStreams(aws) {
  var exclusiveStartDeliveryStreamName = aws.params.ExclusiveStartDeliveryStreamName;
  var limit = aws.params.Limit /* Type integer */;


  // TODO implement code

  var ret = {
    DeliveryStreamNames: [ '', /* ...*/ ],
    HasMoreDeliveryStreams: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.PutRecord = function PutRecord(aws) {
  var deliveryStreamName = aws.params.DeliveryStreamName;
  var record = aws.params.Record;
  if (!deliveryStreamName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DeliveryStreamName'];
  }
  if (!record) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Record'];
  }


  // TODO implement code

  var ret = {
    RecordId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.PutRecordBatch = function PutRecordBatch(aws) {
  var deliveryStreamName = aws.params.DeliveryStreamName;
  var records = aws.params.Records /* Type list */;
  if (!deliveryStreamName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DeliveryStreamName'];
  }
  if (!records) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Records'];
  }


  // TODO implement code

  var ret = {
    FailedPutCount: 0,
    RequestResponses: [ {
      ErrorCode: '',
      ErrorMessage: '',
      RecordId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateDestination = function UpdateDestination(aws) {
  var currentDeliveryStreamVersionId = aws.params.CurrentDeliveryStreamVersionId;
  var deliveryStreamName = aws.params.DeliveryStreamName;
  var destinationId = aws.params.DestinationId;
  var elasticsearchDestinationUpdate = aws.params.ElasticsearchDestinationUpdate /* Type structure */;
  var redshiftDestinationUpdate = aws.params.RedshiftDestinationUpdate /* Type structure */;
  var s3DestinationUpdate = aws.params.S3DestinationUpdate;
  if (!currentDeliveryStreamVersionId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter CurrentDeliveryStreamVersionId'];
  }
  if (!deliveryStreamName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DeliveryStreamName'];
  }
  if (!destinationId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DestinationId'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
