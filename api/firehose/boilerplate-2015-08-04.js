'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * 0 version 2015-08-04
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.CreateDeliveryStream = function CreateDeliveryStream(aws) {
        var RedshiftDestinationConfiguration = aws.params['RedshiftDestinationConfiguration'] /* structure */;
        var S3DestinationConfiguration = aws.params['S3DestinationConfiguration'];
        var DeliveryStreamName = aws.params['DeliveryStreamName'];
        if (! DeliveryStreamName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DeliveryStreamName"];
        }

        // TODO implement code

        var ret = {
            DeliveryStreamARN: ""
        };
        return [200, ret];
    }
module.exports.PutRecord = function PutRecord(aws) {
        var Record = aws.params['Record'];
        var DeliveryStreamName = aws.params['DeliveryStreamName'];
        if (! DeliveryStreamName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DeliveryStreamName"];
        }        if (! Record) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Record"];
        }

        // TODO implement code

        var ret = {
            RecordId: ""
        };
        return [200, ret];
    }
module.exports.ListDeliveryStreams = function ListDeliveryStreams(aws) {
        var ExclusiveStartDeliveryStreamName = aws.params['ExclusiveStartDeliveryStreamName'];
        var Limit = aws.params['Limit'] /* integer */;


        // TODO implement code

        var ret = {
            DeliveryStreamNames: [ "" /*, ...*/ ],
            HasMoreDeliveryStreams: false
        };
        return [200, ret];
    }
module.exports.PutRecordBatch = function PutRecordBatch(aws) {
        var Records = aws.params['Records'] /* list */;
        var DeliveryStreamName = aws.params['DeliveryStreamName'];
        if (! DeliveryStreamName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DeliveryStreamName"];
        }        if (! Records) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Records"];
        }

        // TODO implement code

        var ret = {
            RequestResponses: [ {
                RecordId: "",
                ErrorMessage: "",
                ErrorCode: ""
            } /*, ...*/ ],
            FailedPutCount: 0
        };
        return [200, ret];
    }
module.exports.UpdateDestination = function UpdateDestination(aws) {
        var CurrentDeliveryStreamVersionId = aws.params['CurrentDeliveryStreamVersionId'];
        var RedshiftDestinationUpdate = aws.params['RedshiftDestinationUpdate'] /* structure */;
        var DestinationId = aws.params['DestinationId'];
        var S3DestinationUpdate = aws.params['S3DestinationUpdate'];
        var DeliveryStreamName = aws.params['DeliveryStreamName'];
        if (! DeliveryStreamName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DeliveryStreamName"];
        }        if (! CurrentDeliveryStreamVersionId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter CurrentDeliveryStreamVersionId"];
        }        if (! DestinationId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DestinationId"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.DeleteDeliveryStream = function DeleteDeliveryStream(aws) {
        var DeliveryStreamName = aws.params['DeliveryStreamName'];
        if (! DeliveryStreamName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DeliveryStreamName"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.DescribeDeliveryStream = function DescribeDeliveryStream(aws) {
        var ExclusiveStartDestinationId = aws.params['ExclusiveStartDestinationId'];
        var Limit = aws.params['Limit'] /* integer */;
        var DeliveryStreamName = aws.params['DeliveryStreamName'];
        if (! DeliveryStreamName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DeliveryStreamName"];
        }

        // TODO implement code

        var ret = {
            DeliveryStreamDescription: {
                DeliveryStreamStatus: "",
                DeliveryStreamName: "",
                Destinations: [ {
                    RedshiftDestinationDescription: {
                        Username: /*Sl*/"",
                        CopyCommand: /*Sh*/{
                            CopyOptions: "",
                            DataTableName: "",
                            DataTableColumns: ""
                        },
                        S3DestinationDescription: /*S11*/{
                            RoleARN: "",
                            BufferingHints: /*S7*/{
                                IntervalInSeconds: 0,
                                SizeInMBs: 0
                            },
                            BucketARN: "",
                            Prefix: "",
                            EncryptionConfiguration: /*Sb*/{
                                KMSEncryptionConfig: {
                                    AWSKMSKeyARN: ""
                                },
                                NoEncryptionConfig: ""
                            },
                            CompressionFormat: ""
                        },
                        RoleARN: "",
                        ClusterJDBCURL: ""
                    },
                    DestinationId: "",
                    S3DestinationDescription: /*S11*/{
                            RoleARN: "",
                            BufferingHints: /*S7*/{
                                IntervalInSeconds: 0,
                                SizeInMBs: 0
                            },
                            BucketARN: "",
                            Prefix: "",
                            EncryptionConfiguration: /*Sb*/{
                                KMSEncryptionConfig: {
                                    AWSKMSKeyARN: ""
                                },
                                NoEncryptionConfig: ""
                            },
                            CompressionFormat: ""
                        }
                } /*, ...*/ ],
                LastUpdateTimestamp: now(),
                DeliveryStreamARN: "",
                VersionId: "",
                HasMoreDestinations: false,
                CreateTimestamp: now()
            }
        };
        return [200, ret];
    }
