'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * Amazon Simple Storage Service version 2006-03-01
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.DeleteBucketWebsite = aws_common.as(
    "DELETE",
    "/:Bucket?website",
    function DeleteBucketWebsite(aws) {
        var Bucket = aws.reqParams.Bucket;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.DeleteBucketLifecycle = aws_common.as(
    "DELETE",
    "/:Bucket?lifecycle",
    function DeleteBucketLifecycle(aws) {
        var Bucket = aws.reqParams.Bucket;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.GetBucketLifecycle = aws_common.as(
    "GET",
    "/:Bucket?lifecycle",
    function GetBucketLifecycle(aws) {
        var Bucket = aws.reqParams.Bucket;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {
            Rules: /*S34*/[ {
                Prefix: "",
                ID: "",
                Transition: /*S3b*/{
                    StorageClass: "",
                    Date: /*S37*/now(),
                    Days: 0
                },
                NoncurrentVersionExpiration: /*S3e*/{
                    NoncurrentDays: 0
                },
                NoncurrentVersionTransition: /*S3d*/{
                    NoncurrentDays: 0,
                    StorageClass: ""
                },
                Status: "",
                Expiration: /*S36*/{
                    Date: /*S37*/now(),
                    Days: 0
                }
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.GetObjectAcl = aws_common.as(
    "GET",
    "/:Bucket/:Key+?acl",
    function GetObjectAcl(aws) {
        var Bucket = aws.reqParams.Bucket;
        var Key = aws.reqParams.Key;
        var RequestPayer = aws.params.RequestPayer;
        var VersionId = aws.params.VersionId;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! Key) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Key"];
        }

        // TODO implement code

        var ret = {
            Grants: /*S2i*/[ {
                Grantee: /*S2k*/{
                    DisplayName: "",
                    URI: "",
                    ID: "",
                    EmailAddress: "",
                    Type: ""
                },
                Permission: ""
            } /*, ...*/ ],
            RequestCharged: "",
            Owner: /*S2f*/{
                DisplayName: "",
                ID: ""
            }
        };
        return [200, ret];
    });
module.exports.PutObject = aws_common.as(
    "PUT",
    "/:Bucket/:Key+",
    function PutObject(aws) {
        var CacheControl = aws.params.CacheControl;
        var ContentDisposition = aws.params.ContentDisposition;
        var ContentLanguage = aws.params.ContentLanguage;
        var SSECustomerKey = aws.params.SSECustomerKey;
        var SSEKMSKeyId = aws.params.SSEKMSKeyId;
        var ContentType = aws.params.ContentType;
        var ContentMD5 = aws.params.ContentMD5;
        var Key = aws.reqParams.Key;
        var GrantRead = aws.params.GrantRead;
        var ServerSideEncryption = aws.params.ServerSideEncryption;
        var ContentLength = aws.params.ContentLength /* integer */;
        var Metadata = aws.params.Metadata;
        var ACL = aws.params.ACL;
        var GrantReadACP = aws.params.GrantReadACP;
        var ContentEncoding = aws.params.ContentEncoding;
        var WebsiteRedirectLocation = aws.params.WebsiteRedirectLocation;
        var RequestPayer = aws.params.RequestPayer;
        var StorageClass = aws.params.StorageClass;
        var GrantFullControl = aws.params.GrantFullControl;
        var GrantWriteACP = aws.params.GrantWriteACP;
        var Body = aws.params.Body /* blob */;
        var Bucket = aws.reqParams.Bucket;
        var Expires = aws.params.Expires /* timestamp */;
        var SSECustomerAlgorithm = aws.params.SSECustomerAlgorithm;
        var SSECustomerKeyMD5 = aws.params.SSECustomerKeyMD5;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! Key) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Key"];
        }

        // TODO implement code

        var ret = {
            ETag: "",
            VersionId: "",
            Expiration: "",
            RequestCharged: "",
            ServerSideEncryption: "",
            SSEKMSKeyId: /*Sj*/"",
            SSECustomerAlgorithm: "",
            SSECustomerKeyMD5: ""
        };
        return [200, ret];
    });
module.exports.DeleteObjects = aws_common.as(
    "/:Bucket?delete",
    function DeleteObjects(aws) {
        var Bucket = aws.reqParams.Bucket;
        var MFA = aws.params.MFA;
        var RequestPayer = aws.params.RequestPayer;
        var Delete = aws.params.Delete /* structure */;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! Delete) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Delete"];
        }

        // TODO implement code

        var ret = {
            Errors: [ {
                Message: "",
                Key: "",
                VersionId: "",
                Code: ""
            } /*, ...*/ ],
            Deleted: [ {
                DeleteMarker: false,
                Key: "",
                VersionId: "",
                DeleteMarkerVersionId: ""
            } /*, ...*/ ],
            RequestCharged: ""
        };
        return [200, ret];
    });
module.exports.DeleteBucketReplication = aws_common.as(
    "DELETE",
    "/:Bucket?replication",
    function DeleteBucketReplication(aws) {
        var Bucket = aws.reqParams.Bucket;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.PutBucketAcl = aws_common.as(
    "PUT",
    "/:Bucket?acl",
    function PutBucketAcl(aws) {
        var GrantFullControl = aws.params.GrantFullControl;
        var ACL = aws.params.ACL;
        var GrantReadACP = aws.params.GrantReadACP;
        var GrantWrite = aws.params.GrantWrite;
        var GrantRead = aws.params.GrantRead;
        var Bucket = aws.reqParams.Bucket;
        var AccessControlPolicy = aws.params.AccessControlPolicy;
        var GrantWriteACP = aws.params.GrantWriteACP;
        var ContentMD5 = aws.params.ContentMD5;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.CreateBucket = aws_common.as(
    "PUT",
    "/:Bucket",
    function CreateBucket(aws) {
        var CreateBucketConfiguration = aws.params.CreateBucketConfiguration /* structure */;
        var GrantFullControl = aws.params.GrantFullControl;
        var ACL = aws.params.ACL;
        var GrantWriteACP = aws.params.GrantWriteACP;
        var GrantWrite = aws.params.GrantWrite;
        var GrantRead = aws.params.GrantRead;
        var Bucket = aws.reqParams.Bucket;
        var GrantReadACP = aws.params.GrantReadACP;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {
            Location: ""
        };
        return [200, ret];
    });
module.exports.GetBucketNotification = aws_common.as(
    "GET",
    "/:Bucket?notification",
    function GetBucketNotification(aws) {


        // TODO implement code

        var ret = /*S3w*/{
            TopicConfiguration: {
                Events: /*S3z*/[ "" /*, ...*/ ],
                Id: "",
                Topic: "",
                Event: ""
            },
            CloudFunctionConfiguration: {
                InvocationRole: "",
                Events: /*S3z*/[ "" /*, ...*/ ],
                Id: "",
                CloudFunction: "",
                Event: ""
            },
            QueueConfiguration: {
                Events: /*S3z*/[ "" /*, ...*/ ],
                Id: "",
                Queue: "",
                Event: ""
            }
        };
        return [200, ret];
    });
module.exports.ListObjects = aws_common.as(
    "GET",
    "/:Bucket",
    function ListObjects(aws) {
        var Prefix = aws.params.Prefix;
        var Marker = aws.params.Marker;
        var EncodingType = aws.params.EncodingType;
        var MaxKeys = aws.params.MaxKeys /* integer */;
        var Delimiter = aws.params.Delimiter;
        var Bucket = aws.reqParams.Bucket;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {
            Name: "",
            CommonPrefixes: /*S6y*/[ {
                Prefix: ""
            } /*, ...*/ ],
            Prefix: "",
            Marker: "",
            EncodingType: "",
            IsTruncated: false,
            MaxKeys: 0,
            Delimiter: "",
            NextMarker: "",
            Contents: [ {
                ETag: "",
                Key: "",
                Size: 0,
                LastModified: now(),
                StorageClass: "",
                Owner: /*S2f*/{
                    DisplayName: "",
                    ID: ""
                }
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.PutBucketCors = aws_common.as(
    "PUT",
    "/:Bucket?cors",
    function PutBucketCors(aws) {
        var CORSConfiguration = aws.params.CORSConfiguration /* structure */;
        var Bucket = aws.reqParams.Bucket;
        var ContentMD5 = aws.params.ContentMD5;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! CORSConfiguration) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter CORSConfiguration"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.ListParts = aws_common.as(
    "GET",
    "/:Bucket/:Key+",
    function ListParts(aws) {
        var Key = aws.reqParams.Key;
        var PartNumberMarker = aws.params.PartNumberMarker /* integer */;
        var Bucket = aws.reqParams.Bucket;
        var RequestPayer = aws.params.RequestPayer;
        var MaxParts = aws.params.MaxParts /* integer */;
        var UploadId = aws.params.UploadId;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! Key) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Key"];
        }        if (! UploadId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter UploadId"];
        }

        // TODO implement code

        var ret = {
            MaxParts: 0,
            UploadId: "",
            PartNumberMarker: 0,
            IsTruncated: false,
            RequestCharged: "",
            NextPartNumberMarker: 0,
            Initiator: /*S6x*/{
                DisplayName: "",
                ID: ""
            },
            Key: "",
            Owner: /*S2f*/{
                DisplayName: "",
                ID: ""
            },
            Bucket: "",
            StorageClass: "",
            Parts: [ {
                PartNumber: 0,
                ETag: "",
                Size: 0,
                LastModified: now()
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.PutBucketTagging = aws_common.as(
    "PUT",
    "/:Bucket?tagging",
    function PutBucketTagging(aws) {
        var Bucket = aws.reqParams.Bucket;
        var Tagging = aws.params.Tagging /* structure */;
        var ContentMD5 = aws.params.ContentMD5;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! Tagging) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Tagging"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.ListObjectVersions = aws_common.as(
    "GET",
    "/:Bucket?versions",
    function ListObjectVersions(aws) {
        var Prefix = aws.params.Prefix;
        var EncodingType = aws.params.EncodingType;
        var MaxKeys = aws.params.MaxKeys /* integer */;
        var Delimiter = aws.params.Delimiter;
        var Bucket = aws.reqParams.Bucket;
        var VersionIdMarker = aws.params.VersionIdMarker;
        var KeyMarker = aws.params.KeyMarker;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {
            Name: "",
            Prefix: "",
            EncodingType: "",
            IsTruncated: false,
            Versions: [ {
                IsLatest: false,
                ETag: "",
                Key: "",
                Size: 0,
                LastModified: now(),
                VersionId: "",
                StorageClass: "",
                Owner: /*S2f*/{
                    DisplayName: "",
                    ID: ""
                }
            } /*, ...*/ ],
            NextKeyMarker: "",
            VersionIdMarker: "",
            CommonPrefixes: /*S6y*/[ {
                Prefix: ""
            } /*, ...*/ ],
            NextVersionIdMarker: "",
            MaxKeys: 0,
            Delimiter: "",
            KeyMarker: "",
            DeleteMarkers: [ {
                IsLatest: false,
                Key: "",
                VersionId: "",
                Owner: /*S2f*/{
                    DisplayName: "",
                    ID: ""
                },
                LastModified: now()
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.PutBucketRequestPayment = aws_common.as(
    "PUT",
    "/:Bucket?requestPayment",
    function PutBucketRequestPayment(aws) {
        var RequestPaymentConfiguration = aws.params.RequestPaymentConfiguration /* structure */;
        var Bucket = aws.reqParams.Bucket;
        var ContentMD5 = aws.params.ContentMD5;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! RequestPaymentConfiguration) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RequestPaymentConfiguration"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.GetBucketLifecycleConfiguration = aws_common.as(
    "GET",
    "/:Bucket?lifecycle",
    function GetBucketLifecycleConfiguration(aws) {
        var Bucket = aws.reqParams.Bucket;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {
            Rules: /*S3h*/[ {
                Transitions: [ /*S3b*/{
                    StorageClass: "",
                    Date: /*S37*/now(),
                    Days: 0
                } /*, ...*/ ],
                ID: "",
                Expiration: /*S36*/{
                    Date: /*S37*/now(),
                    Days: 0
                },
                NoncurrentVersionExpiration: /*S3e*/{
                    NoncurrentDays: 0
                },
                NoncurrentVersionTransitions: [ /*S3d*/{
                    NoncurrentDays: 0,
                    StorageClass: ""
                } /*, ...*/ ],
                Prefix: "",
                Status: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.GetBucketVersioning = aws_common.as(
    "GET",
    "/:Bucket?versioning",
    function GetBucketVersioning(aws) {
        var Bucket = aws.reqParams.Bucket;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {
            MFADelete: "",
            Status: ""
        };
        return [200, ret];
    });
module.exports.PutObjectAcl = aws_common.as(
    "PUT",
    "/:Bucket/:Key+?acl",
    function PutObjectAcl(aws) {
        var GrantFullControl = aws.params.GrantFullControl;
        var ACL = aws.params.ACL;
        var GrantReadACP = aws.params.GrantReadACP;
        var GrantWrite = aws.params.GrantWrite;
        var GrantRead = aws.params.GrantRead;
        var Bucket = aws.reqParams.Bucket;
        var AccessControlPolicy = aws.params.AccessControlPolicy;
        var RequestPayer = aws.params.RequestPayer;
        var Key = aws.reqParams.Key;
        var GrantWriteACP = aws.params.GrantWriteACP;
        var ContentMD5 = aws.params.ContentMD5;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! Key) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Key"];
        }

        // TODO implement code

        var ret = {
            RequestCharged: ""
        };
        return [200, ret];
    });
module.exports.PutBucketNotification = aws_common.as(
    "PUT",
    "/:Bucket?notification",
    function PutBucketNotification(aws) {
        var Bucket = aws.reqParams.Bucket;
        var NotificationConfiguration = aws.params.NotificationConfiguration;
        var ContentMD5 = aws.params.ContentMD5;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! NotificationConfiguration) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter NotificationConfiguration"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.DeleteObject = aws_common.as(
    "DELETE",
    "/:Bucket/:Key+",
    function DeleteObject(aws) {
        var MFA = aws.params.MFA;
        var Bucket = aws.reqParams.Bucket;
        var Key = aws.reqParams.Key;
        var RequestPayer = aws.params.RequestPayer;
        var VersionId = aws.params.VersionId;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! Key) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Key"];
        }

        // TODO implement code

        var ret = {
            DeleteMarker: false,
            VersionId: "",
            RequestCharged: ""
        };
        return [200, ret];
    });
module.exports.PutBucketReplication = aws_common.as(
    "PUT",
    "/:Bucket?replication",
    function PutBucketReplication(aws) {
        var Bucket = aws.reqParams.Bucket;
        var ReplicationConfiguration = aws.params.ReplicationConfiguration;
        var ContentMD5 = aws.params.ContentMD5;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! ReplicationConfiguration) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ReplicationConfiguration"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.CopyObject = aws_common.as(
    "PUT",
    "/:Bucket/:Key+",
    function CopyObject(aws) {
        var CacheControl = aws.params.CacheControl;
        var ContentDisposition = aws.params.ContentDisposition;
        var CopySourceSSECustomerKeyMD5 = aws.params.CopySourceSSECustomerKeyMD5;
        var CopySourceIfMatch = aws.params.CopySourceIfMatch;
        var CopySourceSSECustomerAlgorithm = aws.params.CopySourceSSECustomerAlgorithm;
        var SSECustomerKey = aws.params.SSECustomerKey;
        var SSEKMSKeyId = aws.params.SSEKMSKeyId;
        var ContentType = aws.params.ContentType;
        var CopySourceIfModifiedSince = aws.params.CopySourceIfModifiedSince /* timestamp */;
        var Key = aws.reqParams.Key;
        var CopySource = aws.params.CopySource;
        var GrantRead = aws.params.GrantRead;
        var ServerSideEncryption = aws.params.ServerSideEncryption;
        var MetadataDirective = aws.params.MetadataDirective;
        var CopySourceIfNoneMatch = aws.params.CopySourceIfNoneMatch;
        var Metadata = aws.params.Metadata;
        var ACL = aws.params.ACL;
        var GrantReadACP = aws.params.GrantReadACP;
        var ContentEncoding = aws.params.ContentEncoding;
        var WebsiteRedirectLocation = aws.params.WebsiteRedirectLocation;
        var RequestPayer = aws.params.RequestPayer;
        var SSECustomerAlgorithm = aws.params.SSECustomerAlgorithm;
        var GrantFullControl = aws.params.GrantFullControl;
        var CopySourceSSECustomerKey = aws.params.CopySourceSSECustomerKey;
        var GrantWriteACP = aws.params.GrantWriteACP;
        var ContentLanguage = aws.params.ContentLanguage;
        var CopySourceIfUnmodifiedSince = aws.params.CopySourceIfUnmodifiedSince /* timestamp */;
        var Bucket = aws.reqParams.Bucket;
        var Expires = aws.params.Expires /* timestamp */;
        var StorageClass = aws.params.StorageClass;
        var SSECustomerKeyMD5 = aws.params.SSECustomerKeyMD5;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! CopySource) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter CopySource"];
        }        if (! Key) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Key"];
        }

        // TODO implement code

        var ret = {
            SSECustomerAlgorithm: "",
            VersionId: "",
            Expiration: "",
            RequestCharged: "",
            ServerSideEncryption: "",
            SSEKMSKeyId: /*Sj*/"",
            CopyObjectResult: {
                ETag: "",
                LastModified: now()
            },
            SSECustomerKeyMD5: "",
            CopySourceVersionId: ""
        };
        return [200, ret];
    });
module.exports.PutBucketLifecycle = aws_common.as(
    "PUT",
    "/:Bucket?lifecycle",
    function PutBucketLifecycle(aws) {
        var Bucket = aws.reqParams.Bucket;
        var LifecycleConfiguration = aws.params.LifecycleConfiguration /* structure */;
        var ContentMD5 = aws.params.ContentMD5;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.GetBucketReplication = aws_common.as(
    "GET",
    "/:Bucket?replication",
    function GetBucketReplication(aws) {
        var Bucket = aws.reqParams.Bucket;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {
            ReplicationConfiguration: /*S4q*/{
                Rules: [ {
                    Prefix: "",
                    ID: "",
                    Destination: {
                        Bucket: "",
                        StorageClass: ""
                    },
                    Status: ""
                } /*, ...*/ ],
                Role: ""
            }
        };
        return [200, ret];
    });
module.exports.GetBucketWebsite = aws_common.as(
    "GET",
    "/:Bucket?website",
    function GetBucketWebsite(aws) {
        var Bucket = aws.reqParams.Bucket;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {
            IndexDocument: /*S5d*/{
                Suffix: ""
            },
            RoutingRules: /*S5g*/[ {
                Condition: {
                    HttpErrorCodeReturnedEquals: "",
                    KeyPrefixEquals: ""
                },
                Redirect: {
                    HttpRedirectCode: "",
                    HostName: "",
                    ReplaceKeyWith: "",
                    Protocol: "",
                    ReplaceKeyPrefixWith: ""
                }
            } /*, ...*/ ],
            ErrorDocument: /*S5f*/{
                Key: ""
            },
            RedirectAllRequestsTo: /*S5a*/{
                HostName: "",
                Protocol: ""
            }
        };
        return [200, ret];
    });
module.exports.UploadPart = aws_common.as(
    "PUT",
    "/:Bucket/:Key+",
    function UploadPart(aws) {
        var PartNumber = aws.params.PartNumber /* integer */;
        var SSECustomerAlgorithm = aws.params.SSECustomerAlgorithm;
        var Key = aws.reqParams.Key;
        var SSECustomerKeyMD5 = aws.params.SSECustomerKeyMD5;
        var Body = aws.params.Body /* blob */;
        var SSECustomerKey = aws.params.SSECustomerKey;
        var Bucket = aws.reqParams.Bucket;
        var RequestPayer = aws.params.RequestPayer;
        var ContentLength = aws.params.ContentLength /* integer */;
        var UploadId = aws.params.UploadId;
        var ContentMD5 = aws.params.ContentMD5;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! Key) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Key"];
        }        if (! PartNumber) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PartNumber"];
        }        if (! UploadId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter UploadId"];
        }

        // TODO implement code

        var ret = {
            ETag: "",
            SSEKMSKeyId: /*Sj*/"",
            ServerSideEncryption: "",
            RequestCharged: "",
            SSECustomerAlgorithm: "",
            SSECustomerKeyMD5: ""
        };
        return [200, ret];
    });
module.exports.DeleteBucketCors = aws_common.as(
    "DELETE",
    "/:Bucket?cors",
    function DeleteBucketCors(aws) {
        var Bucket = aws.reqParams.Bucket;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.DeleteBucketTagging = aws_common.as(
    "DELETE",
    "/:Bucket?tagging",
    function DeleteBucketTagging(aws) {
        var Bucket = aws.reqParams.Bucket;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.CompleteMultipartUpload = aws_common.as(
    "/:Bucket/:Key+",
    function CompleteMultipartUpload(aws) {
        var Bucket = aws.reqParams.Bucket;
        var Key = aws.reqParams.Key;
        var RequestPayer = aws.params.RequestPayer;
        var MultipartUpload = aws.params.MultipartUpload /* structure */;
        var UploadId = aws.params.UploadId;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! Key) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Key"];
        }        if (! UploadId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter UploadId"];
        }

        // TODO implement code

        var ret = {
            Location: "",
            ETag: "",
            Key: "",
            Expiration: "",
            RequestCharged: "",
            Bucket: "",
            ServerSideEncryption: "",
            SSEKMSKeyId: /*Sj*/"",
            VersionId: ""
        };
        return [200, ret];
    });
module.exports.ListBuckets = aws_common.as(
    "GET",
    "/",
    function ListBuckets(aws) {


        // TODO implement code

        var ret = {
            Owner: /*S2f*/{
                DisplayName: "",
                ID: ""
            },
            Buckets: [ {
                Name: "",
                CreationDate: now()
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.CreateMultipartUpload = aws_common.as(
    "/:Bucket/:Key+?uploads",
    function CreateMultipartUpload(aws) {
        var CacheControl = aws.params.CacheControl;
        var ContentDisposition = aws.params.ContentDisposition;
        var SSEKMSKeyId = aws.params.SSEKMSKeyId;
        var ContentType = aws.params.ContentType;
        var Key = aws.reqParams.Key;
        var GrantRead = aws.params.GrantRead;
        var ServerSideEncryption = aws.params.ServerSideEncryption;
        var Metadata = aws.params.Metadata;
        var ACL = aws.params.ACL;
        var GrantReadACP = aws.params.GrantReadACP;
        var ContentEncoding = aws.params.ContentEncoding;
        var WebsiteRedirectLocation = aws.params.WebsiteRedirectLocation;
        var RequestPayer = aws.params.RequestPayer;
        var SSECustomerAlgorithm = aws.params.SSECustomerAlgorithm;
        var GrantFullControl = aws.params.GrantFullControl;
        var GrantWriteACP = aws.params.GrantWriteACP;
        var ContentLanguage = aws.params.ContentLanguage;
        var StorageClass = aws.params.StorageClass;
        var Bucket = aws.reqParams.Bucket;
        var Expires = aws.params.Expires /* timestamp */;
        var SSECustomerKey = aws.params.SSECustomerKey;
        var SSECustomerKeyMD5 = aws.params.SSECustomerKeyMD5;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! Key) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Key"];
        }

        // TODO implement code

        var ret = {
            Key: "",
            SSECustomerKeyMD5: "",
            RequestCharged: "",
            Bucket: "",
            ServerSideEncryption: "",
            SSEKMSKeyId: /*Sj*/"",
            SSECustomerAlgorithm: "",
            UploadId: ""
        };
        return [200, ret];
    });
module.exports.DeleteBucketPolicy = aws_common.as(
    "DELETE",
    "/:Bucket?policy",
    function DeleteBucketPolicy(aws) {
        var Bucket = aws.reqParams.Bucket;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.PutBucketPolicy = aws_common.as(
    "PUT",
    "/:Bucket?policy",
    function PutBucketPolicy(aws) {
        var Policy = aws.params.Policy;
        var Bucket = aws.reqParams.Bucket;
        var ContentMD5 = aws.params.ContentMD5;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! Policy) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Policy"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.GetObject = aws_common.as(
    "GET",
    "/:Bucket/:Key+",
    function GetObject(aws) {
        var ResponseContentEncoding = aws.params.ResponseContentEncoding;
        var ResponseContentLanguage = aws.params.ResponseContentLanguage;
        var IfUnmodifiedSince = aws.params.IfUnmodifiedSince /* timestamp */;
        var ResponseExpires = aws.params.ResponseExpires /* timestamp */;
        var IfModifiedSince = aws.params.IfModifiedSince /* timestamp */;
        var SSECustomerKey = aws.params.SSECustomerKey;
        var RequestPayer = aws.params.RequestPayer;
        var SSECustomerAlgorithm = aws.params.SSECustomerAlgorithm;
        var IfMatch = aws.params.IfMatch;
        var Key = aws.reqParams.Key;
        var IfNoneMatch = aws.params.IfNoneMatch;
        var Range = aws.params.Range;
        var ResponseContentDisposition = aws.params.ResponseContentDisposition;
        var Bucket = aws.reqParams.Bucket;
        var VersionId = aws.params.VersionId;
        var ResponseCacheControl = aws.params.ResponseCacheControl;
        var ResponseContentType = aws.params.ResponseContentType;
        var SSECustomerKeyMD5 = aws.params.SSECustomerKeyMD5;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! Key) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Key"];
        }

        // TODO implement code

        var ret = {
            CacheControl: "",
            DeleteMarker: false,
            ContentDisposition: "",
            Body: null /*blob*/,
            Expiration: "",
            SSEKMSKeyId: /*Sj*/"",
            ContentType: "",
            ContentRange: "",
            ETag: "",
            LastModified: now(),
            MissingMeta: 0,
            Metadata: /*S11*/{} /* map */,
            ServerSideEncryption: "",
            ContentLength: 0,
            WebsiteRedirectLocation: "",
            VersionId: "",
            ContentEncoding: "",
            AcceptRanges: "",
            Restore: "",
            RequestCharged: "",
            StorageClass: "",
            ReplicationStatus: "",
            ContentLanguage: "",
            Expires: now(),
            SSECustomerAlgorithm: "",
            SSECustomerKeyMD5: ""
        };
        return [200, ret];
    });
module.exports.GetBucketLogging = aws_common.as(
    "GET",
    "/:Bucket?logging",
    function GetBucketLogging(aws) {
        var Bucket = aws.reqParams.Bucket;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {
            LoggingEnabled: /*S3p*/{
                TargetBucket: "",
                TargetGrants: [ {
                    Grantee: /*S2k*/{
                        DisplayName: "",
                        URI: "",
                        ID: "",
                        EmailAddress: "",
                        Type: ""
                    },
                    Permission: ""
                } /*, ...*/ ],
                TargetPrefix: ""
            }
        };
        return [200, ret];
    });
module.exports.GetBucketCors = aws_common.as(
    "GET",
    "/:Bucket?cors",
    function GetBucketCors(aws) {
        var Bucket = aws.reqParams.Bucket;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {
            CORSRules: /*S2r*/[ {
                AllowedHeaders: [ "" /*, ...*/ ],
                AllowedOrigins: [ "" /*, ...*/ ],
                AllowedMethods: [ "" /*, ...*/ ],
                ExposeHeaders: [ "" /*, ...*/ ],
                MaxAgeSeconds: 0
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.GetBucketAcl = aws_common.as(
    "GET",
    "/:Bucket?acl",
    function GetBucketAcl(aws) {
        var Bucket = aws.reqParams.Bucket;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {
            Grants: /*S2i*/[ {
                Grantee: /*S2k*/{
                    DisplayName: "",
                    URI: "",
                    ID: "",
                    EmailAddress: "",
                    Type: ""
                },
                Permission: ""
            } /*, ...*/ ],
            Owner: /*S2f*/{
                DisplayName: "",
                ID: ""
            }
        };
        return [200, ret];
    });
module.exports.GetBucketTagging = aws_common.as(
    "GET",
    "/:Bucket?tagging",
    function GetBucketTagging(aws) {
        var Bucket = aws.reqParams.Bucket;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {
            TagSet: /*S51*/[ {
                Value: "",
                Key: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.GetObjectTorrent = aws_common.as(
    "GET",
    "/:Bucket/:Key+?torrent",
    function GetObjectTorrent(aws) {
        var Bucket = aws.reqParams.Bucket;
        var Key = aws.reqParams.Key;
        var RequestPayer = aws.params.RequestPayer;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! Key) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Key"];
        }

        // TODO implement code

        var ret = {
            RequestCharged: "",
            Body: null /*blob*/
        };
        return [200, ret];
    });
module.exports.GetBucketRequestPayment = aws_common.as(
    "GET",
    "/:Bucket?requestPayment",
    function GetBucketRequestPayment(aws) {
        var Bucket = aws.reqParams.Bucket;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {
            Payer: ""
        };
        return [200, ret];
    });
module.exports.PutBucketVersioning = aws_common.as(
    "PUT",
    "/:Bucket?versioning",
    function PutBucketVersioning(aws) {
        var VersioningConfiguration = aws.params.VersioningConfiguration /* structure */;
        var Bucket = aws.reqParams.Bucket;
        var MFA = aws.params.MFA;
        var ContentMD5 = aws.params.ContentMD5;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! VersioningConfiguration) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VersioningConfiguration"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.PutBucketWebsite = aws_common.as(
    "PUT",
    "/:Bucket?website",
    function PutBucketWebsite(aws) {
        var WebsiteConfiguration = aws.params.WebsiteConfiguration /* structure */;
        var Bucket = aws.reqParams.Bucket;
        var ContentMD5 = aws.params.ContentMD5;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! WebsiteConfiguration) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter WebsiteConfiguration"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.DeleteBucket = aws_common.as(
    "DELETE",
    "/:Bucket",
    function DeleteBucket(aws) {
        var Bucket = aws.reqParams.Bucket;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.PutBucketNotificationConfiguration = aws_common.as(
    "PUT",
    "/:Bucket?notification",
    function PutBucketNotificationConfiguration(aws) {
        var Bucket = aws.reqParams.Bucket;
        var NotificationConfiguration = aws.params.NotificationConfiguration;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! NotificationConfiguration) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter NotificationConfiguration"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.GetBucketNotificationConfiguration = aws_common.as(
    "GET",
    "/:Bucket?notification",
    function GetBucketNotificationConfiguration(aws) {


        // TODO implement code

        var ret = /*S47*/{
            TopicConfigurations: [ {
                Events: /*S3z*/[ "" /*, ...*/ ],
                Id: "",
                Filter: /*S4a*/{
                    Key: {
                        FilterRules: [ {
                            Name: "",
                            Value: ""
                        } /*, ...*/ ]
                    }
                },
                TopicArn: ""
            } /*, ...*/ ],
            QueueConfigurations: [ {
                QueueArn: "",
                Events: /*S3z*/[ "" /*, ...*/ ],
                Id: "",
                Filter: /*S4a*/{
                    Key: {
                        FilterRules: [ {
                            Name: "",
                            Value: ""
                        } /*, ...*/ ]
                    }
                }
            } /*, ...*/ ],
            LambdaFunctionConfigurations: [ {
                Events: /*S3z*/[ "" /*, ...*/ ],
                Id: "",
                Filter: /*S4a*/{
                    Key: {
                        FilterRules: [ {
                            Name: "",
                            Value: ""
                        } /*, ...*/ ]
                    }
                },
                LambdaFunctionArn: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.PutBucketLifecycleConfiguration = aws_common.as(
    "PUT",
    "/:Bucket?lifecycle",
    function PutBucketLifecycleConfiguration(aws) {
        var Bucket = aws.reqParams.Bucket;
        var LifecycleConfiguration = aws.params.LifecycleConfiguration /* structure */;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.GetBucketPolicy = aws_common.as(
    "GET",
    "/:Bucket?policy",
    function GetBucketPolicy(aws) {
        var Bucket = aws.reqParams.Bucket;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {
            Policy: ""
        };
        return [200, ret];
    });
module.exports.UploadPartCopy = aws_common.as(
    "PUT",
    "/:Bucket/:Key+",
    function UploadPartCopy(aws) {
        var PartNumber = aws.params.PartNumber /* integer */;
        var CopySourceIfMatch = aws.params.CopySourceIfMatch;
        var UploadId = aws.params.UploadId;
        var CopySourceSSECustomerKeyMD5 = aws.params.CopySourceSSECustomerKeyMD5;
        var CopySourceSSECustomerAlgorithm = aws.params.CopySourceSSECustomerAlgorithm;
        var RequestPayer = aws.params.RequestPayer;
        var CopySourceSSECustomerKey = aws.params.CopySourceSSECustomerKey;
        var SSECustomerKey = aws.params.SSECustomerKey;
        var CopySourceIfModifiedSince = aws.params.CopySourceIfModifiedSince /* timestamp */;
        var Key = aws.reqParams.Key;
        var SSECustomerKeyMD5 = aws.params.SSECustomerKeyMD5;
        var CopySourceRange = aws.params.CopySourceRange;
        var CopySource = aws.params.CopySource;
        var Bucket = aws.reqParams.Bucket;
        var CopySourceIfUnmodifiedSince = aws.params.CopySourceIfUnmodifiedSince /* timestamp */;
        var SSECustomerAlgorithm = aws.params.SSECustomerAlgorithm;
        var CopySourceIfNoneMatch = aws.params.CopySourceIfNoneMatch;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! CopySource) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter CopySource"];
        }        if (! Key) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Key"];
        }        if (! PartNumber) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PartNumber"];
        }        if (! UploadId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter UploadId"];
        }

        // TODO implement code

        var ret = {
            SSEKMSKeyId: /*Sj*/"",
            CopyPartResult: {
                ETag: "",
                LastModified: now()
            },
            ServerSideEncryption: "",
            RequestCharged: "",
            SSECustomerAlgorithm: "",
            SSECustomerKeyMD5: "",
            CopySourceVersionId: ""
        };
        return [200, ret];
    });
module.exports.ListMultipartUploads = aws_common.as(
    "GET",
    "/:Bucket?uploads",
    function ListMultipartUploads(aws) {
        var UploadIdMarker = aws.params.UploadIdMarker;
        var Prefix = aws.params.Prefix;
        var EncodingType = aws.params.EncodingType;
        var MaxUploads = aws.params.MaxUploads /* integer */;
        var Delimiter = aws.params.Delimiter;
        var Bucket = aws.reqParams.Bucket;
        var KeyMarker = aws.params.KeyMarker;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {
            UploadIdMarker: "",
            Prefix: "",
            EncodingType: "",
            IsTruncated: false,
            NextKeyMarker: "",
            Uploads: [ {
                Initiator: /*S6x*/{
                    DisplayName: "",
                    ID: ""
                },
                Key: "",
                Owner: /*S2f*/{
                    DisplayName: "",
                    ID: ""
                },
                Initiated: now(),
                StorageClass: "",
                UploadId: ""
            } /*, ...*/ ],
            CommonPrefixes: /*S6y*/[ {
                Prefix: ""
            } /*, ...*/ ],
            Delimiter: "",
            MaxUploads: 0,
            Bucket: "",
            NextUploadIdMarker: "",
            KeyMarker: ""
        };
        return [200, ret];
    });
module.exports.GetBucketLocation = aws_common.as(
    "GET",
    "/:Bucket?location",
    function GetBucketLocation(aws) {
        var Bucket = aws.reqParams.Bucket;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {
            LocationConstraint: ""
        };
        return [200, ret];
    });
module.exports.RestoreObject = aws_common.as(
    "/:Bucket/:Key+?restore",
    function RestoreObject(aws) {
        var RestoreRequest = aws.params.RestoreRequest /* structure */;
        var Bucket = aws.reqParams.Bucket;
        var Key = aws.reqParams.Key;
        var RequestPayer = aws.params.RequestPayer;
        var VersionId = aws.params.VersionId;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! Key) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Key"];
        }

        // TODO implement code

        var ret = {
            RequestCharged: ""
        };
        return [200, ret];
    });
module.exports.HeadObject = aws_common.as(
    "HEAD",
    "/:Bucket/:Key+",
    function HeadObject(aws) {
        var VersionId = aws.params.VersionId;
        var IfUnmodifiedSince = aws.params.IfUnmodifiedSince /* timestamp */;
        var IfModifiedSince = aws.params.IfModifiedSince /* timestamp */;
        var RequestPayer = aws.params.RequestPayer;
        var SSECustomerKey = aws.params.SSECustomerKey;
        var IfMatch = aws.params.IfMatch;
        var Key = aws.reqParams.Key;
        var IfNoneMatch = aws.params.IfNoneMatch;
        var Range = aws.params.Range;
        var Bucket = aws.reqParams.Bucket;
        var SSECustomerAlgorithm = aws.params.SSECustomerAlgorithm;
        var SSECustomerKeyMD5 = aws.params.SSECustomerKeyMD5;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! Key) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Key"];
        }

        // TODO implement code

        var ret = {
            CacheControl: "",
            DeleteMarker: false,
            ContentDisposition: "",
            Expiration: "",
            SSEKMSKeyId: /*Sj*/"",
            ContentType: "",
            ETag: "",
            MissingMeta: 0,
            Metadata: /*S11*/{} /* map */,
            ServerSideEncryption: "",
            ContentLength: 0,
            AcceptRanges: "",
            VersionId: "",
            ContentEncoding: "",
            LastModified: now(),
            Restore: "",
            RequestCharged: "",
            StorageClass: "",
            ReplicationStatus: "",
            ContentLanguage: "",
            Expires: now(),
            SSECustomerAlgorithm: "",
            SSECustomerKeyMD5: "",
            WebsiteRedirectLocation: ""
        };
        return [200, ret];
    });
module.exports.HeadBucket = aws_common.as(
    "HEAD",
    "/:Bucket",
    function HeadBucket(aws) {
        var Bucket = aws.reqParams.Bucket;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.PutBucketLogging = aws_common.as(
    "PUT",
    "/:Bucket?logging",
    function PutBucketLogging(aws) {
        var BucketLoggingStatus = aws.params.BucketLoggingStatus /* structure */;
        var Bucket = aws.reqParams.Bucket;
        var ContentMD5 = aws.params.ContentMD5;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! BucketLoggingStatus) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter BucketLoggingStatus"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.AbortMultipartUpload = aws_common.as(
    "DELETE",
    "/:Bucket/:Key+",
    function AbortMultipartUpload(aws) {
        var Bucket = aws.reqParams.Bucket;
        var Key = aws.reqParams.Key;
        var RequestPayer = aws.params.RequestPayer;
        var UploadId = aws.params.UploadId;
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }        if (! Key) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Key"];
        }        if (! UploadId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter UploadId"];
        }

        // TODO implement code

        var ret = {
            RequestCharged: ""
        };
        return [200, ret];
    });
