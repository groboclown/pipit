'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * Amazon Elastic MapReduce version 2009-03-31
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol json
require('../../lib/aws-common/shape_http')('json', module.exports, null)
// -----------------------------------
module.exports.DescribeStep = function DescribeStep(aws) {
  var StepId = aws.params['StepId'];
  var ClusterId = aws.params['ClusterId'];
  if (!ClusterId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterId'];
  }
  if (!StepId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter StepId'];
  }


  // TODO implement code

  var ret = {
    Step: {
      ActionOnFailure: '',
      Config: /*S1z*/{
        Properties: /*Sc*/{} /*Map*/,
        Args: /*S16*/[ '', /* ...*/ ],
        MainClass: '',
        Jar: '',
      },
      Status: /*S20*/{
        StateChangeReason: {
          Message: '',
          Code: '',
        },
        Timeline: {
          StartDateTime: awsCommon.timestamp(),
          EndDateTime: awsCommon.timestamp(),
          CreationDateTime: awsCommon.timestamp(),
        },
        State: '',
      },
      Id: '',
      Name: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeJobFlows = function DescribeJobFlows(aws) {
  var CreatedBefore = aws.params['CreatedBefore'] /* Type timestamp */;
  var JobFlowStates = aws.params['JobFlowStates'] /* Type list */;
  var CreatedAfter = aws.params['CreatedAfter'] /* Type timestamp */;
  var JobFlowIds = aws.params['JobFlowIds'];


  // TODO implement code

  var ret = {
    JobFlows: [ {
      ExecutionStatusDetail: {
        StartDateTime: awsCommon.timestamp(),
        ReadyDateTime: awsCommon.timestamp(),
        LastStateChangeReason: '',
        EndDateTime: awsCommon.timestamp(),
        CreationDateTime: awsCommon.timestamp(),
        State: '',
      },
      LogUri: '',
      Name: '',
      JobFlowId: '',
      JobFlowRole: '',
      Steps: [ {
        StepConfig: /*Sh*/{
          ActionOnFailure: '',
          HadoopJarStep: {
            Properties: [ {
              Key: '',
              Value: '',
            }, /* ...*/ ],
            Args: /*Sn*/[ '', /* ...*/ ],
            MainClass: '',
            Jar: '',
          },
          Name: '',
        },
        ExecutionStatusDetail: {
          StartDateTime: awsCommon.timestamp(),
          EndDateTime: awsCommon.timestamp(),
          CreationDateTime: awsCommon.timestamp(),
          LastStateChangeReason: '',
          State: '',
        },
      }, /* ...*/ ],
      ServiceRole: '',
      BootstrapActions: [ {
        BootstrapActionConfig: /*S1s*/{
          ScriptBootstrapAction: {
            Args: /*Sn*/[ '', /* ...*/ ],
            Path: '',
          },
          Name: '',
        },
      }, /* ...*/ ],
      Instances: {
        MasterInstanceId: '',
        Ec2SubnetId: '',
        Ec2KeyName: '',
        InstanceCount: 0,
        SlaveInstanceType: '',
        TerminationProtected: false,
        Placement: /*S1l*/{
          AvailabilityZone: '',
        },
        InstanceGroups: [ {
          StartDateTime: awsCommon.timestamp(),
          ReadyDateTime: awsCommon.timestamp(),
          LastStateChangeReason: '',
          InstanceType: '',
          Name: '',
          InstanceRole: '',
          InstanceGroupId: '',
          CreationDateTime: awsCommon.timestamp(),
          BidPrice: '',
          State: '',
          InstanceRunningCount: 0,
          InstanceRequestCount: 0,
          EndDateTime: awsCommon.timestamp(),
          Market: '',
        }, /* ...*/ ],
        MasterInstanceType: '',
        NormalizedInstanceHours: 0,
        HadoopVersion: '',
        KeepJobFlowAliveWhenNoSteps: false,
        MasterPublicDnsName: '',
      },
      VisibleToAllUsers: false,
      SupportedProducts: /*S1u*/[ '', /* ...*/ ],
      AmiVersion: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListBootstrapActions = function ListBootstrapActions(aws) {
  var Marker = aws.params['Marker'];
  var ClusterId = aws.params['ClusterId'];
  if (!ClusterId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterId'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    BootstrapActions: [ {
      Args: /*S16*/[ '', /* ...*/ ],
      ScriptPath: '',
      Name: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AddJobFlowSteps = function AddJobFlowSteps(aws) {
  var JobFlowId = aws.params['JobFlowId'];
  var Steps = aws.params['Steps'];
  if (!JobFlowId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter JobFlowId'];
  }
  if (!Steps) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Steps'];
  }


  // TODO implement code

  var ret = {
    StepIds: [ '', /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AddTags = function AddTags(aws) {
  var ResourceId = aws.params['ResourceId'];
  var Tags = aws.params['Tags'];
  if (!ResourceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ResourceId'];
  }
  if (!Tags) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Tags'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListClusters = function ListClusters(aws) {
  var ClusterStates = aws.params['ClusterStates'] /* Type list */;
  var CreatedBefore = aws.params['CreatedBefore'] /* Type timestamp */;
  var Marker = aws.params['Marker'];
  var CreatedAfter = aws.params['CreatedAfter'] /* Type timestamp */;


  // TODO implement code

  var ret = {
    Marker: '',
    Clusters: [ {
      NormalizedInstanceHours: 0,
      Status: /*Sz*/{
        StateChangeReason: {
          Message: '',
          Code: '',
        },
        Timeline: {
          EndDateTime: awsCommon.timestamp(),
          CreationDateTime: awsCommon.timestamp(),
          ReadyDateTime: awsCommon.timestamp(),
        },
        State: '',
      },
      Id: '',
      Name: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.SetTerminationProtection = function SetTerminationProtection(aws) {
  var TerminationProtected = aws.params['TerminationProtected'] /* Type boolean */;
  var JobFlowIds = aws.params['JobFlowIds'];
  if (!JobFlowIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter JobFlowIds'];
  }
  if (!TerminationProtected) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TerminationProtected'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.AddInstanceGroups = function AddInstanceGroups(aws) {
  var JobFlowId = aws.params['JobFlowId'];
  var InstanceGroups = aws.params['InstanceGroups'];
  if (!InstanceGroups) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceGroups'];
  }
  if (!JobFlowId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter JobFlowId'];
  }


  // TODO implement code

  var ret = {
    JobFlowId: '',
    InstanceGroupIds: [ '', /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.SetVisibleToAllUsers = function SetVisibleToAllUsers(aws) {
  var VisibleToAllUsers = aws.params['VisibleToAllUsers'] /* Type boolean */;
  var JobFlowIds = aws.params['JobFlowIds'];
  if (!JobFlowIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter JobFlowIds'];
  }
  if (!VisibleToAllUsers) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VisibleToAllUsers'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ListSteps = function ListSteps(aws) {
  var Marker = aws.params['Marker'];
  var StepIds = aws.params['StepIds'];
  var ClusterId = aws.params['ClusterId'];
  var StepStates = aws.params['StepStates'] /* Type list */;
  if (!ClusterId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterId'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    Steps: [ {
      ActionOnFailure: '',
      Config: /*S1z*/{
        Properties: /*Sc*/{} /*Map*/,
        Args: /*S16*/[ '', /* ...*/ ],
        MainClass: '',
        Jar: '',
      },
      Status: /*S20*/{
        StateChangeReason: {
          Message: '',
          Code: '',
        },
        Timeline: {
          StartDateTime: awsCommon.timestamp(),
          EndDateTime: awsCommon.timestamp(),
          CreationDateTime: awsCommon.timestamp(),
        },
        State: '',
      },
      Id: '',
      Name: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeCluster = function DescribeCluster(aws) {
  var ClusterId = aws.params['ClusterId'];
  if (!ClusterId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterId'];
  }


  // TODO implement code

  var ret = {
    Cluster: {
      LogUri: '',
      Tags: /*Ss*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      Name: '',
      Ec2InstanceAttributes: {
        AdditionalSlaveSecurityGroups: /*S16*/[ '', /* ...*/ ],
        AdditionalMasterSecurityGroups: /*S16*/[ '', /* ...*/ ],
        EmrManagedMasterSecurityGroup: '',
        EmrManagedSlaveSecurityGroup: '',
        Ec2KeyName: '',
        Ec2AvailabilityZone: '',
        ServiceAccessSecurityGroup: '',
        Ec2SubnetId: '',
        IamInstanceProfile: '',
      },
      ServiceRole: '',
      RunningAmiVersion: '',
      Configurations: /*S9*/[ {
        Properties: /*Sc*/{} /*Map*/,
        Configurations: null/* recursive S9*/,
        Classification: '',
      }, /* ...*/ ],
      TerminationProtected: false,
      AutoTerminate: false,
      ReleaseLabel: '',
      Status: /*Sz*/{
        StateChangeReason: {
          Message: '',
          Code: '',
        },
        Timeline: {
          EndDateTime: awsCommon.timestamp(),
          CreationDateTime: awsCommon.timestamp(),
          ReadyDateTime: awsCommon.timestamp(),
        },
        State: '',
      },
      RequestedAmiVersion: '',
      VisibleToAllUsers: false,
      NormalizedInstanceHours: 0,
      Applications: /*S18*/[ {
        Args: /*S16*/[ '', /* ...*/ ],
        AdditionalInfo: /*Sc*/{} /*Map*/,
        Version: '',
        Name: '',
      }, /* ...*/ ],
      Id: '',
      MasterPublicDnsName: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListInstances = function ListInstances(aws) {
  var Marker = aws.params['Marker'];
  var InstanceGroupId = aws.params['InstanceGroupId'];
  var InstanceGroupTypes = aws.params['InstanceGroupTypes'] /* Type list */;
  var ClusterId = aws.params['ClusterId'];
  if (!ClusterId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterId'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    Instances: [ {
      PublicDnsName: '',
      Id: '',
      Status: {
        StateChangeReason: {
          Message: '',
          Code: '',
        },
        Timeline: {
          EndDateTime: awsCommon.timestamp(),
          CreationDateTime: awsCommon.timestamp(),
          ReadyDateTime: awsCommon.timestamp(),
        },
        State: '',
      },
      PrivateIpAddress: '',
      Ec2InstanceId: '',
      PublicIpAddress: '',
      PrivateDnsName: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListInstanceGroups = function ListInstanceGroups(aws) {
  var Marker = aws.params['Marker'];
  var ClusterId = aws.params['ClusterId'];
  if (!ClusterId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterId'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    InstanceGroups: [ {
      RunningInstanceCount: 0,
      RequestedInstanceCount: 0,
      InstanceType: '',
      Status: {
        StateChangeReason: {
          Message: '',
          Code: '',
        },
        Timeline: {
          EndDateTime: awsCommon.timestamp(),
          CreationDateTime: awsCommon.timestamp(),
          ReadyDateTime: awsCommon.timestamp(),
        },
        State: '',
      },
      Name: '',
      Configurations: /*S9*/[ {
        Properties: /*Sc*/{} /*Map*/,
        Configurations: null/* recursive S9*/,
        Classification: '',
      }, /* ...*/ ],
      InstanceGroupType: '',
      BidPrice: '',
      Id: '',
      Market: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.TerminateJobFlows = function TerminateJobFlows(aws) {
  var JobFlowIds = aws.params['JobFlowIds'];
  if (!JobFlowIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter JobFlowIds'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ModifyInstanceGroups = function ModifyInstanceGroups(aws) {
  var InstanceGroups = aws.params['InstanceGroups'] /* Type list */;


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.RemoveTags = function RemoveTags(aws) {
  var TagKeys = aws.params['TagKeys'];
  var ResourceId = aws.params['ResourceId'];
  if (!ResourceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ResourceId'];
  }
  if (!TagKeys) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TagKeys'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.RunJobFlow = function RunJobFlow(aws) {
  var Instances = aws.params['Instances'] /* Type structure */;
  var Tags = aws.params['Tags'];
  var Name = aws.params['Name'];
  var Configurations = aws.params['Configurations'];
  var JobFlowRole = aws.params['JobFlowRole'];
  var Steps = aws.params['Steps'];
  var ServiceRole = aws.params['ServiceRole'];
  var BootstrapActions = aws.params['BootstrapActions'] /* Type list */;
  var NewSupportedProducts = aws.params['NewSupportedProducts'] /* Type list */;
  var LogUri = aws.params['LogUri'];
  var ReleaseLabel = aws.params['ReleaseLabel'];
  var SupportedProducts = aws.params['SupportedProducts'];
  var VisibleToAllUsers = aws.params['VisibleToAllUsers'] /* Type boolean */;
  var AmiVersion = aws.params['AmiVersion'];
  var Applications = aws.params['Applications'];
  var AdditionalInfo = aws.params['AdditionalInfo'];
  if (!Name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }
  if (!Instances) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Instances'];
  }


  // TODO implement code

  var ret = {
    JobFlowId: '',
  };
  return [200, ret];
};
