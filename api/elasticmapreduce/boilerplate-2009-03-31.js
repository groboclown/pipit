'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * Amazon Elastic MapReduce version 2009-03-31
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol json
require('../../lib/aws-common/shape_http')('json', module.exports, null);
// -----------------------------------
module.exports.TerminateJobFlows = function TerminateJobFlows(aws) {
  var jobFlowIds = aws.params.JobFlowIds;
  if (!jobFlowIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter JobFlowIds'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.SetTerminationProtection = function SetTerminationProtection(aws) {
  var jobFlowIds = aws.params.JobFlowIds;
  var terminationProtected = aws.params.TerminationProtected /* Type boolean */;
  if (!jobFlowIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter JobFlowIds'];
  }
  if (!terminationProtected) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TerminationProtected'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ModifyInstanceGroups = function ModifyInstanceGroups(aws) {
  var instanceGroups = aws.params.InstanceGroups /* Type list */;


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.AddJobFlowSteps = function AddJobFlowSteps(aws) {
  var jobFlowId = aws.params.JobFlowId;
  var steps = aws.params.Steps;
  if (!jobFlowId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter JobFlowId'];
  }
  if (!steps) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Steps'];
  }


  // TODO implement code

  var ret = {
    StepIds: [ '', /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListInstanceGroups = function ListInstanceGroups(aws) {
  var marker = aws.params.Marker;
  var clusterId = aws.params.ClusterId;
  if (!clusterId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterId'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    InstanceGroups: [ {
      Market: '',
      InstanceType: '',
      InstanceGroupType: '',
      Configurations: /*S9*/[ {
        Classification: '',
        Configurations: null /* Recursive S9*/,
        Properties: /*Sc*/{} /*Map*/,
      }, /* ...*/ ],
      Status: {
        State: '',
        Timeline: {
          ReadyDateTime: awsCommon.timestamp(),
          CreationDateTime: awsCommon.timestamp(),
          EndDateTime: awsCommon.timestamp(),
        },
        StateChangeReason: {
          Code: '',
          Message: '',
        },
      },
      RequestedInstanceCount: 0,
      Name: '',
      Id: '',
      BidPrice: '',
      RunningInstanceCount: 0,
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RemoveTags = function RemoveTags(aws) {
  var resourceId = aws.params.ResourceId;
  var tagKeys = aws.params.TagKeys;
  if (!resourceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ResourceId'];
  }
  if (!tagKeys) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TagKeys'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeStep = function DescribeStep(aws) {
  var stepId = aws.params.StepId;
  var clusterId = aws.params.ClusterId;
  if (!clusterId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterId'];
  }
  if (!stepId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter StepId'];
  }


  // TODO implement code

  var ret = {
    Step: {
      Config: /*S1z*/{
        MainClass: '',
        Properties: /*Sc*/{} /*Map*/,
        Args: /*S16*/[ '', /* ...*/ ],
        Jar: '',
      },
      Name: '',
      Id: '',
      Status: /*S20*/{
        State: '',
        Timeline: {
          EndDateTime: awsCommon.timestamp(),
          CreationDateTime: awsCommon.timestamp(),
          StartDateTime: awsCommon.timestamp(),
        },
        StateChangeReason: {
          Code: '',
          Message: '',
        },
      },
      ActionOnFailure: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AddInstanceGroups = function AddInstanceGroups(aws) {
  var jobFlowId = aws.params.JobFlowId;
  var instanceGroups = aws.params.InstanceGroups;
  if (!instanceGroups) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceGroups'];
  }
  if (!jobFlowId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter JobFlowId'];
  }


  // TODO implement code

  var ret = {
    JobFlowId: '',
    InstanceGroupIds: [ '', /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.SetVisibleToAllUsers = function SetVisibleToAllUsers(aws) {
  var jobFlowIds = aws.params.JobFlowIds;
  var visibleToAllUsers = aws.params.VisibleToAllUsers /* Type boolean */;
  if (!jobFlowIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter JobFlowIds'];
  }
  if (!visibleToAllUsers) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VisibleToAllUsers'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeJobFlows = function DescribeJobFlows(aws) {
  var jobFlowStates = aws.params.JobFlowStates /* Type list */;
  var createdBefore = aws.params.CreatedBefore /* Type timestamp */;
  var jobFlowIds = aws.params.JobFlowIds;
  var createdAfter = aws.params.CreatedAfter /* Type timestamp */;


  // TODO implement code

  var ret = {
    JobFlows: [ {
      JobFlowId: '',
      ExecutionStatusDetail: {
        EndDateTime: awsCommon.timestamp(),
        CreationDateTime: awsCommon.timestamp(),
        ReadyDateTime: awsCommon.timestamp(),
        State: '',
        LastStateChangeReason: '',
        StartDateTime: awsCommon.timestamp(),
      },
      BootstrapActions: [ {
        BootstrapActionConfig: /*S1s*/{
          Name: '',
          ScriptBootstrapAction: {
            Path: '',
            Args: /*Sn*/[ '', /* ...*/ ],
          },
        },
      }, /* ...*/ ],
      Steps: [ {
        ExecutionStatusDetail: {
          EndDateTime: awsCommon.timestamp(),
          State: '',
          LastStateChangeReason: '',
          StartDateTime: awsCommon.timestamp(),
          CreationDateTime: awsCommon.timestamp(),
        },
        StepConfig: /*Sh*/{
          Name: '',
          HadoopJarStep: {
            MainClass: '',
            Properties: [ {
              Value: '',
              Key: '',
            }, /* ...*/ ],
            Args: /*Sn*/[ '', /* ...*/ ],
            Jar: '',
          },
          ActionOnFailure: '',
        },
      }, /* ...*/ ],
      LogUri: '',
      Instances: {
        MasterInstanceId: '',
        MasterPublicDnsName: '',
        Placement: /*S1l*/{
          AvailabilityZone: '',
        },
        MasterInstanceType: '',
        KeepJobFlowAliveWhenNoSteps: false,
        Ec2KeyName: '',
        Ec2SubnetId: '',
        InstanceCount: 0,
        SlaveInstanceType: '',
        TerminationProtected: false,
        InstanceGroups: [ {
          Market: '',
          LastStateChangeReason: '',
          EndDateTime: awsCommon.timestamp(),
          StartDateTime: awsCommon.timestamp(),
          Name: '',
          InstanceType: '',
          InstanceRole: '',
          InstanceGroupId: '',
          CreationDateTime: awsCommon.timestamp(),
          ReadyDateTime: awsCommon.timestamp(),
          State: '',
          BidPrice: '',
          InstanceRequestCount: 0,
          InstanceRunningCount: 0,
        }, /* ...*/ ],
        NormalizedInstanceHours: 0,
        HadoopVersion: '',
      },
      SupportedProducts: /*S1u*/[ '', /* ...*/ ],
      JobFlowRole: '',
      AmiVersion: '',
      Name: '',
      VisibleToAllUsers: false,
      ServiceRole: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeCluster = function DescribeCluster(aws) {
  var clusterId = aws.params.ClusterId;
  if (!clusterId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterId'];
  }


  // TODO implement code

  var ret = {
    Cluster: {
      Ec2InstanceAttributes: {
        Ec2SubnetId: '',
        ServiceAccessSecurityGroup: '',
        EmrManagedMasterSecurityGroup: '',
        AdditionalSlaveSecurityGroups: /*S16*/[ '', /* ...*/ ],
        AdditionalMasterSecurityGroups: /*S16*/[ '', /* ...*/ ],
        IamInstanceProfile: '',
        Ec2AvailabilityZone: '',
        EmrManagedSlaveSecurityGroup: '',
        Ec2KeyName: '',
      },
      MasterPublicDnsName: '',
      Status: /*Sz*/{
        State: '',
        Timeline: {
          ReadyDateTime: awsCommon.timestamp(),
          CreationDateTime: awsCommon.timestamp(),
          EndDateTime: awsCommon.timestamp(),
        },
        StateChangeReason: {
          Code: '',
          Message: '',
        },
      },
      AutoTerminate: false,
      Applications: /*S18*/[ {
        Name: '',
        AdditionalInfo: /*Sc*/{} /*Map*/,
        Args: /*S16*/[ '', /* ...*/ ],
        Version: '',
      }, /* ...*/ ],
      LogUri: '',
      Tags: /*Ss*/[ {
        Value: '',
        Key: '',
      }, /* ...*/ ],
      ReleaseLabel: '',
      RequestedAmiVersion: '',
      RunningAmiVersion: '',
      TerminationProtected: false,
      Configurations: /*S9*/[ {
        Classification: '',
        Configurations: null /* Recursive S9*/,
        Properties: /*Sc*/{} /*Map*/,
      }, /* ...*/ ],
      Name: '',
      Id: '',
      VisibleToAllUsers: false,
      NormalizedInstanceHours: 0,
      ServiceRole: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListInstances = function ListInstances(aws) {
  var marker = aws.params.Marker;
  var instanceGroupId = aws.params.InstanceGroupId;
  var clusterId = aws.params.ClusterId;
  var instanceGroupTypes = aws.params.InstanceGroupTypes /* Type list */;
  if (!clusterId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterId'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    Instances: [ {
      PrivateIpAddress: '',
      PublicDnsName: '',
      Status: {
        State: '',
        Timeline: {
          ReadyDateTime: awsCommon.timestamp(),
          CreationDateTime: awsCommon.timestamp(),
          EndDateTime: awsCommon.timestamp(),
        },
        StateChangeReason: {
          Code: '',
          Message: '',
        },
      },
      PublicIpAddress: '',
      Id: '',
      Ec2InstanceId: '',
      PrivateDnsName: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListSteps = function ListSteps(aws) {
  var marker = aws.params.Marker;
  var stepStates = aws.params.StepStates /* Type list */;
  var clusterId = aws.params.ClusterId;
  var stepIds = aws.params.StepIds;
  if (!clusterId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterId'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    Steps: [ {
      Config: /*S1z*/{
        MainClass: '',
        Properties: /*Sc*/{} /*Map*/,
        Args: /*S16*/[ '', /* ...*/ ],
        Jar: '',
      },
      Name: '',
      Id: '',
      Status: /*S20*/{
        State: '',
        Timeline: {
          EndDateTime: awsCommon.timestamp(),
          CreationDateTime: awsCommon.timestamp(),
          StartDateTime: awsCommon.timestamp(),
        },
        StateChangeReason: {
          Code: '',
          Message: '',
        },
      },
      ActionOnFailure: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListBootstrapActions = function ListBootstrapActions(aws) {
  var marker = aws.params.Marker;
  var clusterId = aws.params.ClusterId;
  if (!clusterId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClusterId'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    BootstrapActions: [ {
      Name: '',
      ScriptPath: '',
      Args: /*S16*/[ '', /* ...*/ ],
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListClusters = function ListClusters(aws) {
  var marker = aws.params.Marker;
  var createdBefore = aws.params.CreatedBefore /* Type timestamp */;
  var clusterStates = aws.params.ClusterStates /* Type list */;
  var createdAfter = aws.params.CreatedAfter /* Type timestamp */;


  // TODO implement code

  var ret = {
    Clusters: [ {
      Name: '',
      Id: '',
      NormalizedInstanceHours: 0,
      Status: /*Sz*/{
        State: '',
        Timeline: {
          ReadyDateTime: awsCommon.timestamp(),
          CreationDateTime: awsCommon.timestamp(),
          EndDateTime: awsCommon.timestamp(),
        },
        StateChangeReason: {
          Code: '',
          Message: '',
        },
      },
    }, /* ...*/ ],
    Marker: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RunJobFlow = function RunJobFlow(aws) {
  var applications = aws.params.Applications;
  var serviceRole = aws.params.ServiceRole;
  var bootstrapActions = aws.params.BootstrapActions /* Type list */;
  var jobFlowRole = aws.params.JobFlowRole;
  var steps = aws.params.Steps;
  var logUri = aws.params.LogUri;
  var supportedProducts = aws.params.SupportedProducts;
  var tags = aws.params.Tags;
  var instances = aws.params.Instances /* Type structure */;
  var releaseLabel = aws.params.ReleaseLabel;
  var configurations = aws.params.Configurations;
  var name = aws.params.Name;
  var amiVersion = aws.params.AmiVersion;
  var newSupportedProducts = aws.params.NewSupportedProducts /* Type list */;
  var visibleToAllUsers = aws.params.VisibleToAllUsers /* Type boolean */;
  var additionalInfo = aws.params.AdditionalInfo;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }
  if (!instances) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Instances'];
  }


  // TODO implement code

  var ret = {
    JobFlowId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AddTags = function AddTags(aws) {
  var resourceId = aws.params.ResourceId;
  var tags = aws.params.Tags;
  if (!resourceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ResourceId'];
  }
  if (!tags) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Tags'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
