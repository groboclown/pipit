'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * AWS Database Migration Service version 2016-01-01
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol json
require('../../lib/aws-common/shape_http')('json', module.exports, null);
// -----------------------------------
module.exports.AddTagsToResource = function AddTagsToResource(aws) {
  var resourceArn = aws.params.ResourceArn;
  var tags = aws.params.Tags;
  if (!resourceArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ResourceArn'];
  }
  if (!tags) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Tags'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateEndpoint = function CreateEndpoint(aws) {
  var databaseName = aws.params.DatabaseName;
  var endpointIdentifier = aws.params.EndpointIdentifier;
  var endpointType = aws.params.EndpointType;
  var engineName = aws.params.EngineName;
  var extraConnectionAttributes = aws.params.ExtraConnectionAttributes;
  var kmsKeyId = aws.params.KmsKeyId;
  var password = aws.params.Password;
  var port = aws.params.Port /* Type integer */;
  var serverName = aws.params.ServerName;
  var tags = aws.params.Tags;
  var username = aws.params.Username;
  if (!endpointIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EndpointIdentifier'];
  }
  if (!endpointType) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EndpointType'];
  }
  if (!engineName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EngineName'];
  }
  if (!password) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Password'];
  }
  if (!port) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Port'];
  }
  if (!serverName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ServerName'];
  }
  if (!username) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Username'];
  }


  // TODO implement code

  var ret = {
    Endpoint: /*Sb*/{
      DatabaseName: '',
      EndpointArn: '',
      EndpointIdentifier: '',
      EndpointType: '',
      EngineName: '',
      ExtraConnectionAttributes: '',
      KmsKeyId: '',
      Port: 0,
      ServerName: '',
      Status: '',
      Username: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateReplicationInstance = function CreateReplicationInstance(aws) {
  var allocatedStorage = aws.params.AllocatedStorage /* Type integer */;
  var autoMinorVersionUpgrade = aws.params.AutoMinorVersionUpgrade /* Type boolean */;
  var availabilityZone = aws.params.AvailabilityZone;
  var engineVersion = aws.params.EngineVersion;
  var kmsKeyId = aws.params.KmsKeyId;
  var preferredMaintenanceWindow = aws.params.PreferredMaintenanceWindow;
  var publiclyAccessible = aws.params.PubliclyAccessible /* Type boolean */;
  var replicationInstanceClass = aws.params.ReplicationInstanceClass;
  var replicationInstanceIdentifier = aws.params.ReplicationInstanceIdentifier;
  var replicationSubnetGroupIdentifier = aws.params.ReplicationSubnetGroupIdentifier;
  var tags = aws.params.Tags;
  if (!replicationInstanceClass) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ReplicationInstanceClass'];
  }
  if (!replicationInstanceIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ReplicationInstanceIdentifier'];
  }


  // TODO implement code

  var ret = {
    ReplicationInstance: /*Sf*/{
      AllocatedStorage: 0,
      AutoMinorVersionUpgrade: false,
      AvailabilityZone: '',
      EngineVersion: '',
      InstanceCreateTime: awsCommon.timestamp(),
      KmsKeyId: '',
      PendingModifiedValues: {
        AllocatedStorage: 0,
        EngineVersion: '',
        ReplicationInstanceClass: '',
      },
      PreferredMaintenanceWindow: '',
      PubliclyAccessible: false,
      ReplicationInstanceArn: '',
      ReplicationInstanceClass: '',
      ReplicationInstanceIdentifier: '',
      ReplicationInstancePrivateIpAddress: '',
      ReplicationInstancePublicIpAddress: '',
      ReplicationInstanceStatus: '',
      ReplicationSubnetGroup: /*Si*/{
        ReplicationSubnetGroupDescription: '',
        ReplicationSubnetGroupIdentifier: '',
        SubnetGroupStatus: '',
        Subnets: [ {
          SubnetAvailabilityZone: {
            Name: '',
          },
          SubnetIdentifier: '',
          SubnetStatus: '',
        }, /* ...*/ ],
        VpcId: '',
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateReplicationSubnetGroup = function CreateReplicationSubnetGroup(aws) {
  var replicationSubnetGroupDescription = aws.params.ReplicationSubnetGroupDescription;
  var replicationSubnetGroupIdentifier = aws.params.ReplicationSubnetGroupIdentifier;
  var subnetIds = aws.params.SubnetIds;
  var tags = aws.params.Tags;
  if (!replicationSubnetGroupDescription) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ReplicationSubnetGroupDescription'];
  }
  if (!replicationSubnetGroupIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ReplicationSubnetGroupIdentifier'];
  }
  if (!subnetIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SubnetIds'];
  }


  // TODO implement code

  var ret = {
    ReplicationSubnetGroup: /*Si*/{
      ReplicationSubnetGroupDescription: '',
      ReplicationSubnetGroupIdentifier: '',
      SubnetGroupStatus: '',
      Subnets: [ {
        SubnetAvailabilityZone: {
          Name: '',
        },
        SubnetIdentifier: '',
        SubnetStatus: '',
      }, /* ...*/ ],
      VpcId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateReplicationTask = function CreateReplicationTask(aws) {
  var cdcStartTime = aws.params.CdcStartTime /* Type timestamp */;
  var migrationType = aws.params.MigrationType;
  var replicationInstanceArn = aws.params.ReplicationInstanceArn;
  var replicationTaskIdentifier = aws.params.ReplicationTaskIdentifier;
  var replicationTaskSettings = aws.params.ReplicationTaskSettings;
  var sourceEndpointArn = aws.params.SourceEndpointArn;
  var tableMappings = aws.params.TableMappings;
  var tags = aws.params.Tags;
  var targetEndpointArn = aws.params.TargetEndpointArn;
  if (!migrationType) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MigrationType'];
  }
  if (!replicationInstanceArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ReplicationInstanceArn'];
  }
  if (!replicationTaskIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ReplicationTaskIdentifier'];
  }
  if (!sourceEndpointArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SourceEndpointArn'];
  }
  if (!tableMappings) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TableMappings'];
  }
  if (!targetEndpointArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TargetEndpointArn'];
  }


  // TODO implement code

  var ret = {
    ReplicationTask: /*Su*/{
      LastFailureMessage: '',
      MigrationType: '',
      ReplicationInstanceArn: '',
      ReplicationTaskArn: '',
      ReplicationTaskCreationDate: awsCommon.timestamp(),
      ReplicationTaskIdentifier: '',
      ReplicationTaskSettings: '',
      ReplicationTaskStartDate: awsCommon.timestamp(),
      ReplicationTaskStats: {
        ElapsedTimeMillis: 0 /*Long*/,
        FullLoadProgressPercent: 0,
        TablesErrored: 0,
        TablesLoaded: 0,
        TablesLoading: 0,
        TablesQueued: 0,
      },
      SourceEndpointArn: '',
      Status: '',
      TableMappings: '',
      TargetEndpointArn: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteEndpoint = function DeleteEndpoint(aws) {
  var endpointArn = aws.params.EndpointArn;
  if (!endpointArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EndpointArn'];
  }


  // TODO implement code

  var ret = {
    Endpoint: /*Sb*/{
      DatabaseName: '',
      EndpointArn: '',
      EndpointIdentifier: '',
      EndpointType: '',
      EngineName: '',
      ExtraConnectionAttributes: '',
      KmsKeyId: '',
      Port: 0,
      ServerName: '',
      Status: '',
      Username: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteReplicationInstance = function DeleteReplicationInstance(aws) {
  var replicationInstanceArn = aws.params.ReplicationInstanceArn;
  if (!replicationInstanceArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ReplicationInstanceArn'];
  }


  // TODO implement code

  var ret = {
    ReplicationInstance: /*Sf*/{
      AllocatedStorage: 0,
      AutoMinorVersionUpgrade: false,
      AvailabilityZone: '',
      EngineVersion: '',
      InstanceCreateTime: awsCommon.timestamp(),
      KmsKeyId: '',
      PendingModifiedValues: {
        AllocatedStorage: 0,
        EngineVersion: '',
        ReplicationInstanceClass: '',
      },
      PreferredMaintenanceWindow: '',
      PubliclyAccessible: false,
      ReplicationInstanceArn: '',
      ReplicationInstanceClass: '',
      ReplicationInstanceIdentifier: '',
      ReplicationInstancePrivateIpAddress: '',
      ReplicationInstancePublicIpAddress: '',
      ReplicationInstanceStatus: '',
      ReplicationSubnetGroup: /*Si*/{
        ReplicationSubnetGroupDescription: '',
        ReplicationSubnetGroupIdentifier: '',
        SubnetGroupStatus: '',
        Subnets: [ {
          SubnetAvailabilityZone: {
            Name: '',
          },
          SubnetIdentifier: '',
          SubnetStatus: '',
        }, /* ...*/ ],
        VpcId: '',
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteReplicationSubnetGroup = function DeleteReplicationSubnetGroup(aws) {
  var replicationSubnetGroupIdentifier = aws.params.ReplicationSubnetGroupIdentifier;
  if (!replicationSubnetGroupIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ReplicationSubnetGroupIdentifier'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteReplicationTask = function DeleteReplicationTask(aws) {
  var replicationTaskArn = aws.params.ReplicationTaskArn;
  if (!replicationTaskArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ReplicationTaskArn'];
  }


  // TODO implement code

  var ret = {
    ReplicationTask: /*Su*/{
      LastFailureMessage: '',
      MigrationType: '',
      ReplicationInstanceArn: '',
      ReplicationTaskArn: '',
      ReplicationTaskCreationDate: awsCommon.timestamp(),
      ReplicationTaskIdentifier: '',
      ReplicationTaskSettings: '',
      ReplicationTaskStartDate: awsCommon.timestamp(),
      ReplicationTaskStats: {
        ElapsedTimeMillis: 0 /*Long*/,
        FullLoadProgressPercent: 0,
        TablesErrored: 0,
        TablesLoaded: 0,
        TablesLoading: 0,
        TablesQueued: 0,
      },
      SourceEndpointArn: '',
      Status: '',
      TableMappings: '',
      TargetEndpointArn: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeAccountAttributes = function DescribeAccountAttributes(aws) {


  // TODO implement code

  var ret = {
    AccountQuotas: [ {
      AccountQuotaName: '',
      Max: 0 /*Long*/,
      Used: 0 /*Long*/,
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeConnections = function DescribeConnections(aws) {
  var filters = aws.params.Filters;
  var marker = aws.params.Marker;
  var maxRecords = aws.params.MaxRecords /* Type integer */;


  // TODO implement code

  var ret = {
    Connections: [ /*S1f*/{
      EndpointArn: '',
      EndpointIdentifier: '',
      LastFailureMessage: '',
      ReplicationInstanceArn: '',
      ReplicationInstanceIdentifier: '',
      Status: '',
    }, /* ...*/ ],
    Marker: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeEndpointTypes = function DescribeEndpointTypes(aws) {
  var filters = aws.params.Filters;
  var marker = aws.params.Marker;
  var maxRecords = aws.params.MaxRecords /* Type integer */;


  // TODO implement code

  var ret = {
    Marker: '',
    SupportedEndpointTypes: [ {
      EndpointType: '',
      EngineName: '',
      SupportsCDC: false,
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeEndpoints = function DescribeEndpoints(aws) {
  var filters = aws.params.Filters;
  var marker = aws.params.Marker;
  var maxRecords = aws.params.MaxRecords /* Type integer */;


  // TODO implement code

  var ret = {
    Endpoints: [ /*Sb*/{
      DatabaseName: '',
      EndpointArn: '',
      EndpointIdentifier: '',
      EndpointType: '',
      EngineName: '',
      ExtraConnectionAttributes: '',
      KmsKeyId: '',
      Port: 0,
      ServerName: '',
      Status: '',
      Username: '',
    }, /* ...*/ ],
    Marker: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeOrderableReplicationInstances = function DescribeOrderableReplicationInstances(aws) {
  var marker = aws.params.Marker;
  var maxRecords = aws.params.MaxRecords /* Type integer */;


  // TODO implement code

  var ret = {
    Marker: '',
    OrderableReplicationInstances: [ {
      DefaultAllocatedStorage: 0,
      EngineVersion: '',
      IncludedAllocatedStorage: 0,
      MaxAllocatedStorage: 0,
      MinAllocatedStorage: 0,
      ReplicationInstanceClass: '',
      StorageType: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeRefreshSchemasStatus = function DescribeRefreshSchemasStatus(aws) {
  var endpointArn = aws.params.EndpointArn;
  if (!endpointArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EndpointArn'];
  }


  // TODO implement code

  var ret = {
    RefreshSchemasStatus: /*S1t*/{
      EndpointArn: '',
      LastFailureMessage: '',
      LastRefreshDate: awsCommon.timestamp(),
      ReplicationInstanceArn: '',
      Status: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeReplicationInstances = function DescribeReplicationInstances(aws) {
  var filters = aws.params.Filters;
  var marker = aws.params.Marker;
  var maxRecords = aws.params.MaxRecords /* Type integer */;


  // TODO implement code

  var ret = {
    Marker: '',
    ReplicationInstances: [ /*Sf*/{
      AllocatedStorage: 0,
      AutoMinorVersionUpgrade: false,
      AvailabilityZone: '',
      EngineVersion: '',
      InstanceCreateTime: awsCommon.timestamp(),
      KmsKeyId: '',
      PendingModifiedValues: {
        AllocatedStorage: 0,
        EngineVersion: '',
        ReplicationInstanceClass: '',
      },
      PreferredMaintenanceWindow: '',
      PubliclyAccessible: false,
      ReplicationInstanceArn: '',
      ReplicationInstanceClass: '',
      ReplicationInstanceIdentifier: '',
      ReplicationInstancePrivateIpAddress: '',
      ReplicationInstancePublicIpAddress: '',
      ReplicationInstanceStatus: '',
      ReplicationSubnetGroup: /*Si*/{
        ReplicationSubnetGroupDescription: '',
        ReplicationSubnetGroupIdentifier: '',
        SubnetGroupStatus: '',
        Subnets: [ {
          SubnetAvailabilityZone: {
            Name: '',
          },
          SubnetIdentifier: '',
          SubnetStatus: '',
        }, /* ...*/ ],
        VpcId: '',
      },
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeReplicationSubnetGroups = function DescribeReplicationSubnetGroups(aws) {
  var filters = aws.params.Filters;
  var marker = aws.params.Marker;
  var maxRecords = aws.params.MaxRecords /* Type integer */;


  // TODO implement code

  var ret = {
    Marker: '',
    ReplicationSubnetGroups: [ /*Si*/{
      ReplicationSubnetGroupDescription: '',
      ReplicationSubnetGroupIdentifier: '',
      SubnetGroupStatus: '',
      Subnets: [ {
        SubnetAvailabilityZone: {
          Name: '',
        },
        SubnetIdentifier: '',
        SubnetStatus: '',
      }, /* ...*/ ],
      VpcId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeReplicationTasks = function DescribeReplicationTasks(aws) {
  var filters = aws.params.Filters;
  var marker = aws.params.Marker;
  var maxRecords = aws.params.MaxRecords /* Type integer */;


  // TODO implement code

  var ret = {
    Marker: '',
    ReplicationTasks: [ /*Su*/{
      LastFailureMessage: '',
      MigrationType: '',
      ReplicationInstanceArn: '',
      ReplicationTaskArn: '',
      ReplicationTaskCreationDate: awsCommon.timestamp(),
      ReplicationTaskIdentifier: '',
      ReplicationTaskSettings: '',
      ReplicationTaskStartDate: awsCommon.timestamp(),
      ReplicationTaskStats: {
        ElapsedTimeMillis: 0 /*Long*/,
        FullLoadProgressPercent: 0,
        TablesErrored: 0,
        TablesLoaded: 0,
        TablesLoading: 0,
        TablesQueued: 0,
      },
      SourceEndpointArn: '',
      Status: '',
      TableMappings: '',
      TargetEndpointArn: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeSchemas = function DescribeSchemas(aws) {
  var endpointArn = aws.params.EndpointArn;
  var marker = aws.params.Marker;
  var maxRecords = aws.params.MaxRecords /* Type integer */;
  if (!endpointArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EndpointArn'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    Schemas: [ '', /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeTableStatistics = function DescribeTableStatistics(aws) {
  var marker = aws.params.Marker;
  var maxRecords = aws.params.MaxRecords /* Type integer */;
  var replicationTaskArn = aws.params.ReplicationTaskArn;
  if (!replicationTaskArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ReplicationTaskArn'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    ReplicationTaskArn: '',
    TableStatistics: [ {
      Ddls: 0 /*Long*/,
      Deletes: 0 /*Long*/,
      FullLoadRows: 0 /*Long*/,
      Inserts: 0 /*Long*/,
      LastUpdateTime: awsCommon.timestamp(),
      SchemaName: '',
      TableName: '',
      TableState: '',
      Updates: 0 /*Long*/,
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListTagsForResource = function ListTagsForResource(aws) {
  var resourceArn = aws.params.ResourceArn;
  if (!resourceArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ResourceArn'];
  }


  // TODO implement code

  var ret = {
    TagList: /*S3*/[ {
      Key: '',
      Value: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ModifyEndpoint = function ModifyEndpoint(aws) {
  var databaseName = aws.params.DatabaseName;
  var endpointArn = aws.params.EndpointArn;
  var endpointIdentifier = aws.params.EndpointIdentifier;
  var endpointType = aws.params.EndpointType;
  var engineName = aws.params.EngineName;
  var extraConnectionAttributes = aws.params.ExtraConnectionAttributes;
  var password = aws.params.Password;
  var port = aws.params.Port /* Type integer */;
  var serverName = aws.params.ServerName;
  var username = aws.params.Username;
  if (!endpointArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EndpointArn'];
  }


  // TODO implement code

  var ret = {
    Endpoint: /*Sb*/{
      DatabaseName: '',
      EndpointArn: '',
      EndpointIdentifier: '',
      EndpointType: '',
      EngineName: '',
      ExtraConnectionAttributes: '',
      KmsKeyId: '',
      Port: 0,
      ServerName: '',
      Status: '',
      Username: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ModifyReplicationInstance = function ModifyReplicationInstance(aws) {
  var allocatedStorage = aws.params.AllocatedStorage /* Type integer */;
  var allowMajorVersionUpgrade = aws.params.AllowMajorVersionUpgrade /* Type boolean */;
  var applyImmediately = aws.params.ApplyImmediately /* Type boolean */;
  var autoMinorVersionUpgrade = aws.params.AutoMinorVersionUpgrade /* Type boolean */;
  var engineVersion = aws.params.EngineVersion;
  var preferredMaintenanceWindow = aws.params.PreferredMaintenanceWindow;
  var replicationInstanceArn = aws.params.ReplicationInstanceArn;
  var replicationInstanceClass = aws.params.ReplicationInstanceClass;
  var replicationInstanceIdentifier = aws.params.ReplicationInstanceIdentifier;
  if (!replicationInstanceArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ReplicationInstanceArn'];
  }


  // TODO implement code

  var ret = {
    ReplicationInstance: /*Sf*/{
      AllocatedStorage: 0,
      AutoMinorVersionUpgrade: false,
      AvailabilityZone: '',
      EngineVersion: '',
      InstanceCreateTime: awsCommon.timestamp(),
      KmsKeyId: '',
      PendingModifiedValues: {
        AllocatedStorage: 0,
        EngineVersion: '',
        ReplicationInstanceClass: '',
      },
      PreferredMaintenanceWindow: '',
      PubliclyAccessible: false,
      ReplicationInstanceArn: '',
      ReplicationInstanceClass: '',
      ReplicationInstanceIdentifier: '',
      ReplicationInstancePrivateIpAddress: '',
      ReplicationInstancePublicIpAddress: '',
      ReplicationInstanceStatus: '',
      ReplicationSubnetGroup: /*Si*/{
        ReplicationSubnetGroupDescription: '',
        ReplicationSubnetGroupIdentifier: '',
        SubnetGroupStatus: '',
        Subnets: [ {
          SubnetAvailabilityZone: {
            Name: '',
          },
          SubnetIdentifier: '',
          SubnetStatus: '',
        }, /* ...*/ ],
        VpcId: '',
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ModifyReplicationSubnetGroup = function ModifyReplicationSubnetGroup(aws) {
  var replicationSubnetGroupDescription = aws.params.ReplicationSubnetGroupDescription;
  var replicationSubnetGroupIdentifier = aws.params.ReplicationSubnetGroupIdentifier;
  var subnetIds = aws.params.SubnetIds;
  if (!replicationSubnetGroupIdentifier) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ReplicationSubnetGroupIdentifier'];
  }
  if (!subnetIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SubnetIds'];
  }


  // TODO implement code

  var ret = {
    ReplicationSubnetGroup: /*Si*/{
      ReplicationSubnetGroupDescription: '',
      ReplicationSubnetGroupIdentifier: '',
      SubnetGroupStatus: '',
      Subnets: [ {
        SubnetAvailabilityZone: {
          Name: '',
        },
        SubnetIdentifier: '',
        SubnetStatus: '',
      }, /* ...*/ ],
      VpcId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RefreshSchemas = function RefreshSchemas(aws) {
  var endpointArn = aws.params.EndpointArn;
  var replicationInstanceArn = aws.params.ReplicationInstanceArn;
  if (!endpointArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EndpointArn'];
  }
  if (!replicationInstanceArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ReplicationInstanceArn'];
  }


  // TODO implement code

  var ret = {
    RefreshSchemasStatus: /*S1t*/{
      EndpointArn: '',
      LastFailureMessage: '',
      LastRefreshDate: awsCommon.timestamp(),
      ReplicationInstanceArn: '',
      Status: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RemoveTagsFromResource = function RemoveTagsFromResource(aws) {
  var resourceArn = aws.params.ResourceArn;
  var tagKeys = aws.params.TagKeys /* Type list */;
  if (!resourceArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ResourceArn'];
  }
  if (!tagKeys) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TagKeys'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.StartReplicationTask = function StartReplicationTask(aws) {
  var cdcStartTime = aws.params.CdcStartTime /* Type timestamp */;
  var replicationTaskArn = aws.params.ReplicationTaskArn;
  var startReplicationTaskType = aws.params.StartReplicationTaskType;
  if (!replicationTaskArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ReplicationTaskArn'];
  }
  if (!startReplicationTaskType) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter StartReplicationTaskType'];
  }


  // TODO implement code

  var ret = {
    ReplicationTask: /*Su*/{
      LastFailureMessage: '',
      MigrationType: '',
      ReplicationInstanceArn: '',
      ReplicationTaskArn: '',
      ReplicationTaskCreationDate: awsCommon.timestamp(),
      ReplicationTaskIdentifier: '',
      ReplicationTaskSettings: '',
      ReplicationTaskStartDate: awsCommon.timestamp(),
      ReplicationTaskStats: {
        ElapsedTimeMillis: 0 /*Long*/,
        FullLoadProgressPercent: 0,
        TablesErrored: 0,
        TablesLoaded: 0,
        TablesLoading: 0,
        TablesQueued: 0,
      },
      SourceEndpointArn: '',
      Status: '',
      TableMappings: '',
      TargetEndpointArn: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.StopReplicationTask = function StopReplicationTask(aws) {
  var replicationTaskArn = aws.params.ReplicationTaskArn;
  if (!replicationTaskArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ReplicationTaskArn'];
  }


  // TODO implement code

  var ret = {
    ReplicationTask: /*Su*/{
      LastFailureMessage: '',
      MigrationType: '',
      ReplicationInstanceArn: '',
      ReplicationTaskArn: '',
      ReplicationTaskCreationDate: awsCommon.timestamp(),
      ReplicationTaskIdentifier: '',
      ReplicationTaskSettings: '',
      ReplicationTaskStartDate: awsCommon.timestamp(),
      ReplicationTaskStats: {
        ElapsedTimeMillis: 0 /*Long*/,
        FullLoadProgressPercent: 0,
        TablesErrored: 0,
        TablesLoaded: 0,
        TablesLoading: 0,
        TablesQueued: 0,
      },
      SourceEndpointArn: '',
      Status: '',
      TableMappings: '',
      TargetEndpointArn: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.TestConnection = function TestConnection(aws) {
  var endpointArn = aws.params.EndpointArn;
  var replicationInstanceArn = aws.params.ReplicationInstanceArn;
  if (!endpointArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EndpointArn'];
  }
  if (!replicationInstanceArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ReplicationInstanceArn'];
  }


  // TODO implement code

  var ret = {
    Connection: /*S1f*/{
      EndpointArn: '',
      EndpointIdentifier: '',
      LastFailureMessage: '',
      ReplicationInstanceArn: '',
      ReplicationInstanceIdentifier: '',
      Status: '',
    },
  };
  return [200, ret];
};
