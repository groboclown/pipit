'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * AWS IoT version 2015-05-28
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.SetLoggingOptions = aws_common.as(
    "/loggingOptions",
    function SetLoggingOptions(aws) {
        var loggingOptionsPayload = aws.params['loggingOptionsPayload'] /* structure */;
        if (! loggingOptionsPayload) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter loggingOptionsPayload"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.UpdateCertificate = aws_common.as(
    "PUT",
    "/certificates/:certificateId",
    function UpdateCertificate(aws) {
        var newStatus = aws.params['newStatus'];
        var certificateId = aws.reqParams.certificateId;
        if (! certificateId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter certificateId"];
        }        if (! newStatus) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter newStatus"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.GetPolicy = aws_common.as(
    "GET",
    "/policies/:policyName",
    function GetPolicy(aws) {
        var policyName = aws.reqParams.policyName;
        if (! policyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter policyName"];
        }

        // TODO implement code

        var ret = {
            policyArn: "",
            policyDocument: "",
            policyName: "",
            defaultVersionId: ""
        };
        return [200, ret];
    });
module.exports.ListPrincipalThings = aws_common.as(
    "GET",
    "/principals/things",
    function ListPrincipalThings(aws) {
        var principal = aws.params['principal'];
        var maxResults = aws.params['maxResults'] /* integer */;
        var nextToken = aws.params['nextToken'];
        if (! principal) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter principal"];
        }

        // TODO implement code

        var ret = {
            things: [ "" /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    });
module.exports.EnableTopicRule = aws_common.as(
    "/rules/:ruleName/enable",
    function EnableTopicRule(aws) {
        var ruleName = aws.reqParams.ruleName;
        if (! ruleName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ruleName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.CancelCertificateTransfer = aws_common.as(
    "PATCH",
    "/cancel-certificate-transfer/:certificateId",
    function CancelCertificateTransfer(aws) {
        var certificateId = aws.reqParams.certificateId;
        if (! certificateId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter certificateId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.ListTopicRules = aws_common.as(
    "GET",
    "/rules",
    function ListTopicRules(aws) {
        var topic = aws.params['topic'];
        var ruleDisabled = aws.params['ruleDisabled'] /* boolean */;
        var maxResults = aws.params['maxResults'] /* integer */;
        var nextToken = aws.params['nextToken'];


        // TODO implement code

        var ret = {
            rules: [ {
                createdAt: now(),
                ruleName: "",
                topicPattern: "",
                ruleArn: "",
                ruleDisabled: false
            } /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    });
module.exports.AttachPrincipalPolicy = aws_common.as(
    "PUT",
    "/principal-policies/:policyName",
    function AttachPrincipalPolicy(aws) {
        var principal = aws.params['principal'];
        var policyName = aws.reqParams.policyName;
        if (! policyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter policyName"];
        }        if (! principal) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter principal"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.CreatePolicyVersion = aws_common.as(
    "/policies/:policyName/version",
    function CreatePolicyVersion(aws) {
        var policyDocument = aws.params['policyDocument'];
        var policyName = aws.reqParams.policyName;
        var setAsDefault = aws.params['setAsDefault'] /* boolean */;
        if (! policyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter policyName"];
        }        if (! policyDocument) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter policyDocument"];
        }

        // TODO implement code

        var ret = {
            policyDocument: "",
            policyArn: "",
            policyVersionId: "",
            isDefaultVersion: false
        };
        return [200, ret];
    });
module.exports.ListThingPrincipals = aws_common.as(
    "GET",
    "/things/:thingName/principals",
    function ListThingPrincipals(aws) {
        var thingName = aws.reqParams.thingName;
        if (! thingName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter thingName"];
        }

        // TODO implement code

        var ret = {
            principals: [ "" /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.ReplaceTopicRule = aws_common.as(
    "PATCH",
    "/rules/:ruleName",
    function ReplaceTopicRule(aws) {
        var topicRulePayload = aws.params['topicRulePayload'];
        var ruleName = aws.reqParams.ruleName;
        if (! ruleName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ruleName"];
        }        if (! topicRulePayload) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter topicRulePayload"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.DescribeThing = aws_common.as(
    "GET",
    "/things/:thingName",
    function DescribeThing(aws) {
        var thingName = aws.reqParams.thingName;
        if (! thingName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter thingName"];
        }

        // TODO implement code

        var ret = {
            attributes: /*Sw*/{} /* map */,
            defaultClientId: "",
            thingName: ""
        };
        return [200, ret];
    });
module.exports.ListPolicyVersions = aws_common.as(
    "GET",
    "/policies/:policyName/version",
    function ListPolicyVersions(aws) {
        var policyName = aws.reqParams.policyName;
        if (! policyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter policyName"];
        }

        // TODO implement code

        var ret = {
            policyVersions: [ {
                createDate: now(),
                versionId: "",
                isDefaultVersion: false
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.CreateKeysAndCertificate = aws_common.as(
    "/keys-and-certificate",
    function CreateKeysAndCertificate(aws) {
        var setAsActive = aws.params['setAsActive'] /* boolean */;


        // TODO implement code

        var ret = {
            certificatePem: "",
            keyPair: {
                PrivateKey: "",
                PublicKey: ""
            },
            certificateArn: "",
            certificateId: ""
        };
        return [200, ret];
    });
module.exports.ListPolicies = aws_common.as(
    "GET",
    "/policies",
    function ListPolicies(aws) {
        var marker = aws.params['marker'];
        var pageSize = aws.params['pageSize'] /* integer */;
        var ascendingOrder = aws.params['ascendingOrder'] /* boolean */;


        // TODO implement code

        var ret = {
            policies: /*S35*/[ {
                policyArn: "",
                policyName: ""
            } /*, ...*/ ],
            nextMarker: ""
        };
        return [200, ret];
    });
module.exports.DisableTopicRule = aws_common.as(
    "/rules/:ruleName/disable",
    function DisableTopicRule(aws) {
        var ruleName = aws.reqParams.ruleName;
        if (! ruleName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ruleName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.CreateTopicRule = aws_common.as(
    "/rules/:ruleName",
    function CreateTopicRule(aws) {
        var topicRulePayload = aws.params['topicRulePayload'];
        var ruleName = aws.reqParams.ruleName;
        if (! ruleName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ruleName"];
        }        if (! topicRulePayload) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter topicRulePayload"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.DescribeEndpoint = aws_common.as(
    "GET",
    "/endpoint",
    function DescribeEndpoint(aws) {


        // TODO implement code

        var ret = {
            endpointAddress: ""
        };
        return [200, ret];
    });
module.exports.DeletePolicyVersion = aws_common.as(
    "DELETE",
    "/policies/:policyName/version/:policyVersionId",
    function DeletePolicyVersion(aws) {
        var policyVersionId = aws.reqParams.policyVersionId;
        var policyName = aws.reqParams.policyName;
        if (! policyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter policyName"];
        }        if (! policyVersionId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter policyVersionId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.DeleteTopicRule = aws_common.as(
    "DELETE",
    "/rules/:ruleName",
    function DeleteTopicRule(aws) {
        var ruleName = aws.reqParams.ruleName;
        if (! ruleName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ruleName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.DetachPrincipalPolicy = aws_common.as(
    "DELETE",
    "/principal-policies/:policyName",
    function DetachPrincipalPolicy(aws) {
        var principal = aws.params['principal'];
        var policyName = aws.reqParams.policyName;
        if (! policyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter policyName"];
        }        if (! principal) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter principal"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.AttachThingPrincipal = aws_common.as(
    "PUT",
    "/things/:thingName/principals",
    function AttachThingPrincipal(aws) {
        var principal = aws.params['principal'];
        var thingName = aws.reqParams.thingName;
        if (! thingName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter thingName"];
        }        if (! principal) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter principal"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    });
module.exports.DeletePolicy = aws_common.as(
    "DELETE",
    "/policies/:policyName",
    function DeletePolicy(aws) {
        var policyName = aws.reqParams.policyName;
        if (! policyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter policyName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.SetDefaultPolicyVersion = aws_common.as(
    "PATCH",
    "/policies/:policyName/version/:policyVersionId",
    function SetDefaultPolicyVersion(aws) {
        var policyVersionId = aws.reqParams.policyVersionId;
        var policyName = aws.reqParams.policyName;
        if (! policyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter policyName"];
        }        if (! policyVersionId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter policyVersionId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.CreateThing = aws_common.as(
    "/things/:thingName",
    function CreateThing(aws) {
        var attributePayload = aws.params['attributePayload'];
        var thingName = aws.reqParams.thingName;
        if (! thingName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter thingName"];
        }

        // TODO implement code

        var ret = {
            thingArn: "",
            thingName: ""
        };
        return [200, ret];
    });
module.exports.ListCertificates = aws_common.as(
    "GET",
    "/certificates",
    function ListCertificates(aws) {
        var marker = aws.params['marker'];
        var pageSize = aws.params['pageSize'] /* integer */;
        var ascendingOrder = aws.params['ascendingOrder'] /* boolean */;


        // TODO implement code

        var ret = {
            certificates: [ {
                status: "",
                creationDate: now(),
                certificateArn: "",
                certificateId: ""
            } /*, ...*/ ],
            nextMarker: ""
        };
        return [200, ret];
    });
module.exports.ListPrincipalPolicies = aws_common.as(
    "GET",
    "/principal-policies",
    function ListPrincipalPolicies(aws) {
        var principal = aws.params['principal'];
        var pageSize = aws.params['pageSize'] /* integer */;
        var ascendingOrder = aws.params['ascendingOrder'] /* boolean */;
        var marker = aws.params['marker'];
        if (! principal) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter principal"];
        }

        // TODO implement code

        var ret = {
            policies: /*S35*/[ {
                policyArn: "",
                policyName: ""
            } /*, ...*/ ],
            nextMarker: ""
        };
        return [200, ret];
    });
module.exports.DeleteThing = aws_common.as(
    "DELETE",
    "/things/:thingName",
    function DeleteThing(aws) {
        var thingName = aws.reqParams.thingName;
        if (! thingName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter thingName"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    });
module.exports.GetPolicyVersion = aws_common.as(
    "GET",
    "/policies/:policyName/version/:policyVersionId",
    function GetPolicyVersion(aws) {
        var policyVersionId = aws.reqParams.policyVersionId;
        var policyName = aws.reqParams.policyName;
        if (! policyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter policyName"];
        }        if (! policyVersionId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter policyVersionId"];
        }

        // TODO implement code

        var ret = {
            policyName: "",
            policyDocument: "",
            policyArn: "",
            policyVersionId: "",
            isDefaultVersion: false
        };
        return [200, ret];
    });
module.exports.AcceptCertificateTransfer = aws_common.as(
    "PATCH",
    "/accept-certificate-transfer/:certificateId",
    function AcceptCertificateTransfer(aws) {
        var setAsActive = aws.params['setAsActive'] /* boolean */;
        var certificateId = aws.reqParams.certificateId;
        if (! certificateId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter certificateId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.CreateCertificateFromCsr = aws_common.as(
    "/certificates",
    function CreateCertificateFromCsr(aws) {
        var setAsActive = aws.params['setAsActive'] /* boolean */;
        var certificateSigningRequest = aws.params['certificateSigningRequest'];
        if (! certificateSigningRequest) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter certificateSigningRequest"];
        }

        // TODO implement code

        var ret = {
            certificatePem: "",
            certificateArn: "",
            certificateId: ""
        };
        return [200, ret];
    });
module.exports.ListThings = aws_common.as(
    "GET",
    "/things",
    function ListThings(aws) {
        var attributeValue = aws.params['attributeValue'];
        var attributeName = aws.params['attributeName'];
        var maxResults = aws.params['maxResults'] /* integer */;
        var nextToken = aws.params['nextToken'];


        // TODO implement code

        var ret = {
            things: [ {
                attributes: /*Sw*/{} /* map */,
                thingName: ""
            } /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    });
module.exports.DetachThingPrincipal = aws_common.as(
    "DELETE",
    "/things/:thingName/principals",
    function DetachThingPrincipal(aws) {
        var principal = aws.params['principal'];
        var thingName = aws.reqParams.thingName;
        if (! thingName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter thingName"];
        }        if (! principal) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter principal"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    });
module.exports.TransferCertificate = aws_common.as(
    "PATCH",
    "/transfer-certificate/:certificateId",
    function TransferCertificate(aws) {
        var targetAwsAccount = aws.params['targetAwsAccount'];
        var certificateId = aws.reqParams.certificateId;
        if (! certificateId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter certificateId"];
        }        if (! targetAwsAccount) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter targetAwsAccount"];
        }

        // TODO implement code

        var ret = {
            transferredCertificateArn: ""
        };
        return [200, ret];
    });
module.exports.GetTopicRule = aws_common.as(
    "GET",
    "/rules/:ruleName",
    function GetTopicRule(aws) {
        var ruleName = aws.reqParams.ruleName;
        if (! ruleName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ruleName"];
        }

        // TODO implement code

        var ret = {
            rule: {
                ruleName: "",
                createdAt: now(),
                actions: /*S16*/[ {
                    sns: {
                        targetArn: "",
                        roleArn: ""
                    },
                    firehose: {
                        roleArn: "",
                        deliveryStreamName: ""
                    },
                    sqs: {
                        queueUrl: "",
                        roleArn: "",
                        useBase64: false
                    },
                    republish: {
                        topic: "",
                        roleArn: ""
                    },
                    dynamoDB: {
                        rangeKeyValue: "",
                        hashKeyValue: "",
                        rangeKeyField: "",
                        roleArn: "",
                        payloadField: "",
                        tableName: "",
                        hashKeyField: ""
                    },
                    kinesis: {
                        partitionKey: "",
                        streamName: "",
                        roleArn: ""
                    },
                    s3: {
                        key: "",
                        roleArn: "",
                        bucketName: ""
                    },
                    lambda: {
                        functionArn: ""
                    }
                } /*, ...*/ ],
                sql: "",
                description: "",
                ruleDisabled: false
            },
            ruleArn: ""
        };
        return [200, ret];
    });
module.exports.DeleteCertificate = aws_common.as(
    "DELETE",
    "/certificates/:certificateId",
    function DeleteCertificate(aws) {
        var certificateId = aws.reqParams.certificateId;
        if (! certificateId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter certificateId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.UpdateThing = aws_common.as(
    "PATCH",
    "/things/:thingName",
    function UpdateThing(aws) {
        var attributePayload = aws.params['attributePayload'];
        var thingName = aws.reqParams.thingName;
        if (! thingName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter thingName"];
        }        if (! attributePayload) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter attributePayload"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    });
module.exports.RejectCertificateTransfer = aws_common.as(
    "PATCH",
    "/reject-certificate-transfer/:certificateId",
    function RejectCertificateTransfer(aws) {
        var certificateId = aws.reqParams.certificateId;
        if (! certificateId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter certificateId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.CreatePolicy = aws_common.as(
    "/policies/:policyName",
    function CreatePolicy(aws) {
        var policyDocument = aws.params['policyDocument'];
        var policyName = aws.reqParams.policyName;
        if (! policyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter policyName"];
        }        if (! policyDocument) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter policyDocument"];
        }

        // TODO implement code

        var ret = {
            policyArn: "",
            policyDocument: "",
            policyName: "",
            policyVersionId: ""
        };
        return [200, ret];
    });
module.exports.DescribeCertificate = aws_common.as(
    "GET",
    "/certificates/:certificateId",
    function DescribeCertificate(aws) {
        var certificateId = aws.reqParams.certificateId;
        if (! certificateId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter certificateId"];
        }

        // TODO implement code

        var ret = {
            certificateDescription: {
                status: "",
                certificatePem: "",
                creationDate: now(),
                certificateArn: "",
                certificateId: "",
                ownedBy: "",
                lastModifiedDate: now()
            }
        };
        return [200, ret];
    });
module.exports.GetLoggingOptions = aws_common.as(
    "GET",
    "/loggingOptions",
    function GetLoggingOptions(aws) {


        // TODO implement code

        var ret = {
            roleArn: "",
            logLevel: ""
        };
        return [200, ret];
    });
