'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * AWS CloudTrail version 2013-11-01
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.UpdateTrail = function UpdateTrail(aws) {
        var Name = aws.params.Name;
        var IsMultiRegionTrail = aws.params.IsMultiRegionTrail /* boolean */;
        var IncludeGlobalServiceEvents = aws.params.IncludeGlobalServiceEvents /* boolean */;
        var SnsTopicName = aws.params.SnsTopicName;
        var KmsKeyId = aws.params.KmsKeyId;
        var S3KeyPrefix = aws.params.S3KeyPrefix;
        var CloudWatchLogsRoleArn = aws.params.CloudWatchLogsRoleArn;
        var EnableLogFileValidation = aws.params.EnableLogFileValidation /* boolean */;
        var CloudWatchLogsLogGroupArn = aws.params.CloudWatchLogsLogGroupArn;
        var S3BucketName = aws.params.S3BucketName;
        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }

        // TODO implement code

        var ret = {
            Name: "",
            IsMultiRegionTrail: false,
            CloudWatchLogsRoleArn: "",
            LogFileValidationEnabled: false,
            IncludeGlobalServiceEvents: false,
            SnsTopicName: "",
            KmsKeyId: "",
            S3KeyPrefix: "",
            TrailARN: "",
            CloudWatchLogsLogGroupArn: "",
            S3BucketName: ""
        };
        return [200, ret];
    }
module.exports.DeleteTrail = function DeleteTrail(aws) {
        var Name = aws.params.Name;
        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.LookupEvents = function LookupEvents(aws) {
        var MaxResults = aws.params.MaxResults /* integer */;
        var EndTime = aws.params.EndTime /* timestamp */;
        var LookupAttributes = aws.params.LookupAttributes /* list */;
        var NextToken = aws.params.NextToken;
        var StartTime = aws.params.StartTime /* timestamp */;


        // TODO implement code

        var ret = {
            Events: [ {
                Username: "",
                EventName: "",
                CloudTrailEvent: "",
                EventId: "",
                EventTime: now(),
                Resources: [ {
                    ResourceType: "",
                    ResourceName: ""
                } /*, ...*/ ]
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.CreateTrail = function CreateTrail(aws) {
        var Name = aws.params.Name;
        var IsMultiRegionTrail = aws.params.IsMultiRegionTrail /* boolean */;
        var IncludeGlobalServiceEvents = aws.params.IncludeGlobalServiceEvents /* boolean */;
        var SnsTopicName = aws.params.SnsTopicName;
        var KmsKeyId = aws.params.KmsKeyId;
        var S3KeyPrefix = aws.params.S3KeyPrefix;
        var CloudWatchLogsRoleArn = aws.params.CloudWatchLogsRoleArn;
        var EnableLogFileValidation = aws.params.EnableLogFileValidation /* boolean */;
        var CloudWatchLogsLogGroupArn = aws.params.CloudWatchLogsLogGroupArn;
        var S3BucketName = aws.params.S3BucketName;
        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }        if (! S3BucketName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter S3BucketName"];
        }

        // TODO implement code

        var ret = {
            Name: "",
            IsMultiRegionTrail: false,
            CloudWatchLogsRoleArn: "",
            LogFileValidationEnabled: false,
            IncludeGlobalServiceEvents: false,
            SnsTopicName: "",
            KmsKeyId: "",
            S3KeyPrefix: "",
            TrailARN: "",
            CloudWatchLogsLogGroupArn: "",
            S3BucketName: ""
        };
        return [200, ret];
    }
module.exports.GetTrailStatus = function GetTrailStatus(aws) {
        var Name = aws.params.Name;
        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }

        // TODO implement code

        var ret = {
            LatestDeliveryTime: now(),
            LatestDeliveryError: "",
            LatestNotificationError: "",
            LatestNotificationAttemptSucceeded: "",
            TimeLoggingStopped: "",
            LatestNotificationAttemptTime: "",
            TimeLoggingStarted: "",
            LatestCloudWatchLogsDeliveryError: "",
            StopLoggingTime: now(),
            LatestDeliveryAttemptSucceeded: "",
            LatestNotificationTime: now(),
            IsLogging: false,
            LatestDeliveryAttemptTime: "",
            LatestDigestDeliveryTime: now(),
            LatestDigestDeliveryError: "",
            LatestCloudWatchLogsDeliveryTime: now(),
            StartLoggingTime: now()
        };
        return [200, ret];
    }
module.exports.AddTags = function AddTags(aws) {
        var TagsList = aws.params.TagsList;
        var ResourceId = aws.params.ResourceId;
        if (! ResourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResourceId"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.DescribeTrails = function DescribeTrails(aws) {
        var trailNameList = aws.params.trailNameList /* list */;
        var includeShadowTrails = aws.params.includeShadowTrails /* boolean */;


        // TODO implement code

        var ret = {
            trailList: [ {
                Name: "",
                IsMultiRegionTrail: false,
                IncludeGlobalServiceEvents: false,
                LogFileValidationEnabled: false,
                CloudWatchLogsLogGroupArn: "",
                TrailARN: "",
                CloudWatchLogsRoleArn: "",
                HomeRegion: "",
                SnsTopicName: "",
                KmsKeyId: "",
                S3KeyPrefix: "",
                S3BucketName: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.StartLogging = function StartLogging(aws) {
        var Name = aws.params.Name;
        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.RemoveTags = function RemoveTags(aws) {
        var TagsList = aws.params.TagsList;
        var ResourceId = aws.params.ResourceId;
        if (! ResourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResourceId"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.StopLogging = function StopLogging(aws) {
        var Name = aws.params.Name;
        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.ListPublicKeys = function ListPublicKeys(aws) {
        var EndTime = aws.params.EndTime /* timestamp */;
        var NextToken = aws.params.NextToken;
        var StartTime = aws.params.StartTime /* timestamp */;


        // TODO implement code

        var ret = {
            PublicKeyList: [ {
                ValidityEndTime: now(),
                Value: null /*blob*/,
                Fingerprint: "",
                ValidityStartTime: now()
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.ListTags = function ListTags(aws) {
        var ResourceIdList = aws.params.ResourceIdList /* list */;
        var NextToken = aws.params.NextToken;
        if (! ResourceIdList) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResourceIdList"];
        }

        // TODO implement code

        var ret = {
            ResourceTagList: [ {
                TagsList: /*S3*/[ {
                    Value: "",
                    Key: ""
                } /*, ...*/ ],
                ResourceId: ""
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
