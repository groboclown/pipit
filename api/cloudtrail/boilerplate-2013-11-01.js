'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * AWS CloudTrail version 2013-11-01
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol json
require('../../lib/aws-common/shape_http')('json', module.exports, null);
// -----------------------------------
module.exports.StartLogging = function StartLogging(aws) {
  var name = aws.params.Name;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.RemoveTags = function RemoveTags(aws) {
  var resourceId = aws.params.ResourceId;
  var tagsList = aws.params.TagsList;
  if (!resourceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ResourceId'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListTags = function ListTags(aws) {
  var nextToken = aws.params.NextToken;
  var resourceIdList = aws.params.ResourceIdList /* Type list */;
  if (!resourceIdList) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ResourceIdList'];
  }


  // TODO implement code

  var ret = {
    ResourceTagList: [ {
      ResourceId: '',
      TagsList: /*S3*/[ {
        Value: '',
        Key: '',
      }, /* ...*/ ],
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.StopLogging = function StopLogging(aws) {
  var name = aws.params.Name;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeTrails = function DescribeTrails(aws) {
  var trailNameList = aws.params.trailNameList /* Type list */;
  var includeShadowTrails = aws.params.includeShadowTrails /* Type boolean */;


  // TODO implement code

  var ret = {
    trailList: [ {
      TrailARN: '',
      KmsKeyId: '',
      S3KeyPrefix: '',
      SnsTopicName: '',
      LogFileValidationEnabled: false,
      CloudWatchLogsLogGroupArn: '',
      HomeRegion: '',
      IsMultiRegionTrail: false,
      IncludeGlobalServiceEvents: false,
      Name: '',
      S3BucketName: '',
      CloudWatchLogsRoleArn: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteTrail = function DeleteTrail(aws) {
  var name = aws.params.Name;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetTrailStatus = function GetTrailStatus(aws) {
  var name = aws.params.Name;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }


  // TODO implement code

  var ret = {
    LatestDigestDeliveryError: '',
    StartLoggingTime: awsCommon.timestamp(),
    LatestNotificationTime: awsCommon.timestamp(),
    LatestNotificationError: '',
    StopLoggingTime: awsCommon.timestamp(),
    TimeLoggingStarted: '',
    TimeLoggingStopped: '',
    LatestDeliveryAttemptTime: '',
    LatestDeliveryError: '',
    IsLogging: false,
    LatestCloudWatchLogsDeliveryError: '',
    LatestDeliveryAttemptSucceeded: '',
    LatestDigestDeliveryTime: awsCommon.timestamp(),
    LatestDeliveryTime: awsCommon.timestamp(),
    LatestNotificationAttemptTime: '',
    LatestNotificationAttemptSucceeded: '',
    LatestCloudWatchLogsDeliveryTime: awsCommon.timestamp(),
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateTrail = function UpdateTrail(aws) {
  var enableLogFileValidation = aws.params.EnableLogFileValidation /* Type boolean */;
  var kmsKeyId = aws.params.KmsKeyId;
  var isMultiRegionTrail = aws.params.IsMultiRegionTrail /* Type boolean */;
  var includeGlobalServiceEvents = aws.params.IncludeGlobalServiceEvents /* Type boolean */;
  var s3KeyPrefix = aws.params.S3KeyPrefix;
  var name = aws.params.Name;
  var s3BucketName = aws.params.S3BucketName;
  var cloudWatchLogsRoleArn = aws.params.CloudWatchLogsRoleArn;
  var snsTopicName = aws.params.SnsTopicName;
  var cloudWatchLogsLogGroupArn = aws.params.CloudWatchLogsLogGroupArn;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }


  // TODO implement code

  var ret = {
    KmsKeyId: '',
    TrailARN: '',
    CloudWatchLogsRoleArn: '',
    IsMultiRegionTrail: false,
    IncludeGlobalServiceEvents: false,
    S3KeyPrefix: '',
    Name: '',
    S3BucketName: '',
    LogFileValidationEnabled: false,
    SnsTopicName: '',
    CloudWatchLogsLogGroupArn: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.LookupEvents = function LookupEvents(aws) {
  var endTime = aws.params.EndTime /* Type timestamp */;
  var lookupAttributes = aws.params.LookupAttributes /* Type list */;
  var startTime = aws.params.StartTime /* Type timestamp */;
  var nextToken = aws.params.NextToken;
  var maxResults = aws.params.MaxResults /* Type integer */;


  // TODO implement code

  var ret = {
    NextToken: '',
    Events: [ {
      Username: '',
      Resources: [ {
        ResourceName: '',
        ResourceType: '',
      }, /* ...*/ ],
      EventTime: awsCommon.timestamp(),
      CloudTrailEvent: '',
      EventId: '',
      EventName: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateTrail = function CreateTrail(aws) {
  var enableLogFileValidation = aws.params.EnableLogFileValidation /* Type boolean */;
  var kmsKeyId = aws.params.KmsKeyId;
  var isMultiRegionTrail = aws.params.IsMultiRegionTrail /* Type boolean */;
  var includeGlobalServiceEvents = aws.params.IncludeGlobalServiceEvents /* Type boolean */;
  var s3KeyPrefix = aws.params.S3KeyPrefix;
  var name = aws.params.Name;
  var s3BucketName = aws.params.S3BucketName;
  var cloudWatchLogsRoleArn = aws.params.CloudWatchLogsRoleArn;
  var snsTopicName = aws.params.SnsTopicName;
  var cloudWatchLogsLogGroupArn = aws.params.CloudWatchLogsLogGroupArn;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }
  if (!s3BucketName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter S3BucketName'];
  }


  // TODO implement code

  var ret = {
    KmsKeyId: '',
    TrailARN: '',
    CloudWatchLogsRoleArn: '',
    IsMultiRegionTrail: false,
    IncludeGlobalServiceEvents: false,
    S3KeyPrefix: '',
    Name: '',
    S3BucketName: '',
    LogFileValidationEnabled: false,
    SnsTopicName: '',
    CloudWatchLogsLogGroupArn: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListPublicKeys = function ListPublicKeys(aws) {
  var endTime = aws.params.EndTime /* Type timestamp */;
  var nextToken = aws.params.NextToken;
  var startTime = aws.params.StartTime /* Type timestamp */;


  // TODO implement code

  var ret = {
    PublicKeyList: [ {
      ValidityEndTime: awsCommon.timestamp(),
      ValidityStartTime: awsCommon.timestamp(),
      Value: null /*Blob*/,
      Fingerprint: '',
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AddTags = function AddTags(aws) {
  var resourceId = aws.params.ResourceId;
  var tagsList = aws.params.TagsList;
  if (!resourceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ResourceId'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
