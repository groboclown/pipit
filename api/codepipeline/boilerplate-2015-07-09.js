'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * AWS CodePipeline version 2015-07-09
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol json
require('../../lib/aws-common/shape_http')('json', module.exports, null);
// -----------------------------------
module.exports.AcknowledgeJob = function AcknowledgeJob(aws) {
  var jobId = aws.params.jobId;
  var nonce = aws.params.nonce;
  if (!jobId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter jobId'];
  }
  if (!nonce) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter nonce'];
  }


  // TODO implement code

  var ret = {
    status: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AcknowledgeThirdPartyJob = function AcknowledgeThirdPartyJob(aws) {
  var clientToken = aws.params.clientToken;
  var jobId = aws.params.jobId;
  var nonce = aws.params.nonce;
  if (!clientToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter clientToken'];
  }
  if (!jobId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter jobId'];
  }
  if (!nonce) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter nonce'];
  }


  // TODO implement code

  var ret = {
    status: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateCustomActionType = function CreateCustomActionType(aws) {
  var category = aws.params.category;
  var configurationProperties = aws.params.configurationProperties;
  var inputArtifactDetails = aws.params.inputArtifactDetails;
  var outputArtifactDetails = aws.params.outputArtifactDetails;
  var provider = aws.params.provider;
  var settings = aws.params.settings;
  var version = aws.params.version;
  if (!category) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter category'];
  }
  if (!inputArtifactDetails) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter inputArtifactDetails'];
  }
  if (!outputArtifactDetails) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter outputArtifactDetails'];
  }
  if (!provider) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter provider'];
  }
  if (!version) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter version'];
  }


  // TODO implement code

  var ret = {
    actionType: /*Sr*/{
      actionConfigurationProperties: /*Sh*/[ {
        description: '',
        key: false,
        name: '',
        queryable: false,
        required: false,
        secret: false,
        type: '',
      }, /* ...*/ ],
      id: /*Ss*/{
        category: '',
        owner: '',
        provider: '',
        version: '',
      },
      inputArtifactDetails: /*Sn*/{
        maximumCount: 0,
        minimumCount: 0,
      },
      outputArtifactDetails: /*Sn*/{
        maximumCount: 0,
        minimumCount: 0,
      },
      settings: /*Se*/{
        entityUrlTemplate: '',
        executionUrlTemplate: '',
        revisionUrlTemplate: '',
        thirdPartyConfigurationUrl: '',
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreatePipeline = function CreatePipeline(aws) {
  var pipeline = aws.params.pipeline;
  if (!pipeline) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter pipeline'];
  }


  // TODO implement code

  var ret = {
    pipeline: /*Sv*/{
      artifactStore: {
        encryptionKey: /*S11*/{
          id: '',
          type: '',
        },
        location: '',
        type: '',
      },
      name: '',
      roleArn: '',
      stages: [ {
        actions: [ {
          actionTypeId: /*Ss*/{
            category: '',
            owner: '',
            provider: '',
            version: '',
          },
          configuration: /*S1f*/{} /*Map*/,
          inputArtifacts: [ {
            name: '',
          }, /* ...*/ ],
          name: '',
          outputArtifacts: [ {
            name: '',
          }, /* ...*/ ],
          roleArn: '',
          runOrder: 0,
        }, /* ...*/ ],
        blockers: [ {
          name: '',
          type: '',
        }, /* ...*/ ],
        name: '',
      }, /* ...*/ ],
      version: 0,
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteCustomActionType = function DeleteCustomActionType(aws) {
  var category = aws.params.category;
  var provider = aws.params.provider;
  var version = aws.params.version;
  if (!category) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter category'];
  }
  if (!provider) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter provider'];
  }
  if (!version) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter version'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeletePipeline = function DeletePipeline(aws) {
  var name = aws.params.name;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter name'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DisableStageTransition = function DisableStageTransition(aws) {
  var pipelineName = aws.params.pipelineName;
  var reason = aws.params.reason;
  var stageName = aws.params.stageName;
  var transitionType = aws.params.transitionType;
  if (!pipelineName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter pipelineName'];
  }
  if (!reason) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter reason'];
  }
  if (!stageName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter stageName'];
  }
  if (!transitionType) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter transitionType'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.EnableStageTransition = function EnableStageTransition(aws) {
  var pipelineName = aws.params.pipelineName;
  var stageName = aws.params.stageName;
  var transitionType = aws.params.transitionType;
  if (!pipelineName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter pipelineName'];
  }
  if (!stageName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter stageName'];
  }
  if (!transitionType) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter transitionType'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.GetJobDetails = function GetJobDetails(aws) {
  var jobId = aws.params.jobId;
  if (!jobId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter jobId'];
  }


  // TODO implement code

  var ret = {
    jobDetails: {
      accountId: '',
      data: /*S1x*/{
        actionConfiguration: /*S1y*/{
          configuration: /*S1f*/{} /*Map*/,
        },
        actionTypeId: /*Ss*/{
          category: '',
          owner: '',
          provider: '',
          version: '',
        },
        artifactCredentials: /*S2a*/{
          accessKeyId: '',
          secretAccessKey: '',
          sessionToken: '',
        },
        continuationToken: '',
        encryptionKey: /*S11*/{
          id: '',
          type: '',
        },
        inputArtifacts: /*S22*/[ {
          location: {
            s3Location: {
              bucketName: '',
              objectKey: '',
            },
            type: '',
          },
          name: '',
          revision: '',
        }, /* ...*/ ],
        outputArtifacts: /*S22*/[ {
          location: {
            s3Location: {
              bucketName: '',
              objectKey: '',
            },
            type: '',
          },
          name: '',
          revision: '',
        }, /* ...*/ ],
        pipelineContext: /*S1z*/{
          action: {
            name: '',
          },
          pipelineName: '',
          stage: {
            name: '',
          },
        },
      },
      id: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetPipeline = function GetPipeline(aws) {
  var name = aws.params.name;
  var version = aws.params.version /* Type integer */;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter name'];
  }


  // TODO implement code

  var ret = {
    pipeline: /*Sv*/{
      artifactStore: {
        encryptionKey: /*S11*/{
          id: '',
          type: '',
        },
        location: '',
        type: '',
      },
      name: '',
      roleArn: '',
      stages: [ {
        actions: [ {
          actionTypeId: /*Ss*/{
            category: '',
            owner: '',
            provider: '',
            version: '',
          },
          configuration: /*S1f*/{} /*Map*/,
          inputArtifacts: [ {
            name: '',
          }, /* ...*/ ],
          name: '',
          outputArtifacts: [ {
            name: '',
          }, /* ...*/ ],
          roleArn: '',
          runOrder: 0,
        }, /* ...*/ ],
        blockers: [ {
          name: '',
          type: '',
        }, /* ...*/ ],
        name: '',
      }, /* ...*/ ],
      version: 0,
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetPipelineState = function GetPipelineState(aws) {
  var name = aws.params.name;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter name'];
  }


  // TODO implement code

  var ret = {
    created: awsCommon.timestamp(),
    pipelineName: '',
    pipelineVersion: 0,
    stageStates: [ {
      actionStates: [ {
        actionName: '',
        currentRevision: /*S2s*/{
          created: awsCommon.timestamp(),
          revisionChangeId: '',
          revisionId: '',
        },
        entityUrl: '',
        latestExecution: {
          errorDetails: {
            code: '',
            message: '',
          },
          externalExecutionId: '',
          externalExecutionUrl: '',
          lastStatusChange: awsCommon.timestamp(),
          percentComplete: 0,
          status: '',
          summary: '',
        },
        revisionUrl: '',
      }, /* ...*/ ],
      inboundTransitionState: {
        disabledReason: '',
        enabled: false,
        lastChangedAt: awsCommon.timestamp(),
        lastChangedBy: '',
      },
      stageName: '',
    }, /* ...*/ ],
    updated: awsCommon.timestamp(),
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetThirdPartyJobDetails = function GetThirdPartyJobDetails(aws) {
  var clientToken = aws.params.clientToken;
  var jobId = aws.params.jobId;
  if (!clientToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter clientToken'];
  }
  if (!jobId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter jobId'];
  }


  // TODO implement code

  var ret = {
    jobDetails: {
      data: {
        actionConfiguration: /*S1y*/{
          configuration: /*S1f*/{} /*Map*/,
        },
        actionTypeId: /*Ss*/{
          category: '',
          owner: '',
          provider: '',
          version: '',
        },
        artifactCredentials: /*S2a*/{
          accessKeyId: '',
          secretAccessKey: '',
          sessionToken: '',
        },
        continuationToken: '',
        encryptionKey: /*S11*/{
          id: '',
          type: '',
        },
        inputArtifacts: /*S22*/[ {
          location: {
            s3Location: {
              bucketName: '',
              objectKey: '',
            },
            type: '',
          },
          name: '',
          revision: '',
        }, /* ...*/ ],
        outputArtifacts: /*S22*/[ {
          location: {
            s3Location: {
              bucketName: '',
              objectKey: '',
            },
            type: '',
          },
          name: '',
          revision: '',
        }, /* ...*/ ],
        pipelineContext: /*S1z*/{
          action: {
            name: '',
          },
          pipelineName: '',
          stage: {
            name: '',
          },
        },
      },
      id: '',
      nonce: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListActionTypes = function ListActionTypes(aws) {
  var actionOwnerFilter = aws.params.actionOwnerFilter;
  var nextToken = aws.params.nextToken;


  // TODO implement code

  var ret = {
    actionTypes: [ /*Sr*/{
      actionConfigurationProperties: /*Sh*/[ {
        description: '',
        key: false,
        name: '',
        queryable: false,
        required: false,
        secret: false,
        type: '',
      }, /* ...*/ ],
      id: /*Ss*/{
        category: '',
        owner: '',
        provider: '',
        version: '',
      },
      inputArtifactDetails: /*Sn*/{
        maximumCount: 0,
        minimumCount: 0,
      },
      outputArtifactDetails: /*Sn*/{
        maximumCount: 0,
        minimumCount: 0,
      },
      settings: /*Se*/{
        entityUrlTemplate: '',
        executionUrlTemplate: '',
        revisionUrlTemplate: '',
        thirdPartyConfigurationUrl: '',
      },
    }, /* ...*/ ],
    nextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListPipelines = function ListPipelines(aws) {
  var nextToken = aws.params.nextToken;


  // TODO implement code

  var ret = {
    nextToken: '',
    pipelines: [ {
      created: awsCommon.timestamp(),
      name: '',
      updated: awsCommon.timestamp(),
      version: 0,
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.PollForJobs = function PollForJobs(aws) {
  var actionTypeId = aws.params.actionTypeId;
  var maxBatchSize = aws.params.maxBatchSize /* Type integer */;
  var queryParam = aws.params.queryParam /* Type map */;
  if (!actionTypeId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter actionTypeId'];
  }


  // TODO implement code

  var ret = {
    jobs: [ {
      accountId: '',
      data: /*S1x*/{
        actionConfiguration: /*S1y*/{
          configuration: /*S1f*/{} /*Map*/,
        },
        actionTypeId: /*Ss*/{
          category: '',
          owner: '',
          provider: '',
          version: '',
        },
        artifactCredentials: /*S2a*/{
          accessKeyId: '',
          secretAccessKey: '',
          sessionToken: '',
        },
        continuationToken: '',
        encryptionKey: /*S11*/{
          id: '',
          type: '',
        },
        inputArtifacts: /*S22*/[ {
          location: {
            s3Location: {
              bucketName: '',
              objectKey: '',
            },
            type: '',
          },
          name: '',
          revision: '',
        }, /* ...*/ ],
        outputArtifacts: /*S22*/[ {
          location: {
            s3Location: {
              bucketName: '',
              objectKey: '',
            },
            type: '',
          },
          name: '',
          revision: '',
        }, /* ...*/ ],
        pipelineContext: /*S1z*/{
          action: {
            name: '',
          },
          pipelineName: '',
          stage: {
            name: '',
          },
        },
      },
      id: '',
      nonce: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.PollForThirdPartyJobs = function PollForThirdPartyJobs(aws) {
  var actionTypeId = aws.params.actionTypeId;
  var maxBatchSize = aws.params.maxBatchSize /* Type integer */;
  if (!actionTypeId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter actionTypeId'];
  }


  // TODO implement code

  var ret = {
    jobs: [ {
      clientId: '',
      jobId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.PutActionRevision = function PutActionRevision(aws) {
  var actionName = aws.params.actionName;
  var actionRevision = aws.params.actionRevision;
  var pipelineName = aws.params.pipelineName;
  var stageName = aws.params.stageName;
  if (!actionName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter actionName'];
  }
  if (!actionRevision) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter actionRevision'];
  }
  if (!pipelineName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter pipelineName'];
  }
  if (!stageName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter stageName'];
  }


  // TODO implement code

  var ret = {
    newRevision: false,
    pipelineExecutionId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.PutJobFailureResult = function PutJobFailureResult(aws) {
  var failureDetails = aws.params.failureDetails;
  var jobId = aws.params.jobId;
  if (!failureDetails) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter failureDetails'];
  }
  if (!jobId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter jobId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.PutJobSuccessResult = function PutJobSuccessResult(aws) {
  var continuationToken = aws.params.continuationToken;
  var currentRevision = aws.params.currentRevision;
  var executionDetails = aws.params.executionDetails;
  var jobId = aws.params.jobId;
  if (!jobId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter jobId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.PutThirdPartyJobFailureResult = function PutThirdPartyJobFailureResult(aws) {
  var clientToken = aws.params.clientToken;
  var failureDetails = aws.params.failureDetails;
  var jobId = aws.params.jobId;
  if (!clientToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter clientToken'];
  }
  if (!failureDetails) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter failureDetails'];
  }
  if (!jobId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter jobId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.PutThirdPartyJobSuccessResult = function PutThirdPartyJobSuccessResult(aws) {
  var clientToken = aws.params.clientToken;
  var continuationToken = aws.params.continuationToken;
  var currentRevision = aws.params.currentRevision;
  var executionDetails = aws.params.executionDetails;
  var jobId = aws.params.jobId;
  if (!clientToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter clientToken'];
  }
  if (!jobId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter jobId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.StartPipelineExecution = function StartPipelineExecution(aws) {
  var name = aws.params.name;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter name'];
  }


  // TODO implement code

  var ret = {
    pipelineExecutionId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdatePipeline = function UpdatePipeline(aws) {
  var pipeline = aws.params.pipeline;
  if (!pipeline) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter pipeline'];
  }


  // TODO implement code

  var ret = {
    pipeline: /*Sv*/{
      artifactStore: {
        encryptionKey: /*S11*/{
          id: '',
          type: '',
        },
        location: '',
        type: '',
      },
      name: '',
      roleArn: '',
      stages: [ {
        actions: [ {
          actionTypeId: /*Ss*/{
            category: '',
            owner: '',
            provider: '',
            version: '',
          },
          configuration: /*S1f*/{} /*Map*/,
          inputArtifacts: [ {
            name: '',
          }, /* ...*/ ],
          name: '',
          outputArtifacts: [ {
            name: '',
          }, /* ...*/ ],
          roleArn: '',
          runOrder: 0,
        }, /* ...*/ ],
        blockers: [ {
          name: '',
          type: '',
        }, /* ...*/ ],
        name: '',
      }, /* ...*/ ],
      version: 0,
    },
  };
  return [200, ret];
};
