'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * Amazon EC2 Container Registry version 2015-09-21
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.BatchDeleteImage = function BatchDeleteImage(aws) {
        var registryId = aws.params.registryId;
        var imageIds = aws.params.imageIds;
        var repositoryName = aws.params.repositoryName;
        if (! repositoryName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter repositoryName"];
        }        if (! imageIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter imageIds"];
        }

        // TODO implement code

        var ret = {
            imageIds: /*Sh*/[ /*Si*/{
                imageDigest: "",
                imageTag: ""
            } /*, ...*/ ],
            failures: /*Sm*/[ {
                failureReason: "",
                failureCode: "",
                imageId: /*Si*/{
                imageDigest: "",
                imageTag: ""
            }
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeRepositories = function DescribeRepositories(aws) {
        var registryId = aws.params.registryId;
        var nextToken = aws.params.nextToken;
        var maxResults = aws.params.maxResults /* integer */;
        var repositoryNames = aws.params.repositoryNames /* list */;


        // TODO implement code

        var ret = {
            repositories: [ /*S11*/{
                registryId: "",
                repositoryArn: "",
                repositoryName: ""
            } /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.InitiateLayerUpload = function InitiateLayerUpload(aws) {
        var registryId = aws.params.registryId;
        var repositoryName = aws.params.repositoryName;
        if (! repositoryName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter repositoryName"];
        }

        // TODO implement code

        var ret = {
            uploadId: "",
            partSize: 0 /*long*/
        };
        return [200, ret];
    }
module.exports.DeleteRepository = function DeleteRepository(aws) {
        var registryId = aws.params.registryId;
        var force = aws.params.force /* boolean */;
        var repositoryName = aws.params.repositoryName;
        if (! repositoryName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter repositoryName"];
        }

        // TODO implement code

        var ret = {
            repository: /*S11*/{
                registryId: "",
                repositoryArn: "",
                repositoryName: ""
            }
        };
        return [200, ret];
    }
module.exports.GetRepositoryPolicy = function GetRepositoryPolicy(aws) {
        var registryId = aws.params.registryId;
        var repositoryName = aws.params.repositoryName;
        if (! repositoryName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter repositoryName"];
        }

        // TODO implement code

        var ret = {
            registryId: "",
            policyText: "",
            repositoryName: ""
        };
        return [200, ret];
    }
module.exports.PutImage = function PutImage(aws) {
        var registryId = aws.params.registryId;
        var imageManifest = aws.params.imageManifest;
        var repositoryName = aws.params.repositoryName;
        if (! repositoryName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter repositoryName"];
        }        if (! imageManifest) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter imageManifest"];
        }

        // TODO implement code

        var ret = {
            image: /*St*/{
                registryId: "",
                imageManifest: "",
                repositoryName: "",
                imageId: /*Si*/{
                    imageDigest: "",
                    imageTag: ""
                }
            }
        };
        return [200, ret];
    }
module.exports.DeleteRepositoryPolicy = function DeleteRepositoryPolicy(aws) {
        var registryId = aws.params.registryId;
        var repositoryName = aws.params.repositoryName;
        if (! repositoryName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter repositoryName"];
        }

        // TODO implement code

        var ret = {
            registryId: "",
            policyText: "",
            repositoryName: ""
        };
        return [200, ret];
    }
module.exports.CreateRepository = function CreateRepository(aws) {
        var repositoryName = aws.params.repositoryName;
        if (! repositoryName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter repositoryName"];
        }

        // TODO implement code

        var ret = {
            repository: /*S11*/{
                registryId: "",
                repositoryArn: "",
                repositoryName: ""
            }
        };
        return [200, ret];
    }
module.exports.BatchCheckLayerAvailability = function BatchCheckLayerAvailability(aws) {
        var registryId = aws.params.registryId;
        var layerDigests = aws.params.layerDigests /* list */;
        var repositoryName = aws.params.repositoryName;
        if (! repositoryName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter repositoryName"];
        }        if (! layerDigests) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter layerDigests"];
        }

        // TODO implement code

        var ret = {
            failures: [ {
                layerDigest: "",
                failureReason: "",
                failureCode: ""
            } /*, ...*/ ],
            layers: [ {
                layerDigest: "",
                layerSize: 0 /*long*/,
                layerAvailability: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.SetRepositoryPolicy = function SetRepositoryPolicy(aws) {
        var registryId = aws.params.registryId;
        var force = aws.params.force /* boolean */;
        var policyText = aws.params.policyText;
        var repositoryName = aws.params.repositoryName;
        if (! repositoryName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter repositoryName"];
        }        if (! policyText) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter policyText"];
        }

        // TODO implement code

        var ret = {
            registryId: "",
            policyText: "",
            repositoryName: ""
        };
        return [200, ret];
    }
module.exports.UploadLayerPart = function UploadLayerPart(aws) {
        var registryId = aws.params.registryId;
        var layerPartBlob = aws.params.layerPartBlob /* blob */;
        var partLastByte = aws.params.partLastByte /* long */;
        var partFirstByte = aws.params.partFirstByte /* long */;
        var uploadId = aws.params.uploadId;
        var repositoryName = aws.params.repositoryName;
        if (! repositoryName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter repositoryName"];
        }        if (! uploadId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter uploadId"];
        }        if (! partFirstByte) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter partFirstByte"];
        }        if (! partLastByte) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter partLastByte"];
        }        if (! layerPartBlob) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter layerPartBlob"];
        }

        // TODO implement code

        var ret = {
            registryId: "",
            uploadId: "",
            lastByteReceived: 0 /*long*/,
            repositoryName: ""
        };
        return [200, ret];
    }
module.exports.GetDownloadUrlForLayer = function GetDownloadUrlForLayer(aws) {
        var registryId = aws.params.registryId;
        var layerDigest = aws.params.layerDigest;
        var repositoryName = aws.params.repositoryName;
        if (! repositoryName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter repositoryName"];
        }        if (! layerDigest) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter layerDigest"];
        }

        // TODO implement code

        var ret = {
            layerDigest: "",
            downloadUrl: ""
        };
        return [200, ret];
    }
module.exports.ListImages = function ListImages(aws) {
        var registryId = aws.params.registryId;
        var maxResults = aws.params.maxResults /* integer */;
        var repositoryName = aws.params.repositoryName;
        var nextToken = aws.params.nextToken;
        if (! repositoryName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter repositoryName"];
        }

        // TODO implement code

        var ret = {
            imageIds: /*Sh*/[ /*Si*/{
                imageDigest: "",
                imageTag: ""
            } /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.BatchGetImage = function BatchGetImage(aws) {
        var registryId = aws.params.registryId;
        var imageIds = aws.params.imageIds;
        var repositoryName = aws.params.repositoryName;
        if (! repositoryName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter repositoryName"];
        }        if (! imageIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter imageIds"];
        }

        // TODO implement code

        var ret = {
            failures: /*Sm*/[ {
                failureReason: "",
                failureCode: "",
                imageId: /*Si*/{
                    imageDigest: "",
                    imageTag: ""
                }
            } /*, ...*/ ],
            images: [ /*St*/{
                registryId: "",
                imageManifest: "",
                repositoryName: "",
                imageId: /*Si*/{
                    imageDigest: "",
                    imageTag: ""
                }
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CompleteLayerUpload = function CompleteLayerUpload(aws) {
        var registryId = aws.params.registryId;
        var layerDigests = aws.params.layerDigests /* list */;
        var uploadId = aws.params.uploadId;
        var repositoryName = aws.params.repositoryName;
        if (! repositoryName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter repositoryName"];
        }        if (! uploadId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter uploadId"];
        }        if (! layerDigests) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter layerDigests"];
        }

        // TODO implement code

        var ret = {
            registryId: "",
            layerDigest: "",
            uploadId: "",
            repositoryName: ""
        };
        return [200, ret];
    }
module.exports.GetAuthorizationToken = function GetAuthorizationToken(aws) {
        var registryIds = aws.params.registryIds /* list */;


        // TODO implement code

        var ret = {
            authorizationData: [ {
                expiresAt: now(),
                proxyEndpoint: "",
                authorizationToken: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
