'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * Amazon CloudWatch Events version 2014-02-03
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol json
require('../../lib/aws-common/shape_http')('json', module.exports, null);
// -----------------------------------
module.exports.ListRuleNamesByTarget = function ListRuleNamesByTarget(aws) {
  var nextToken = aws.params.NextToken;
  var limit = aws.params.Limit /* Type integer */;
  var targetArn = aws.params.TargetArn;
  if (!targetArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TargetArn'];
  }


  // TODO implement code

  var ret = {
    NextToken: '',
    RuleNames: [ '', /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListTargetsByRule = function ListTargetsByRule(aws) {
  var nextToken = aws.params.NextToken;
  var limit = aws.params.Limit /* Type integer */;
  var rule = aws.params.Rule;
  if (!rule) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Rule'];
  }


  // TODO implement code

  var ret = {
    Targets: /*Sp*/[ {
      InputPath: '',
      Id: '',
      Arn: '',
      Input: '',
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.PutEvents = function PutEvents(aws) {
  var entries = aws.params.Entries /* Type list */;
  if (!entries) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Entries'];
  }


  // TODO implement code

  var ret = {
    Entries: [ {
      ErrorCode: '',
      EventId: '',
      ErrorMessage: '',
    }, /* ...*/ ],
    FailedEntryCount: 0,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.TestEventPattern = function TestEventPattern(aws) {
  var eventPattern = aws.params.EventPattern;
  var event = aws.params.Event;
  if (!eventPattern) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EventPattern'];
  }
  if (!event) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Event'];
  }


  // TODO implement code

  var ret = {
    Result: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteRule = function DeleteRule(aws) {
  var name = aws.params.Name;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.PutTargets = function PutTargets(aws) {
  var targets = aws.params.Targets;
  var rule = aws.params.Rule;
  if (!rule) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Rule'];
  }
  if (!targets) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Targets'];
  }


  // TODO implement code

  var ret = {
    FailedEntries: [ {
      TargetId: '',
      ErrorCode: '',
      ErrorMessage: '',
    }, /* ...*/ ],
    FailedEntryCount: 0,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeRule = function DescribeRule(aws) {
  var name = aws.params.Name;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }


  // TODO implement code

  var ret = {
    EventPattern: '',
    RoleArn: '',
    State: '',
    Description: '',
    Name: '',
    ScheduleExpression: '',
    Arn: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DisableRule = function DisableRule(aws) {
  var name = aws.params.Name;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.RemoveTargets = function RemoveTargets(aws) {
  var ids = aws.params.Ids /* Type list */;
  var rule = aws.params.Rule;
  if (!rule) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Rule'];
  }
  if (!ids) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Ids'];
  }


  // TODO implement code

  var ret = {
    FailedEntries: [ {
      TargetId: '',
      ErrorCode: '',
      ErrorMessage: '',
    }, /* ...*/ ],
    FailedEntryCount: 0,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.EnableRule = function EnableRule(aws) {
  var name = aws.params.Name;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ListRules = function ListRules(aws) {
  var nextToken = aws.params.NextToken;
  var limit = aws.params.Limit /* Type integer */;
  var namePrefix = aws.params.NamePrefix;


  // TODO implement code

  var ret = {
    NextToken: '',
    Rules: [ {
      EventPattern: '',
      RoleArn: '',
      State: '',
      Description: '',
      Name: '',
      ScheduleExpression: '',
      Arn: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.PutRule = function PutRule(aws) {
  var eventPattern = aws.params.EventPattern;
  var roleArn = aws.params.RoleArn;
  var state = aws.params.State;
  var description = aws.params.Description;
  var name = aws.params.Name;
  var scheduleExpression = aws.params.ScheduleExpression;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }


  // TODO implement code

  var ret = {
    RuleArn: '',
  };
  return [200, ret];
};
