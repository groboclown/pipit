'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * Amazon Elastic Compute Cloud version 2015-10-01
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol ec2
require('../../lib/aws-common/shape_http')('ec2', module.exports, 'http://ec2.amazonaws.com/doc/2015-10-01');
// -----------------------------------
module.exports.AcceptVpcPeeringConnection = function AcceptVpcPeeringConnection(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var vpcPeeringConnectionId = aws.params.VpcPeeringConnectionId;


  // TODO implement code

  var ret = {
    VpcPeeringConnection: /*S5*/{
      AccepterVpcInfo: /*S6*/{
        CidrBlock: '',
        OwnerId: '',
        PeeringOptions: {
          AllowEgressFromLocalClassicLinkToRemoteVpc: false,
          AllowEgressFromLocalVpcToRemoteClassicLink: false,
        },
        VpcId: '',
      },
      ExpirationTime: awsCommon.timestamp(),
      RequesterVpcInfo: /*S6*/{
        CidrBlock: '',
        OwnerId: '',
        PeeringOptions: {
          AllowEgressFromLocalClassicLinkToRemoteVpc: false,
          AllowEgressFromLocalVpcToRemoteClassicLink: false,
        },
        VpcId: '',
      },
      Status: {
        Code: '',
        Message: '',
      },
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      VpcPeeringConnectionId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AllocateAddress = function AllocateAddress(aws) {
  var domain = aws.params.Domain;
  var dryRun = aws.params.DryRun /* Type boolean */;


  // TODO implement code

  var ret = {
    AllocationId: '',
    Domain: '',
    PublicIp: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AllocateHosts = function AllocateHosts(aws) {
  var autoPlacement = aws.params.AutoPlacement;
  var availabilityZone = aws.params.AvailabilityZone;
  var clientToken = aws.params.ClientToken;
  var instanceType = aws.params.InstanceType;
  var quantity = aws.params.Quantity /* Type integer */;
  if (!availabilityZone) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AvailabilityZone'];
  }
  if (!instanceType) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceType'];
  }
  if (!quantity) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Quantity'];
  }


  // TODO implement code

  var ret = {
    HostIds: /*Sk*/[ '', /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AssignPrivateIpAddresses = function AssignPrivateIpAddresses(aws) {
  var allowReassignment = aws.params.AllowReassignment /* Type boolean */;
  var networkInterfaceId = aws.params.NetworkInterfaceId;
  var privateIpAddresses = aws.params.PrivateIpAddresses;
  var secondaryPrivateIpAddressCount = aws.params.SecondaryPrivateIpAddressCount /* Type integer */;
  if (!networkInterfaceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter NetworkInterfaceId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.AssociateAddress = function AssociateAddress(aws) {
  var allocationId = aws.params.AllocationId;
  var allowReassociation = aws.params.AllowReassociation /* Type boolean */;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var instanceId = aws.params.InstanceId;
  var networkInterfaceId = aws.params.NetworkInterfaceId;
  var privateIpAddress = aws.params.PrivateIpAddress;
  var publicIp = aws.params.PublicIp;


  // TODO implement code

  var ret = {
    AssociationId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AssociateDhcpOptions = function AssociateDhcpOptions(aws) {
  var dhcpOptionsId = aws.params.DhcpOptionsId;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var vpcId = aws.params.VpcId;
  if (!dhcpOptionsId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DhcpOptionsId'];
  }
  if (!vpcId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpcId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.AssociateRouteTable = function AssociateRouteTable(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var routeTableId = aws.params.RouteTableId;
  var subnetId = aws.params.SubnetId;
  if (!routeTableId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RouteTableId'];
  }
  if (!subnetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SubnetId'];
  }


  // TODO implement code

  var ret = {
    AssociationId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AttachClassicLinkVpc = function AttachClassicLinkVpc(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var groups = aws.params.Groups;
  var instanceId = aws.params.InstanceId;
  var vpcId = aws.params.VpcId;
  if (!groups) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Groups'];
  }
  if (!instanceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceId'];
  }
  if (!vpcId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpcId'];
  }


  // TODO implement code

  var ret = {
    Return: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AttachInternetGateway = function AttachInternetGateway(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var internetGatewayId = aws.params.InternetGatewayId;
  var vpcId = aws.params.VpcId;
  if (!internetGatewayId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InternetGatewayId'];
  }
  if (!vpcId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpcId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.AttachNetworkInterface = function AttachNetworkInterface(aws) {
  var deviceIndex = aws.params.DeviceIndex /* Type integer */;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var instanceId = aws.params.InstanceId;
  var networkInterfaceId = aws.params.NetworkInterfaceId;
  if (!deviceIndex) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DeviceIndex'];
  }
  if (!instanceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceId'];
  }
  if (!networkInterfaceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter NetworkInterfaceId'];
  }


  // TODO implement code

  var ret = {
    AttachmentId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AttachVolume = function AttachVolume(aws) {
  var device = aws.params.Device;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var instanceId = aws.params.InstanceId;
  var volumeId = aws.params.VolumeId;
  if (!device) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Device'];
  }
  if (!instanceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceId'];
  }
  if (!volumeId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VolumeId'];
  }


  // TODO implement code

  var ret = /*Sz*/{
    AttachTime: awsCommon.timestamp(),
    DeleteOnTermination: false,
    Device: '',
    InstanceId: '',
    State: '',
    VolumeId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AttachVpnGateway = function AttachVpnGateway(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var vpcId = aws.params.VpcId;
  var vpnGatewayId = aws.params.VpnGatewayId;
  if (!vpcId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpcId'];
  }
  if (!vpnGatewayId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpnGatewayId'];
  }


  // TODO implement code

  var ret = {
    VpcAttachment: /*S13*/{
      State: '',
      VpcId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AuthorizeSecurityGroupEgress = function AuthorizeSecurityGroupEgress(aws) {
  var cidrIp = aws.params.CidrIp;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var fromPort = aws.params.FromPort /* Type integer */;
  var groupId = aws.params.GroupId;
  var ipPermissions = aws.params.IpPermissions;
  var ipProtocol = aws.params.IpProtocol;
  var sourceSecurityGroupName = aws.params.SourceSecurityGroupName;
  var sourceSecurityGroupOwnerId = aws.params.SourceSecurityGroupOwnerId;
  var toPort = aws.params.ToPort /* Type integer */;
  if (!groupId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GroupId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.AuthorizeSecurityGroupIngress = function AuthorizeSecurityGroupIngress(aws) {
  var cidrIp = aws.params.CidrIp;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var fromPort = aws.params.FromPort /* Type integer */;
  var groupId = aws.params.GroupId;
  var groupName = aws.params.GroupName;
  var ipPermissions = aws.params.IpPermissions;
  var ipProtocol = aws.params.IpProtocol;
  var sourceSecurityGroupName = aws.params.SourceSecurityGroupName;
  var sourceSecurityGroupOwnerId = aws.params.SourceSecurityGroupOwnerId;
  var toPort = aws.params.ToPort /* Type integer */;


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.BundleInstance = function BundleInstance(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var instanceId = aws.params.InstanceId;
  var storage = aws.params.Storage;
  if (!instanceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceId'];
  }
  if (!storage) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Storage'];
  }


  // TODO implement code

  var ret = {
    BundleTask: /*S1k*/{
      BundleId: '',
      BundleTaskError: {
        Code: '',
        Message: '',
      },
      InstanceId: '',
      Progress: '',
      StartTime: awsCommon.timestamp(),
      State: '',
      Storage: /*S1g*/{
        S3: {
          AWSAccessKeyId: '',
          Bucket: '',
          Prefix: '',
          UploadPolicy: null /*Blob*/,
          UploadPolicySignature: '',
        },
      },
      UpdateTime: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CancelBundleTask = function CancelBundleTask(aws) {
  var bundleId = aws.params.BundleId;
  var dryRun = aws.params.DryRun /* Type boolean */;
  if (!bundleId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter BundleId'];
  }


  // TODO implement code

  var ret = {
    BundleTask: /*S1k*/{
      BundleId: '',
      BundleTaskError: {
        Code: '',
        Message: '',
      },
      InstanceId: '',
      Progress: '',
      StartTime: awsCommon.timestamp(),
      State: '',
      Storage: /*S1g*/{
        S3: {
          AWSAccessKeyId: '',
          Bucket: '',
          Prefix: '',
          UploadPolicy: null /*Blob*/,
          UploadPolicySignature: '',
        },
      },
      UpdateTime: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CancelConversionTask = function CancelConversionTask(aws) {
  var conversionTaskId = aws.params.ConversionTaskId;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var reasonMessage = aws.params.ReasonMessage;
  if (!conversionTaskId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ConversionTaskId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.CancelExportTask = function CancelExportTask(aws) {
  var exportTaskId = aws.params.ExportTaskId;
  if (!exportTaskId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ExportTaskId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.CancelImportTask = function CancelImportTask(aws) {
  var cancelReason = aws.params.CancelReason;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var importTaskId = aws.params.ImportTaskId;


  // TODO implement code

  var ret = {
    ImportTaskId: '',
    PreviousState: '',
    State: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CancelReservedInstancesListing = function CancelReservedInstancesListing(aws) {
  var reservedInstancesListingId = aws.params.ReservedInstancesListingId;
  if (!reservedInstancesListingId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ReservedInstancesListingId'];
  }


  // TODO implement code

  var ret = {
    ReservedInstancesListings: /*S1v*/[ {
      ClientToken: '',
      CreateDate: awsCommon.timestamp(),
      InstanceCounts: [ {
        InstanceCount: 0,
        State: '',
      }, /* ...*/ ],
      PriceSchedules: [ {
        Active: false,
        CurrencyCode: '',
        Price: 0.0 /*Double*/,
        Term: 0 /*Long*/,
      }, /* ...*/ ],
      ReservedInstancesId: '',
      ReservedInstancesListingId: '',
      Status: '',
      StatusMessage: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      UpdateDate: awsCommon.timestamp(),
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CancelSpotFleetRequests = function CancelSpotFleetRequests(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var spotFleetRequestIds = aws.params.SpotFleetRequestIds;
  var terminateInstances = aws.params.TerminateInstances /* Type boolean */;
  if (!spotFleetRequestIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SpotFleetRequestIds'];
  }
  if (!terminateInstances) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TerminateInstances'];
  }


  // TODO implement code

  var ret = {
    SuccessfulFleetRequests: [ {
      CurrentSpotFleetRequestState: '',
      PreviousSpotFleetRequestState: '',
      SpotFleetRequestId: '',
    }, /* ...*/ ],
    UnsuccessfulFleetRequests: [ {
      Error: {
        Code: '',
        Message: '',
      },
      SpotFleetRequestId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CancelSpotInstanceRequests = function CancelSpotInstanceRequests(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var spotInstanceRequestIds = aws.params.SpotInstanceRequestIds;
  if (!spotInstanceRequestIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SpotInstanceRequestIds'];
  }


  // TODO implement code

  var ret = {
    CancelledSpotInstanceRequests: [ {
      SpotInstanceRequestId: '',
      State: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ConfirmProductInstance = function ConfirmProductInstance(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var instanceId = aws.params.InstanceId;
  var productCode = aws.params.ProductCode;
  if (!instanceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceId'];
  }
  if (!productCode) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ProductCode'];
  }


  // TODO implement code

  var ret = {
    OwnerId: '',
    Return: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CopyImage = function CopyImage(aws) {
  var clientToken = aws.params.ClientToken;
  var description = aws.params.Description;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var encrypted = aws.params.Encrypted /* Type boolean */;
  var kmsKeyId = aws.params.KmsKeyId;
  var name = aws.params.Name;
  var sourceImageId = aws.params.SourceImageId;
  var sourceRegion = aws.params.SourceRegion;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }
  if (!sourceImageId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SourceImageId'];
  }
  if (!sourceRegion) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SourceRegion'];
  }


  // TODO implement code

  var ret = {
    ImageId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CopySnapshot = function CopySnapshot(aws) {
  var description = aws.params.Description;
  var destinationRegion = aws.params.DestinationRegion;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var encrypted = aws.params.Encrypted /* Type boolean */;
  var kmsKeyId = aws.params.KmsKeyId;
  var presignedUrl = aws.params.PresignedUrl;
  var sourceRegion = aws.params.SourceRegion;
  var sourceSnapshotId = aws.params.SourceSnapshotId;
  if (!sourceRegion) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SourceRegion'];
  }
  if (!sourceSnapshotId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SourceSnapshotId'];
  }


  // TODO implement code

  var ret = {
    SnapshotId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateCustomerGateway = function CreateCustomerGateway(aws) {
  var bgpAsn = aws.params.BgpAsn /* Type integer */;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var publicIp = aws.params.PublicIp;
  var type = aws.params.Type;
  if (!bgpAsn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter BgpAsn'];
  }
  if (!publicIp) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PublicIp'];
  }
  if (!type) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Type'];
  }


  // TODO implement code

  var ret = {
    CustomerGateway: /*S2v*/{
      BgpAsn: '',
      CustomerGatewayId: '',
      IpAddress: '',
      State: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      Type: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateDhcpOptions = function CreateDhcpOptions(aws) {
  var dhcpConfigurations = aws.params.DhcpConfigurations /* Type list */;
  var dryRun = aws.params.DryRun /* Type boolean */;
  if (!dhcpConfigurations) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DhcpConfigurations'];
  }


  // TODO implement code

  var ret = {
    DhcpOptions: /*S30*/{
      DhcpConfigurations: [ {
        Key: '',
        Values: [ /*S34*/{
          Value: '',
        }, /* ...*/ ],
      }, /* ...*/ ],
      DhcpOptionsId: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateFlowLogs = function CreateFlowLogs(aws) {
  var clientToken = aws.params.ClientToken;
  var deliverLogsPermissionArn = aws.params.DeliverLogsPermissionArn;
  var logGroupName = aws.params.LogGroupName;
  var resourceIds = aws.params.ResourceIds;
  var resourceType = aws.params.ResourceType;
  var trafficType = aws.params.TrafficType;
  if (!deliverLogsPermissionArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DeliverLogsPermissionArn'];
  }
  if (!logGroupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter LogGroupName'];
  }
  if (!resourceIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ResourceIds'];
  }
  if (!resourceType) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ResourceType'];
  }
  if (!trafficType) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TrafficType'];
  }


  // TODO implement code

  var ret = {
    ClientToken: '',
    FlowLogIds: /*S27*/[ '', /* ...*/ ],
    Unsuccessful: /*S39*/[ /*S3a*/{
      Error: {
        Code: '',
        Message: '',
      },
      ResourceId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateImage = function CreateImage(aws) {
  var blockDeviceMappings = aws.params.BlockDeviceMappings;
  var description = aws.params.Description;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var instanceId = aws.params.InstanceId;
  var name = aws.params.Name;
  var noReboot = aws.params.NoReboot /* Type boolean */;
  if (!instanceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceId'];
  }
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }


  // TODO implement code

  var ret = {
    ImageId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateInstanceExportTask = function CreateInstanceExportTask(aws) {
  var description = aws.params.Description;
  var exportToS3Task = aws.params.ExportToS3Task /* Type structure */;
  var instanceId = aws.params.InstanceId;
  var targetEnvironment = aws.params.TargetEnvironment;
  if (!instanceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceId'];
  }


  // TODO implement code

  var ret = {
    ExportTask: /*S3o*/{
      Description: '',
      ExportTaskId: '',
      ExportToS3Task: {
        ContainerFormat: '',
        DiskImageFormat: '',
        S3Bucket: '',
        S3Key: '',
      },
      InstanceExportDetails: {
        InstanceId: '',
        TargetEnvironment: '',
      },
      State: '',
      StatusMessage: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateInternetGateway = function CreateInternetGateway(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;


  // TODO implement code

  var ret = {
    InternetGateway: /*S3u*/{
      Attachments: [ {
        State: '',
        VpcId: '',
      }, /* ...*/ ],
      InternetGatewayId: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateKeyPair = function CreateKeyPair(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var keyName = aws.params.KeyName;
  if (!keyName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter KeyName'];
  }


  // TODO implement code

  var ret = {
    KeyFingerprint: '',
    KeyMaterial: '',
    KeyName: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateNatGateway = function CreateNatGateway(aws) {
  var allocationId = aws.params.AllocationId;
  var clientToken = aws.params.ClientToken;
  var subnetId = aws.params.SubnetId;
  if (!allocationId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AllocationId'];
  }
  if (!subnetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SubnetId'];
  }


  // TODO implement code

  var ret = {
    ClientToken: '',
    NatGateway: /*S41*/{
      CreateTime: awsCommon.timestamp(),
      DeleteTime: awsCommon.timestamp(),
      FailureCode: '',
      FailureMessage: '',
      NatGatewayAddresses: [ {
        AllocationId: '',
        NetworkInterfaceId: '',
        PrivateIp: '',
        PublicIp: '',
      }, /* ...*/ ],
      NatGatewayId: '',
      State: '',
      SubnetId: '',
      VpcId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateNetworkAcl = function CreateNetworkAcl(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var vpcId = aws.params.VpcId;
  if (!vpcId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpcId'];
  }


  // TODO implement code

  var ret = {
    NetworkAcl: /*S47*/{
      Associations: [ {
        NetworkAclAssociationId: '',
        NetworkAclId: '',
        SubnetId: '',
      }, /* ...*/ ],
      Entries: [ {
        CidrBlock: '',
        Egress: false,
        IcmpTypeCode: /*S4b*/{
          Code: 0,
          Type: 0,
        },
        PortRange: /*S4c*/{
          From: 0,
          To: 0,
        },
        Protocol: '',
        RuleAction: '',
        RuleNumber: 0,
      }, /* ...*/ ],
      IsDefault: false,
      NetworkAclId: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      VpcId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateNetworkAclEntry = function CreateNetworkAclEntry(aws) {
  var cidrBlock = aws.params.CidrBlock;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var egress = aws.params.Egress /* Type boolean */;
  var icmpTypeCode = aws.params.IcmpTypeCode;
  var networkAclId = aws.params.NetworkAclId;
  var portRange = aws.params.PortRange;
  var protocol = aws.params.Protocol;
  var ruleAction = aws.params.RuleAction;
  var ruleNumber = aws.params.RuleNumber /* Type integer */;
  if (!cidrBlock) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter CidrBlock'];
  }
  if (!egress) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Egress'];
  }
  if (!networkAclId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter NetworkAclId'];
  }
  if (!protocol) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Protocol'];
  }
  if (!ruleAction) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RuleAction'];
  }
  if (!ruleNumber) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RuleNumber'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.CreateNetworkInterface = function CreateNetworkInterface(aws) {
  var description = aws.params.Description;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var groups = aws.params.Groups;
  var privateIpAddress = aws.params.PrivateIpAddress;
  var privateIpAddresses = aws.params.PrivateIpAddresses;
  var secondaryPrivateIpAddressCount = aws.params.SecondaryPrivateIpAddressCount /* Type integer */;
  var subnetId = aws.params.SubnetId;
  if (!subnetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SubnetId'];
  }


  // TODO implement code

  var ret = {
    NetworkInterface: /*S4l*/{
      Association: /*S4q*/{
        AllocationId: '',
        AssociationId: '',
        IpOwnerId: '',
        PublicDnsName: '',
        PublicIp: '',
      },
      Attachment: /*S4p*/{
        AttachTime: awsCommon.timestamp(),
        AttachmentId: '',
        DeleteOnTermination: false,
        DeviceIndex: 0,
        InstanceId: '',
        InstanceOwnerId: '',
        Status: '',
      },
      AvailabilityZone: '',
      Description: '',
      Groups: /*S4n*/[ {
        GroupId: '',
        GroupName: '',
      }, /* ...*/ ],
      InterfaceType: '',
      MacAddress: '',
      NetworkInterfaceId: '',
      OwnerId: '',
      PrivateDnsName: '',
      PrivateIpAddress: '',
      PrivateIpAddresses: [ {
        Association: /*S4q*/{
        AllocationId: '',
        AssociationId: '',
        IpOwnerId: '',
        PublicDnsName: '',
        PublicIp: '',
      },
        Primary: false,
        PrivateDnsName: '',
        PrivateIpAddress: '',
      }, /* ...*/ ],
      RequesterId: '',
      RequesterManaged: false,
      SourceDestCheck: false,
      Status: '',
      SubnetId: '',
      TagSet: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      VpcId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreatePlacementGroup = function CreatePlacementGroup(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var groupName = aws.params.GroupName;
  var strategy = aws.params.Strategy;
  if (!groupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GroupName'];
  }
  if (!strategy) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Strategy'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.CreateReservedInstancesListing = function CreateReservedInstancesListing(aws) {
  var clientToken = aws.params.ClientToken;
  var instanceCount = aws.params.InstanceCount /* Type integer */;
  var priceSchedules = aws.params.PriceSchedules /* Type list */;
  var reservedInstancesId = aws.params.ReservedInstancesId;
  if (!clientToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClientToken'];
  }
  if (!instanceCount) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceCount'];
  }
  if (!priceSchedules) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PriceSchedules'];
  }
  if (!reservedInstancesId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ReservedInstancesId'];
  }


  // TODO implement code

  var ret = {
    ReservedInstancesListings: /*S1v*/[ {
      ClientToken: '',
      CreateDate: awsCommon.timestamp(),
      InstanceCounts: [ {
        InstanceCount: 0,
        State: '',
      }, /* ...*/ ],
      PriceSchedules: [ {
        Active: false,
        CurrencyCode: '',
        Price: 0.0 /*Double*/,
        Term: 0 /*Long*/,
      }, /* ...*/ ],
      ReservedInstancesId: '',
      ReservedInstancesListingId: '',
      Status: '',
      StatusMessage: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      UpdateDate: awsCommon.timestamp(),
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateRoute = function CreateRoute(aws) {
  var destinationCidrBlock = aws.params.DestinationCidrBlock;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var gatewayId = aws.params.GatewayId;
  var instanceId = aws.params.InstanceId;
  var natGatewayId = aws.params.NatGatewayId;
  var networkInterfaceId = aws.params.NetworkInterfaceId;
  var routeTableId = aws.params.RouteTableId;
  var vpcPeeringConnectionId = aws.params.VpcPeeringConnectionId;
  if (!destinationCidrBlock) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DestinationCidrBlock'];
  }
  if (!routeTableId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RouteTableId'];
  }


  // TODO implement code

  var ret = {
    Return: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateRouteTable = function CreateRouteTable(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var vpcId = aws.params.VpcId;
  if (!vpcId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpcId'];
  }


  // TODO implement code

  var ret = {
    RouteTable: /*S54*/{
      Associations: [ {
        Main: false,
        RouteTableAssociationId: '',
        RouteTableId: '',
        SubnetId: '',
      }, /* ...*/ ],
      PropagatingVgws: [ {
        GatewayId: '',
      }, /* ...*/ ],
      RouteTableId: '',
      Routes: [ {
        DestinationCidrBlock: '',
        DestinationPrefixListId: '',
        GatewayId: '',
        InstanceId: '',
        InstanceOwnerId: '',
        NatGatewayId: '',
        NetworkInterfaceId: '',
        Origin: '',
        State: '',
        VpcPeeringConnectionId: '',
      }, /* ...*/ ],
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      VpcId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateSecurityGroup = function CreateSecurityGroup(aws) {
  var description = aws.params.Description;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var groupName = aws.params.GroupName;
  var vpcId = aws.params.VpcId;
  if (!description) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Description'];
  }
  if (!groupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GroupName'];
  }


  // TODO implement code

  var ret = {
    GroupId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateSnapshot = function CreateSnapshot(aws) {
  var description = aws.params.Description;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var volumeId = aws.params.VolumeId;
  if (!volumeId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VolumeId'];
  }


  // TODO implement code

  var ret = /*S5g*/{
    DataEncryptionKeyId: '',
    Description: '',
    Encrypted: false,
    KmsKeyId: '',
    OwnerAlias: '',
    OwnerId: '',
    Progress: '',
    SnapshotId: '',
    StartTime: awsCommon.timestamp(),
    State: '',
    StateMessage: '',
    Tags: /*Sb*/[ {
      Key: '',
      Value: '',
    }, /* ...*/ ],
    VolumeId: '',
    VolumeSize: 0,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateSpotDatafeedSubscription = function CreateSpotDatafeedSubscription(aws) {
  var bucket = aws.params.Bucket;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var prefix = aws.params.Prefix;
  if (!bucket) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Bucket'];
  }


  // TODO implement code

  var ret = {
    SpotDatafeedSubscription: /*S5k*/{
      Bucket: '',
      Fault: /*S5m*/{
        Code: '',
        Message: '',
      },
      OwnerId: '',
      Prefix: '',
      State: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateSubnet = function CreateSubnet(aws) {
  var availabilityZone = aws.params.AvailabilityZone;
  var cidrBlock = aws.params.CidrBlock;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var vpcId = aws.params.VpcId;
  if (!cidrBlock) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter CidrBlock'];
  }
  if (!vpcId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpcId'];
  }


  // TODO implement code

  var ret = {
    Subnet: /*S5p*/{
      AvailabilityZone: '',
      AvailableIpAddressCount: 0,
      CidrBlock: '',
      DefaultForAz: false,
      MapPublicIpOnLaunch: false,
      State: '',
      SubnetId: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      VpcId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateTags = function CreateTags(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var resources = aws.params.Resources;
  var tags = aws.params.Tags;
  if (!resources) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Resources'];
  }
  if (!tags) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Tags'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.CreateVolume = function CreateVolume(aws) {
  var availabilityZone = aws.params.AvailabilityZone;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var encrypted = aws.params.Encrypted /* Type boolean */;
  var iops = aws.params.Iops /* Type integer */;
  var kmsKeyId = aws.params.KmsKeyId;
  var size = aws.params.Size /* Type integer */;
  var snapshotId = aws.params.SnapshotId;
  var volumeType = aws.params.VolumeType;
  if (!availabilityZone) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AvailabilityZone'];
  }


  // TODO implement code

  var ret = /*S5u*/{
    Attachments: [ /*Sz*/{
      AttachTime: awsCommon.timestamp(),
      DeleteOnTermination: false,
      Device: '',
      InstanceId: '',
      State: '',
      VolumeId: '',
    }, /* ...*/ ],
    AvailabilityZone: '',
    CreateTime: awsCommon.timestamp(),
    Encrypted: false,
    Iops: 0,
    KmsKeyId: '',
    Size: 0,
    SnapshotId: '',
    State: '',
    Tags: /*Sb*/[ {
      Key: '',
      Value: '',
    }, /* ...*/ ],
    VolumeId: '',
    VolumeType: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateVpc = function CreateVpc(aws) {
  var cidrBlock = aws.params.CidrBlock;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var instanceTenancy = aws.params.InstanceTenancy;
  if (!cidrBlock) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter CidrBlock'];
  }


  // TODO implement code

  var ret = {
    Vpc: /*S60*/{
      CidrBlock: '',
      DhcpOptionsId: '',
      InstanceTenancy: '',
      IsDefault: false,
      State: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      VpcId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateVpcEndpoint = function CreateVpcEndpoint(aws) {
  var clientToken = aws.params.ClientToken;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var policyDocument = aws.params.PolicyDocument;
  var routeTableIds = aws.params.RouteTableIds;
  var serviceName = aws.params.ServiceName;
  var vpcId = aws.params.VpcId;
  if (!serviceName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ServiceName'];
  }
  if (!vpcId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpcId'];
  }


  // TODO implement code

  var ret = {
    ClientToken: '',
    VpcEndpoint: /*S64*/{
      CreationTimestamp: awsCommon.timestamp(),
      PolicyDocument: '',
      RouteTableIds: /*S27*/[ '', /* ...*/ ],
      ServiceName: '',
      State: '',
      VpcEndpointId: '',
      VpcId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateVpcPeeringConnection = function CreateVpcPeeringConnection(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var peerOwnerId = aws.params.PeerOwnerId;
  var peerVpcId = aws.params.PeerVpcId;
  var vpcId = aws.params.VpcId;


  // TODO implement code

  var ret = {
    VpcPeeringConnection: /*S5*/{
      AccepterVpcInfo: /*S6*/{
        CidrBlock: '',
        OwnerId: '',
        PeeringOptions: {
          AllowEgressFromLocalClassicLinkToRemoteVpc: false,
          AllowEgressFromLocalVpcToRemoteClassicLink: false,
        },
        VpcId: '',
      },
      ExpirationTime: awsCommon.timestamp(),
      RequesterVpcInfo: /*S6*/{
        CidrBlock: '',
        OwnerId: '',
        PeeringOptions: {
          AllowEgressFromLocalClassicLinkToRemoteVpc: false,
          AllowEgressFromLocalVpcToRemoteClassicLink: false,
        },
        VpcId: '',
      },
      Status: {
        Code: '',
        Message: '',
      },
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      VpcPeeringConnectionId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateVpnConnection = function CreateVpnConnection(aws) {
  var customerGatewayId = aws.params.CustomerGatewayId;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var options = aws.params.Options /* Type structure */;
  var type = aws.params.Type;
  var vpnGatewayId = aws.params.VpnGatewayId;
  if (!customerGatewayId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter CustomerGatewayId'];
  }
  if (!type) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Type'];
  }
  if (!vpnGatewayId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpnGatewayId'];
  }


  // TODO implement code

  var ret = {
    VpnConnection: /*S6b*/{
      CustomerGatewayConfiguration: '',
      CustomerGatewayId: '',
      Options: {
        StaticRoutesOnly: false,
      },
      Routes: [ {
        DestinationCidrBlock: '',
        Source: '',
        State: '',
      }, /* ...*/ ],
      State: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      Type: '',
      VgwTelemetry: [ {
        AcceptedRouteCount: 0,
        LastStatusChange: awsCommon.timestamp(),
        OutsideIpAddress: '',
        Status: '',
        StatusMessage: '',
      }, /* ...*/ ],
      VpnConnectionId: '',
      VpnGatewayId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateVpnConnectionRoute = function CreateVpnConnectionRoute(aws) {
  var destinationCidrBlock = aws.params.DestinationCidrBlock;
  var vpnConnectionId = aws.params.VpnConnectionId;
  if (!destinationCidrBlock) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DestinationCidrBlock'];
  }
  if (!vpnConnectionId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpnConnectionId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.CreateVpnGateway = function CreateVpnGateway(aws) {
  var availabilityZone = aws.params.AvailabilityZone;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var type = aws.params.Type;
  if (!type) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Type'];
  }


  // TODO implement code

  var ret = {
    VpnGateway: /*S6n*/{
      AvailabilityZone: '',
      State: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      Type: '',
      VpcAttachments: [ /*S13*/{
        State: '',
        VpcId: '',
      }, /* ...*/ ],
      VpnGatewayId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteCustomerGateway = function DeleteCustomerGateway(aws) {
  var customerGatewayId = aws.params.CustomerGatewayId;
  var dryRun = aws.params.DryRun /* Type boolean */;
  if (!customerGatewayId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter CustomerGatewayId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteDhcpOptions = function DeleteDhcpOptions(aws) {
  var dhcpOptionsId = aws.params.DhcpOptionsId;
  var dryRun = aws.params.DryRun /* Type boolean */;
  if (!dhcpOptionsId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DhcpOptionsId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteFlowLogs = function DeleteFlowLogs(aws) {
  var flowLogIds = aws.params.FlowLogIds;
  if (!flowLogIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FlowLogIds'];
  }


  // TODO implement code

  var ret = {
    Unsuccessful: /*S39*/[ /*S3a*/{
      Error: {
        Code: '',
        Message: '',
      },
      ResourceId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteInternetGateway = function DeleteInternetGateway(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var internetGatewayId = aws.params.InternetGatewayId;
  if (!internetGatewayId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InternetGatewayId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteKeyPair = function DeleteKeyPair(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var keyName = aws.params.KeyName;
  if (!keyName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter KeyName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteNatGateway = function DeleteNatGateway(aws) {
  var natGatewayId = aws.params.NatGatewayId;
  if (!natGatewayId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter NatGatewayId'];
  }


  // TODO implement code

  var ret = {
    NatGatewayId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteNetworkAcl = function DeleteNetworkAcl(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var networkAclId = aws.params.NetworkAclId;
  if (!networkAclId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter NetworkAclId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteNetworkAclEntry = function DeleteNetworkAclEntry(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var egress = aws.params.Egress /* Type boolean */;
  var networkAclId = aws.params.NetworkAclId;
  var ruleNumber = aws.params.RuleNumber /* Type integer */;
  if (!egress) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Egress'];
  }
  if (!networkAclId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter NetworkAclId'];
  }
  if (!ruleNumber) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RuleNumber'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteNetworkInterface = function DeleteNetworkInterface(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var networkInterfaceId = aws.params.NetworkInterfaceId;
  if (!networkInterfaceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter NetworkInterfaceId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeletePlacementGroup = function DeletePlacementGroup(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var groupName = aws.params.GroupName;
  if (!groupName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GroupName'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteRoute = function DeleteRoute(aws) {
  var destinationCidrBlock = aws.params.DestinationCidrBlock;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var routeTableId = aws.params.RouteTableId;
  if (!destinationCidrBlock) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DestinationCidrBlock'];
  }
  if (!routeTableId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RouteTableId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteRouteTable = function DeleteRouteTable(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var routeTableId = aws.params.RouteTableId;
  if (!routeTableId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RouteTableId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteSecurityGroup = function DeleteSecurityGroup(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var groupId = aws.params.GroupId;
  var groupName = aws.params.GroupName;


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteSnapshot = function DeleteSnapshot(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var snapshotId = aws.params.SnapshotId;
  if (!snapshotId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SnapshotId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteSpotDatafeedSubscription = function DeleteSpotDatafeedSubscription(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteSubnet = function DeleteSubnet(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var subnetId = aws.params.SubnetId;
  if (!subnetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SubnetId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteTags = function DeleteTags(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var resources = aws.params.Resources;
  var tags = aws.params.Tags;
  if (!resources) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Resources'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteVolume = function DeleteVolume(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var volumeId = aws.params.VolumeId;
  if (!volumeId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VolumeId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteVpc = function DeleteVpc(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var vpcId = aws.params.VpcId;
  if (!vpcId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpcId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteVpcEndpoints = function DeleteVpcEndpoints(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var vpcEndpointIds = aws.params.VpcEndpointIds;
  if (!vpcEndpointIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpcEndpointIds'];
  }


  // TODO implement code

  var ret = {
    Unsuccessful: /*S39*/[ /*S3a*/{
      Error: {
        Code: '',
        Message: '',
      },
      ResourceId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteVpcPeeringConnection = function DeleteVpcPeeringConnection(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var vpcPeeringConnectionId = aws.params.VpcPeeringConnectionId;
  if (!vpcPeeringConnectionId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpcPeeringConnectionId'];
  }


  // TODO implement code

  var ret = {
    Return: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteVpnConnection = function DeleteVpnConnection(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var vpnConnectionId = aws.params.VpnConnectionId;
  if (!vpnConnectionId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpnConnectionId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteVpnConnectionRoute = function DeleteVpnConnectionRoute(aws) {
  var destinationCidrBlock = aws.params.DestinationCidrBlock;
  var vpnConnectionId = aws.params.VpnConnectionId;
  if (!destinationCidrBlock) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DestinationCidrBlock'];
  }
  if (!vpnConnectionId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpnConnectionId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteVpnGateway = function DeleteVpnGateway(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var vpnGatewayId = aws.params.VpnGatewayId;
  if (!vpnGatewayId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpnGatewayId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeregisterImage = function DeregisterImage(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var imageId = aws.params.ImageId;
  if (!imageId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ImageId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeAccountAttributes = function DescribeAccountAttributes(aws) {
  var attributeNames = aws.params.AttributeNames /* Type list */;
  var dryRun = aws.params.DryRun /* Type boolean */;


  // TODO implement code

  var ret = {
    AccountAttributes: [ {
      AttributeName: '',
      AttributeValues: [ {
        AttributeValue: '',
      }, /* ...*/ ],
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeAddresses = function DescribeAddresses(aws) {
  var allocationIds = aws.params.AllocationIds /* Type list */;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var publicIps = aws.params.PublicIps /* Type list */;


  // TODO implement code

  var ret = {
    Addresses: [ {
      AllocationId: '',
      AssociationId: '',
      Domain: '',
      InstanceId: '',
      NetworkInterfaceId: '',
      NetworkInterfaceOwnerId: '',
      PrivateIpAddress: '',
      PublicIp: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeAvailabilityZones = function DescribeAvailabilityZones(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var zoneNames = aws.params.ZoneNames /* Type list */;


  // TODO implement code

  var ret = {
    AvailabilityZones: [ {
      Messages: [ {
        Message: '',
      }, /* ...*/ ],
      RegionName: '',
      State: '',
      ZoneName: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeBundleTasks = function DescribeBundleTasks(aws) {
  var bundleIds = aws.params.BundleIds /* Type list */;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;


  // TODO implement code

  var ret = {
    BundleTasks: [ /*S1k*/{
      BundleId: '',
      BundleTaskError: {
        Code: '',
        Message: '',
      },
      InstanceId: '',
      Progress: '',
      StartTime: awsCommon.timestamp(),
      State: '',
      Storage: /*S1g*/{
        S3: {
          AWSAccessKeyId: '',
          Bucket: '',
          Prefix: '',
          UploadPolicy: null /*Blob*/,
          UploadPolicySignature: '',
        },
      },
      UpdateTime: awsCommon.timestamp(),
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeClassicLinkInstances = function DescribeClassicLinkInstances(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var instanceIds = aws.params.InstanceIds;
  var maxResults = aws.params.MaxResults /* Type integer */;
  var nextToken = aws.params.NextToken;


  // TODO implement code

  var ret = {
    Instances: [ {
      Groups: /*S4n*/[ {
        GroupId: '',
        GroupName: '',
      }, /* ...*/ ],
      InstanceId: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      VpcId: '',
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeConversionTasks = function DescribeConversionTasks(aws) {
  var conversionTaskIds = aws.params.ConversionTaskIds /* Type list */;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;


  // TODO implement code

  var ret = {
    ConversionTasks: [ /*S8j*/{
      ConversionTaskId: '',
      ExpirationTime: '',
      ImportInstance: {
        Description: '',
        InstanceId: '',
        Platform: '',
        Volumes: [ {
          AvailabilityZone: '',
          BytesConverted: 0 /*Long*/,
          Description: '',
          Image: /*S8n*/{
            Checksum: '',
            Format: '',
            ImportManifestUrl: '',
            Size: 0 /*Long*/,
          },
          Status: '',
          StatusMessage: '',
          Volume: /*S8o*/{
            Id: '',
            Size: 0 /*Long*/,
          },
        }, /* ...*/ ],
      },
      ImportVolume: {
        AvailabilityZone: '',
        BytesConverted: 0 /*Long*/,
        Description: '',
        Image: /*S8n*/{
            Checksum: '',
            Format: '',
            ImportManifestUrl: '',
            Size: 0 /*Long*/,
          },
        Volume: /*S8o*/{
            Id: '',
            Size: 0 /*Long*/,
          },
      },
      State: '',
      StatusMessage: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeCustomerGateways = function DescribeCustomerGateways(aws) {
  var customerGatewayIds = aws.params.CustomerGatewayIds /* Type list */;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;


  // TODO implement code

  var ret = {
    CustomerGateways: [ /*S2v*/{
      BgpAsn: '',
      CustomerGatewayId: '',
      IpAddress: '',
      State: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      Type: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeDhcpOptions = function DescribeDhcpOptions(aws) {
  var dhcpOptionsIds = aws.params.DhcpOptionsIds /* Type list */;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;


  // TODO implement code

  var ret = {
    DhcpOptions: [ /*S30*/{
      DhcpConfigurations: [ {
        Key: '',
        Values: [ /*S34*/{
          Value: '',
        }, /* ...*/ ],
      }, /* ...*/ ],
      DhcpOptionsId: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeExportTasks = function DescribeExportTasks(aws) {
  var exportTaskIds = aws.params.ExportTaskIds /* Type list */;


  // TODO implement code

  var ret = {
    ExportTasks: [ /*S3o*/{
      Description: '',
      ExportTaskId: '',
      ExportToS3Task: {
        ContainerFormat: '',
        DiskImageFormat: '',
        S3Bucket: '',
        S3Key: '',
      },
      InstanceExportDetails: {
        InstanceId: '',
        TargetEnvironment: '',
      },
      State: '',
      StatusMessage: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeFlowLogs = function DescribeFlowLogs(aws) {
  var filter = aws.params.Filter;
  var flowLogIds = aws.params.FlowLogIds;
  var maxResults = aws.params.MaxResults /* Type integer */;
  var nextToken = aws.params.NextToken;


  // TODO implement code

  var ret = {
    FlowLogs: [ {
      CreationTime: awsCommon.timestamp(),
      DeliverLogsErrorMessage: '',
      DeliverLogsPermissionArn: '',
      DeliverLogsStatus: '',
      FlowLogId: '',
      FlowLogStatus: '',
      LogGroupName: '',
      ResourceId: '',
      TrafficType: '',
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeHosts = function DescribeHosts(aws) {
  var filter = aws.params.Filter;
  var hostIds = aws.params.HostIds;
  var maxResults = aws.params.MaxResults /* Type integer */;
  var nextToken = aws.params.NextToken;


  // TODO implement code

  var ret = {
    Hosts: [ {
      AutoPlacement: '',
      AvailabilityZone: '',
      AvailableCapacity: {
        AvailableInstanceCapacity: [ {
          AvailableCapacity: 0,
          InstanceType: '',
          TotalCapacity: 0,
        }, /* ...*/ ],
        AvailableVCpus: 0,
      },
      ClientToken: '',
      HostId: '',
      HostProperties: {
        Cores: 0,
        InstanceType: '',
        Sockets: 0,
        TotalVCpus: 0,
      },
      HostReservationId: '',
      Instances: [ {
        InstanceId: '',
        InstanceType: '',
      }, /* ...*/ ],
      State: '',
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeIdFormat = function DescribeIdFormat(aws) {
  var resource = aws.params.Resource;


  // TODO implement code

  var ret = {
    Statuses: [ {
      Deadline: awsCommon.timestamp(),
      Resource: '',
      UseLongIds: false,
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeImageAttribute = function DescribeImageAttribute(aws) {
  var attribute = aws.params.Attribute;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var imageId = aws.params.ImageId;
  if (!attribute) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Attribute'];
  }
  if (!imageId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ImageId'];
  }


  // TODO implement code

  var ret = {
    BlockDeviceMappings: /*S9x*/[ /*S3e*/{
      DeviceName: '',
      Ebs: {
        DeleteOnTermination: false,
        Encrypted: false,
        Iops: 0,
        SnapshotId: '',
        VolumeSize: 0,
        VolumeType: '',
      },
      NoDevice: '',
      VirtualName: '',
    }, /* ...*/ ],
    Description: /*S34*/{
      Value: '',
    },
    ImageId: '',
    KernelId: /*S34*/{
      Value: '',
    },
    LaunchPermissions: /*S9r*/[ {
      Group: '',
      UserId: '',
    }, /* ...*/ ],
    ProductCodes: /*S9u*/[ {
      ProductCodeId: '',
      ProductCodeType: '',
    }, /* ...*/ ],
    RamdiskId: /*S34*/{
      Value: '',
    },
    SriovNetSupport: /*S34*/{
      Value: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeImages = function DescribeImages(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var executableUsers = aws.params.ExecutableUsers /* Type list */;
  var filters = aws.params.Filters;
  var imageIds = aws.params.ImageIds /* Type list */;
  var owners = aws.params.Owners;


  // TODO implement code

  var ret = {
    Images: [ {
      Architecture: '',
      BlockDeviceMappings: /*S9x*/[ /*S3e*/{
        DeviceName: '',
        Ebs: {
          DeleteOnTermination: false,
          Encrypted: false,
          Iops: 0,
          SnapshotId: '',
          VolumeSize: 0,
          VolumeType: '',
        },
        NoDevice: '',
        VirtualName: '',
      }, /* ...*/ ],
      CreationDate: '',
      Description: '',
      Hypervisor: '',
      ImageId: '',
      ImageLocation: '',
      ImageOwnerAlias: '',
      ImageType: '',
      KernelId: '',
      Name: '',
      OwnerId: '',
      Platform: '',
      ProductCodes: /*S9u*/[ {
        ProductCodeId: '',
        ProductCodeType: '',
      }, /* ...*/ ],
      Public: false,
      RamdiskId: '',
      RootDeviceName: '',
      RootDeviceType: '',
      SriovNetSupport: '',
      State: '',
      StateReason: /*Sa8*/{
        Code: '',
        Message: '',
      },
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      VirtualizationType: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeImportImageTasks = function DescribeImportImageTasks(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var importTaskIds = aws.params.ImportTaskIds;
  var maxResults = aws.params.MaxResults /* Type integer */;
  var nextToken = aws.params.NextToken;


  // TODO implement code

  var ret = {
    ImportImageTasks: [ {
      Architecture: '',
      Description: '',
      Hypervisor: '',
      ImageId: '',
      ImportTaskId: '',
      LicenseType: '',
      Platform: '',
      Progress: '',
      SnapshotDetails: /*Sah*/[ {
        Description: '',
        DeviceName: '',
        DiskImageSize: 0.0 /*Double*/,
        Format: '',
        Progress: '',
        SnapshotId: '',
        Status: '',
        StatusMessage: '',
        Url: '',
        UserBucket: /*Saj*/{
          S3Bucket: '',
          S3Key: '',
        },
      }, /* ...*/ ],
      Status: '',
      StatusMessage: '',
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeImportSnapshotTasks = function DescribeImportSnapshotTasks(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var importTaskIds = aws.params.ImportTaskIds;
  var maxResults = aws.params.MaxResults /* Type integer */;
  var nextToken = aws.params.NextToken;


  // TODO implement code

  var ret = {
    ImportSnapshotTasks: [ {
      Description: '',
      ImportTaskId: '',
      SnapshotTaskDetail: /*Sao*/{
        Description: '',
        DiskImageSize: 0.0 /*Double*/,
        Format: '',
        Progress: '',
        SnapshotId: '',
        Status: '',
        StatusMessage: '',
        Url: '',
        UserBucket: /*Saj*/{
          S3Bucket: '',
          S3Key: '',
        },
      },
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeInstanceAttribute = function DescribeInstanceAttribute(aws) {
  var attribute = aws.params.Attribute;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var instanceId = aws.params.InstanceId;
  if (!attribute) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Attribute'];
  }
  if (!instanceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceId'];
  }


  // TODO implement code

  var ret = {
    BlockDeviceMappings: /*Sat*/[ {
      DeviceName: '',
      Ebs: {
        AttachTime: awsCommon.timestamp(),
        DeleteOnTermination: false,
        Status: '',
        VolumeId: '',
      },
    }, /* ...*/ ],
    DisableApiTermination: /*Sas*/{
      Value: false,
    },
    EbsOptimized: /*Sas*/{
      Value: false,
    },
    Groups: /*S4n*/[ {
      GroupId: '',
      GroupName: '',
    }, /* ...*/ ],
    InstanceId: '',
    InstanceInitiatedShutdownBehavior: /*S34*/{
      Value: '',
    },
    InstanceType: /*S34*/{
      Value: '',
    },
    KernelId: /*S34*/{
      Value: '',
    },
    ProductCodes: /*S9u*/[ {
      ProductCodeId: '',
      ProductCodeType: '',
    }, /* ...*/ ],
    RamdiskId: /*S34*/{
      Value: '',
    },
    RootDeviceName: /*S34*/{
      Value: '',
    },
    SourceDestCheck: /*Sas*/{
      Value: false,
    },
    SriovNetSupport: /*S34*/{
      Value: '',
    },
    UserData: /*S34*/{
      Value: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeInstanceStatus = function DescribeInstanceStatus(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var includeAllInstances = aws.params.IncludeAllInstances /* Type boolean */;
  var instanceIds = aws.params.InstanceIds;
  var maxResults = aws.params.MaxResults /* Type integer */;
  var nextToken = aws.params.NextToken;


  // TODO implement code

  var ret = {
    InstanceStatuses: [ {
      AvailabilityZone: '',
      Events: [ {
        Code: '',
        Description: '',
        NotAfter: awsCommon.timestamp(),
        NotBefore: awsCommon.timestamp(),
      }, /* ...*/ ],
      InstanceId: '',
      InstanceState: /*Sb3*/{
        Code: 0,
        Name: '',
      },
      InstanceStatus: /*Sb5*/{
        Details: [ {
          ImpairedSince: awsCommon.timestamp(),
          Name: '',
          Status: '',
        }, /* ...*/ ],
        Status: '',
      },
      SystemStatus: /*Sb5*/{
        Details: [ {
          ImpairedSince: awsCommon.timestamp(),
          Name: '',
          Status: '',
        }, /* ...*/ ],
        Status: '',
      },
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeInstances = function DescribeInstances(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var instanceIds = aws.params.InstanceIds;
  var maxResults = aws.params.MaxResults /* Type integer */;
  var nextToken = aws.params.NextToken;


  // TODO implement code

  var ret = {
    NextToken: '',
    Reservations: [ /*Sbe*/{
      Groups: /*S4n*/[ {
        GroupId: '',
        GroupName: '',
      }, /* ...*/ ],
      Instances: [ {
        AmiLaunchIndex: 0,
        Architecture: '',
        BlockDeviceMappings: /*Sat*/[ {
          DeviceName: '',
          Ebs: {
            AttachTime: awsCommon.timestamp(),
            DeleteOnTermination: false,
            Status: '',
            VolumeId: '',
          },
        }, /* ...*/ ],
        ClientToken: '',
        EbsOptimized: false,
        Hypervisor: '',
        IamInstanceProfile: {
          Arn: '',
          Id: '',
        },
        ImageId: '',
        InstanceId: '',
        InstanceLifecycle: '',
        InstanceType: '',
        KernelId: '',
        KeyName: '',
        LaunchTime: awsCommon.timestamp(),
        Monitoring: /*Sbj*/{
          State: '',
        },
        NetworkInterfaces: [ {
          Association: /*Sbp*/{
            IpOwnerId: '',
            PublicDnsName: '',
            PublicIp: '',
          },
          Attachment: {
            AttachTime: awsCommon.timestamp(),
            AttachmentId: '',
            DeleteOnTermination: false,
            DeviceIndex: 0,
            Status: '',
          },
          Description: '',
          Groups: /*S4n*/[ {
        GroupId: '',
        GroupName: '',
      }, /* ...*/ ],
          MacAddress: '',
          NetworkInterfaceId: '',
          OwnerId: '',
          PrivateDnsName: '',
          PrivateIpAddress: '',
          PrivateIpAddresses: [ {
            Association: /*Sbp*/{
            IpOwnerId: '',
            PublicDnsName: '',
            PublicIp: '',
          },
            Primary: false,
            PrivateDnsName: '',
            PrivateIpAddress: '',
          }, /* ...*/ ],
          SourceDestCheck: false,
          Status: '',
          SubnetId: '',
          VpcId: '',
        }, /* ...*/ ],
        Placement: /*Sbi*/{
          Affinity: '',
          AvailabilityZone: '',
          GroupName: '',
          HostId: '',
          Tenancy: '',
        },
        Platform: '',
        PrivateDnsName: '',
        PrivateIpAddress: '',
        ProductCodes: /*S9u*/[ {
          ProductCodeId: '',
          ProductCodeType: '',
        }, /* ...*/ ],
        PublicDnsName: '',
        PublicIpAddress: '',
        RamdiskId: '',
        RootDeviceName: '',
        RootDeviceType: '',
        SecurityGroups: /*S4n*/[ {
        GroupId: '',
        GroupName: '',
      }, /* ...*/ ],
        SourceDestCheck: false,
        SpotInstanceRequestId: '',
        SriovNetSupport: '',
        State: /*Sb3*/{
          Code: 0,
          Name: '',
        },
        StateReason: /*Sa8*/{
          Code: '',
          Message: '',
        },
        StateTransitionReason: '',
        SubnetId: '',
        Tags: /*Sb*/[ {
          Key: '',
          Value: '',
        }, /* ...*/ ],
        VirtualizationType: '',
        VpcId: '',
      }, /* ...*/ ],
      OwnerId: '',
      RequesterId: '',
      ReservationId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeInternetGateways = function DescribeInternetGateways(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var internetGatewayIds = aws.params.InternetGatewayIds;


  // TODO implement code

  var ret = {
    InternetGateways: [ /*S3u*/{
      Attachments: [ {
        State: '',
        VpcId: '',
      }, /* ...*/ ],
      InternetGatewayId: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeKeyPairs = function DescribeKeyPairs(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var keyNames = aws.params.KeyNames /* Type list */;


  // TODO implement code

  var ret = {
    KeyPairs: [ {
      KeyFingerprint: '',
      KeyName: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeMovingAddresses = function DescribeMovingAddresses(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var maxResults = aws.params.MaxResults /* Type integer */;
  var nextToken = aws.params.NextToken;
  var publicIps = aws.params.PublicIps;


  // TODO implement code

  var ret = {
    MovingAddressStatuses: [ {
      MoveStatus: '',
      PublicIp: '',
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeNatGateways = function DescribeNatGateways(aws) {
  var filter = aws.params.Filter;
  var maxResults = aws.params.MaxResults /* Type integer */;
  var natGatewayIds = aws.params.NatGatewayIds;
  var nextToken = aws.params.NextToken;


  // TODO implement code

  var ret = {
    NatGateways: [ /*S41*/{
      CreateTime: awsCommon.timestamp(),
      DeleteTime: awsCommon.timestamp(),
      FailureCode: '',
      FailureMessage: '',
      NatGatewayAddresses: [ {
        AllocationId: '',
        NetworkInterfaceId: '',
        PrivateIp: '',
        PublicIp: '',
      }, /* ...*/ ],
      NatGatewayId: '',
      State: '',
      SubnetId: '',
      VpcId: '',
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeNetworkAcls = function DescribeNetworkAcls(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var networkAclIds = aws.params.NetworkAclIds;


  // TODO implement code

  var ret = {
    NetworkAcls: [ /*S47*/{
      Associations: [ {
        NetworkAclAssociationId: '',
        NetworkAclId: '',
        SubnetId: '',
      }, /* ...*/ ],
      Entries: [ {
        CidrBlock: '',
        Egress: false,
        IcmpTypeCode: /*S4b*/{
          Code: 0,
          Type: 0,
        },
        PortRange: /*S4c*/{
          From: 0,
          To: 0,
        },
        Protocol: '',
        RuleAction: '',
        RuleNumber: 0,
      }, /* ...*/ ],
      IsDefault: false,
      NetworkAclId: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      VpcId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeNetworkInterfaceAttribute = function DescribeNetworkInterfaceAttribute(aws) {
  var attribute = aws.params.Attribute;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var networkInterfaceId = aws.params.NetworkInterfaceId;
  if (!networkInterfaceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter NetworkInterfaceId'];
  }


  // TODO implement code

  var ret = {
    Attachment: /*S4p*/{
      AttachTime: awsCommon.timestamp(),
      AttachmentId: '',
      DeleteOnTermination: false,
      DeviceIndex: 0,
      InstanceId: '',
      InstanceOwnerId: '',
      Status: '',
    },
    Description: /*S34*/{
      Value: '',
    },
    Groups: /*S4n*/[ {
      GroupId: '',
      GroupName: '',
    }, /* ...*/ ],
    NetworkInterfaceId: '',
    SourceDestCheck: /*Sas*/{
      Value: false,
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeNetworkInterfaces = function DescribeNetworkInterfaces(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var networkInterfaceIds = aws.params.NetworkInterfaceIds /* Type list */;


  // TODO implement code

  var ret = {
    NetworkInterfaces: [ /*S4l*/{
      Association: /*S4q*/{
        AllocationId: '',
        AssociationId: '',
        IpOwnerId: '',
        PublicDnsName: '',
        PublicIp: '',
      },
      Attachment: /*S4p*/{
        AttachTime: awsCommon.timestamp(),
        AttachmentId: '',
        DeleteOnTermination: false,
        DeviceIndex: 0,
        InstanceId: '',
        InstanceOwnerId: '',
        Status: '',
      },
      AvailabilityZone: '',
      Description: '',
      Groups: /*S4n*/[ {
        GroupId: '',
        GroupName: '',
      }, /* ...*/ ],
      InterfaceType: '',
      MacAddress: '',
      NetworkInterfaceId: '',
      OwnerId: '',
      PrivateDnsName: '',
      PrivateIpAddress: '',
      PrivateIpAddresses: [ {
        Association: /*S4q*/{
        AllocationId: '',
        AssociationId: '',
        IpOwnerId: '',
        PublicDnsName: '',
        PublicIp: '',
      },
        Primary: false,
        PrivateDnsName: '',
        PrivateIpAddress: '',
      }, /* ...*/ ],
      RequesterId: '',
      RequesterManaged: false,
      SourceDestCheck: false,
      Status: '',
      SubnetId: '',
      TagSet: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      VpcId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribePlacementGroups = function DescribePlacementGroups(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var groupNames = aws.params.GroupNames /* Type list */;


  // TODO implement code

  var ret = {
    PlacementGroups: [ {
      GroupName: '',
      State: '',
      Strategy: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribePrefixLists = function DescribePrefixLists(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var maxResults = aws.params.MaxResults /* Type integer */;
  var nextToken = aws.params.NextToken;
  var prefixListIds = aws.params.PrefixListIds;


  // TODO implement code

  var ret = {
    NextToken: '',
    PrefixLists: [ {
      Cidrs: /*S27*/[ '', /* ...*/ ],
      PrefixListId: '',
      PrefixListName: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeRegions = function DescribeRegions(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var regionNames = aws.params.RegionNames /* Type list */;


  // TODO implement code

  var ret = {
    Regions: [ {
      Endpoint: '',
      RegionName: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeReservedInstances = function DescribeReservedInstances(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var offeringType = aws.params.OfferingType;
  var reservedInstancesIds = aws.params.ReservedInstancesIds;


  // TODO implement code

  var ret = {
    ReservedInstances: [ {
      AvailabilityZone: '',
      CurrencyCode: '',
      Duration: 0 /*Long*/,
      End: awsCommon.timestamp(),
      FixedPrice: 9.0,
      InstanceCount: 0,
      InstanceTenancy: '',
      InstanceType: '',
      OfferingType: '',
      ProductDescription: '',
      RecurringCharges: /*Sd7*/[ {
        Amount: 0.0 /*Double*/,
        Frequency: '',
      }, /* ...*/ ],
      ReservedInstancesId: '',
      Start: awsCommon.timestamp(),
      State: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      UsagePrice: 9.0,
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeReservedInstancesListings = function DescribeReservedInstancesListings(aws) {
  var filters = aws.params.Filters;
  var reservedInstancesId = aws.params.ReservedInstancesId;
  var reservedInstancesListingId = aws.params.ReservedInstancesListingId;


  // TODO implement code

  var ret = {
    ReservedInstancesListings: /*S1v*/[ {
      ClientToken: '',
      CreateDate: awsCommon.timestamp(),
      InstanceCounts: [ {
        InstanceCount: 0,
        State: '',
      }, /* ...*/ ],
      PriceSchedules: [ {
        Active: false,
        CurrencyCode: '',
        Price: 0.0 /*Double*/,
        Term: 0 /*Long*/,
      }, /* ...*/ ],
      ReservedInstancesId: '',
      ReservedInstancesListingId: '',
      Status: '',
      StatusMessage: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      UpdateDate: awsCommon.timestamp(),
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeReservedInstancesModifications = function DescribeReservedInstancesModifications(aws) {
  var filters = aws.params.Filters;
  var nextToken = aws.params.NextToken;
  var reservedInstancesModificationIds = aws.params.ReservedInstancesModificationIds /* Type list */;


  // TODO implement code

  var ret = {
    NextToken: '',
    ReservedInstancesModifications: [ {
      ClientToken: '',
      CreateDate: awsCommon.timestamp(),
      EffectiveDate: awsCommon.timestamp(),
      ModificationResults: [ {
        ReservedInstancesId: '',
        TargetConfiguration: /*Sdl*/{
          AvailabilityZone: '',
          InstanceCount: 0,
          InstanceType: '',
          Platform: '',
        },
      }, /* ...*/ ],
      ReservedInstancesIds: [ {
        ReservedInstancesId: '',
      }, /* ...*/ ],
      ReservedInstancesModificationId: '',
      Status: '',
      StatusMessage: '',
      UpdateDate: awsCommon.timestamp(),
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeReservedInstancesOfferings = function DescribeReservedInstancesOfferings(aws) {
  var availabilityZone = aws.params.AvailabilityZone;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var includeMarketplace = aws.params.IncludeMarketplace /* Type boolean */;
  var instanceTenancy = aws.params.InstanceTenancy;
  var instanceType = aws.params.InstanceType;
  var maxDuration = aws.params.MaxDuration /* Type long */;
  var maxInstanceCount = aws.params.MaxInstanceCount /* Type integer */;
  var maxResults = aws.params.MaxResults /* Type integer */;
  var minDuration = aws.params.MinDuration /* Type long */;
  var nextToken = aws.params.NextToken;
  var offeringType = aws.params.OfferingType;
  var productDescription = aws.params.ProductDescription;
  var reservedInstancesOfferingIds = aws.params.ReservedInstancesOfferingIds /* Type list */;


  // TODO implement code

  var ret = {
    NextToken: '',
    ReservedInstancesOfferings: [ {
      AvailabilityZone: '',
      CurrencyCode: '',
      Duration: 0 /*Long*/,
      FixedPrice: 9.0,
      InstanceTenancy: '',
      InstanceType: '',
      Marketplace: false,
      OfferingType: '',
      PricingDetails: [ {
        Count: 0,
        Price: 0.0 /*Double*/,
      }, /* ...*/ ],
      ProductDescription: '',
      RecurringCharges: /*Sd7*/[ {
        Amount: 0.0 /*Double*/,
        Frequency: '',
      }, /* ...*/ ],
      ReservedInstancesOfferingId: '',
      UsagePrice: 9.0,
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeRouteTables = function DescribeRouteTables(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var routeTableIds = aws.params.RouteTableIds;


  // TODO implement code

  var ret = {
    RouteTables: [ /*S54*/{
      Associations: [ {
        Main: false,
        RouteTableAssociationId: '',
        RouteTableId: '',
        SubnetId: '',
      }, /* ...*/ ],
      PropagatingVgws: [ {
        GatewayId: '',
      }, /* ...*/ ],
      RouteTableId: '',
      Routes: [ {
        DestinationCidrBlock: '',
        DestinationPrefixListId: '',
        GatewayId: '',
        InstanceId: '',
        InstanceOwnerId: '',
        NatGatewayId: '',
        NetworkInterfaceId: '',
        Origin: '',
        State: '',
        VpcPeeringConnectionId: '',
      }, /* ...*/ ],
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      VpcId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeScheduledInstanceAvailability = function DescribeScheduledInstanceAvailability(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var firstSlotStartTimeRange = aws.params.FirstSlotStartTimeRange /* Type structure */;
  var maxResults = aws.params.MaxResults /* Type integer */;
  var maxSlotDurationInHours = aws.params.MaxSlotDurationInHours /* Type integer */;
  var minSlotDurationInHours = aws.params.MinSlotDurationInHours /* Type integer */;
  var nextToken = aws.params.NextToken;
  var recurrence = aws.params.Recurrence /* Type structure */;
  if (!firstSlotStartTimeRange) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FirstSlotStartTimeRange'];
  }
  if (!recurrence) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Recurrence'];
  }


  // TODO implement code

  var ret = {
    NextToken: '',
    ScheduledInstanceAvailabilitySet: [ {
      AvailabilityZone: '',
      AvailableInstanceCount: 0,
      FirstSlotStartTime: awsCommon.timestamp(),
      HourlyPrice: '',
      InstanceType: '',
      MaxTermDurationInDays: 0,
      MinTermDurationInDays: 0,
      NetworkPlatform: '',
      Platform: '',
      PurchaseToken: '',
      Recurrence: /*Se3*/{
        Frequency: '',
        Interval: 0,
        OccurrenceDaySet: [ 0, /* ...*/ ],
        OccurrenceRelativeToEnd: false,
        OccurrenceUnit: '',
      },
      SlotDurationInHours: 0,
      TotalScheduledInstanceHours: 0,
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeScheduledInstances = function DescribeScheduledInstances(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var maxResults = aws.params.MaxResults /* Type integer */;
  var nextToken = aws.params.NextToken;
  var scheduledInstanceIds = aws.params.ScheduledInstanceIds /* Type list */;
  var slotStartTimeRange = aws.params.SlotStartTimeRange /* Type structure */;


  // TODO implement code

  var ret = {
    NextToken: '',
    ScheduledInstanceSet: [ /*Sea*/{
      AvailabilityZone: '',
      CreateDate: awsCommon.timestamp(),
      HourlyPrice: '',
      InstanceCount: 0,
      InstanceType: '',
      NetworkPlatform: '',
      NextSlotStartTime: awsCommon.timestamp(),
      Platform: '',
      PreviousSlotEndTime: awsCommon.timestamp(),
      Recurrence: /*Se3*/{
        Frequency: '',
        Interval: 0,
        OccurrenceDaySet: [ 0, /* ...*/ ],
        OccurrenceRelativeToEnd: false,
        OccurrenceUnit: '',
      },
      ScheduledInstanceId: '',
      SlotDurationInHours: 0,
      TermEndDate: awsCommon.timestamp(),
      TermStartDate: awsCommon.timestamp(),
      TotalScheduledInstanceHours: 0,
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeSecurityGroups = function DescribeSecurityGroups(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var groupIds = aws.params.GroupIds;
  var groupNames = aws.params.GroupNames;


  // TODO implement code

  var ret = {
    SecurityGroups: [ {
      Description: '',
      GroupId: '',
      GroupName: '',
      IpPermissions: /*S16*/[ {
        FromPort: 0,
        IpProtocol: '',
        IpRanges: [ {
          CidrIp: '',
        }, /* ...*/ ],
        PrefixListIds: [ {
          PrefixListId: '',
        }, /* ...*/ ],
        ToPort: 0,
        UserIdGroupPairs: [ {
          GroupId: '',
          GroupName: '',
          PeeringStatus: '',
          UserId: '',
          VpcId: '',
          VpcPeeringConnectionId: '',
        }, /* ...*/ ],
      }, /* ...*/ ],
      IpPermissionsEgress: /*S16*/[ {
        FromPort: 0,
        IpProtocol: '',
        IpRanges: [ {
          CidrIp: '',
        }, /* ...*/ ],
        PrefixListIds: [ {
          PrefixListId: '',
        }, /* ...*/ ],
        ToPort: 0,
        UserIdGroupPairs: [ {
          GroupId: '',
          GroupName: '',
          PeeringStatus: '',
          UserId: '',
          VpcId: '',
          VpcPeeringConnectionId: '',
        }, /* ...*/ ],
      }, /* ...*/ ],
      OwnerId: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      VpcId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeSnapshotAttribute = function DescribeSnapshotAttribute(aws) {
  var attribute = aws.params.Attribute;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var snapshotId = aws.params.SnapshotId;
  if (!attribute) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Attribute'];
  }
  if (!snapshotId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SnapshotId'];
  }


  // TODO implement code

  var ret = {
    CreateVolumePermissions: /*Sej*/[ {
      Group: '',
      UserId: '',
    }, /* ...*/ ],
    ProductCodes: /*S9u*/[ {
      ProductCodeId: '',
      ProductCodeType: '',
    }, /* ...*/ ],
    SnapshotId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeSnapshots = function DescribeSnapshots(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var maxResults = aws.params.MaxResults /* Type integer */;
  var nextToken = aws.params.NextToken;
  var ownerIds = aws.params.OwnerIds;
  var restorableByUserIds = aws.params.RestorableByUserIds /* Type list */;
  var snapshotIds = aws.params.SnapshotIds /* Type list */;


  // TODO implement code

  var ret = {
    NextToken: '',
    Snapshots: [ /*S5g*/{
      DataEncryptionKeyId: '',
      Description: '',
      Encrypted: false,
      KmsKeyId: '',
      OwnerAlias: '',
      OwnerId: '',
      Progress: '',
      SnapshotId: '',
      StartTime: awsCommon.timestamp(),
      State: '',
      StateMessage: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      VolumeId: '',
      VolumeSize: 0,
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeSpotDatafeedSubscription = function DescribeSpotDatafeedSubscription(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;


  // TODO implement code

  var ret = {
    SpotDatafeedSubscription: /*S5k*/{
      Bucket: '',
      Fault: /*S5m*/{
        Code: '',
        Message: '',
      },
      OwnerId: '',
      Prefix: '',
      State: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeSpotFleetInstances = function DescribeSpotFleetInstances(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var maxResults = aws.params.MaxResults /* Type integer */;
  var nextToken = aws.params.NextToken;
  var spotFleetRequestId = aws.params.SpotFleetRequestId;
  if (!spotFleetRequestId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SpotFleetRequestId'];
  }


  // TODO implement code

  var ret = {
    ActiveInstances: [ {
      InstanceId: '',
      InstanceType: '',
      SpotInstanceRequestId: '',
    }, /* ...*/ ],
    NextToken: '',
    SpotFleetRequestId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeSpotFleetRequestHistory = function DescribeSpotFleetRequestHistory(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var eventType = aws.params.EventType;
  var maxResults = aws.params.MaxResults /* Type integer */;
  var nextToken = aws.params.NextToken;
  var spotFleetRequestId = aws.params.SpotFleetRequestId;
  var startTime = aws.params.StartTime /* Type timestamp */;
  if (!spotFleetRequestId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SpotFleetRequestId'];
  }
  if (!startTime) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter StartTime'];
  }


  // TODO implement code

  var ret = {
    HistoryRecords: [ {
      EventInformation: {
        EventDescription: '',
        EventSubType: '',
        InstanceId: '',
      },
      EventType: '',
      Timestamp: awsCommon.timestamp(),
    }, /* ...*/ ],
    LastEvaluatedTime: awsCommon.timestamp(),
    NextToken: '',
    SpotFleetRequestId: '',
    StartTime: awsCommon.timestamp(),
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeSpotFleetRequests = function DescribeSpotFleetRequests(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var maxResults = aws.params.MaxResults /* Type integer */;
  var nextToken = aws.params.NextToken;
  var spotFleetRequestIds = aws.params.SpotFleetRequestIds;


  // TODO implement code

  var ret = {
    NextToken: '',
    SpotFleetRequestConfigs: [ {
      CreateTime: awsCommon.timestamp(),
      SpotFleetRequestConfig: /*Sf6*/{
        AllocationStrategy: '',
        ClientToken: '',
        ExcessCapacityTerminationPolicy: '',
        IamFleetRole: '',
        LaunchSpecifications: [ {
          AddressingType: '',
          BlockDeviceMappings: /*S9x*/[ /*S3e*/{
            DeviceName: '',
            Ebs: {
              DeleteOnTermination: false,
              Encrypted: false,
              Iops: 0,
              SnapshotId: '',
              VolumeSize: 0,
              VolumeType: '',
            },
            NoDevice: '',
            VirtualName: '',
          }, /* ...*/ ],
          EbsOptimized: false,
          IamInstanceProfile: /*Sfd*/{
            Arn: '',
            Name: '',
          },
          ImageId: '',
          InstanceType: '',
          KernelId: '',
          KeyName: '',
          Monitoring: {
            Enabled: false,
          },
          NetworkInterfaces: /*Sfb*/[ {
            AssociatePublicIpAddress: false,
            DeleteOnTermination: false,
            Description: '',
            DeviceIndex: 0,
            Groups: /*S4h*/[ '', /* ...*/ ],
            NetworkInterfaceId: '',
            PrivateIpAddress: '',
            PrivateIpAddresses: /*S4i*/[ {
              Primary: false,
              PrivateIpAddress: '',
            }, /* ...*/ ],
            SecondaryPrivateIpAddressCount: 0,
            SubnetId: '',
          }, /* ...*/ ],
          Placement: /*Sf9*/{
            AvailabilityZone: '',
            GroupName: '',
          },
          RamdiskId: '',
          SecurityGroups: /*S4n*/[ {
            GroupId: '',
            GroupName: '',
          }, /* ...*/ ],
          SpotPrice: '',
          SubnetId: '',
          UserData: '',
          WeightedCapacity: 0.0 /*Double*/,
        }, /* ...*/ ],
        SpotPrice: '',
        TargetCapacity: 0,
        TerminateInstancesWithExpiration: false,
        ValidFrom: awsCommon.timestamp(),
        ValidUntil: awsCommon.timestamp(),
      },
      SpotFleetRequestId: '',
      SpotFleetRequestState: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeSpotInstanceRequests = function DescribeSpotInstanceRequests(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var spotInstanceRequestIds = aws.params.SpotInstanceRequestIds;


  // TODO implement code

  var ret = {
    SpotInstanceRequests: /*Sfi*/[ {
      ActualBlockHourlyPrice: '',
      AvailabilityZoneGroup: '',
      BlockDurationMinutes: 0,
      CreateTime: awsCommon.timestamp(),
      Fault: /*S5m*/{
        Code: '',
        Message: '',
      },
      InstanceId: '',
      LaunchGroup: '',
      LaunchSpecification: {
        AddressingType: '',
        BlockDeviceMappings: /*S9x*/[ /*S3e*/{
          DeviceName: '',
          Ebs: {
            DeleteOnTermination: false,
            Encrypted: false,
            Iops: 0,
            SnapshotId: '',
            VolumeSize: 0,
            VolumeType: '',
          },
          NoDevice: '',
          VirtualName: '',
        }, /* ...*/ ],
        EbsOptimized: false,
        IamInstanceProfile: /*Sfd*/{
          Arn: '',
          Name: '',
        },
        ImageId: '',
        InstanceType: '',
        KernelId: '',
        KeyName: '',
        Monitoring: /*Sfo*/{
          Enabled: false,
        },
        NetworkInterfaces: /*Sfb*/[ {
          AssociatePublicIpAddress: false,
          DeleteOnTermination: false,
          Description: '',
          DeviceIndex: 0,
          Groups: /*S4h*/[ '', /* ...*/ ],
          NetworkInterfaceId: '',
          PrivateIpAddress: '',
          PrivateIpAddresses: /*S4i*/[ {
            Primary: false,
            PrivateIpAddress: '',
          }, /* ...*/ ],
          SecondaryPrivateIpAddressCount: 0,
          SubnetId: '',
        }, /* ...*/ ],
        Placement: /*Sf9*/{
          AvailabilityZone: '',
          GroupName: '',
        },
        RamdiskId: '',
        SecurityGroups: /*S4n*/[ {
          GroupId: '',
          GroupName: '',
        }, /* ...*/ ],
        SubnetId: '',
        UserData: '',
      },
      LaunchedAvailabilityZone: '',
      ProductDescription: '',
      SpotInstanceRequestId: '',
      SpotPrice: '',
      State: '',
      Status: {
        Code: '',
        Message: '',
        UpdateTime: awsCommon.timestamp(),
      },
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      Type: '',
      ValidFrom: awsCommon.timestamp(),
      ValidUntil: awsCommon.timestamp(),
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeSpotPriceHistory = function DescribeSpotPriceHistory(aws) {
  var availabilityZone = aws.params.AvailabilityZone;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var endTime = aws.params.EndTime /* Type timestamp */;
  var filters = aws.params.Filters;
  var instanceTypes = aws.params.InstanceTypes /* Type list */;
  var maxResults = aws.params.MaxResults /* Type integer */;
  var nextToken = aws.params.NextToken;
  var productDescriptions = aws.params.ProductDescriptions /* Type list */;
  var startTime = aws.params.StartTime /* Type timestamp */;


  // TODO implement code

  var ret = {
    NextToken: '',
    SpotPriceHistory: [ {
      AvailabilityZone: '',
      InstanceType: '',
      ProductDescription: '',
      SpotPrice: '',
      Timestamp: awsCommon.timestamp(),
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeSubnets = function DescribeSubnets(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var subnetIds = aws.params.SubnetIds /* Type list */;


  // TODO implement code

  var ret = {
    Subnets: [ /*S5p*/{
      AvailabilityZone: '',
      AvailableIpAddressCount: 0,
      CidrBlock: '',
      DefaultForAz: false,
      MapPublicIpOnLaunch: false,
      State: '',
      SubnetId: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      VpcId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeTags = function DescribeTags(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var maxResults = aws.params.MaxResults /* Type integer */;
  var nextToken = aws.params.NextToken;


  // TODO implement code

  var ret = {
    NextToken: '',
    Tags: [ {
      Key: '',
      ResourceId: '',
      ResourceType: '',
      Value: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeVolumeAttribute = function DescribeVolumeAttribute(aws) {
  var attribute = aws.params.Attribute;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var volumeId = aws.params.VolumeId;
  if (!volumeId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VolumeId'];
  }


  // TODO implement code

  var ret = {
    AutoEnableIO: /*Sas*/{
      Value: false,
    },
    ProductCodes: /*S9u*/[ {
      ProductCodeId: '',
      ProductCodeType: '',
    }, /* ...*/ ],
    VolumeId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeVolumeStatus = function DescribeVolumeStatus(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var maxResults = aws.params.MaxResults /* Type integer */;
  var nextToken = aws.params.NextToken;
  var volumeIds = aws.params.VolumeIds;


  // TODO implement code

  var ret = {
    NextToken: '',
    VolumeStatuses: [ {
      Actions: [ {
        Code: '',
        Description: '',
        EventId: '',
        EventType: '',
      }, /* ...*/ ],
      AvailabilityZone: '',
      Events: [ {
        Description: '',
        EventId: '',
        EventType: '',
        NotAfter: awsCommon.timestamp(),
        NotBefore: awsCommon.timestamp(),
      }, /* ...*/ ],
      VolumeId: '',
      VolumeStatus: {
        Details: [ {
          Name: '',
          Status: '',
        }, /* ...*/ ],
        Status: '',
      },
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeVolumes = function DescribeVolumes(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var maxResults = aws.params.MaxResults /* Type integer */;
  var nextToken = aws.params.NextToken;
  var volumeIds = aws.params.VolumeIds;


  // TODO implement code

  var ret = {
    NextToken: '',
    Volumes: [ /*S5u*/{
      Attachments: [ /*Sz*/{
        AttachTime: awsCommon.timestamp(),
        DeleteOnTermination: false,
        Device: '',
        InstanceId: '',
        State: '',
        VolumeId: '',
      }, /* ...*/ ],
      AvailabilityZone: '',
      CreateTime: awsCommon.timestamp(),
      Encrypted: false,
      Iops: 0,
      KmsKeyId: '',
      Size: 0,
      SnapshotId: '',
      State: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      VolumeId: '',
      VolumeType: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeVpcAttribute = function DescribeVpcAttribute(aws) {
  var attribute = aws.params.Attribute;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var vpcId = aws.params.VpcId;
  if (!attribute) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Attribute'];
  }
  if (!vpcId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpcId'];
  }


  // TODO implement code

  var ret = {
    EnableDnsHostnames: /*Sas*/{
      Value: false,
    },
    EnableDnsSupport: /*Sas*/{
      Value: false,
    },
    VpcId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeVpcClassicLink = function DescribeVpcClassicLink(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var vpcIds = aws.params.VpcIds;


  // TODO implement code

  var ret = {
    Vpcs: [ {
      ClassicLinkEnabled: false,
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      VpcId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeVpcClassicLinkDnsSupport = function DescribeVpcClassicLinkDnsSupport(aws) {
  var maxResults = aws.params.MaxResults /* Type integer */;
  var nextToken = aws.params.NextToken;
  var vpcIds = aws.params.VpcIds;


  // TODO implement code

  var ret = {
    NextToken: '',
    Vpcs: [ {
      ClassicLinkDnsSupported: false,
      VpcId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeVpcEndpointServices = function DescribeVpcEndpointServices(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var maxResults = aws.params.MaxResults /* Type integer */;
  var nextToken = aws.params.NextToken;


  // TODO implement code

  var ret = {
    NextToken: '',
    ServiceNames: /*S27*/[ '', /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeVpcEndpoints = function DescribeVpcEndpoints(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var maxResults = aws.params.MaxResults /* Type integer */;
  var nextToken = aws.params.NextToken;
  var vpcEndpointIds = aws.params.VpcEndpointIds;


  // TODO implement code

  var ret = {
    NextToken: '',
    VpcEndpoints: [ /*S64*/{
      CreationTimestamp: awsCommon.timestamp(),
      PolicyDocument: '',
      RouteTableIds: /*S27*/[ '', /* ...*/ ],
      ServiceName: '',
      State: '',
      VpcEndpointId: '',
      VpcId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeVpcPeeringConnections = function DescribeVpcPeeringConnections(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var vpcPeeringConnectionIds = aws.params.VpcPeeringConnectionIds;


  // TODO implement code

  var ret = {
    VpcPeeringConnections: [ /*S5*/{
      AccepterVpcInfo: /*S6*/{
        CidrBlock: '',
        OwnerId: '',
        PeeringOptions: {
          AllowEgressFromLocalClassicLinkToRemoteVpc: false,
          AllowEgressFromLocalVpcToRemoteClassicLink: false,
        },
        VpcId: '',
      },
      ExpirationTime: awsCommon.timestamp(),
      RequesterVpcInfo: /*S6*/{
        CidrBlock: '',
        OwnerId: '',
        PeeringOptions: {
          AllowEgressFromLocalClassicLinkToRemoteVpc: false,
          AllowEgressFromLocalVpcToRemoteClassicLink: false,
        },
        VpcId: '',
      },
      Status: {
        Code: '',
        Message: '',
      },
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      VpcPeeringConnectionId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeVpcs = function DescribeVpcs(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var vpcIds = aws.params.VpcIds /* Type list */;


  // TODO implement code

  var ret = {
    Vpcs: [ /*S60*/{
      CidrBlock: '',
      DhcpOptionsId: '',
      InstanceTenancy: '',
      IsDefault: false,
      State: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      VpcId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeVpnConnections = function DescribeVpnConnections(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var vpnConnectionIds = aws.params.VpnConnectionIds /* Type list */;


  // TODO implement code

  var ret = {
    VpnConnections: [ /*S6b*/{
      CustomerGatewayConfiguration: '',
      CustomerGatewayId: '',
      Options: {
        StaticRoutesOnly: false,
      },
      Routes: [ {
        DestinationCidrBlock: '',
        Source: '',
        State: '',
      }, /* ...*/ ],
      State: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      Type: '',
      VgwTelemetry: [ {
        AcceptedRouteCount: 0,
        LastStatusChange: awsCommon.timestamp(),
        OutsideIpAddress: '',
        Status: '',
        StatusMessage: '',
      }, /* ...*/ ],
      VpnConnectionId: '',
      VpnGatewayId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeVpnGateways = function DescribeVpnGateways(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var filters = aws.params.Filters;
  var vpnGatewayIds = aws.params.VpnGatewayIds /* Type list */;


  // TODO implement code

  var ret = {
    VpnGateways: [ /*S6n*/{
      AvailabilityZone: '',
      State: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      Type: '',
      VpcAttachments: [ /*S13*/{
        State: '',
        VpcId: '',
      }, /* ...*/ ],
      VpnGatewayId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DetachClassicLinkVpc = function DetachClassicLinkVpc(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var instanceId = aws.params.InstanceId;
  var vpcId = aws.params.VpcId;
  if (!instanceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceId'];
  }
  if (!vpcId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpcId'];
  }


  // TODO implement code

  var ret = {
    Return: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DetachInternetGateway = function DetachInternetGateway(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var internetGatewayId = aws.params.InternetGatewayId;
  var vpcId = aws.params.VpcId;
  if (!internetGatewayId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InternetGatewayId'];
  }
  if (!vpcId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpcId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DetachNetworkInterface = function DetachNetworkInterface(aws) {
  var attachmentId = aws.params.AttachmentId;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var force = aws.params.Force /* Type boolean */;
  if (!attachmentId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AttachmentId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DetachVolume = function DetachVolume(aws) {
  var device = aws.params.Device;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var force = aws.params.Force /* Type boolean */;
  var instanceId = aws.params.InstanceId;
  var volumeId = aws.params.VolumeId;
  if (!volumeId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VolumeId'];
  }


  // TODO implement code

  var ret = /*Sz*/{
    AttachTime: awsCommon.timestamp(),
    DeleteOnTermination: false,
    Device: '',
    InstanceId: '',
    State: '',
    VolumeId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DetachVpnGateway = function DetachVpnGateway(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var vpcId = aws.params.VpcId;
  var vpnGatewayId = aws.params.VpnGatewayId;
  if (!vpcId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpcId'];
  }
  if (!vpnGatewayId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpnGatewayId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DisableVgwRoutePropagation = function DisableVgwRoutePropagation(aws) {
  var gatewayId = aws.params.GatewayId;
  var routeTableId = aws.params.RouteTableId;
  if (!gatewayId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayId'];
  }
  if (!routeTableId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RouteTableId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DisableVpcClassicLink = function DisableVpcClassicLink(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var vpcId = aws.params.VpcId;
  if (!vpcId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpcId'];
  }


  // TODO implement code

  var ret = {
    Return: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DisableVpcClassicLinkDnsSupport = function DisableVpcClassicLinkDnsSupport(aws) {
  var vpcId = aws.params.VpcId;


  // TODO implement code

  var ret = {
    Return: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DisassociateAddress = function DisassociateAddress(aws) {
  var associationId = aws.params.AssociationId;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var publicIp = aws.params.PublicIp;


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DisassociateRouteTable = function DisassociateRouteTable(aws) {
  var associationId = aws.params.AssociationId;
  var dryRun = aws.params.DryRun /* Type boolean */;
  if (!associationId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AssociationId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.EnableVgwRoutePropagation = function EnableVgwRoutePropagation(aws) {
  var gatewayId = aws.params.GatewayId;
  var routeTableId = aws.params.RouteTableId;
  if (!gatewayId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayId'];
  }
  if (!routeTableId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RouteTableId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.EnableVolumeIO = function EnableVolumeIO(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var volumeId = aws.params.VolumeId;
  if (!volumeId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VolumeId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.EnableVpcClassicLink = function EnableVpcClassicLink(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var vpcId = aws.params.VpcId;
  if (!vpcId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpcId'];
  }


  // TODO implement code

  var ret = {
    Return: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.EnableVpcClassicLinkDnsSupport = function EnableVpcClassicLinkDnsSupport(aws) {
  var vpcId = aws.params.VpcId;


  // TODO implement code

  var ret = {
    Return: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetConsoleOutput = function GetConsoleOutput(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var instanceId = aws.params.InstanceId;
  if (!instanceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceId'];
  }


  // TODO implement code

  var ret = {
    InstanceId: '',
    Output: '',
    Timestamp: awsCommon.timestamp(),
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetPasswordData = function GetPasswordData(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var instanceId = aws.params.InstanceId;
  if (!instanceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceId'];
  }


  // TODO implement code

  var ret = {
    InstanceId: '',
    PasswordData: '',
    Timestamp: awsCommon.timestamp(),
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ImportImage = function ImportImage(aws) {
  var architecture = aws.params.Architecture;
  var clientData = aws.params.ClientData;
  var clientToken = aws.params.ClientToken;
  var description = aws.params.Description;
  var diskContainers = aws.params.DiskContainers /* Type list */;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var hypervisor = aws.params.Hypervisor;
  var licenseType = aws.params.LicenseType;
  var platform = aws.params.Platform;
  var roleName = aws.params.RoleName;


  // TODO implement code

  var ret = {
    Architecture: '',
    Description: '',
    Hypervisor: '',
    ImageId: '',
    ImportTaskId: '',
    LicenseType: '',
    Platform: '',
    Progress: '',
    SnapshotDetails: /*Sah*/[ {
      Description: '',
      DeviceName: '',
      DiskImageSize: 0.0 /*Double*/,
      Format: '',
      Progress: '',
      SnapshotId: '',
      Status: '',
      StatusMessage: '',
      Url: '',
      UserBucket: /*Saj*/{
        S3Bucket: '',
        S3Key: '',
      },
    }, /* ...*/ ],
    Status: '',
    StatusMessage: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ImportInstance = function ImportInstance(aws) {
  var description = aws.params.Description;
  var diskImages = aws.params.DiskImages /* Type list */;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var launchSpecification = aws.params.LaunchSpecification /* Type structure */;
  var platform = aws.params.Platform;
  if (!platform) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Platform'];
  }


  // TODO implement code

  var ret = {
    ConversionTask: /*S8j*/{
      ConversionTaskId: '',
      ExpirationTime: '',
      ImportInstance: {
        Description: '',
        InstanceId: '',
        Platform: '',
        Volumes: [ {
          AvailabilityZone: '',
          BytesConverted: 0 /*Long*/,
          Description: '',
          Image: /*S8n*/{
            Checksum: '',
            Format: '',
            ImportManifestUrl: '',
            Size: 0 /*Long*/,
          },
          Status: '',
          StatusMessage: '',
          Volume: /*S8o*/{
            Id: '',
            Size: 0 /*Long*/,
          },
        }, /* ...*/ ],
      },
      ImportVolume: {
        AvailabilityZone: '',
        BytesConverted: 0 /*Long*/,
        Description: '',
        Image: /*S8n*/{
            Checksum: '',
            Format: '',
            ImportManifestUrl: '',
            Size: 0 /*Long*/,
          },
        Volume: /*S8o*/{
            Id: '',
            Size: 0 /*Long*/,
          },
      },
      State: '',
      StatusMessage: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ImportKeyPair = function ImportKeyPair(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var keyName = aws.params.KeyName;
  var publicKeyMaterial = aws.params.PublicKeyMaterial /* Type blob */;
  if (!keyName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter KeyName'];
  }
  if (!publicKeyMaterial) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PublicKeyMaterial'];
  }


  // TODO implement code

  var ret = {
    KeyFingerprint: '',
    KeyName: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ImportSnapshot = function ImportSnapshot(aws) {
  var clientData = aws.params.ClientData;
  var clientToken = aws.params.ClientToken;
  var description = aws.params.Description;
  var diskContainer = aws.params.DiskContainer /* Type structure */;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var roleName = aws.params.RoleName;


  // TODO implement code

  var ret = {
    Description: '',
    ImportTaskId: '',
    SnapshotTaskDetail: /*Sao*/{
      Description: '',
      DiskImageSize: 0.0 /*Double*/,
      Format: '',
      Progress: '',
      SnapshotId: '',
      Status: '',
      StatusMessage: '',
      Url: '',
      UserBucket: /*Saj*/{
        S3Bucket: '',
        S3Key: '',
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ImportVolume = function ImportVolume(aws) {
  var availabilityZone = aws.params.AvailabilityZone;
  var description = aws.params.Description;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var image = aws.params.Image;
  var volume = aws.params.Volume;
  if (!availabilityZone) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AvailabilityZone'];
  }
  if (!image) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Image'];
  }
  if (!volume) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Volume'];
  }


  // TODO implement code

  var ret = {
    ConversionTask: /*S8j*/{
      ConversionTaskId: '',
      ExpirationTime: '',
      ImportInstance: {
        Description: '',
        InstanceId: '',
        Platform: '',
        Volumes: [ {
          AvailabilityZone: '',
          BytesConverted: 0 /*Long*/,
          Description: '',
          Image: /*S8n*/{
            Checksum: '',
            Format: '',
            ImportManifestUrl: '',
            Size: 0 /*Long*/,
          },
          Status: '',
          StatusMessage: '',
          Volume: /*S8o*/{
            Id: '',
            Size: 0 /*Long*/,
          },
        }, /* ...*/ ],
      },
      ImportVolume: {
        AvailabilityZone: '',
        BytesConverted: 0 /*Long*/,
        Description: '',
        Image: /*S8n*/{
            Checksum: '',
            Format: '',
            ImportManifestUrl: '',
            Size: 0 /*Long*/,
          },
        Volume: /*S8o*/{
            Id: '',
            Size: 0 /*Long*/,
          },
      },
      State: '',
      StatusMessage: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ModifyHosts = function ModifyHosts(aws) {
  var autoPlacement = aws.params.AutoPlacement;
  var hostIds = aws.params.HostIds;
  if (!autoPlacement) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AutoPlacement'];
  }
  if (!hostIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter HostIds'];
  }


  // TODO implement code

  var ret = {
    Successful: /*Sk*/[ '', /* ...*/ ],
    Unsuccessful: /*Siy*/[ /*S3a*/{
      Error: {
        Code: '',
        Message: '',
      },
      ResourceId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ModifyIdFormat = function ModifyIdFormat(aws) {
  var resource = aws.params.Resource;
  var useLongIds = aws.params.UseLongIds /* Type boolean */;
  if (!resource) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Resource'];
  }
  if (!useLongIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter UseLongIds'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ModifyImageAttribute = function ModifyImageAttribute(aws) {
  var attribute = aws.params.Attribute;
  var description = aws.params.Description;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var imageId = aws.params.ImageId;
  var launchPermission = aws.params.LaunchPermission /* Type structure */;
  var operationType = aws.params.OperationType;
  var productCodes = aws.params.ProductCodes /* Type list */;
  var userGroups = aws.params.UserGroups /* Type list */;
  var userIds = aws.params.UserIds;
  var value = aws.params.Value;
  if (!imageId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ImageId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ModifyInstanceAttribute = function ModifyInstanceAttribute(aws) {
  var attribute = aws.params.Attribute;
  var blockDeviceMappings = aws.params.BlockDeviceMappings /* Type list */;
  var disableApiTermination = aws.params.DisableApiTermination;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var ebsOptimized = aws.params.EbsOptimized;
  var groups = aws.params.Groups;
  var instanceId = aws.params.InstanceId;
  var instanceInitiatedShutdownBehavior = aws.params.InstanceInitiatedShutdownBehavior;
  var instanceType = aws.params.InstanceType;
  var kernel = aws.params.Kernel;
  var ramdisk = aws.params.Ramdisk;
  var sourceDestCheck = aws.params.SourceDestCheck;
  var sriovNetSupport = aws.params.SriovNetSupport;
  var userData = aws.params.UserData /* Type structure */;
  var value = aws.params.Value;
  if (!instanceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ModifyInstancePlacement = function ModifyInstancePlacement(aws) {
  var affinity = aws.params.Affinity;
  var hostId = aws.params.HostId;
  var instanceId = aws.params.InstanceId;
  var tenancy = aws.params.Tenancy;
  if (!instanceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceId'];
  }


  // TODO implement code

  var ret = {
    Return: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ModifyNetworkInterfaceAttribute = function ModifyNetworkInterfaceAttribute(aws) {
  var attachment = aws.params.Attachment /* Type structure */;
  var description = aws.params.Description;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var groups = aws.params.Groups;
  var networkInterfaceId = aws.params.NetworkInterfaceId;
  var sourceDestCheck = aws.params.SourceDestCheck;
  if (!networkInterfaceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter NetworkInterfaceId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ModifyReservedInstances = function ModifyReservedInstances(aws) {
  var clientToken = aws.params.ClientToken;
  var reservedInstancesIds = aws.params.ReservedInstancesIds;
  var targetConfigurations = aws.params.TargetConfigurations /* Type list */;
  if (!reservedInstancesIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ReservedInstancesIds'];
  }
  if (!targetConfigurations) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TargetConfigurations'];
  }


  // TODO implement code

  var ret = {
    ReservedInstancesModificationId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ModifySnapshotAttribute = function ModifySnapshotAttribute(aws) {
  var attribute = aws.params.Attribute;
  var createVolumePermission = aws.params.CreateVolumePermission /* Type structure */;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var groupNames = aws.params.GroupNames;
  var operationType = aws.params.OperationType;
  var snapshotId = aws.params.SnapshotId;
  var userIds = aws.params.UserIds;
  if (!snapshotId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SnapshotId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ModifySpotFleetRequest = function ModifySpotFleetRequest(aws) {
  var excessCapacityTerminationPolicy = aws.params.ExcessCapacityTerminationPolicy;
  var spotFleetRequestId = aws.params.SpotFleetRequestId;
  var targetCapacity = aws.params.TargetCapacity /* Type integer */;
  if (!spotFleetRequestId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SpotFleetRequestId'];
  }


  // TODO implement code

  var ret = {
    Return: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ModifySubnetAttribute = function ModifySubnetAttribute(aws) {
  var mapPublicIpOnLaunch = aws.params.MapPublicIpOnLaunch;
  var subnetId = aws.params.SubnetId;
  if (!subnetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SubnetId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ModifyVolumeAttribute = function ModifyVolumeAttribute(aws) {
  var autoEnableIO = aws.params.AutoEnableIO;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var volumeId = aws.params.VolumeId;
  if (!volumeId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VolumeId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ModifyVpcAttribute = function ModifyVpcAttribute(aws) {
  var enableDnsHostnames = aws.params.EnableDnsHostnames;
  var enableDnsSupport = aws.params.EnableDnsSupport;
  var vpcId = aws.params.VpcId;
  if (!vpcId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpcId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ModifyVpcEndpoint = function ModifyVpcEndpoint(aws) {
  var addRouteTableIds = aws.params.AddRouteTableIds;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var policyDocument = aws.params.PolicyDocument;
  var removeRouteTableIds = aws.params.RemoveRouteTableIds;
  var resetPolicy = aws.params.ResetPolicy /* Type boolean */;
  var vpcEndpointId = aws.params.VpcEndpointId;
  if (!vpcEndpointId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpcEndpointId'];
  }


  // TODO implement code

  var ret = {
    Return: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ModifyVpcPeeringConnectionOptions = function ModifyVpcPeeringConnectionOptions(aws) {
  var accepterPeeringConnectionOptions = aws.params.AccepterPeeringConnectionOptions;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var requesterPeeringConnectionOptions = aws.params.RequesterPeeringConnectionOptions;
  var vpcPeeringConnectionId = aws.params.VpcPeeringConnectionId;
  if (!vpcPeeringConnectionId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpcPeeringConnectionId'];
  }


  // TODO implement code

  var ret = {
    AccepterPeeringConnectionOptions: /*Sjw*/{
      AllowEgressFromLocalClassicLinkToRemoteVpc: false,
      AllowEgressFromLocalVpcToRemoteClassicLink: false,
    },
    RequesterPeeringConnectionOptions: /*Sjw*/{
      AllowEgressFromLocalClassicLinkToRemoteVpc: false,
      AllowEgressFromLocalVpcToRemoteClassicLink: false,
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.MonitorInstances = function MonitorInstances(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var instanceIds = aws.params.InstanceIds;
  if (!instanceIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceIds'];
  }


  // TODO implement code

  var ret = {
    InstanceMonitorings: /*Sjz*/[ {
      InstanceId: '',
      Monitoring: /*Sbj*/{
        State: '',
      },
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.MoveAddressToVpc = function MoveAddressToVpc(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var publicIp = aws.params.PublicIp;
  if (!publicIp) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PublicIp'];
  }


  // TODO implement code

  var ret = {
    AllocationId: '',
    Status: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.PurchaseReservedInstancesOffering = function PurchaseReservedInstancesOffering(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var instanceCount = aws.params.InstanceCount /* Type integer */;
  var limitPrice = aws.params.LimitPrice /* Type structure */;
  var reservedInstancesOfferingId = aws.params.ReservedInstancesOfferingId;
  if (!instanceCount) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceCount'];
  }
  if (!reservedInstancesOfferingId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ReservedInstancesOfferingId'];
  }


  // TODO implement code

  var ret = {
    ReservedInstancesId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.PurchaseScheduledInstances = function PurchaseScheduledInstances(aws) {
  var clientToken = aws.params.ClientToken;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var purchaseRequests = aws.params.PurchaseRequests /* Type list */;
  if (!purchaseRequests) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PurchaseRequests'];
  }


  // TODO implement code

  var ret = {
    ScheduledInstanceSet: [ /*Sea*/{
      AvailabilityZone: '',
      CreateDate: awsCommon.timestamp(),
      HourlyPrice: '',
      InstanceCount: 0,
      InstanceType: '',
      NetworkPlatform: '',
      NextSlotStartTime: awsCommon.timestamp(),
      Platform: '',
      PreviousSlotEndTime: awsCommon.timestamp(),
      Recurrence: /*Se3*/{
        Frequency: '',
        Interval: 0,
        OccurrenceDaySet: [ 0, /* ...*/ ],
        OccurrenceRelativeToEnd: false,
        OccurrenceUnit: '',
      },
      ScheduledInstanceId: '',
      SlotDurationInHours: 0,
      TermEndDate: awsCommon.timestamp(),
      TermStartDate: awsCommon.timestamp(),
      TotalScheduledInstanceHours: 0,
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RebootInstances = function RebootInstances(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var instanceIds = aws.params.InstanceIds;
  if (!instanceIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceIds'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.RegisterImage = function RegisterImage(aws) {
  var architecture = aws.params.Architecture;
  var blockDeviceMappings = aws.params.BlockDeviceMappings;
  var description = aws.params.Description;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var imageLocation = aws.params.ImageLocation;
  var kernelId = aws.params.KernelId;
  var name = aws.params.Name;
  var ramdiskId = aws.params.RamdiskId;
  var rootDeviceName = aws.params.RootDeviceName;
  var sriovNetSupport = aws.params.SriovNetSupport;
  var virtualizationType = aws.params.VirtualizationType;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }


  // TODO implement code

  var ret = {
    ImageId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RejectVpcPeeringConnection = function RejectVpcPeeringConnection(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var vpcPeeringConnectionId = aws.params.VpcPeeringConnectionId;
  if (!vpcPeeringConnectionId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpcPeeringConnectionId'];
  }


  // TODO implement code

  var ret = {
    Return: false,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ReleaseAddress = function ReleaseAddress(aws) {
  var allocationId = aws.params.AllocationId;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var publicIp = aws.params.PublicIp;


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ReleaseHosts = function ReleaseHosts(aws) {
  var hostIds = aws.params.HostIds;
  if (!hostIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter HostIds'];
  }


  // TODO implement code

  var ret = {
    Successful: /*Sk*/[ '', /* ...*/ ],
    Unsuccessful: /*Siy*/[ /*S3a*/{
      Error: {
        Code: '',
        Message: '',
      },
      ResourceId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ReplaceNetworkAclAssociation = function ReplaceNetworkAclAssociation(aws) {
  var associationId = aws.params.AssociationId;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var networkAclId = aws.params.NetworkAclId;
  if (!associationId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AssociationId'];
  }
  if (!networkAclId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter NetworkAclId'];
  }


  // TODO implement code

  var ret = {
    NewAssociationId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ReplaceNetworkAclEntry = function ReplaceNetworkAclEntry(aws) {
  var cidrBlock = aws.params.CidrBlock;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var egress = aws.params.Egress /* Type boolean */;
  var icmpTypeCode = aws.params.IcmpTypeCode;
  var networkAclId = aws.params.NetworkAclId;
  var portRange = aws.params.PortRange;
  var protocol = aws.params.Protocol;
  var ruleAction = aws.params.RuleAction;
  var ruleNumber = aws.params.RuleNumber /* Type integer */;
  if (!cidrBlock) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter CidrBlock'];
  }
  if (!egress) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Egress'];
  }
  if (!networkAclId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter NetworkAclId'];
  }
  if (!protocol) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Protocol'];
  }
  if (!ruleAction) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RuleAction'];
  }
  if (!ruleNumber) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RuleNumber'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ReplaceRoute = function ReplaceRoute(aws) {
  var destinationCidrBlock = aws.params.DestinationCidrBlock;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var gatewayId = aws.params.GatewayId;
  var instanceId = aws.params.InstanceId;
  var natGatewayId = aws.params.NatGatewayId;
  var networkInterfaceId = aws.params.NetworkInterfaceId;
  var routeTableId = aws.params.RouteTableId;
  var vpcPeeringConnectionId = aws.params.VpcPeeringConnectionId;
  if (!destinationCidrBlock) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DestinationCidrBlock'];
  }
  if (!routeTableId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RouteTableId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ReplaceRouteTableAssociation = function ReplaceRouteTableAssociation(aws) {
  var associationId = aws.params.AssociationId;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var routeTableId = aws.params.RouteTableId;
  if (!associationId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AssociationId'];
  }
  if (!routeTableId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RouteTableId'];
  }


  // TODO implement code

  var ret = {
    NewAssociationId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ReportInstanceStatus = function ReportInstanceStatus(aws) {
  var description = aws.params.Description;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var endTime = aws.params.EndTime /* Type timestamp */;
  var instances = aws.params.Instances;
  var reasonCodes = aws.params.ReasonCodes /* Type list */;
  var startTime = aws.params.StartTime /* Type timestamp */;
  var status = aws.params.Status;
  if (!instances) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Instances'];
  }
  if (!reasonCodes) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ReasonCodes'];
  }
  if (!status) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Status'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.RequestSpotFleet = function RequestSpotFleet(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var spotFleetRequestConfig = aws.params.SpotFleetRequestConfig;
  if (!spotFleetRequestConfig) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SpotFleetRequestConfig'];
  }


  // TODO implement code

  var ret = {
    SpotFleetRequestId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RequestSpotInstances = function RequestSpotInstances(aws) {
  var availabilityZoneGroup = aws.params.AvailabilityZoneGroup;
  var blockDurationMinutes = aws.params.BlockDurationMinutes /* Type integer */;
  var clientToken = aws.params.ClientToken;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var instanceCount = aws.params.InstanceCount /* Type integer */;
  var launchGroup = aws.params.LaunchGroup;
  var launchSpecification = aws.params.LaunchSpecification /* Type structure */;
  var spotPrice = aws.params.SpotPrice;
  var type = aws.params.Type;
  var validFrom = aws.params.ValidFrom /* Type timestamp */;
  var validUntil = aws.params.ValidUntil /* Type timestamp */;
  if (!spotPrice) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SpotPrice'];
  }


  // TODO implement code

  var ret = {
    SpotInstanceRequests: /*Sfi*/[ {
      ActualBlockHourlyPrice: '',
      AvailabilityZoneGroup: '',
      BlockDurationMinutes: 0,
      CreateTime: awsCommon.timestamp(),
      Fault: /*S5m*/{
        Code: '',
        Message: '',
      },
      InstanceId: '',
      LaunchGroup: '',
      LaunchSpecification: {
        AddressingType: '',
        BlockDeviceMappings: /*S9x*/[ /*S3e*/{
          DeviceName: '',
          Ebs: {
            DeleteOnTermination: false,
            Encrypted: false,
            Iops: 0,
            SnapshotId: '',
            VolumeSize: 0,
            VolumeType: '',
          },
          NoDevice: '',
          VirtualName: '',
        }, /* ...*/ ],
        EbsOptimized: false,
        IamInstanceProfile: /*Sfd*/{
          Arn: '',
          Name: '',
        },
        ImageId: '',
        InstanceType: '',
        KernelId: '',
        KeyName: '',
        Monitoring: /*Sfo*/{
          Enabled: false,
        },
        NetworkInterfaces: /*Sfb*/[ {
          AssociatePublicIpAddress: false,
          DeleteOnTermination: false,
          Description: '',
          DeviceIndex: 0,
          Groups: /*S4h*/[ '', /* ...*/ ],
          NetworkInterfaceId: '',
          PrivateIpAddress: '',
          PrivateIpAddresses: /*S4i*/[ {
            Primary: false,
            PrivateIpAddress: '',
          }, /* ...*/ ],
          SecondaryPrivateIpAddressCount: 0,
          SubnetId: '',
        }, /* ...*/ ],
        Placement: /*Sf9*/{
          AvailabilityZone: '',
          GroupName: '',
        },
        RamdiskId: '',
        SecurityGroups: /*S4n*/[ {
          GroupId: '',
          GroupName: '',
        }, /* ...*/ ],
        SubnetId: '',
        UserData: '',
      },
      LaunchedAvailabilityZone: '',
      ProductDescription: '',
      SpotInstanceRequestId: '',
      SpotPrice: '',
      State: '',
      Status: {
        Code: '',
        Message: '',
        UpdateTime: awsCommon.timestamp(),
      },
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      Type: '',
      ValidFrom: awsCommon.timestamp(),
      ValidUntil: awsCommon.timestamp(),
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ResetImageAttribute = function ResetImageAttribute(aws) {
  var attribute = aws.params.Attribute;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var imageId = aws.params.ImageId;
  if (!attribute) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Attribute'];
  }
  if (!imageId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ImageId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ResetInstanceAttribute = function ResetInstanceAttribute(aws) {
  var attribute = aws.params.Attribute;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var instanceId = aws.params.InstanceId;
  if (!attribute) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Attribute'];
  }
  if (!instanceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ResetNetworkInterfaceAttribute = function ResetNetworkInterfaceAttribute(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var networkInterfaceId = aws.params.NetworkInterfaceId;
  var sourceDestCheck = aws.params.SourceDestCheck;
  if (!networkInterfaceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter NetworkInterfaceId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.ResetSnapshotAttribute = function ResetSnapshotAttribute(aws) {
  var attribute = aws.params.Attribute;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var snapshotId = aws.params.SnapshotId;
  if (!attribute) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Attribute'];
  }
  if (!snapshotId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SnapshotId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.RestoreAddressToClassic = function RestoreAddressToClassic(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var publicIp = aws.params.PublicIp;
  if (!publicIp) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PublicIp'];
  }


  // TODO implement code

  var ret = {
    PublicIp: '',
    Status: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RevokeSecurityGroupEgress = function RevokeSecurityGroupEgress(aws) {
  var cidrIp = aws.params.CidrIp;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var fromPort = aws.params.FromPort /* Type integer */;
  var groupId = aws.params.GroupId;
  var ipPermissions = aws.params.IpPermissions;
  var ipProtocol = aws.params.IpProtocol;
  var sourceSecurityGroupName = aws.params.SourceSecurityGroupName;
  var sourceSecurityGroupOwnerId = aws.params.SourceSecurityGroupOwnerId;
  var toPort = aws.params.ToPort /* Type integer */;
  if (!groupId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GroupId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.RevokeSecurityGroupIngress = function RevokeSecurityGroupIngress(aws) {
  var cidrIp = aws.params.CidrIp;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var fromPort = aws.params.FromPort /* Type integer */;
  var groupId = aws.params.GroupId;
  var groupName = aws.params.GroupName;
  var ipPermissions = aws.params.IpPermissions;
  var ipProtocol = aws.params.IpProtocol;
  var sourceSecurityGroupName = aws.params.SourceSecurityGroupName;
  var sourceSecurityGroupOwnerId = aws.params.SourceSecurityGroupOwnerId;
  var toPort = aws.params.ToPort /* Type integer */;


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.RunInstances = function RunInstances(aws) {
  var additionalInfo = aws.params.AdditionalInfo;
  var blockDeviceMappings = aws.params.BlockDeviceMappings;
  var clientToken = aws.params.ClientToken;
  var disableApiTermination = aws.params.DisableApiTermination /* Type boolean */;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var ebsOptimized = aws.params.EbsOptimized /* Type boolean */;
  var iamInstanceProfile = aws.params.IamInstanceProfile;
  var imageId = aws.params.ImageId;
  var instanceInitiatedShutdownBehavior = aws.params.InstanceInitiatedShutdownBehavior;
  var instanceType = aws.params.InstanceType;
  var kernelId = aws.params.KernelId;
  var keyName = aws.params.KeyName;
  var maxCount = aws.params.MaxCount /* Type integer */;
  var minCount = aws.params.MinCount /* Type integer */;
  var monitoring = aws.params.Monitoring;
  var networkInterfaces = aws.params.NetworkInterfaces;
  var placement = aws.params.Placement;
  var privateIpAddress = aws.params.PrivateIpAddress;
  var ramdiskId = aws.params.RamdiskId;
  var securityGroupIds = aws.params.SecurityGroupIds;
  var securityGroups = aws.params.SecurityGroups;
  var subnetId = aws.params.SubnetId;
  var userData = aws.params.UserData;
  if (!imageId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ImageId'];
  }
  if (!maxCount) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MaxCount'];
  }
  if (!minCount) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MinCount'];
  }


  // TODO implement code

  var ret = /*Sbe*/{
    Groups: /*S4n*/[ {
      GroupId: '',
      GroupName: '',
    }, /* ...*/ ],
    Instances: [ {
      AmiLaunchIndex: 0,
      Architecture: '',
      BlockDeviceMappings: /*Sat*/[ {
        DeviceName: '',
        Ebs: {
          AttachTime: awsCommon.timestamp(),
          DeleteOnTermination: false,
          Status: '',
          VolumeId: '',
        },
      }, /* ...*/ ],
      ClientToken: '',
      EbsOptimized: false,
      Hypervisor: '',
      IamInstanceProfile: {
        Arn: '',
        Id: '',
      },
      ImageId: '',
      InstanceId: '',
      InstanceLifecycle: '',
      InstanceType: '',
      KernelId: '',
      KeyName: '',
      LaunchTime: awsCommon.timestamp(),
      Monitoring: /*Sbj*/{
        State: '',
      },
      NetworkInterfaces: [ {
        Association: /*Sbp*/{
          IpOwnerId: '',
          PublicDnsName: '',
          PublicIp: '',
        },
        Attachment: {
          AttachTime: awsCommon.timestamp(),
          AttachmentId: '',
          DeleteOnTermination: false,
          DeviceIndex: 0,
          Status: '',
        },
        Description: '',
        Groups: /*S4n*/[ {
      GroupId: '',
      GroupName: '',
    }, /* ...*/ ],
        MacAddress: '',
        NetworkInterfaceId: '',
        OwnerId: '',
        PrivateDnsName: '',
        PrivateIpAddress: '',
        PrivateIpAddresses: [ {
          Association: /*Sbp*/{
          IpOwnerId: '',
          PublicDnsName: '',
          PublicIp: '',
        },
          Primary: false,
          PrivateDnsName: '',
          PrivateIpAddress: '',
        }, /* ...*/ ],
        SourceDestCheck: false,
        Status: '',
        SubnetId: '',
        VpcId: '',
      }, /* ...*/ ],
      Placement: /*Sbi*/{
        Affinity: '',
        AvailabilityZone: '',
        GroupName: '',
        HostId: '',
        Tenancy: '',
      },
      Platform: '',
      PrivateDnsName: '',
      PrivateIpAddress: '',
      ProductCodes: /*S9u*/[ {
        ProductCodeId: '',
        ProductCodeType: '',
      }, /* ...*/ ],
      PublicDnsName: '',
      PublicIpAddress: '',
      RamdiskId: '',
      RootDeviceName: '',
      RootDeviceType: '',
      SecurityGroups: /*S4n*/[ {
      GroupId: '',
      GroupName: '',
    }, /* ...*/ ],
      SourceDestCheck: false,
      SpotInstanceRequestId: '',
      SriovNetSupport: '',
      State: /*Sb3*/{
        Code: 0,
        Name: '',
      },
      StateReason: /*Sa8*/{
        Code: '',
        Message: '',
      },
      StateTransitionReason: '',
      SubnetId: '',
      Tags: /*Sb*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      VirtualizationType: '',
      VpcId: '',
    }, /* ...*/ ],
    OwnerId: '',
    RequesterId: '',
    ReservationId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RunScheduledInstances = function RunScheduledInstances(aws) {
  var clientToken = aws.params.ClientToken;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var instanceCount = aws.params.InstanceCount /* Type integer */;
  var launchSpecification = aws.params.LaunchSpecification /* Type structure */;
  var scheduledInstanceId = aws.params.ScheduledInstanceId;
  if (!launchSpecification) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter LaunchSpecification'];
  }
  if (!scheduledInstanceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ScheduledInstanceId'];
  }


  // TODO implement code

  var ret = {
    InstanceIdSet: [ '', /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.StartInstances = function StartInstances(aws) {
  var additionalInfo = aws.params.AdditionalInfo;
  var dryRun = aws.params.DryRun /* Type boolean */;
  var instanceIds = aws.params.InstanceIds;
  if (!instanceIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceIds'];
  }


  // TODO implement code

  var ret = {
    StartingInstances: /*Slq*/[ {
      CurrentState: /*Sb3*/{
        Code: 0,
        Name: '',
      },
      InstanceId: '',
      PreviousState: /*Sb3*/{
        Code: 0,
        Name: '',
      },
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.StopInstances = function StopInstances(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var force = aws.params.Force /* Type boolean */;
  var instanceIds = aws.params.InstanceIds;
  if (!instanceIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceIds'];
  }


  // TODO implement code

  var ret = {
    StoppingInstances: /*Slq*/[ {
      CurrentState: /*Sb3*/{
        Code: 0,
        Name: '',
      },
      InstanceId: '',
      PreviousState: /*Sb3*/{
        Code: 0,
        Name: '',
      },
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.TerminateInstances = function TerminateInstances(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var instanceIds = aws.params.InstanceIds;
  if (!instanceIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceIds'];
  }


  // TODO implement code

  var ret = {
    TerminatingInstances: /*Slq*/[ {
      CurrentState: /*Sb3*/{
        Code: 0,
        Name: '',
      },
      InstanceId: '',
      PreviousState: /*Sb3*/{
        Code: 0,
        Name: '',
      },
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UnassignPrivateIpAddresses = function UnassignPrivateIpAddresses(aws) {
  var networkInterfaceId = aws.params.NetworkInterfaceId;
  var privateIpAddresses = aws.params.PrivateIpAddresses;
  if (!networkInterfaceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter NetworkInterfaceId'];
  }
  if (!privateIpAddresses) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PrivateIpAddresses'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.UnmonitorInstances = function UnmonitorInstances(aws) {
  var dryRun = aws.params.DryRun /* Type boolean */;
  var instanceIds = aws.params.InstanceIds;
  if (!instanceIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InstanceIds'];
  }


  // TODO implement code

  var ret = {
    InstanceMonitorings: /*Sjz*/[ {
      InstanceId: '',
      Monitoring: /*Sbj*/{
        State: '',
      },
    }, /* ...*/ ],
  };
  return [200, ret];
};
