'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * Amazon Elastic Compute Cloud version 2015-10-01
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.BundleInstance = function BundleInstance(aws) {
        var Storage = aws.params['Storage'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var InstanceId = aws.params['InstanceId'];
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }        if (! Storage) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Storage"];
        }

        // TODO implement code

        var ret = {
            BundleTask: /*S1j*/{
                StartTime: now(),
                InstanceId: "",
                State: "",
                BundleTaskError: {
                    Code: "",
                    Message: ""
                },
                Progress: "",
                Storage: /*S1f*/{
                    S3: {
                        UploadPolicy: null /*blob*/,
                        UploadPolicySignature: "",
                        Bucket: "",
                        AWSAccessKeyId: "",
                        Prefix: ""
                    }
                },
                BundleId: "",
                UpdateTime: now()
            }
        };
        return [200, ret];
    }
module.exports.CreateImage = function CreateImage(aws) {
        var BlockDeviceMappings = aws.params['BlockDeviceMappings'];
        var NoReboot = aws.params['NoReboot'] /* boolean */;
        var Description = aws.params['Description'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var InstanceId = aws.params['InstanceId'];
        var Name = aws.params['Name'];
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }

        // TODO implement code

        var ret = {
            ImageId: ""
        };
        return [200, ret];
    }
module.exports.MoveAddressToVpc = function MoveAddressToVpc(aws) {
        var PublicIp = aws.params['PublicIp'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! PublicIp) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PublicIp"];
        }

        // TODO implement code

        var ret = {
            AllocationId: "",
            Status: ""
        };
        return [200, ret];
    }
module.exports.ModifySubnetAttribute = function ModifySubnetAttribute(aws) {
        var MapPublicIpOnLaunch = aws.params['MapPublicIpOnLaunch'];
        var SubnetId = aws.params['SubnetId'];
        if (! SubnetId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubnetId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.MonitorInstances = function MonitorInstances(aws) {
        var InstanceIds = aws.params['InstanceIds'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! InstanceIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceIds"];
        }

        // TODO implement code

        var ret = {
            InstanceMonitorings: /*Sju*/[ {
                Monitoring: /*Sbi*/{
                    State: ""
                },
                InstanceId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeSpotFleetRequestHistory = function DescribeSpotFleetRequestHistory(aws) {
        var StartTime = aws.params['StartTime'] /* timestamp */;
        var MaxResults = aws.params['MaxResults'] /* integer */;
        var SpotFleetRequestId = aws.params['SpotFleetRequestId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var NextToken = aws.params['NextToken'];
        var EventType = aws.params['EventType'];
        if (! SpotFleetRequestId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SpotFleetRequestId"];
        }        if (! StartTime) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StartTime"];
        }

        // TODO implement code

        var ret = {
            StartTime: now(),
            HistoryRecords: [ {
                EventType: "",
                Timestamp: now(),
                EventInformation: {
                    EventDescription: "",
                    EventSubType: "",
                    InstanceId: ""
                }
            } /*, ...*/ ],
            SpotFleetRequestId: "",
            NextToken: "",
            LastEvaluatedTime: now()
        };
        return [200, ret];
    }
module.exports.DetachVolume = function DetachVolume(aws) {
        var VolumeId = aws.params['VolumeId'];
        var Force = aws.params['Force'] /* boolean */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var InstanceId = aws.params['InstanceId'];
        var Device = aws.params['Device'];
        if (! VolumeId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VolumeId"];
        }

        // TODO implement code

        var ret = /*Sy*/{
            AttachTime: now(),
            VolumeId: "",
            InstanceId: "",
            State: "",
            DeleteOnTermination: false,
            Device: ""
        };
        return [200, ret];
    }
module.exports.DeleteNetworkInterface = function DeleteNetworkInterface(aws) {
        var NetworkInterfaceId = aws.params['NetworkInterfaceId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! NetworkInterfaceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter NetworkInterfaceId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeReservedInstancesModifications = function DescribeReservedInstancesModifications(aws) {
        var NextToken = aws.params['NextToken'];
        var ReservedInstancesModificationIds = aws.params['ReservedInstancesModificationIds'] /* list */;
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            NextToken: "",
            ReservedInstancesModifications: [ {
                ClientToken: "",
                ReservedInstancesIds: [ {
                    ReservedInstancesId: ""
                } /*, ...*/ ],
                Status: "",
                ModificationResults: [ {
                    TargetConfiguration: /*Sdk*/{
                        InstanceType: "",
                        Platform: "",
                        AvailabilityZone: "",
                        InstanceCount: 0
                    },
                    ReservedInstancesId: ""
                } /*, ...*/ ],
                ReservedInstancesModificationId: "",
                EffectiveDate: now(),
                StatusMessage: "",
                UpdateDate: now(),
                CreateDate: now()
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DetachClassicLinkVpc = function DetachClassicLinkVpc(aws) {
        var VpcId = aws.params['VpcId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var InstanceId = aws.params['InstanceId'];
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }        if (! VpcId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpcId"];
        }

        // TODO implement code

        var ret = {
            Return: false
        };
        return [200, ret];
    }
module.exports.RevokeSecurityGroupEgress = function RevokeSecurityGroupEgress(aws) {
        var ToPort = aws.params['ToPort'] /* integer */;
        var CidrIp = aws.params['CidrIp'];
        var GroupId = aws.params['GroupId'];
        var IpProtocol = aws.params['IpProtocol'];
        var SourceSecurityGroupOwnerId = aws.params['SourceSecurityGroupOwnerId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var FromPort = aws.params['FromPort'] /* integer */;
        var SourceSecurityGroupName = aws.params['SourceSecurityGroupName'];
        var IpPermissions = aws.params['IpPermissions'];
        if (! GroupId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GroupId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeleteSecurityGroup = function DeleteSecurityGroup(aws) {
        var GroupName = aws.params['GroupName'];
        var GroupId = aws.params['GroupId'];
        var DryRun = aws.params['DryRun'] /* boolean */;


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.PurchaseReservedInstancesOffering = function PurchaseReservedInstancesOffering(aws) {
        var LimitPrice = aws.params['LimitPrice'] /* structure */;
        var InstanceCount = aws.params['InstanceCount'] /* integer */;
        var ReservedInstancesOfferingId = aws.params['ReservedInstancesOfferingId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! ReservedInstancesOfferingId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ReservedInstancesOfferingId"];
        }        if (! InstanceCount) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceCount"];
        }

        // TODO implement code

        var ret = {
            ReservedInstancesId: ""
        };
        return [200, ret];
    }
module.exports.DeleteNetworkAcl = function DeleteNetworkAcl(aws) {
        var NetworkAclId = aws.params['NetworkAclId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! NetworkAclId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter NetworkAclId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ReplaceNetworkAclAssociation = function ReplaceNetworkAclAssociation(aws) {
        var NetworkAclId = aws.params['NetworkAclId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var AssociationId = aws.params['AssociationId'];
        if (! AssociationId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AssociationId"];
        }        if (! NetworkAclId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter NetworkAclId"];
        }

        // TODO implement code

        var ret = {
            NewAssociationId: ""
        };
        return [200, ret];
    }
module.exports.DescribeInstances = function DescribeInstances(aws) {
        var InstanceIds = aws.params['InstanceIds'];
        var MaxResults = aws.params['MaxResults'] /* integer */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var NextToken = aws.params['NextToken'];
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            NextToken: "",
            Reservations: [ /*Sbd*/{
                RequesterId: "",
                OwnerId: "",
                Instances: [ {
                    LaunchTime: now(),
                    RamdiskId: "",
                    Placement: /*Sbh*/{
                        HostId: "",
                        Affinity: "",
                        AvailabilityZone: "",
                        GroupName: "",
                        Tenancy: ""
                    },
                    SriovNetSupport: "",
                    InstanceType: "",
                    SecurityGroups: /*S4m*/[ {
                        GroupId: "",
                        GroupName: ""
                    } /*, ...*/ ],
                    AmiLaunchIndex: 0,
                    RootDeviceName: "",
                    Hypervisor: "",
                    ProductCodes: /*S9t*/[ {
                        ProductCodeType: "",
                        ProductCodeId: ""
                    } /*, ...*/ ],
                    RootDeviceType: "",
                    VirtualizationType: "",
                    NetworkInterfaces: [ {
                        Association: /*Sbo*/{
                            PublicDnsName: "",
                            IpOwnerId: "",
                            PublicIp: ""
                        },
                        VpcId: "",
                        MacAddress: "",
                        NetworkInterfaceId: "",
                        Description: "",
                        Groups: /*S4m*/[ {
                        GroupId: "",
                        GroupName: ""
                    } /*, ...*/ ],
                        Attachment: {
                            DeviceIndex: 0,
                            AttachTime: now(),
                            AttachmentId: "",
                            DeleteOnTermination: false,
                            Status: ""
                        },
                        PrivateDnsName: "",
                        OwnerId: "",
                        SourceDestCheck: false,
                        PrivateIpAddress: "",
                        SubnetId: "",
                        Status: "",
                        PrivateIpAddresses: [ {
                            PrivateDnsName: "",
                            Primary: false,
                            PrivateIpAddress: "",
                            Association: /*Sbo*/{
                            PublicDnsName: "",
                            IpOwnerId: "",
                            PublicIp: ""
                        }
                        } /*, ...*/ ]
                    } /*, ...*/ ],
                    State: /*Sb2*/{
                        Name: "",
                        Code: 0
                    },
                    PublicDnsName: "",
                    StateTransitionReason: "",
                    PublicIpAddress: "",
                    StateReason: /*Sa7*/{
                        Code: "",
                        Message: ""
                    },
                    Platform: "",
                    KernelId: "",
                    KeyName: "",
                    EbsOptimized: false,
                    ClientToken: "",
                    SubnetId: "",
                    Monitoring: /*Sbi*/{
                        State: ""
                    },
                    BlockDeviceMappings: /*Sas*/[ {
                        DeviceName: "",
                        Ebs: {
                            AttachTime: now(),
                            DeleteOnTermination: false,
                            VolumeId: "",
                            Status: ""
                        }
                    } /*, ...*/ ],
                    IamInstanceProfile: {
                        Arn: "",
                        Id: ""
                    },
                    ImageId: "",
                    InstanceId: "",
                    SpotInstanceRequestId: "",
                    InstanceLifecycle: "",
                    PrivateDnsName: "",
                    Architecture: "",
                    SourceDestCheck: false,
                    PrivateIpAddress: "",
                    VpcId: "",
                    Tags: /*Sa*/[ {
                        Key: "",
                        Value: ""
                    } /*, ...*/ ]
                } /*, ...*/ ],
                Groups: /*S4m*/[ {
                        GroupId: "",
                        GroupName: ""
                    } /*, ...*/ ],
                ReservationId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeVpcPeeringConnections = function DescribeVpcPeeringConnections(aws) {
        var Filters = aws.params['Filters'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var VpcPeeringConnectionIds = aws.params['VpcPeeringConnectionIds'];


        // TODO implement code

        var ret = {
            VpcPeeringConnections: [ /*S5*/{
                VpcPeeringConnectionId: "",
                Status: {
                    Code: "",
                    Message: ""
                },
                RequesterVpcInfo: /*S6*/{
                    OwnerId: "",
                    VpcId: "",
                    CidrBlock: ""
                },
                AccepterVpcInfo: /*S6*/{
                    OwnerId: "",
                    VpcId: "",
                    CidrBlock: ""
                },
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ],
                ExpirationTime: now()
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateVpnGateway = function CreateVpnGateway(aws) {
        var Type = aws.params['Type'];
        var AvailabilityZone = aws.params['AvailabilityZone'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! Type) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Type"];
        }

        // TODO implement code

        var ret = {
            VpnGateway: /*S6m*/{
                AvailabilityZone: "",
                Type: "",
                State: "",
                VpcAttachments: [ /*S12*/{
                    VpcId: "",
                    State: ""
                } /*, ...*/ ],
                VpnGatewayId: "",
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ]
            }
        };
        return [200, ret];
    }
module.exports.ConfirmProductInstance = function ConfirmProductInstance(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var ProductCode = aws.params['ProductCode'];
        var InstanceId = aws.params['InstanceId'];
        if (! ProductCode) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ProductCode"];
        }        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }

        // TODO implement code

        var ret = {
            OwnerId: "",
            Return: false
        };
        return [200, ret];
    }
module.exports.DescribeVpnConnections = function DescribeVpnConnections(aws) {
        var VpnConnectionIds = aws.params['VpnConnectionIds'] /* list */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            VpnConnections: [ /*S6a*/{
                Options: {
                    StaticRoutesOnly: false
                },
                VgwTelemetry: [ {
                    AcceptedRouteCount: 0,
                    OutsideIpAddress: "",
                    StatusMessage: "",
                    Status: "",
                    LastStatusChange: now()
                } /*, ...*/ ],
                Type: "",
                VpnConnectionId: "",
                State: "",
                CustomerGatewayId: "",
                Routes: [ {
                    DestinationCidrBlock: "",
                    State: "",
                    Source: ""
                } /*, ...*/ ],
                CustomerGatewayConfiguration: "",
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ],
                VpnGatewayId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeImageAttribute = function DescribeImageAttribute(aws) {
        var ImageId = aws.params['ImageId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Attribute = aws.params['Attribute'];
        if (! ImageId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ImageId"];
        }        if (! Attribute) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Attribute"];
        }

        // TODO implement code

        var ret = {
            RamdiskId: /*S33*/{
                Value: ""
            },
            Description: /*S33*/{
                Value: ""
            },
            ImageId: "",
            KernelId: /*S33*/{
                Value: ""
            },
            SriovNetSupport: /*S33*/{
                Value: ""
            },
            LaunchPermissions: /*S9q*/[ {
                Group: "",
                UserId: ""
            } /*, ...*/ ],
            BlockDeviceMappings: /*S9w*/[ /*S3d*/{
                DeviceName: "",
                NoDevice: "",
                Ebs: {
                    SnapshotId: "",
                    Iops: 0,
                    VolumeType: "",
                    DeleteOnTermination: false,
                    VolumeSize: 0,
                    Encrypted: false
                },
                VirtualName: ""
            } /*, ...*/ ],
            ProductCodes: /*S9t*/[ {
                ProductCodeType: "",
                ProductCodeId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteFlowLogs = function DeleteFlowLogs(aws) {
        var FlowLogIds = aws.params['FlowLogIds'];
        if (! FlowLogIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter FlowLogIds"];
        }

        // TODO implement code

        var ret = {
            Unsuccessful: /*S38*/[ /*S39*/{
                Error: {
                    Code: "",
                    Message: ""
                },
                ResourceId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateSubnet = function CreateSubnet(aws) {
        var VpcId = aws.params['VpcId'];
        var AvailabilityZone = aws.params['AvailabilityZone'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var CidrBlock = aws.params['CidrBlock'];
        if (! VpcId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpcId"];
        }        if (! CidrBlock) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter CidrBlock"];
        }

        // TODO implement code

        var ret = {
            Subnet: /*S5o*/{
                AvailabilityZone: "",
                MapPublicIpOnLaunch: false,
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ],
                State: "",
                DefaultForAz: false,
                VpcId: "",
                SubnetId: "",
                AvailableIpAddressCount: 0,
                CidrBlock: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeKeyPairs = function DescribeKeyPairs(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var KeyNames = aws.params['KeyNames'] /* list */;
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            KeyPairs: [ {
                KeyName: "",
                KeyFingerprint: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.EnableVgwRoutePropagation = function EnableVgwRoutePropagation(aws) {
        var GatewayId = aws.params['GatewayId'];
        var RouteTableId = aws.params['RouteTableId'];
        if (! RouteTableId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RouteTableId"];
        }        if (! GatewayId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.AuthorizeSecurityGroupEgress = function AuthorizeSecurityGroupEgress(aws) {
        var ToPort = aws.params['ToPort'] /* integer */;
        var CidrIp = aws.params['CidrIp'];
        var GroupId = aws.params['GroupId'];
        var IpProtocol = aws.params['IpProtocol'];
        var SourceSecurityGroupOwnerId = aws.params['SourceSecurityGroupOwnerId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var FromPort = aws.params['FromPort'] /* integer */;
        var SourceSecurityGroupName = aws.params['SourceSecurityGroupName'];
        var IpPermissions = aws.params['IpPermissions'];
        if (! GroupId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GroupId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CreatePlacementGroup = function CreatePlacementGroup(aws) {
        var GroupName = aws.params['GroupName'];
        var Strategy = aws.params['Strategy'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! GroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GroupName"];
        }        if (! Strategy) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Strategy"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ModifyNetworkInterfaceAttribute = function ModifyNetworkInterfaceAttribute(aws) {
        var NetworkInterfaceId = aws.params['NetworkInterfaceId'];
        var Description = aws.params['Description'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Groups = aws.params['Groups'];
        var Attachment = aws.params['Attachment'] /* structure */;
        var SourceDestCheck = aws.params['SourceDestCheck'];
        if (! NetworkInterfaceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter NetworkInterfaceId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ModifyVolumeAttribute = function ModifyVolumeAttribute(aws) {
        var VolumeId = aws.params['VolumeId'];
        var AutoEnableIO = aws.params['AutoEnableIO'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! VolumeId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VolumeId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CreateSecurityGroup = function CreateSecurityGroup(aws) {
        var GroupName = aws.params['GroupName'];
        var VpcId = aws.params['VpcId'];
        var Description = aws.params['Description'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! GroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GroupName"];
        }        if (! Description) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Description"];
        }

        // TODO implement code

        var ret = {
            GroupId: ""
        };
        return [200, ret];
    }
module.exports.DeletePlacementGroup = function DeletePlacementGroup(aws) {
        var GroupName = aws.params['GroupName'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! GroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GroupName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeAccountAttributes = function DescribeAccountAttributes(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var AttributeNames = aws.params['AttributeNames'] /* list */;


        // TODO implement code

        var ret = {
            AccountAttributes: [ {
                AttributeName: "",
                AttributeValues: [ {
                    AttributeValue: ""
                } /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ModifySpotFleetRequest = function ModifySpotFleetRequest(aws) {
        var SpotFleetRequestId = aws.params['SpotFleetRequestId'];
        var TargetCapacity = aws.params['TargetCapacity'] /* integer */;
        var ExcessCapacityTerminationPolicy = aws.params['ExcessCapacityTerminationPolicy'];
        if (! SpotFleetRequestId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SpotFleetRequestId"];
        }

        // TODO implement code

        var ret = {
            Return: false
        };
        return [200, ret];
    }
module.exports.ResetNetworkInterfaceAttribute = function ResetNetworkInterfaceAttribute(aws) {
        var NetworkInterfaceId = aws.params['NetworkInterfaceId'];
        var SourceDestCheck = aws.params['SourceDestCheck'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! NetworkInterfaceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter NetworkInterfaceId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeleteKeyPair = function DeleteKeyPair(aws) {
        var KeyName = aws.params['KeyName'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! KeyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter KeyName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DisassociateAddress = function DisassociateAddress(aws) {
        var PublicIp = aws.params['PublicIp'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var AssociationId = aws.params['AssociationId'];


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeSnapshots = function DescribeSnapshots(aws) {
        var MaxResults = aws.params['MaxResults'] /* integer */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var NextToken = aws.params['NextToken'];
        var SnapshotIds = aws.params['SnapshotIds'] /* list */;
        var RestorableByUserIds = aws.params['RestorableByUserIds'] /* list */;
        var OwnerIds = aws.params['OwnerIds'];
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            NextToken: "",
            Snapshots: [ /*S5f*/{
                DataEncryptionKeyId: "",
                VolumeId: "",
                SnapshotId: "",
                KmsKeyId: "",
                Encrypted: false,
                VolumeSize: 0,
                StartTime: now(),
                Description: "",
                StateMessage: "",
                State: "",
                Progress: "",
                OwnerId: "",
                OwnerAlias: "",
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.RejectVpcPeeringConnection = function RejectVpcPeeringConnection(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var VpcPeeringConnectionId = aws.params['VpcPeeringConnectionId'];
        if (! VpcPeeringConnectionId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpcPeeringConnectionId"];
        }

        // TODO implement code

        var ret = {
            Return: false
        };
        return [200, ret];
    }
module.exports.DescribeConversionTasks = function DescribeConversionTasks(aws) {
        var ConversionTaskIds = aws.params['ConversionTaskIds'] /* list */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            ConversionTasks: [ /*S8i*/{
                StatusMessage: "",
                ImportVolume: {
                    Volume: /*S8n*/{
                        Size: 0 /*long*/,
                        Id: ""
                    },
                    BytesConverted: 0 /*long*/,
                    Description: "",
                    Image: /*S8m*/{
                        Checksum: "",
                        Size: 0 /*long*/,
                        Format: "",
                        ImportManifestUrl: ""
                    },
                    AvailabilityZone: ""
                },
                ConversionTaskId: "",
                State: "",
                ImportInstance: {
                    Platform: "",
                    Description: "",
                    Volumes: [ {
                        AvailabilityZone: "",
                        Description: "",
                        Image: /*S8m*/{
                        Checksum: "",
                        Size: 0 /*long*/,
                        Format: "",
                        ImportManifestUrl: ""
                    },
                        Volume: /*S8n*/{
                        Size: 0 /*long*/,
                        Id: ""
                    },
                        BytesConverted: 0 /*long*/,
                        Status: "",
                        StatusMessage: ""
                    } /*, ...*/ ],
                    InstanceId: ""
                },
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ],
                ExpirationTime: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ImportKeyPair = function ImportKeyPair(aws) {
        var PublicKeyMaterial = aws.params['PublicKeyMaterial'] /* blob */;
        var KeyName = aws.params['KeyName'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! KeyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter KeyName"];
        }        if (! PublicKeyMaterial) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PublicKeyMaterial"];
        }

        // TODO implement code

        var ret = {
            KeyName: "",
            KeyFingerprint: ""
        };
        return [200, ret];
    }
module.exports.DeleteTags = function DeleteTags(aws) {
        var Resources = aws.params['Resources'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Tags = aws.params['Tags'];
        if (! Resources) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Resources"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeSpotPriceHistory = function DescribeSpotPriceHistory(aws) {
        var StartTime = aws.params['StartTime'] /* timestamp */;
        var MaxResults = aws.params['MaxResults'] /* integer */;
        var AvailabilityZone = aws.params['AvailabilityZone'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var InstanceTypes = aws.params['InstanceTypes'] /* list */;
        var ProductDescriptions = aws.params['ProductDescriptions'] /* list */;
        var NextToken = aws.params['NextToken'];
        var EndTime = aws.params['EndTime'] /* timestamp */;
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            SpotPriceHistory: [ {
                InstanceType: "",
                Timestamp: now(),
                AvailabilityZone: "",
                SpotPrice: "",
                ProductDescription: ""
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.DeleteCustomerGateway = function DeleteCustomerGateway(aws) {
        var CustomerGatewayId = aws.params['CustomerGatewayId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! CustomerGatewayId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter CustomerGatewayId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeMovingAddresses = function DescribeMovingAddresses(aws) {
        var PublicIps = aws.params['PublicIps'];
        var NextToken = aws.params['NextToken'];
        var MaxResults = aws.params['MaxResults'] /* integer */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            MovingAddressStatuses: [ {
                PublicIp: "",
                MoveStatus: ""
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.EnableVpcClassicLink = function EnableVpcClassicLink(aws) {
        var VpcId = aws.params['VpcId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! VpcId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpcId"];
        }

        // TODO implement code

        var ret = {
            Return: false
        };
        return [200, ret];
    }
module.exports.DescribeNatGateways = function DescribeNatGateways(aws) {
        var MaxResults = aws.params['MaxResults'] /* integer */;
        var NextToken = aws.params['NextToken'];
        var NatGatewayIds = aws.params['NatGatewayIds'];
        var Filter = aws.params['Filter'];


        // TODO implement code

        var ret = {
            NatGateways: [ /*S40*/{
                NatGatewayAddresses: [ {
                    AllocationId: "",
                    NetworkInterfaceId: "",
                    PublicIp: "",
                    PrivateIp: ""
                } /*, ...*/ ],
                NatGatewayId: "",
                State: "",
                CreateTime: now(),
                VpcId: "",
                FailureCode: "",
                SubnetId: "",
                FailureMessage: "",
                DeleteTime: now()
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.DescribeVpcs = function DescribeVpcs(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var VpcIds = aws.params['VpcIds'] /* list */;
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            Vpcs: [ /*S5z*/{
                InstanceTenancy: "",
                IsDefault: false,
                State: "",
                DhcpOptionsId: "",
                VpcId: "",
                CidrBlock: "",
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteSnapshot = function DeleteSnapshot(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var SnapshotId = aws.params['SnapshotId'];
        if (! SnapshotId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SnapshotId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.EnableVpcClassicLinkDnsSupport = function EnableVpcClassicLinkDnsSupport(aws) {
        var VpcId = aws.params['VpcId'];


        // TODO implement code

        var ret = {
            Return: false
        };
        return [200, ret];
    }
module.exports.CreateKeyPair = function CreateKeyPair(aws) {
        var KeyName = aws.params['KeyName'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! KeyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter KeyName"];
        }

        // TODO implement code

        var ret = {
            KeyName: "",
            KeyFingerprint: "",
            KeyMaterial: ""
        };
        return [200, ret];
    }
module.exports.GetConsoleOutput = function GetConsoleOutput(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var InstanceId = aws.params['InstanceId'];
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }

        // TODO implement code

        var ret = {
            Timestamp: now(),
            InstanceId: "",
            Output: ""
        };
        return [200, ret];
    }
module.exports.DeleteRouteTable = function DeleteRouteTable(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var RouteTableId = aws.params['RouteTableId'];
        if (! RouteTableId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RouteTableId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.AttachNetworkInterface = function AttachNetworkInterface(aws) {
        var NetworkInterfaceId = aws.params['NetworkInterfaceId'];
        var DeviceIndex = aws.params['DeviceIndex'] /* integer */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var InstanceId = aws.params['InstanceId'];
        if (! NetworkInterfaceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter NetworkInterfaceId"];
        }        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }        if (! DeviceIndex) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DeviceIndex"];
        }

        // TODO implement code

        var ret = {
            AttachmentId: ""
        };
        return [200, ret];
    }
module.exports.EnableVolumeIO = function EnableVolumeIO(aws) {
        var VolumeId = aws.params['VolumeId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! VolumeId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VolumeId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.PurchaseScheduledInstances = function PurchaseScheduledInstances(aws) {
        var PurchaseRequests = aws.params['PurchaseRequests'] /* list */;
        var ClientToken = aws.params['ClientToken'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! PurchaseRequests) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PurchaseRequests"];
        }

        // TODO implement code

        var ret = {
            ScheduledInstanceSet: [ /*Se9*/{
                PreviousSlotEndTime: now(),
                Platform: "",
                CreateDate: now(),
                NetworkPlatform: "",
                InstanceType: "",
                NextSlotStartTime: now(),
                InstanceCount: 0,
                ScheduledInstanceId: "",
                AvailabilityZone: "",
                HourlyPrice: "",
                SlotDurationInHours: 0,
                Recurrence: /*Se2*/{
                    Frequency: "",
                    OccurrenceUnit: "",
                    OccurrenceDaySet: [ 0 /*, ...*/ ],
                    OccurrenceRelativeToEnd: false,
                    Interval: 0
                },
                TermStartDate: now(),
                TermEndDate: now(),
                TotalScheduledInstanceHours: 0
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeNetworkInterfaceAttribute = function DescribeNetworkInterfaceAttribute(aws) {
        var NetworkInterfaceId = aws.params['NetworkInterfaceId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Attribute = aws.params['Attribute'];
        if (! NetworkInterfaceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter NetworkInterfaceId"];
        }

        // TODO implement code

        var ret = {
            NetworkInterfaceId: "",
            SourceDestCheck: /*Sar*/{
                Value: false
            },
            Description: /*S33*/{
                Value: ""
            },
            Groups: /*S4m*/[ {
                GroupId: "",
                GroupName: ""
            } /*, ...*/ ],
            Attachment: /*S4o*/{
                AttachTime: now(),
                AttachmentId: "",
                InstanceId: "",
                DeviceIndex: 0,
                InstanceOwnerId: "",
                DeleteOnTermination: false,
                Status: ""
            }
        };
        return [200, ret];
    }
module.exports.DisableVgwRoutePropagation = function DisableVgwRoutePropagation(aws) {
        var GatewayId = aws.params['GatewayId'];
        var RouteTableId = aws.params['RouteTableId'];
        if (! RouteTableId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RouteTableId"];
        }        if (! GatewayId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeleteSpotDatafeedSubscription = function DeleteSpotDatafeedSubscription(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeSpotInstanceRequests = function DescribeSpotInstanceRequests(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var SpotInstanceRequestIds = aws.params['SpotInstanceRequestIds'];
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            SpotInstanceRequests: /*Sfh*/[ {
                CreateTime: now(),
                Fault: /*S5l*/{
                    Code: "",
                    Message: ""
                },
                SpotInstanceRequestId: "",
                LaunchGroup: "",
                State: "",
                ValidFrom: now(),
                ValidUntil: now(),
                ActualBlockHourlyPrice: "",
                BlockDurationMinutes: 0,
                Type: "",
                InstanceId: "",
                AvailabilityZoneGroup: "",
                LaunchedAvailabilityZone: "",
                LaunchSpecification: {
                    RamdiskId: "",
                    Placement: /*Sf8*/{
                        AvailabilityZone: "",
                        GroupName: ""
                    },
                    KernelId: "",
                    InstanceType: "",
                    KeyName: "",
                    NetworkInterfaces: /*Sfa*/[ {
                        NetworkInterfaceId: "",
                        DeleteOnTermination: false,
                        DeviceIndex: 0,
                        Description: "",
                        Groups: /*S4g*/[ "" /*, ...*/ ],
                        SecondaryPrivateIpAddressCount: 0,
                        AssociatePublicIpAddress: false,
                        PrivateIpAddress: "",
                        SubnetId: "",
                        PrivateIpAddresses: /*S4h*/[ {
                            Primary: false,
                            PrivateIpAddress: ""
                        } /*, ...*/ ]
                    } /*, ...*/ ],
                    IamInstanceProfile: /*Sfc*/{
                        Name: "",
                        Arn: ""
                    },
                    Monitoring: /*Sfn*/{
                        Enabled: false
                    },
                    BlockDeviceMappings: /*S9w*/[ /*S3d*/{
                        DeviceName: "",
                        NoDevice: "",
                        Ebs: {
                            SnapshotId: "",
                            Iops: 0,
                            VolumeType: "",
                            DeleteOnTermination: false,
                            VolumeSize: 0,
                            Encrypted: false
                        },
                        VirtualName: ""
                    } /*, ...*/ ],
                    AddressingType: "",
                    UserData: "",
                    ImageId: "",
                    SecurityGroups: /*S4m*/[ {
                        GroupId: "",
                        GroupName: ""
                    } /*, ...*/ ],
                    EbsOptimized: false,
                    SubnetId: ""
                },
                SpotPrice: "",
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ],
                Status: {
                    UpdateTime: now(),
                    Code: "",
                    Message: ""
                },
                ProductDescription: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeVolumes = function DescribeVolumes(aws) {
        var VolumeIds = aws.params['VolumeIds'];
        var MaxResults = aws.params['MaxResults'] /* integer */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var NextToken = aws.params['NextToken'];
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            NextToken: "",
            Volumes: [ /*S5t*/{
                VolumeId: "",
                State: "",
                SnapshotId: "",
                KmsKeyId: "",
                Size: 0,
                Encrypted: false,
                Attachments: [ /*Sy*/{
                    AttachTime: now(),
                    VolumeId: "",
                    InstanceId: "",
                    State: "",
                    DeleteOnTermination: false,
                    Device: ""
                } /*, ...*/ ],
                AvailabilityZone: "",
                CreateTime: now(),
                Iops: 0,
                VolumeType: "",
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ModifyInstanceAttribute = function ModifyInstanceAttribute(aws) {
        var DisableApiTermination = aws.params['DisableApiTermination'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var SriovNetSupport = aws.params['SriovNetSupport'];
        var InstanceType = aws.params['InstanceType'];
        var Groups = aws.params['Groups'];
        var Kernel = aws.params['Kernel'];
        var BlockDeviceMappings = aws.params['BlockDeviceMappings'] /* list */;
        var InstanceInitiatedShutdownBehavior = aws.params['InstanceInitiatedShutdownBehavior'];
        var UserData = aws.params['UserData'] /* structure */;
        var InstanceId = aws.params['InstanceId'];
        var Value = aws.params['Value'];
        var EbsOptimized = aws.params['EbsOptimized'];
        var SourceDestCheck = aws.params['SourceDestCheck'];
        var Attribute = aws.params['Attribute'];
        var Ramdisk = aws.params['Ramdisk'];
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeRouteTables = function DescribeRouteTables(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var RouteTableIds = aws.params['RouteTableIds'];
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            RouteTables: [ /*S53*/{
                PropagatingVgws: [ {
                    GatewayId: ""
                } /*, ...*/ ],
                Associations: [ {
                    SubnetId: "",
                    Main: false,
                    RouteTableAssociationId: "",
                    RouteTableId: ""
                } /*, ...*/ ],
                VpcId: "",
                RouteTableId: "",
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ],
                Routes: [ {
                    NetworkInterfaceId: "",
                    DestinationPrefixListId: "",
                    Origin: "",
                    GatewayId: "",
                    DestinationCidrBlock: "",
                    State: "",
                    InstanceOwnerId: "",
                    NatGatewayId: "",
                    VpcPeeringConnectionId: "",
                    InstanceId: ""
                } /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeInstanceStatus = function DescribeInstanceStatus(aws) {
        var MaxResults = aws.params['MaxResults'] /* integer */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var IncludeAllInstances = aws.params['IncludeAllInstances'] /* boolean */;
        var InstanceIds = aws.params['InstanceIds'];
        var NextToken = aws.params['NextToken'];
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            NextToken: "",
            InstanceStatuses: [ {
                AvailabilityZone: "",
                InstanceState: /*Sb2*/{
                    Name: "",
                    Code: 0
                },
                InstanceId: "",
                Events: [ {
                    NotBefore: now(),
                    Description: "",
                    NotAfter: now(),
                    Code: ""
                } /*, ...*/ ],
                SystemStatus: /*Sb4*/{
                    Details: [ {
                        Name: "",
                        Status: "",
                        ImpairedSince: now()
                    } /*, ...*/ ],
                    Status: ""
                },
                InstanceStatus: /*Sb4*/{
                    Details: [ {
                        Name: "",
                        Status: "",
                        ImpairedSince: now()
                    } /*, ...*/ ],
                    Status: ""
                }
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ModifyHosts = function ModifyHosts(aws) {
        var AutoPlacement = aws.params['AutoPlacement'];
        var HostIds = aws.params['HostIds'];
        if (! HostIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter HostIds"];
        }        if (! AutoPlacement) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoPlacement"];
        }

        // TODO implement code

        var ret = {
            Successful: /*Sj*/[ "" /*, ...*/ ],
            Unsuccessful: /*Six*/[ /*S39*/{
                Error: {
                    Code: "",
                    Message: ""
                },
                ResourceId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.AssociateAddress = function AssociateAddress(aws) {
        var AllocationId = aws.params['AllocationId'];
        var NetworkInterfaceId = aws.params['NetworkInterfaceId'];
        var PrivateIpAddress = aws.params['PrivateIpAddress'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var InstanceId = aws.params['InstanceId'];
        var AllowReassociation = aws.params['AllowReassociation'] /* boolean */;
        var PublicIp = aws.params['PublicIp'];


        // TODO implement code

        var ret = {
            AssociationId: ""
        };
        return [200, ret];
    }
module.exports.AuthorizeSecurityGroupIngress = function AuthorizeSecurityGroupIngress(aws) {
        var ToPort = aws.params['ToPort'] /* integer */;
        var CidrIp = aws.params['CidrIp'];
        var GroupId = aws.params['GroupId'];
        var IpProtocol = aws.params['IpProtocol'];
        var SourceSecurityGroupOwnerId = aws.params['SourceSecurityGroupOwnerId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var FromPort = aws.params['FromPort'] /* integer */;
        var GroupName = aws.params['GroupName'];
        var SourceSecurityGroupName = aws.params['SourceSecurityGroupName'];
        var IpPermissions = aws.params['IpPermissions'];


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeReservedInstances = function DescribeReservedInstances(aws) {
        var OfferingType = aws.params['OfferingType'];
        var ReservedInstancesIds = aws.params['ReservedInstancesIds'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            ReservedInstances: [ {
                Duration: 0 /*long*/,
                OfferingType: "",
                ProductDescription: "",
                End: now(),
                InstanceType: "",
                RecurringCharges: /*Sd6*/[ {
                    Frequency: "",
                    Amount: 0.0 /*double*/
                } /*, ...*/ ],
                InstanceCount: 0,
                CurrencyCode: "",
                InstanceTenancy: "",
                AvailabilityZone: "",
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ],
                State: "",
                Start: now(),
                FixedPrice: 9.0,
                ReservedInstancesId: "",
                UsagePrice: 9.0
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ImportImage = function ImportImage(aws) {
        var ClientData = aws.params['ClientData'];
        var LicenseType = aws.params['LicenseType'];
        var ClientToken = aws.params['ClientToken'];
        var Description = aws.params['Description'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Platform = aws.params['Platform'];
        var DiskContainers = aws.params['DiskContainers'] /* list */;
        var RoleName = aws.params['RoleName'];
        var Architecture = aws.params['Architecture'];
        var Hypervisor = aws.params['Hypervisor'];


        // TODO implement code

        var ret = {
            SnapshotDetails: /*Sag*/[ {
                DeviceName: "",
                Progress: "",
                Description: "",
                Format: "",
                StatusMessage: "",
                SnapshotId: "",
                DiskImageSize: 0.0 /*double*/,
                Url: "",
                UserBucket: /*Sai*/{
                    S3Bucket: "",
                    S3Key: ""
                },
                Status: ""
            } /*, ...*/ ],
            LicenseType: "",
            Description: "",
            Architecture: "",
            StatusMessage: "",
            Platform: "",
            Progress: "",
            ImageId: "",
            ImportTaskId: "",
            Hypervisor: "",
            Status: ""
        };
        return [200, ret];
    }
module.exports.DeleteVpc = function DeleteVpc(aws) {
        var VpcId = aws.params['VpcId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! VpcId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpcId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribePlacementGroups = function DescribePlacementGroups(aws) {
        var Filters = aws.params['Filters'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var GroupNames = aws.params['GroupNames'] /* list */;


        // TODO implement code

        var ret = {
            PlacementGroups: [ {
                Strategy: "",
                GroupName: "",
                State: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeInstanceAttribute = function DescribeInstanceAttribute(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var InstanceId = aws.params['InstanceId'];
        var Attribute = aws.params['Attribute'];
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }        if (! Attribute) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Attribute"];
        }

        // TODO implement code

        var ret = {
            RamdiskId: /*S33*/{
                Value: ""
            },
            DisableApiTermination: /*Sar*/{
                Value: false
            },
            KernelId: /*S33*/{
                Value: ""
            },
            SriovNetSupport: /*S33*/{
                Value: ""
            },
            InstanceType: /*S33*/{
                Value: ""
            },
            RootDeviceName: /*S33*/{
                Value: ""
            },
            ProductCodes: /*S9t*/[ {
                ProductCodeType: "",
                ProductCodeId: ""
            } /*, ...*/ ],
            BlockDeviceMappings: /*Sas*/[ {
                DeviceName: "",
                Ebs: {
                    AttachTime: now(),
                    DeleteOnTermination: false,
                    VolumeId: "",
                    Status: ""
                }
            } /*, ...*/ ],
            InstanceInitiatedShutdownBehavior: /*S33*/{
                Value: ""
            },
            UserData: /*S33*/{
                Value: ""
            },
            InstanceId: "",
            EbsOptimized: /*Sar*/{
                Value: false
            },
            SourceDestCheck: /*Sar*/{
                Value: false
            },
            Groups: /*S4m*/[ {
                GroupId: "",
                GroupName: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateFlowLogs = function CreateFlowLogs(aws) {
        var LogGroupName = aws.params['LogGroupName'];
        var ClientToken = aws.params['ClientToken'];
        var ResourceIds = aws.params['ResourceIds'];
        var TrafficType = aws.params['TrafficType'];
        var ResourceType = aws.params['ResourceType'];
        var DeliverLogsPermissionArn = aws.params['DeliverLogsPermissionArn'];
        if (! ResourceIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResourceIds"];
        }        if (! ResourceType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResourceType"];
        }        if (! TrafficType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TrafficType"];
        }        if (! LogGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LogGroupName"];
        }        if (! DeliverLogsPermissionArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DeliverLogsPermissionArn"];
        }

        // TODO implement code

        var ret = {
            ClientToken: "",
            FlowLogIds: /*S26*/[ "" /*, ...*/ ],
            Unsuccessful: /*S38*/[ /*S39*/{
                Error: {
                    Code: "",
                    Message: ""
                },
                ResourceId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.AllocateAddress = function AllocateAddress(aws) {
        var Domain = aws.params['Domain'];
        var DryRun = aws.params['DryRun'] /* boolean */;


        // TODO implement code

        var ret = {
            AllocationId: "",
            Domain: "",
            PublicIp: ""
        };
        return [200, ret];
    }
module.exports.ImportVolume = function ImportVolume(aws) {
        var Description = aws.params['Description'];
        var AvailabilityZone = aws.params['AvailabilityZone'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Image = aws.params['Image'];
        var Volume = aws.params['Volume'];
        if (! AvailabilityZone) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AvailabilityZone"];
        }        if (! Image) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Image"];
        }        if (! Volume) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Volume"];
        }

        // TODO implement code

        var ret = {
            ConversionTask: /*S8i*/{
                StatusMessage: "",
                ImportVolume: {
                    Volume: /*S8n*/{
                        Size: 0 /*long*/,
                        Id: ""
                    },
                    BytesConverted: 0 /*long*/,
                    Description: "",
                    Image: /*S8m*/{
                        Checksum: "",
                        Size: 0 /*long*/,
                        Format: "",
                        ImportManifestUrl: ""
                    },
                    AvailabilityZone: ""
                },
                ConversionTaskId: "",
                State: "",
                ImportInstance: {
                    Platform: "",
                    Description: "",
                    Volumes: [ {
                        AvailabilityZone: "",
                        Description: "",
                        Image: /*S8m*/{
                        Checksum: "",
                        Size: 0 /*long*/,
                        Format: "",
                        ImportManifestUrl: ""
                    },
                        Volume: /*S8n*/{
                        Size: 0 /*long*/,
                        Id: ""
                    },
                        BytesConverted: 0 /*long*/,
                        Status: "",
                        StatusMessage: ""
                    } /*, ...*/ ],
                    InstanceId: ""
                },
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ],
                ExpirationTime: ""
            }
        };
        return [200, ret];
    }
module.exports.CreateTags = function CreateTags(aws) {
        var Resources = aws.params['Resources'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Tags = aws.params['Tags'];
        if (! Resources) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Resources"];
        }        if (! Tags) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Tags"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeImportSnapshotTasks = function DescribeImportSnapshotTasks(aws) {
        var ImportTaskIds = aws.params['ImportTaskIds'];
        var NextToken = aws.params['NextToken'];
        var Filters = aws.params['Filters'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var MaxResults = aws.params['MaxResults'] /* integer */;


        // TODO implement code

        var ret = {
            ImportSnapshotTasks: [ {
                Description: "",
                ImportTaskId: "",
                SnapshotTaskDetail: /*San*/{
                    Progress: "",
                    Description: "",
                    Format: "",
                    StatusMessage: "",
                    SnapshotId: "",
                    DiskImageSize: 0.0 /*double*/,
                    Url: "",
                    UserBucket: /*Sai*/{
                        S3Bucket: "",
                        S3Key: ""
                    },
                    Status: ""
                }
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.ImportInstance = function ImportInstance(aws) {
        var LaunchSpecification = aws.params['LaunchSpecification'] /* structure */;
        var Platform = aws.params['Platform'];
        var Description = aws.params['Description'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var DiskImages = aws.params['DiskImages'] /* list */;
        if (! Platform) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Platform"];
        }

        // TODO implement code

        var ret = {
            ConversionTask: /*S8i*/{
                StatusMessage: "",
                ImportVolume: {
                    Volume: /*S8n*/{
                        Size: 0 /*long*/,
                        Id: ""
                    },
                    BytesConverted: 0 /*long*/,
                    Description: "",
                    Image: /*S8m*/{
                        Checksum: "",
                        Size: 0 /*long*/,
                        Format: "",
                        ImportManifestUrl: ""
                    },
                    AvailabilityZone: ""
                },
                ConversionTaskId: "",
                State: "",
                ImportInstance: {
                    Platform: "",
                    Description: "",
                    Volumes: [ {
                        AvailabilityZone: "",
                        Description: "",
                        Image: /*S8m*/{
                        Checksum: "",
                        Size: 0 /*long*/,
                        Format: "",
                        ImportManifestUrl: ""
                    },
                        Volume: /*S8n*/{
                        Size: 0 /*long*/,
                        Id: ""
                    },
                        BytesConverted: 0 /*long*/,
                        Status: "",
                        StatusMessage: ""
                    } /*, ...*/ ],
                    InstanceId: ""
                },
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ],
                ExpirationTime: ""
            }
        };
        return [200, ret];
    }
module.exports.DetachVpnGateway = function DetachVpnGateway(aws) {
        var VpcId = aws.params['VpcId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var VpnGatewayId = aws.params['VpnGatewayId'];
        if (! VpnGatewayId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpnGatewayId"];
        }        if (! VpcId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpcId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.RunInstances = function RunInstances(aws) {
        var RamdiskId = aws.params['RamdiskId'];
        var Placement = aws.params['Placement'];
        var DisableApiTermination = aws.params['DisableApiTermination'] /* boolean */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var InstanceType = aws.params['InstanceType'];
        var NetworkInterfaces = aws.params['NetworkInterfaces'];
        var InstanceInitiatedShutdownBehavior = aws.params['InstanceInitiatedShutdownBehavior'];
        var UserData = aws.params['UserData'];
        var EbsOptimized = aws.params['EbsOptimized'] /* boolean */;
        var AdditionalInfo = aws.params['AdditionalInfo'];
        var MinCount = aws.params['MinCount'] /* integer */;
        var KernelId = aws.params['KernelId'];
        var SecurityGroupIds = aws.params['SecurityGroupIds'];
        var KeyName = aws.params['KeyName'];
        var ClientToken = aws.params['ClientToken'];
        var Monitoring = aws.params['Monitoring'];
        var BlockDeviceMappings = aws.params['BlockDeviceMappings'];
        var IamInstanceProfile = aws.params['IamInstanceProfile'];
        var MaxCount = aws.params['MaxCount'] /* integer */;
        var ImageId = aws.params['ImageId'];
        var SecurityGroups = aws.params['SecurityGroups'];
        var PrivateIpAddress = aws.params['PrivateIpAddress'];
        var SubnetId = aws.params['SubnetId'];
        if (! ImageId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ImageId"];
        }        if (! MinCount) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MinCount"];
        }        if (! MaxCount) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MaxCount"];
        }

        // TODO implement code

        var ret = /*Sbd*/{
            RequesterId: "",
            OwnerId: "",
            Instances: [ {
                LaunchTime: now(),
                RamdiskId: "",
                Placement: /*Sbh*/{
                    HostId: "",
                    Affinity: "",
                    AvailabilityZone: "",
                    GroupName: "",
                    Tenancy: ""
                },
                SriovNetSupport: "",
                InstanceType: "",
                SecurityGroups: /*S4m*/[ {
                    GroupId: "",
                    GroupName: ""
                } /*, ...*/ ],
                AmiLaunchIndex: 0,
                RootDeviceName: "",
                Hypervisor: "",
                ProductCodes: /*S9t*/[ {
                    ProductCodeType: "",
                    ProductCodeId: ""
                } /*, ...*/ ],
                RootDeviceType: "",
                VirtualizationType: "",
                NetworkInterfaces: [ {
                    Association: /*Sbo*/{
                        PublicDnsName: "",
                        IpOwnerId: "",
                        PublicIp: ""
                    },
                    VpcId: "",
                    MacAddress: "",
                    NetworkInterfaceId: "",
                    Description: "",
                    Groups: /*S4m*/[ {
                    GroupId: "",
                    GroupName: ""
                } /*, ...*/ ],
                    Attachment: {
                        DeviceIndex: 0,
                        AttachTime: now(),
                        AttachmentId: "",
                        DeleteOnTermination: false,
                        Status: ""
                    },
                    PrivateDnsName: "",
                    OwnerId: "",
                    SourceDestCheck: false,
                    PrivateIpAddress: "",
                    SubnetId: "",
                    Status: "",
                    PrivateIpAddresses: [ {
                        PrivateDnsName: "",
                        Primary: false,
                        PrivateIpAddress: "",
                        Association: /*Sbo*/{
                        PublicDnsName: "",
                        IpOwnerId: "",
                        PublicIp: ""
                    }
                    } /*, ...*/ ]
                } /*, ...*/ ],
                State: /*Sb2*/{
                    Name: "",
                    Code: 0
                },
                PublicDnsName: "",
                StateTransitionReason: "",
                PublicIpAddress: "",
                StateReason: /*Sa7*/{
                    Code: "",
                    Message: ""
                },
                Platform: "",
                KernelId: "",
                KeyName: "",
                EbsOptimized: false,
                ClientToken: "",
                SubnetId: "",
                Monitoring: /*Sbi*/{
                    State: ""
                },
                BlockDeviceMappings: /*Sas*/[ {
                    DeviceName: "",
                    Ebs: {
                        AttachTime: now(),
                        DeleteOnTermination: false,
                        VolumeId: "",
                        Status: ""
                    }
                } /*, ...*/ ],
                IamInstanceProfile: {
                    Arn: "",
                    Id: ""
                },
                ImageId: "",
                InstanceId: "",
                SpotInstanceRequestId: "",
                InstanceLifecycle: "",
                PrivateDnsName: "",
                Architecture: "",
                SourceDestCheck: false,
                PrivateIpAddress: "",
                VpcId: "",
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ]
            } /*, ...*/ ],
            Groups: /*S4m*/[ {
                    GroupId: "",
                    GroupName: ""
                } /*, ...*/ ],
            ReservationId: ""
        };
        return [200, ret];
    }
module.exports.DescribeImages = function DescribeImages(aws) {
        var ImageIds = aws.params['ImageIds'] /* list */;
        var ExecutableUsers = aws.params['ExecutableUsers'] /* list */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Owners = aws.params['Owners'];
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            Images: [ {
                ImageLocation: "",
                RamdiskId: "",
                SriovNetSupport: "",
                CreationDate: "",
                Hypervisor: "",
                RootDeviceName: "",
                ProductCodes: /*S9t*/[ {
                    ProductCodeType: "",
                    ProductCodeId: ""
                } /*, ...*/ ],
                RootDeviceType: "",
                VirtualizationType: "",
                Description: "",
                State: "",
                OwnerId: "",
                Public: false,
                ImageType: "",
                StateReason: /*Sa7*/{
                    Code: "",
                    Message: ""
                },
                Platform: "",
                KernelId: "",
                Name: "",
                ImageOwnerAlias: "",
                BlockDeviceMappings: /*S9w*/[ /*S3d*/{
                    DeviceName: "",
                    NoDevice: "",
                    Ebs: {
                        SnapshotId: "",
                        Iops: 0,
                        VolumeType: "",
                        DeleteOnTermination: false,
                        VolumeSize: 0,
                        Encrypted: false
                    },
                    VirtualName: ""
                } /*, ...*/ ],
                Architecture: "",
                ImageId: "",
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteRoute = function DeleteRoute(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var DestinationCidrBlock = aws.params['DestinationCidrBlock'];
        var RouteTableId = aws.params['RouteTableId'];
        if (! RouteTableId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RouteTableId"];
        }        if (! DestinationCidrBlock) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DestinationCidrBlock"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ReleaseHosts = function ReleaseHosts(aws) {
        var HostIds = aws.params['HostIds'];
        if (! HostIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter HostIds"];
        }

        // TODO implement code

        var ret = {
            Successful: /*Sj*/[ "" /*, ...*/ ],
            Unsuccessful: /*Six*/[ /*S39*/{
                Error: {
                    Code: "",
                    Message: ""
                },
                ResourceId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.AcceptVpcPeeringConnection = function AcceptVpcPeeringConnection(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var VpcPeeringConnectionId = aws.params['VpcPeeringConnectionId'];


        // TODO implement code

        var ret = {
            VpcPeeringConnection: /*S5*/{
                VpcPeeringConnectionId: "",
                Status: {
                    Code: "",
                    Message: ""
                },
                RequesterVpcInfo: /*S6*/{
                    OwnerId: "",
                    VpcId: "",
                    CidrBlock: ""
                },
                AccepterVpcInfo: /*S6*/{
                    OwnerId: "",
                    VpcId: "",
                    CidrBlock: ""
                },
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ],
                ExpirationTime: now()
            }
        };
        return [200, ret];
    }
module.exports.DeleteVpnGateway = function DeleteVpnGateway(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var VpnGatewayId = aws.params['VpnGatewayId'];
        if (! VpnGatewayId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpnGatewayId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeleteNatGateway = function DeleteNatGateway(aws) {
        var NatGatewayId = aws.params['NatGatewayId'];
        if (! NatGatewayId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter NatGatewayId"];
        }

        // TODO implement code

        var ret = {
            NatGatewayId: ""
        };
        return [200, ret];
    }
module.exports.ReplaceRouteTableAssociation = function ReplaceRouteTableAssociation(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var AssociationId = aws.params['AssociationId'];
        var RouteTableId = aws.params['RouteTableId'];
        if (! AssociationId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AssociationId"];
        }        if (! RouteTableId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RouteTableId"];
        }

        // TODO implement code

        var ret = {
            NewAssociationId: ""
        };
        return [200, ret];
    }
module.exports.CreateNetworkInterface = function CreateNetworkInterface(aws) {
        var Description = aws.params['Description'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var PrivateIpAddresses = aws.params['PrivateIpAddresses'];
        var SecondaryPrivateIpAddressCount = aws.params['SecondaryPrivateIpAddressCount'] /* integer */;
        var PrivateIpAddress = aws.params['PrivateIpAddress'];
        var SubnetId = aws.params['SubnetId'];
        var Groups = aws.params['Groups'];
        if (! SubnetId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubnetId"];
        }

        // TODO implement code

        var ret = {
            NetworkInterface: /*S4k*/{
                RequesterId: "",
                Association: /*S4p*/{
                    PublicDnsName: "",
                    AllocationId: "",
                    IpOwnerId: "",
                    PublicIp: "",
                    AssociationId: ""
                },
                Description: "",
                TagSet: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ],
                VpcId: "",
                MacAddress: "",
                RequesterManaged: false,
                NetworkInterfaceId: "",
                InterfaceType: "",
                AvailabilityZone: "",
                Groups: /*S4m*/[ {
                    GroupId: "",
                    GroupName: ""
                } /*, ...*/ ],
                Attachment: /*S4o*/{
                    AttachTime: now(),
                    AttachmentId: "",
                    InstanceId: "",
                    DeviceIndex: 0,
                    InstanceOwnerId: "",
                    DeleteOnTermination: false,
                    Status: ""
                },
                PrivateDnsName: "",
                OwnerId: "",
                SourceDestCheck: false,
                PrivateIpAddress: "",
                SubnetId: "",
                Status: "",
                PrivateIpAddresses: [ {
                    PrivateDnsName: "",
                    Primary: false,
                    PrivateIpAddress: "",
                    Association: /*S4p*/{
                    PublicDnsName: "",
                    AllocationId: "",
                    IpOwnerId: "",
                    PublicIp: "",
                    AssociationId: ""
                }
                } /*, ...*/ ]
            }
        };
        return [200, ret];
    }
module.exports.ModifyReservedInstances = function ModifyReservedInstances(aws) {
        var ClientToken = aws.params['ClientToken'];
        var ReservedInstancesIds = aws.params['ReservedInstancesIds'];
        var TargetConfigurations = aws.params['TargetConfigurations'] /* list */;
        if (! ReservedInstancesIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ReservedInstancesIds"];
        }        if (! TargetConfigurations) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TargetConfigurations"];
        }

        // TODO implement code

        var ret = {
            ReservedInstancesModificationId: ""
        };
        return [200, ret];
    }
module.exports.DescribeSnapshotAttribute = function DescribeSnapshotAttribute(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Attribute = aws.params['Attribute'];
        var SnapshotId = aws.params['SnapshotId'];
        if (! SnapshotId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SnapshotId"];
        }        if (! Attribute) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Attribute"];
        }

        // TODO implement code

        var ret = {
            CreateVolumePermissions: /*Sei*/[ {
                Group: "",
                UserId: ""
            } /*, ...*/ ],
            SnapshotId: "",
            ProductCodes: /*S9t*/[ {
                ProductCodeType: "",
                ProductCodeId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeReservedInstancesOfferings = function DescribeReservedInstancesOfferings(aws) {
        var OfferingType = aws.params['OfferingType'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var ProductDescription = aws.params['ProductDescription'];
        var ReservedInstancesOfferingIds = aws.params['ReservedInstancesOfferingIds'] /* list */;
        var InstanceType = aws.params['InstanceType'];
        var NextToken = aws.params['NextToken'];
        var InstanceTenancy = aws.params['InstanceTenancy'];
        var MaxResults = aws.params['MaxResults'] /* integer */;
        var AvailabilityZone = aws.params['AvailabilityZone'];
        var MaxInstanceCount = aws.params['MaxInstanceCount'] /* integer */;
        var MinDuration = aws.params['MinDuration'] /* long */;
        var MaxDuration = aws.params['MaxDuration'] /* long */;
        var IncludeMarketplace = aws.params['IncludeMarketplace'] /* boolean */;
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            NextToken: "",
            ReservedInstancesOfferings: [ {
                Duration: 0 /*long*/,
                OfferingType: "",
                RecurringCharges: /*Sd6*/[ {
                    Frequency: "",
                    Amount: 0.0 /*double*/
                } /*, ...*/ ],
                PricingDetails: [ {
                    Count: 0,
                    Price: 0.0 /*double*/
                } /*, ...*/ ],
                ProductDescription: "",
                Marketplace: false,
                InstanceType: "",
                ReservedInstancesOfferingId: "",
                InstanceTenancy: "",
                AvailabilityZone: "",
                FixedPrice: 9.0,
                CurrencyCode: "",
                UsagePrice: 9.0
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeVpcEndpointServices = function DescribeVpcEndpointServices(aws) {
        var MaxResults = aws.params['MaxResults'] /* integer */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var NextToken = aws.params['NextToken'];


        // TODO implement code

        var ret = {
            ServiceNames: /*S26*/[ "" /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.CreateRoute = function CreateRoute(aws) {
        var NetworkInterfaceId = aws.params['NetworkInterfaceId'];
        var NatGatewayId = aws.params['NatGatewayId'];
        var GatewayId = aws.params['GatewayId'];
        var InstanceId = aws.params['InstanceId'];
        var RouteTableId = aws.params['RouteTableId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var VpcPeeringConnectionId = aws.params['VpcPeeringConnectionId'];
        var DestinationCidrBlock = aws.params['DestinationCidrBlock'];
        if (! RouteTableId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RouteTableId"];
        }        if (! DestinationCidrBlock) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DestinationCidrBlock"];
        }

        // TODO implement code

        var ret = {
            Return: false
        };
        return [200, ret];
    }
module.exports.CreateNetworkAclEntry = function CreateNetworkAclEntry(aws) {
        var Egress = aws.params['Egress'] /* boolean */;
        var NetworkAclId = aws.params['NetworkAclId'];
        var RuleNumber = aws.params['RuleNumber'] /* integer */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Protocol = aws.params['Protocol'];
        var PortRange = aws.params['PortRange'];
        var IcmpTypeCode = aws.params['IcmpTypeCode'];
        var CidrBlock = aws.params['CidrBlock'];
        var RuleAction = aws.params['RuleAction'];
        if (! NetworkAclId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter NetworkAclId"];
        }        if (! RuleNumber) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RuleNumber"];
        }        if (! Protocol) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Protocol"];
        }        if (! RuleAction) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RuleAction"];
        }        if (! Egress) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Egress"];
        }        if (! CidrBlock) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter CidrBlock"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CancelBundleTask = function CancelBundleTask(aws) {
        var BundleId = aws.params['BundleId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! BundleId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter BundleId"];
        }

        // TODO implement code

        var ret = {
            BundleTask: /*S1j*/{
                StartTime: now(),
                InstanceId: "",
                State: "",
                BundleTaskError: {
                    Code: "",
                    Message: ""
                },
                Progress: "",
                Storage: /*S1f*/{
                    S3: {
                        UploadPolicy: null /*blob*/,
                        UploadPolicySignature: "",
                        Bucket: "",
                        AWSAccessKeyId: "",
                        Prefix: ""
                    }
                },
                BundleId: "",
                UpdateTime: now()
            }
        };
        return [200, ret];
    }
module.exports.DescribeFlowLogs = function DescribeFlowLogs(aws) {
        var NextToken = aws.params['NextToken'];
        var MaxResults = aws.params['MaxResults'] /* integer */;
        var FlowLogIds = aws.params['FlowLogIds'];
        var Filter = aws.params['Filter'];


        // TODO implement code

        var ret = {
            FlowLogs: [ {
                DeliverLogsErrorMessage: "",
                CreationTime: now(),
                FlowLogStatus: "",
                ResourceId: "",
                FlowLogId: "",
                TrafficType: "",
                DeliverLogsStatus: "",
                LogGroupName: "",
                DeliverLogsPermissionArn: ""
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.DescribeClassicLinkInstances = function DescribeClassicLinkInstances(aws) {
        var InstanceIds = aws.params['InstanceIds'];
        var MaxResults = aws.params['MaxResults'] /* integer */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var NextToken = aws.params['NextToken'];
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            NextToken: "",
            Instances: [ {
                VpcId: "",
                InstanceId: "",
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ],
                Groups: /*S4m*/[ {
                    GroupId: "",
                    GroupName: ""
                } /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeDhcpOptions = function DescribeDhcpOptions(aws) {
        var DhcpOptionsIds = aws.params['DhcpOptionsIds'] /* list */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            DhcpOptions: [ /*S2z*/{
                DhcpConfigurations: [ {
                    Values: [ /*S33*/{
                        Value: ""
                    } /*, ...*/ ],
                    Key: ""
                } /*, ...*/ ],
                DhcpOptionsId: "",
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ModifyInstancePlacement = function ModifyInstancePlacement(aws) {
        var HostId = aws.params['HostId'];
        var Affinity = aws.params['Affinity'];
        var InstanceId = aws.params['InstanceId'];
        var Tenancy = aws.params['Tenancy'];
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }

        // TODO implement code

        var ret = {
            Return: false
        };
        return [200, ret];
    }
module.exports.DeleteVpnConnection = function DeleteVpnConnection(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var VpnConnectionId = aws.params['VpnConnectionId'];
        if (! VpnConnectionId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpnConnectionId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DisableVpcClassicLink = function DisableVpcClassicLink(aws) {
        var VpcId = aws.params['VpcId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! VpcId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpcId"];
        }

        // TODO implement code

        var ret = {
            Return: false
        };
        return [200, ret];
    }
module.exports.RegisterImage = function RegisterImage(aws) {
        var ImageLocation = aws.params['ImageLocation'];
        var RamdiskId = aws.params['RamdiskId'];
        var VirtualizationType = aws.params['VirtualizationType'];
        var Description = aws.params['Description'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var KernelId = aws.params['KernelId'];
        var BlockDeviceMappings = aws.params['BlockDeviceMappings'];
        var SriovNetSupport = aws.params['SriovNetSupport'];
        var Architecture = aws.params['Architecture'];
        var Name = aws.params['Name'];
        var RootDeviceName = aws.params['RootDeviceName'];
        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }

        // TODO implement code

        var ret = {
            ImageId: ""
        };
        return [200, ret];
    }
module.exports.CreateVpnConnection = function CreateVpnConnection(aws) {
        var CustomerGatewayId = aws.params['CustomerGatewayId'];
        var Type = aws.params['Type'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var VpnGatewayId = aws.params['VpnGatewayId'];
        var Options = aws.params['Options'] /* structure */;
        if (! Type) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Type"];
        }        if (! CustomerGatewayId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter CustomerGatewayId"];
        }        if (! VpnGatewayId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpnGatewayId"];
        }

        // TODO implement code

        var ret = {
            VpnConnection: /*S6a*/{
                Options: {
                    StaticRoutesOnly: false
                },
                VgwTelemetry: [ {
                    AcceptedRouteCount: 0,
                    OutsideIpAddress: "",
                    StatusMessage: "",
                    Status: "",
                    LastStatusChange: now()
                } /*, ...*/ ],
                Type: "",
                VpnConnectionId: "",
                State: "",
                CustomerGatewayId: "",
                Routes: [ {
                    DestinationCidrBlock: "",
                    State: "",
                    Source: ""
                } /*, ...*/ ],
                CustomerGatewayConfiguration: "",
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ],
                VpnGatewayId: ""
            }
        };
        return [200, ret];
    }
module.exports.CreateReservedInstancesListing = function CreateReservedInstancesListing(aws) {
        var PriceSchedules = aws.params['PriceSchedules'] /* list */;
        var ClientToken = aws.params['ClientToken'];
        var InstanceCount = aws.params['InstanceCount'] /* integer */;
        var ReservedInstancesId = aws.params['ReservedInstancesId'];
        if (! ReservedInstancesId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ReservedInstancesId"];
        }        if (! InstanceCount) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceCount"];
        }        if (! PriceSchedules) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PriceSchedules"];
        }        if (! ClientToken) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ClientToken"];
        }

        // TODO implement code

        var ret = {
            ReservedInstancesListings: /*S1u*/[ {
                PriceSchedules: [ {
                    CurrencyCode: "",
                    Active: false,
                    Term: 0 /*long*/,
                    Price: 0.0 /*double*/
                } /*, ...*/ ],
                ReservedInstancesId: "",
                ClientToken: "",
                StatusMessage: "",
                UpdateDate: now(),
                InstanceCounts: [ {
                    InstanceCount: 0,
                    State: ""
                } /*, ...*/ ],
                ReservedInstancesListingId: "",
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ],
                Status: "",
                CreateDate: now()
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeTags = function DescribeTags(aws) {
        var MaxResults = aws.params['MaxResults'] /* integer */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var NextToken = aws.params['NextToken'];
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            NextToken: "",
            Tags: [ {
                Key: "",
                ResourceType: "",
                ResourceId: "",
                Value: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.RequestSpotFleet = function RequestSpotFleet(aws) {
        var SpotFleetRequestConfig = aws.params['SpotFleetRequestConfig'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! SpotFleetRequestConfig) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SpotFleetRequestConfig"];
        }

        // TODO implement code

        var ret = {
            SpotFleetRequestId: ""
        };
        return [200, ret];
    }
module.exports.DescribeReservedInstancesListings = function DescribeReservedInstancesListings(aws) {
        var Filters = aws.params['Filters'];
        var ReservedInstancesId = aws.params['ReservedInstancesId'];
        var ReservedInstancesListingId = aws.params['ReservedInstancesListingId'];


        // TODO implement code

        var ret = {
            ReservedInstancesListings: /*S1u*/[ {
                PriceSchedules: [ {
                    CurrencyCode: "",
                    Active: false,
                    Term: 0 /*long*/,
                    Price: 0.0 /*double*/
                } /*, ...*/ ],
                ReservedInstancesId: "",
                ClientToken: "",
                StatusMessage: "",
                UpdateDate: now(),
                InstanceCounts: [ {
                    InstanceCount: 0,
                    State: ""
                } /*, ...*/ ],
                ReservedInstancesListingId: "",
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ],
                Status: "",
                CreateDate: now()
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeAvailabilityZones = function DescribeAvailabilityZones(aws) {
        var Filters = aws.params['Filters'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var ZoneNames = aws.params['ZoneNames'] /* list */;


        // TODO implement code

        var ret = {
            AvailabilityZones: [ {
                RegionName: "",
                Messages: [ {
                    Message: ""
                } /*, ...*/ ],
                State: "",
                ZoneName: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CopyImage = function CopyImage(aws) {
        var ClientToken = aws.params['ClientToken'];
        var Description = aws.params['Description'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Name = aws.params['Name'];
        var KmsKeyId = aws.params['KmsKeyId'];
        var SourceRegion = aws.params['SourceRegion'];
        var SourceImageId = aws.params['SourceImageId'];
        var Encrypted = aws.params['Encrypted'] /* boolean */;
        if (! SourceRegion) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SourceRegion"];
        }        if (! SourceImageId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SourceImageId"];
        }        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }

        // TODO implement code

        var ret = {
            ImageId: ""
        };
        return [200, ret];
    }
module.exports.DescribeVpnGateways = function DescribeVpnGateways(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var VpnGatewayIds = aws.params['VpnGatewayIds'] /* list */;
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            VpnGateways: [ /*S6m*/{
                AvailabilityZone: "",
                Type: "",
                State: "",
                VpcAttachments: [ /*S12*/{
                    VpcId: "",
                    State: ""
                } /*, ...*/ ],
                VpnGatewayId: "",
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.AttachClassicLinkVpc = function AttachClassicLinkVpc(aws) {
        var VpcId = aws.params['VpcId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var InstanceId = aws.params['InstanceId'];
        var Groups = aws.params['Groups'];
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }        if (! VpcId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpcId"];
        }        if (! Groups) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Groups"];
        }

        // TODO implement code

        var ret = {
            Return: false
        };
        return [200, ret];
    }
module.exports.DescribeAddresses = function DescribeAddresses(aws) {
        var PublicIps = aws.params['PublicIps'] /* list */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var AllocationIds = aws.params['AllocationIds'] /* list */;
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            Addresses: [ {
                AllocationId: "",
                Domain: "",
                PrivateIpAddress: "",
                InstanceId: "",
                AssociationId: "",
                NetworkInterfaceId: "",
                NetworkInterfaceOwnerId: "",
                PublicIp: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeSpotFleetInstances = function DescribeSpotFleetInstances(aws) {
        var NextToken = aws.params['NextToken'];
        var SpotFleetRequestId = aws.params['SpotFleetRequestId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var MaxResults = aws.params['MaxResults'] /* integer */;
        if (! SpotFleetRequestId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SpotFleetRequestId"];
        }

        // TODO implement code

        var ret = {
            NextToken: "",
            SpotFleetRequestId: "",
            ActiveInstances: [ {
                InstanceType: "",
                InstanceId: "",
                SpotInstanceRequestId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateVolume = function CreateVolume(aws) {
        var AvailabilityZone = aws.params['AvailabilityZone'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var SnapshotId = aws.params['SnapshotId'];
        var Iops = aws.params['Iops'] /* integer */;
        var VolumeType = aws.params['VolumeType'];
        var KmsKeyId = aws.params['KmsKeyId'];
        var Size = aws.params['Size'] /* integer */;
        var Encrypted = aws.params['Encrypted'] /* boolean */;
        if (! AvailabilityZone) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AvailabilityZone"];
        }

        // TODO implement code

        var ret = /*S5t*/{
            VolumeId: "",
            State: "",
            SnapshotId: "",
            KmsKeyId: "",
            Size: 0,
            Encrypted: false,
            Attachments: [ /*Sy*/{
                AttachTime: now(),
                VolumeId: "",
                InstanceId: "",
                State: "",
                DeleteOnTermination: false,
                Device: ""
            } /*, ...*/ ],
            AvailabilityZone: "",
            CreateTime: now(),
            Iops: 0,
            VolumeType: "",
            Tags: /*Sa*/[ {
                Key: "",
                Value: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteDhcpOptions = function DeleteDhcpOptions(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var DhcpOptionsId = aws.params['DhcpOptionsId'];
        if (! DhcpOptionsId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DhcpOptionsId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeNetworkInterfaces = function DescribeNetworkInterfaces(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var NetworkInterfaceIds = aws.params['NetworkInterfaceIds'] /* list */;
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            NetworkInterfaces: [ /*S4k*/{
                RequesterId: "",
                Association: /*S4p*/{
                    PublicDnsName: "",
                    AllocationId: "",
                    IpOwnerId: "",
                    PublicIp: "",
                    AssociationId: ""
                },
                Description: "",
                TagSet: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ],
                VpcId: "",
                MacAddress: "",
                RequesterManaged: false,
                NetworkInterfaceId: "",
                InterfaceType: "",
                AvailabilityZone: "",
                Groups: /*S4m*/[ {
                    GroupId: "",
                    GroupName: ""
                } /*, ...*/ ],
                Attachment: /*S4o*/{
                    AttachTime: now(),
                    AttachmentId: "",
                    InstanceId: "",
                    DeviceIndex: 0,
                    InstanceOwnerId: "",
                    DeleteOnTermination: false,
                    Status: ""
                },
                PrivateDnsName: "",
                OwnerId: "",
                SourceDestCheck: false,
                PrivateIpAddress: "",
                SubnetId: "",
                Status: "",
                PrivateIpAddresses: [ {
                    PrivateDnsName: "",
                    Primary: false,
                    PrivateIpAddress: "",
                    Association: /*S4p*/{
                    PublicDnsName: "",
                    AllocationId: "",
                    IpOwnerId: "",
                    PublicIp: "",
                    AssociationId: ""
                }
                } /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteInternetGateway = function DeleteInternetGateway(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var InternetGatewayId = aws.params['InternetGatewayId'];
        if (! InternetGatewayId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InternetGatewayId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CancelReservedInstancesListing = function CancelReservedInstancesListing(aws) {
        var ReservedInstancesListingId = aws.params['ReservedInstancesListingId'];
        if (! ReservedInstancesListingId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ReservedInstancesListingId"];
        }

        // TODO implement code

        var ret = {
            ReservedInstancesListings: /*S1u*/[ {
                PriceSchedules: [ {
                    CurrencyCode: "",
                    Active: false,
                    Term: 0 /*long*/,
                    Price: 0.0 /*double*/
                } /*, ...*/ ],
                ReservedInstancesId: "",
                ClientToken: "",
                StatusMessage: "",
                UpdateDate: now(),
                InstanceCounts: [ {
                    InstanceCount: 0,
                    State: ""
                } /*, ...*/ ],
                ReservedInstancesListingId: "",
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ],
                Status: "",
                CreateDate: now()
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CancelImportTask = function CancelImportTask(aws) {
        var CancelReason = aws.params['CancelReason'];
        var ImportTaskId = aws.params['ImportTaskId'];
        var DryRun = aws.params['DryRun'] /* boolean */;


        // TODO implement code

        var ret = {
            ImportTaskId: "",
            PreviousState: "",
            State: ""
        };
        return [200, ret];
    }
module.exports.DescribeSpotDatafeedSubscription = function DescribeSpotDatafeedSubscription(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;


        // TODO implement code

        var ret = {
            SpotDatafeedSubscription: /*S5j*/{
                OwnerId: "",
                Bucket: "",
                Fault: /*S5l*/{
                    Code: "",
                    Message: ""
                },
                State: "",
                Prefix: ""
            }
        };
        return [200, ret];
    }
module.exports.RebootInstances = function RebootInstances(aws) {
        var InstanceIds = aws.params['InstanceIds'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! InstanceIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceIds"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DetachInternetGateway = function DetachInternetGateway(aws) {
        var VpcId = aws.params['VpcId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var InternetGatewayId = aws.params['InternetGatewayId'];
        if (! InternetGatewayId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InternetGatewayId"];
        }        if (! VpcId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpcId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CreateVpcPeeringConnection = function CreateVpcPeeringConnection(aws) {
        var VpcId = aws.params['VpcId'];
        var PeerOwnerId = aws.params['PeerOwnerId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var PeerVpcId = aws.params['PeerVpcId'];


        // TODO implement code

        var ret = {
            VpcPeeringConnection: /*S5*/{
                VpcPeeringConnectionId: "",
                Status: {
                    Code: "",
                    Message: ""
                },
                RequesterVpcInfo: /*S6*/{
                    OwnerId: "",
                    VpcId: "",
                    CidrBlock: ""
                },
                AccepterVpcInfo: /*S6*/{
                    OwnerId: "",
                    VpcId: "",
                    CidrBlock: ""
                },
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ],
                ExpirationTime: now()
            }
        };
        return [200, ret];
    }
module.exports.ResetImageAttribute = function ResetImageAttribute(aws) {
        var ImageId = aws.params['ImageId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Attribute = aws.params['Attribute'];
        if (! ImageId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ImageId"];
        }        if (! Attribute) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Attribute"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CreateRouteTable = function CreateRouteTable(aws) {
        var VpcId = aws.params['VpcId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! VpcId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpcId"];
        }

        // TODO implement code

        var ret = {
            RouteTable: /*S53*/{
                PropagatingVgws: [ {
                    GatewayId: ""
                } /*, ...*/ ],
                Associations: [ {
                    SubnetId: "",
                    Main: false,
                    RouteTableAssociationId: "",
                    RouteTableId: ""
                } /*, ...*/ ],
                VpcId: "",
                RouteTableId: "",
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ],
                Routes: [ {
                    NetworkInterfaceId: "",
                    DestinationPrefixListId: "",
                    Origin: "",
                    GatewayId: "",
                    DestinationCidrBlock: "",
                    State: "",
                    InstanceOwnerId: "",
                    NatGatewayId: "",
                    VpcPeeringConnectionId: "",
                    InstanceId: ""
                } /*, ...*/ ]
            }
        };
        return [200, ret];
    }
module.exports.DetachNetworkInterface = function DetachNetworkInterface(aws) {
        var AttachmentId = aws.params['AttachmentId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Force = aws.params['Force'] /* boolean */;
        if (! AttachmentId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AttachmentId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CancelConversionTask = function CancelConversionTask(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var ConversionTaskId = aws.params['ConversionTaskId'];
        var ReasonMessage = aws.params['ReasonMessage'];
        if (! ConversionTaskId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ConversionTaskId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.StartInstances = function StartInstances(aws) {
        var InstanceIds = aws.params['InstanceIds'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var AdditionalInfo = aws.params['AdditionalInfo'];
        if (! InstanceIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceIds"];
        }

        // TODO implement code

        var ret = {
            StartingInstances: /*Sll*/[ {
                PreviousState: /*Sb2*/{
                    Name: "",
                    Code: 0
                },
                InstanceId: "",
                CurrentState: /*Sb2*/{
                    Name: "",
                    Code: 0
                }
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.AttachVpnGateway = function AttachVpnGateway(aws) {
        var VpcId = aws.params['VpcId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var VpnGatewayId = aws.params['VpnGatewayId'];
        if (! VpnGatewayId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpnGatewayId"];
        }        if (! VpcId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpcId"];
        }

        // TODO implement code

        var ret = {
            VpcAttachment: /*S12*/{
                VpcId: "",
                State: ""
            }
        };
        return [200, ret];
    }
module.exports.CopySnapshot = function CopySnapshot(aws) {
        var KmsKeyId = aws.params['KmsKeyId'];
        var Description = aws.params['Description'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var DestinationRegion = aws.params['DestinationRegion'];
        var PresignedUrl = aws.params['PresignedUrl'];
        var SourceRegion = aws.params['SourceRegion'];
        var SourceSnapshotId = aws.params['SourceSnapshotId'];
        var Encrypted = aws.params['Encrypted'] /* boolean */;
        if (! SourceRegion) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SourceRegion"];
        }        if (! SourceSnapshotId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SourceSnapshotId"];
        }

        // TODO implement code

        var ret = {
            SnapshotId: ""
        };
        return [200, ret];
    }
module.exports.DeleteNetworkAclEntry = function DeleteNetworkAclEntry(aws) {
        var Egress = aws.params['Egress'] /* boolean */;
        var NetworkAclId = aws.params['NetworkAclId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var RuleNumber = aws.params['RuleNumber'] /* integer */;
        if (! NetworkAclId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter NetworkAclId"];
        }        if (! RuleNumber) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RuleNumber"];
        }        if (! Egress) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Egress"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeVolumeStatus = function DescribeVolumeStatus(aws) {
        var VolumeIds = aws.params['VolumeIds'];
        var MaxResults = aws.params['MaxResults'] /* integer */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var NextToken = aws.params['NextToken'];
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            VolumeStatuses: [ {
                VolumeStatus: {
                    Details: [ {
                        Name: "",
                        Status: ""
                    } /*, ...*/ ],
                    Status: ""
                },
                AvailabilityZone: "",
                VolumeId: "",
                Actions: [ {
                    Description: "",
                    EventType: "",
                    Code: "",
                    EventId: ""
                } /*, ...*/ ],
                Events: [ {
                    NotAfter: now(),
                    NotBefore: now(),
                    Description: "",
                    EventType: "",
                    EventId: ""
                } /*, ...*/ ]
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.UnassignPrivateIpAddresses = function UnassignPrivateIpAddresses(aws) {
        var NetworkInterfaceId = aws.params['NetworkInterfaceId'];
        var PrivateIpAddresses = aws.params['PrivateIpAddresses'];
        if (! NetworkInterfaceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter NetworkInterfaceId"];
        }        if (! PrivateIpAddresses) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PrivateIpAddresses"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CreateInstanceExportTask = function CreateInstanceExportTask(aws) {
        var Description = aws.params['Description'];
        var TargetEnvironment = aws.params['TargetEnvironment'];
        var InstanceId = aws.params['InstanceId'];
        var ExportToS3Task = aws.params['ExportToS3Task'] /* structure */;
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }

        // TODO implement code

        var ret = {
            ExportTask: /*S3n*/{
                ExportTaskId: "",
                InstanceExportDetails: {
                    TargetEnvironment: "",
                    InstanceId: ""
                },
                Description: "",
                StatusMessage: "",
                State: "",
                ExportToS3Task: {
                    DiskImageFormat: "",
                    S3Bucket: "",
                    S3Key: "",
                    ContainerFormat: ""
                }
            }
        };
        return [200, ret];
    }
module.exports.RequestSpotInstances = function RequestSpotInstances(aws) {
        var AvailabilityZoneGroup = aws.params['AvailabilityZoneGroup'];
        var ClientToken = aws.params['ClientToken'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Type = aws.params['Type'];
        var LaunchGroup = aws.params['LaunchGroup'];
        var ValidFrom = aws.params['ValidFrom'] /* timestamp */;
        var InstanceCount = aws.params['InstanceCount'] /* integer */;
        var LaunchSpecification = aws.params['LaunchSpecification'] /* structure */;
        var SpotPrice = aws.params['SpotPrice'];
        var ValidUntil = aws.params['ValidUntil'] /* timestamp */;
        var BlockDurationMinutes = aws.params['BlockDurationMinutes'] /* integer */;
        if (! SpotPrice) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SpotPrice"];
        }

        // TODO implement code

        var ret = {
            SpotInstanceRequests: /*Sfh*/[ {
                CreateTime: now(),
                Fault: /*S5l*/{
                    Code: "",
                    Message: ""
                },
                SpotInstanceRequestId: "",
                LaunchGroup: "",
                State: "",
                ValidFrom: now(),
                ValidUntil: now(),
                ActualBlockHourlyPrice: "",
                BlockDurationMinutes: 0,
                Type: "",
                InstanceId: "",
                AvailabilityZoneGroup: "",
                LaunchedAvailabilityZone: "",
                LaunchSpecification: {
                    RamdiskId: "",
                    Placement: /*Sf8*/{
                        AvailabilityZone: "",
                        GroupName: ""
                    },
                    KernelId: "",
                    InstanceType: "",
                    KeyName: "",
                    NetworkInterfaces: /*Sfa*/[ {
                        NetworkInterfaceId: "",
                        DeleteOnTermination: false,
                        DeviceIndex: 0,
                        Description: "",
                        Groups: /*S4g*/[ "" /*, ...*/ ],
                        SecondaryPrivateIpAddressCount: 0,
                        AssociatePublicIpAddress: false,
                        PrivateIpAddress: "",
                        SubnetId: "",
                        PrivateIpAddresses: /*S4h*/[ {
                            Primary: false,
                            PrivateIpAddress: ""
                        } /*, ...*/ ]
                    } /*, ...*/ ],
                    IamInstanceProfile: /*Sfc*/{
                        Name: "",
                        Arn: ""
                    },
                    Monitoring: /*Sfn*/{
                        Enabled: false
                    },
                    BlockDeviceMappings: /*S9w*/[ /*S3d*/{
                        DeviceName: "",
                        NoDevice: "",
                        Ebs: {
                            SnapshotId: "",
                            Iops: 0,
                            VolumeType: "",
                            DeleteOnTermination: false,
                            VolumeSize: 0,
                            Encrypted: false
                        },
                        VirtualName: ""
                    } /*, ...*/ ],
                    AddressingType: "",
                    UserData: "",
                    ImageId: "",
                    SecurityGroups: /*S4m*/[ {
                        GroupId: "",
                        GroupName: ""
                    } /*, ...*/ ],
                    EbsOptimized: false,
                    SubnetId: ""
                },
                SpotPrice: "",
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ],
                Status: {
                    UpdateTime: now(),
                    Code: "",
                    Message: ""
                },
                ProductDescription: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DisableVpcClassicLinkDnsSupport = function DisableVpcClassicLinkDnsSupport(aws) {
        var VpcId = aws.params['VpcId'];


        // TODO implement code

        var ret = {
            Return: false
        };
        return [200, ret];
    }
module.exports.UnmonitorInstances = function UnmonitorInstances(aws) {
        var InstanceIds = aws.params['InstanceIds'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! InstanceIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceIds"];
        }

        // TODO implement code

        var ret = {
            InstanceMonitorings: /*Sju*/[ {
                Monitoring: /*Sbi*/{
                    State: ""
                },
                InstanceId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ReportInstanceStatus = function ReportInstanceStatus(aws) {
        var StartTime = aws.params['StartTime'] /* timestamp */;
        var Status = aws.params['Status'];
        var Description = aws.params['Description'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Instances = aws.params['Instances'];
        var ReasonCodes = aws.params['ReasonCodes'] /* list */;
        var EndTime = aws.params['EndTime'] /* timestamp */;
        if (! Instances) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Instances"];
        }        if (! Status) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Status"];
        }        if (! ReasonCodes) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ReasonCodes"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeSubnets = function DescribeSubnets(aws) {
        var SubnetIds = aws.params['SubnetIds'] /* list */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            Subnets: [ /*S5o*/{
                AvailabilityZone: "",
                MapPublicIpOnLaunch: false,
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ],
                State: "",
                DefaultForAz: false,
                VpcId: "",
                SubnetId: "",
                AvailableIpAddressCount: 0,
                CidrBlock: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeVpcEndpoints = function DescribeVpcEndpoints(aws) {
        var VpcEndpointIds = aws.params['VpcEndpointIds'];
        var MaxResults = aws.params['MaxResults'] /* integer */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var NextToken = aws.params['NextToken'];
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            NextToken: "",
            VpcEndpoints: [ /*S63*/{
                VpcEndpointId: "",
                PolicyDocument: "",
                CreationTimestamp: now(),
                RouteTableIds: /*S26*/[ "" /*, ...*/ ],
                State: "",
                VpcId: "",
                ServiceName: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DisassociateRouteTable = function DisassociateRouteTable(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var AssociationId = aws.params['AssociationId'];
        if (! AssociationId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AssociationId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.AttachInternetGateway = function AttachInternetGateway(aws) {
        var VpcId = aws.params['VpcId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var InternetGatewayId = aws.params['InternetGatewayId'];
        if (! InternetGatewayId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InternetGatewayId"];
        }        if (! VpcId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpcId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CreateSnapshot = function CreateSnapshot(aws) {
        var VolumeId = aws.params['VolumeId'];
        var Description = aws.params['Description'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! VolumeId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VolumeId"];
        }

        // TODO implement code

        var ret = /*S5f*/{
            DataEncryptionKeyId: "",
            VolumeId: "",
            SnapshotId: "",
            KmsKeyId: "",
            Encrypted: false,
            VolumeSize: 0,
            StartTime: now(),
            Description: "",
            StateMessage: "",
            State: "",
            Progress: "",
            OwnerId: "",
            OwnerAlias: "",
            Tags: /*Sa*/[ {
                Key: "",
                Value: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeRegions = function DescribeRegions(aws) {
        var RegionNames = aws.params['RegionNames'] /* list */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            Regions: [ {
                RegionName: "",
                Endpoint: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.RestoreAddressToClassic = function RestoreAddressToClassic(aws) {
        var PublicIp = aws.params['PublicIp'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! PublicIp) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PublicIp"];
        }

        // TODO implement code

        var ret = {
            PublicIp: "",
            Status: ""
        };
        return [200, ret];
    }
module.exports.CreateSpotDatafeedSubscription = function CreateSpotDatafeedSubscription(aws) {
        var Bucket = aws.params['Bucket'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Prefix = aws.params['Prefix'];
        if (! Bucket) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Bucket"];
        }

        // TODO implement code

        var ret = {
            SpotDatafeedSubscription: /*S5j*/{
                OwnerId: "",
                Bucket: "",
                Fault: /*S5l*/{
                    Code: "",
                    Message: ""
                },
                State: "",
                Prefix: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeVpcAttribute = function DescribeVpcAttribute(aws) {
        var VpcId = aws.params['VpcId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Attribute = aws.params['Attribute'];
        if (! VpcId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpcId"];
        }        if (! Attribute) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Attribute"];
        }

        // TODO implement code

        var ret = {
            EnableDnsHostnames: /*Sar*/{
                Value: false
            },
            VpcId: "",
            EnableDnsSupport: /*Sar*/{
                Value: false
            }
        };
        return [200, ret];
    }
module.exports.CreateVpc = function CreateVpc(aws) {
        var InstanceTenancy = aws.params['InstanceTenancy'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var CidrBlock = aws.params['CidrBlock'];
        if (! CidrBlock) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter CidrBlock"];
        }

        // TODO implement code

        var ret = {
            Vpc: /*S5z*/{
                InstanceTenancy: "",
                IsDefault: false,
                State: "",
                DhcpOptionsId: "",
                VpcId: "",
                CidrBlock: "",
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ]
            }
        };
        return [200, ret];
    }
module.exports.ResetInstanceAttribute = function ResetInstanceAttribute(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var InstanceId = aws.params['InstanceId'];
        var Attribute = aws.params['Attribute'];
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }        if (! Attribute) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Attribute"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ModifyIdFormat = function ModifyIdFormat(aws) {
        var UseLongIds = aws.params['UseLongIds'] /* boolean */;
        var Resource = aws.params['Resource'];
        if (! Resource) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Resource"];
        }        if (! UseLongIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter UseLongIds"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeleteVolume = function DeleteVolume(aws) {
        var VolumeId = aws.params['VolumeId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! VolumeId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VolumeId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.RunScheduledInstances = function RunScheduledInstances(aws) {
        var InstanceCount = aws.params['InstanceCount'] /* integer */;
        var ClientToken = aws.params['ClientToken'];
        var LaunchSpecification = aws.params['LaunchSpecification'] /* structure */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var ScheduledInstanceId = aws.params['ScheduledInstanceId'];
        if (! ScheduledInstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ScheduledInstanceId"];
        }        if (! LaunchSpecification) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LaunchSpecification"];
        }

        // TODO implement code

        var ret = {
            InstanceIdSet: [ "" /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeVpcClassicLink = function DescribeVpcClassicLink(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var VpcIds = aws.params['VpcIds'];
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            Vpcs: [ {
                VpcId: "",
                ClassicLinkEnabled: false,
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.StopInstances = function StopInstances(aws) {
        var InstanceIds = aws.params['InstanceIds'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Force = aws.params['Force'] /* boolean */;
        if (! InstanceIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceIds"];
        }

        // TODO implement code

        var ret = {
            StoppingInstances: /*Sll*/[ {
                PreviousState: /*Sb2*/{
                    Name: "",
                    Code: 0
                },
                InstanceId: "",
                CurrentState: /*Sb2*/{
                    Name: "",
                    Code: 0
                }
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeScheduledInstanceAvailability = function DescribeScheduledInstanceAvailability(aws) {
        var MaxResults = aws.params['MaxResults'] /* integer */;
        var FirstSlotStartTimeRange = aws.params['FirstSlotStartTimeRange'] /* structure */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var MaxSlotDurationInHours = aws.params['MaxSlotDurationInHours'] /* integer */;
        var Recurrence = aws.params['Recurrence'] /* structure */;
        var MinSlotDurationInHours = aws.params['MinSlotDurationInHours'] /* integer */;
        var NextToken = aws.params['NextToken'];
        var Filters = aws.params['Filters'];
        if (! Recurrence) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Recurrence"];
        }        if (! FirstSlotStartTimeRange) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter FirstSlotStartTimeRange"];
        }

        // TODO implement code

        var ret = {
            NextToken: "",
            ScheduledInstanceAvailabilitySet: [ {
                Platform: "",
                PurchaseToken: "",
                NetworkPlatform: "",
                AvailableInstanceCount: 0,
                InstanceType: "",
                AvailabilityZone: "",
                TotalScheduledInstanceHours: 0,
                SlotDurationInHours: 0,
                MaxTermDurationInDays: 0,
                Recurrence: /*Se2*/{
                    Frequency: "",
                    OccurrenceUnit: "",
                    OccurrenceDaySet: [ 0 /*, ...*/ ],
                    OccurrenceRelativeToEnd: false,
                    Interval: 0
                },
                MinTermDurationInDays: 0,
                FirstSlotStartTime: now(),
                HourlyPrice: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateVpcEndpoint = function CreateVpcEndpoint(aws) {
        var ClientToken = aws.params['ClientToken'];
        var PolicyDocument = aws.params['PolicyDocument'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var RouteTableIds = aws.params['RouteTableIds'];
        var VpcId = aws.params['VpcId'];
        var ServiceName = aws.params['ServiceName'];
        if (! VpcId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpcId"];
        }        if (! ServiceName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ServiceName"];
        }

        // TODO implement code

        var ret = {
            VpcEndpoint: /*S63*/{
                VpcEndpointId: "",
                PolicyDocument: "",
                CreationTimestamp: now(),
                RouteTableIds: /*S26*/[ "" /*, ...*/ ],
                State: "",
                VpcId: "",
                ServiceName: ""
            },
            ClientToken: ""
        };
        return [200, ret];
    }
module.exports.DescribeVpcClassicLinkDnsSupport = function DescribeVpcClassicLinkDnsSupport(aws) {
        var MaxResults = aws.params['MaxResults'] /* integer */;
        var NextToken = aws.params['NextToken'];
        var VpcIds = aws.params['VpcIds'];


        // TODO implement code

        var ret = {
            NextToken: "",
            Vpcs: [ {
                VpcId: "",
                ClassicLinkDnsSupported: false
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateCustomerGateway = function CreateCustomerGateway(aws) {
        var Type = aws.params['Type'];
        var PublicIp = aws.params['PublicIp'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var BgpAsn = aws.params['BgpAsn'] /* integer */;
        if (! Type) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Type"];
        }        if (! PublicIp) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PublicIp"];
        }        if (! BgpAsn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter BgpAsn"];
        }

        // TODO implement code

        var ret = {
            CustomerGateway: /*S2u*/{
                Type: "",
                BgpAsn: "",
                State: "",
                CustomerGatewayId: "",
                IpAddress: "",
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ]
            }
        };
        return [200, ret];
    }
module.exports.DeleteVpcPeeringConnection = function DeleteVpcPeeringConnection(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var VpcPeeringConnectionId = aws.params['VpcPeeringConnectionId'];
        if (! VpcPeeringConnectionId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpcPeeringConnectionId"];
        }

        // TODO implement code

        var ret = {
            Return: false
        };
        return [200, ret];
    }
module.exports.DescribeHosts = function DescribeHosts(aws) {
        var MaxResults = aws.params['MaxResults'] /* integer */;
        var HostIds = aws.params['HostIds'];
        var NextToken = aws.params['NextToken'];
        var Filter = aws.params['Filter'];


        // TODO implement code

        var ret = {
            NextToken: "",
            Hosts: [ {
                HostId: "",
                HostProperties: {
                    Cores: 0,
                    InstanceType: "",
                    TotalVCpus: 0,
                    Sockets: 0
                },
                ClientToken: "",
                AvailabilityZone: "",
                AvailableCapacity: {
                    AvailableVCpus: 0,
                    AvailableInstanceCapacity: [ {
                        InstanceType: "",
                        AvailableCapacity: 0,
                        TotalCapacity: 0
                    } /*, ...*/ ]
                },
                Instances: [ {
                    InstanceType: "",
                    InstanceId: ""
                } /*, ...*/ ],
                State: "",
                AutoPlacement: "",
                HostReservationId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateNetworkAcl = function CreateNetworkAcl(aws) {
        var VpcId = aws.params['VpcId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! VpcId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpcId"];
        }

        // TODO implement code

        var ret = {
            NetworkAcl: /*S46*/{
                NetworkAclId: "",
                IsDefault: false,
                Associations: [ {
                    NetworkAclId: "",
                    SubnetId: "",
                    NetworkAclAssociationId: ""
                } /*, ...*/ ],
                VpcId: "",
                Entries: [ {
                    Egress: false,
                    RuleNumber: 0,
                    Protocol: "",
                    PortRange: /*S4b*/{
                        To: 0,
                        From: 0
                    },
                    IcmpTypeCode: /*S4a*/{
                        Type: 0,
                        Code: 0
                    },
                    CidrBlock: "",
                    RuleAction: ""
                } /*, ...*/ ],
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ]
            }
        };
        return [200, ret];
    }
module.exports.ModifyVpcEndpoint = function ModifyVpcEndpoint(aws) {
        var VpcEndpointId = aws.params['VpcEndpointId'];
        var ResetPolicy = aws.params['ResetPolicy'] /* boolean */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var AddRouteTableIds = aws.params['AddRouteTableIds'];
        var RemoveRouteTableIds = aws.params['RemoveRouteTableIds'];
        var PolicyDocument = aws.params['PolicyDocument'];
        if (! VpcEndpointId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpcEndpointId"];
        }

        // TODO implement code

        var ret = {
            Return: false
        };
        return [200, ret];
    }
module.exports.CreateVpnConnectionRoute = function CreateVpnConnectionRoute(aws) {
        var VpnConnectionId = aws.params['VpnConnectionId'];
        var DestinationCidrBlock = aws.params['DestinationCidrBlock'];
        if (! VpnConnectionId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpnConnectionId"];
        }        if (! DestinationCidrBlock) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DestinationCidrBlock"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeImportImageTasks = function DescribeImportImageTasks(aws) {
        var ImportTaskIds = aws.params['ImportTaskIds'];
        var NextToken = aws.params['NextToken'];
        var Filters = aws.params['Filters'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var MaxResults = aws.params['MaxResults'] /* integer */;


        // TODO implement code

        var ret = {
            NextToken: "",
            ImportImageTasks: [ {
                SnapshotDetails: /*Sag*/[ {
                    DeviceName: "",
                    Progress: "",
                    Description: "",
                    Format: "",
                    StatusMessage: "",
                    SnapshotId: "",
                    DiskImageSize: 0.0 /*double*/,
                    Url: "",
                    UserBucket: /*Sai*/{
                        S3Bucket: "",
                        S3Key: ""
                    },
                    Status: ""
                } /*, ...*/ ],
                LicenseType: "",
                Description: "",
                Architecture: "",
                StatusMessage: "",
                Platform: "",
                Progress: "",
                ImageId: "",
                ImportTaskId: "",
                Hypervisor: "",
                Status: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeExportTasks = function DescribeExportTasks(aws) {
        var ExportTaskIds = aws.params['ExportTaskIds'] /* list */;


        // TODO implement code

        var ret = {
            ExportTasks: [ /*S3n*/{
                ExportTaskId: "",
                InstanceExportDetails: {
                    TargetEnvironment: "",
                    InstanceId: ""
                },
                Description: "",
                StatusMessage: "",
                State: "",
                ExportToS3Task: {
                    DiskImageFormat: "",
                    S3Bucket: "",
                    S3Key: "",
                    ContainerFormat: ""
                }
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.AssociateRouteTable = function AssociateRouteTable(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var SubnetId = aws.params['SubnetId'];
        var RouteTableId = aws.params['RouteTableId'];
        if (! SubnetId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubnetId"];
        }        if (! RouteTableId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RouteTableId"];
        }

        // TODO implement code

        var ret = {
            AssociationId: ""
        };
        return [200, ret];
    }
module.exports.ReleaseAddress = function ReleaseAddress(aws) {
        var AllocationId = aws.params['AllocationId'];
        var PublicIp = aws.params['PublicIp'];
        var DryRun = aws.params['DryRun'] /* boolean */;


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeregisterImage = function DeregisterImage(aws) {
        var ImageId = aws.params['ImageId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! ImageId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ImageId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.TerminateInstances = function TerminateInstances(aws) {
        var InstanceIds = aws.params['InstanceIds'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! InstanceIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceIds"];
        }

        // TODO implement code

        var ret = {
            TerminatingInstances: /*Sll*/[ {
                PreviousState: /*Sb2*/{
                    Name: "",
                    Code: 0
                },
                InstanceId: "",
                CurrentState: /*Sb2*/{
                    Name: "",
                    Code: 0
                }
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeCustomerGateways = function DescribeCustomerGateways(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var CustomerGatewayIds = aws.params['CustomerGatewayIds'] /* list */;
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            CustomerGateways: [ /*S2u*/{
                Type: "",
                BgpAsn: "",
                State: "",
                CustomerGatewayId: "",
                IpAddress: "",
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribePrefixLists = function DescribePrefixLists(aws) {
        var PrefixListIds = aws.params['PrefixListIds'];
        var MaxResults = aws.params['MaxResults'] /* integer */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var NextToken = aws.params['NextToken'];
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            NextToken: "",
            PrefixLists: [ {
                PrefixListName: "",
                Cidrs: /*S26*/[ "" /*, ...*/ ],
                PrefixListId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeBundleTasks = function DescribeBundleTasks(aws) {
        var BundleIds = aws.params['BundleIds'] /* list */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            BundleTasks: [ /*S1j*/{
                StartTime: now(),
                InstanceId: "",
                State: "",
                BundleTaskError: {
                    Code: "",
                    Message: ""
                },
                Progress: "",
                Storage: /*S1f*/{
                    S3: {
                        UploadPolicy: null /*blob*/,
                        UploadPolicySignature: "",
                        Bucket: "",
                        AWSAccessKeyId: "",
                        Prefix: ""
                    }
                },
                BundleId: "",
                UpdateTime: now()
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ModifySnapshotAttribute = function ModifySnapshotAttribute(aws) {
        var UserIds = aws.params['UserIds'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var SnapshotId = aws.params['SnapshotId'];
        var GroupNames = aws.params['GroupNames'];
        var CreateVolumePermission = aws.params['CreateVolumePermission'] /* structure */;
        var Attribute = aws.params['Attribute'];
        var OperationType = aws.params['OperationType'];
        if (! SnapshotId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SnapshotId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CancelSpotFleetRequests = function CancelSpotFleetRequests(aws) {
        var SpotFleetRequestIds = aws.params['SpotFleetRequestIds'];
        var TerminateInstances = aws.params['TerminateInstances'] /* boolean */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! SpotFleetRequestIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SpotFleetRequestIds"];
        }        if (! TerminateInstances) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TerminateInstances"];
        }

        // TODO implement code

        var ret = {
            SuccessfulFleetRequests: [ {
                SpotFleetRequestId: "",
                CurrentSpotFleetRequestState: "",
                PreviousSpotFleetRequestState: ""
            } /*, ...*/ ],
            UnsuccessfulFleetRequests: [ {
                Error: {
                    Code: "",
                    Message: ""
                },
                SpotFleetRequestId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeScheduledInstances = function DescribeScheduledInstances(aws) {
        var ScheduledInstanceIds = aws.params['ScheduledInstanceIds'] /* list */;
        var MaxResults = aws.params['MaxResults'] /* integer */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var SlotStartTimeRange = aws.params['SlotStartTimeRange'] /* structure */;
        var NextToken = aws.params['NextToken'];
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            ScheduledInstanceSet: [ /*Se9*/{
                PreviousSlotEndTime: now(),
                Platform: "",
                CreateDate: now(),
                NetworkPlatform: "",
                InstanceType: "",
                NextSlotStartTime: now(),
                InstanceCount: 0,
                ScheduledInstanceId: "",
                AvailabilityZone: "",
                HourlyPrice: "",
                SlotDurationInHours: 0,
                Recurrence: /*Se2*/{
                    Frequency: "",
                    OccurrenceUnit: "",
                    OccurrenceDaySet: [ 0 /*, ...*/ ],
                    OccurrenceRelativeToEnd: false,
                    Interval: 0
                },
                TermStartDate: now(),
                TermEndDate: now(),
                TotalScheduledInstanceHours: 0
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.RevokeSecurityGroupIngress = function RevokeSecurityGroupIngress(aws) {
        var ToPort = aws.params['ToPort'] /* integer */;
        var CidrIp = aws.params['CidrIp'];
        var GroupId = aws.params['GroupId'];
        var IpProtocol = aws.params['IpProtocol'];
        var SourceSecurityGroupOwnerId = aws.params['SourceSecurityGroupOwnerId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var FromPort = aws.params['FromPort'] /* integer */;
        var GroupName = aws.params['GroupName'];
        var SourceSecurityGroupName = aws.params['SourceSecurityGroupName'];
        var IpPermissions = aws.params['IpPermissions'];


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.AllocateHosts = function AllocateHosts(aws) {
        var InstanceType = aws.params['InstanceType'];
        var AutoPlacement = aws.params['AutoPlacement'];
        var ClientToken = aws.params['ClientToken'];
        var AvailabilityZone = aws.params['AvailabilityZone'];
        var Quantity = aws.params['Quantity'] /* integer */;
        if (! InstanceType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceType"];
        }        if (! Quantity) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Quantity"];
        }        if (! AvailabilityZone) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AvailabilityZone"];
        }

        // TODO implement code

        var ret = {
            HostIds: /*Sj*/[ "" /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateDhcpOptions = function CreateDhcpOptions(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var DhcpConfigurations = aws.params['DhcpConfigurations'] /* list */;
        if (! DhcpConfigurations) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DhcpConfigurations"];
        }

        // TODO implement code

        var ret = {
            DhcpOptions: /*S2z*/{
                DhcpConfigurations: [ {
                    Values: [ /*S33*/{
                        Value: ""
                    } /*, ...*/ ],
                    Key: ""
                } /*, ...*/ ],
                DhcpOptionsId: "",
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ]
            }
        };
        return [200, ret];
    }
module.exports.CancelSpotInstanceRequests = function CancelSpotInstanceRequests(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var SpotInstanceRequestIds = aws.params['SpotInstanceRequestIds'];
        if (! SpotInstanceRequestIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SpotInstanceRequestIds"];
        }

        // TODO implement code

        var ret = {
            CancelledSpotInstanceRequests: [ {
                State: "",
                SpotInstanceRequestId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateNatGateway = function CreateNatGateway(aws) {
        var AllocationId = aws.params['AllocationId'];
        var ClientToken = aws.params['ClientToken'];
        var SubnetId = aws.params['SubnetId'];
        if (! SubnetId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubnetId"];
        }        if (! AllocationId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AllocationId"];
        }

        // TODO implement code

        var ret = {
            NatGateway: /*S40*/{
                NatGatewayAddresses: [ {
                    AllocationId: "",
                    NetworkInterfaceId: "",
                    PublicIp: "",
                    PrivateIp: ""
                } /*, ...*/ ],
                NatGatewayId: "",
                State: "",
                CreateTime: now(),
                VpcId: "",
                FailureCode: "",
                SubnetId: "",
                FailureMessage: "",
                DeleteTime: now()
            },
            ClientToken: ""
        };
        return [200, ret];
    }
module.exports.DescribeIdFormat = function DescribeIdFormat(aws) {
        var Resource = aws.params['Resource'];


        // TODO implement code

        var ret = {
            Statuses: [ {
                UseLongIds: false,
                Resource: "",
                Deadline: now()
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ReplaceRoute = function ReplaceRoute(aws) {
        var NetworkInterfaceId = aws.params['NetworkInterfaceId'];
        var NatGatewayId = aws.params['NatGatewayId'];
        var GatewayId = aws.params['GatewayId'];
        var InstanceId = aws.params['InstanceId'];
        var RouteTableId = aws.params['RouteTableId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var VpcPeeringConnectionId = aws.params['VpcPeeringConnectionId'];
        var DestinationCidrBlock = aws.params['DestinationCidrBlock'];
        if (! RouteTableId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RouteTableId"];
        }        if (! DestinationCidrBlock) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DestinationCidrBlock"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeSpotFleetRequests = function DescribeSpotFleetRequests(aws) {
        var SpotFleetRequestIds = aws.params['SpotFleetRequestIds'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var NextToken = aws.params['NextToken'];
        var MaxResults = aws.params['MaxResults'] /* integer */;


        // TODO implement code

        var ret = {
            SpotFleetRequestConfigs: [ {
                SpotFleetRequestId: "",
                SpotFleetRequestConfig: /*Sf5*/{
                    IamFleetRole: "",
                    ClientToken: "",
                    TargetCapacity: 0,
                    LaunchSpecifications: [ {
                        RamdiskId: "",
                        Placement: /*Sf8*/{
                            AvailabilityZone: "",
                            GroupName: ""
                        },
                        KernelId: "",
                        InstanceType: "",
                        KeyName: "",
                        NetworkInterfaces: /*Sfa*/[ {
                            NetworkInterfaceId: "",
                            DeleteOnTermination: false,
                            DeviceIndex: 0,
                            Description: "",
                            Groups: /*S4g*/[ "" /*, ...*/ ],
                            SecondaryPrivateIpAddressCount: 0,
                            AssociatePublicIpAddress: false,
                            PrivateIpAddress: "",
                            SubnetId: "",
                            PrivateIpAddresses: /*S4h*/[ {
                                Primary: false,
                                PrivateIpAddress: ""
                            } /*, ...*/ ]
                        } /*, ...*/ ],
                        IamInstanceProfile: /*Sfc*/{
                            Name: "",
                            Arn: ""
                        },
                        Monitoring: {
                            Enabled: false
                        },
                        BlockDeviceMappings: /*S9w*/[ /*S3d*/{
                            DeviceName: "",
                            NoDevice: "",
                            Ebs: {
                                SnapshotId: "",
                                Iops: 0,
                                VolumeType: "",
                                DeleteOnTermination: false,
                                VolumeSize: 0,
                                Encrypted: false
                            },
                            VirtualName: ""
                        } /*, ...*/ ],
                        AddressingType: "",
                        UserData: "",
                        ImageId: "",
                        SecurityGroups: /*S4m*/[ {
                            GroupId: "",
                            GroupName: ""
                        } /*, ...*/ ],
                        EbsOptimized: false,
                        WeightedCapacity: 0.0 /*double*/,
                        SpotPrice: "",
                        SubnetId: ""
                    } /*, ...*/ ],
                    AllocationStrategy: "",
                    ValidFrom: now(),
                    ExcessCapacityTerminationPolicy: "",
                    SpotPrice: "",
                    ValidUntil: now(),
                    TerminateInstancesWithExpiration: false
                },
                CreateTime: now(),
                SpotFleetRequestState: ""
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.ReplaceNetworkAclEntry = function ReplaceNetworkAclEntry(aws) {
        var Egress = aws.params['Egress'] /* boolean */;
        var NetworkAclId = aws.params['NetworkAclId'];
        var RuleNumber = aws.params['RuleNumber'] /* integer */;
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Protocol = aws.params['Protocol'];
        var PortRange = aws.params['PortRange'];
        var IcmpTypeCode = aws.params['IcmpTypeCode'];
        var CidrBlock = aws.params['CidrBlock'];
        var RuleAction = aws.params['RuleAction'];
        if (! NetworkAclId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter NetworkAclId"];
        }        if (! RuleNumber) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RuleNumber"];
        }        if (! Protocol) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Protocol"];
        }        if (! RuleAction) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RuleAction"];
        }        if (! Egress) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Egress"];
        }        if (! CidrBlock) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter CidrBlock"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ImportSnapshot = function ImportSnapshot(aws) {
        var ClientData = aws.params['ClientData'];
        var ClientToken = aws.params['ClientToken'];
        var Description = aws.params['Description'];
        var DiskContainer = aws.params['DiskContainer'] /* structure */;
        var RoleName = aws.params['RoleName'];
        var DryRun = aws.params['DryRun'] /* boolean */;


        // TODO implement code

        var ret = {
            Description: "",
            ImportTaskId: "",
            SnapshotTaskDetail: /*San*/{
                Progress: "",
                Description: "",
                Format: "",
                StatusMessage: "",
                SnapshotId: "",
                DiskImageSize: 0.0 /*double*/,
                Url: "",
                UserBucket: /*Sai*/{
                    S3Bucket: "",
                    S3Key: ""
                },
                Status: ""
            }
        };
        return [200, ret];
    }
module.exports.AssignPrivateIpAddresses = function AssignPrivateIpAddresses(aws) {
        var NetworkInterfaceId = aws.params['NetworkInterfaceId'];
        var AllowReassignment = aws.params['AllowReassignment'] /* boolean */;
        var PrivateIpAddresses = aws.params['PrivateIpAddresses'];
        var SecondaryPrivateIpAddressCount = aws.params['SecondaryPrivateIpAddressCount'] /* integer */;
        if (! NetworkInterfaceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter NetworkInterfaceId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ResetSnapshotAttribute = function ResetSnapshotAttribute(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Attribute = aws.params['Attribute'];
        var SnapshotId = aws.params['SnapshotId'];
        if (! SnapshotId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SnapshotId"];
        }        if (! Attribute) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Attribute"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeleteVpcEndpoints = function DeleteVpcEndpoints(aws) {
        var VpcEndpointIds = aws.params['VpcEndpointIds'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        if (! VpcEndpointIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpcEndpointIds"];
        }

        // TODO implement code

        var ret = {
            Unsuccessful: /*S38*/[ /*S39*/{
                Error: {
                    Code: "",
                    Message: ""
                },
                ResourceId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CancelExportTask = function CancelExportTask(aws) {
        var ExportTaskId = aws.params['ExportTaskId'];
        if (! ExportTaskId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ExportTaskId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ModifyImageAttribute = function ModifyImageAttribute(aws) {
        var UserIds = aws.params['UserIds'];
        var Description = aws.params['Description'];
        var ImageId = aws.params['ImageId'];
        var Value = aws.params['Value'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var ProductCodes = aws.params['ProductCodes'] /* list */;
        var LaunchPermission = aws.params['LaunchPermission'] /* structure */;
        var Attribute = aws.params['Attribute'];
        var UserGroups = aws.params['UserGroups'] /* list */;
        var OperationType = aws.params['OperationType'];
        if (! ImageId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ImageId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeNetworkAcls = function DescribeNetworkAcls(aws) {
        var NetworkAclIds = aws.params['NetworkAclIds'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            NetworkAcls: [ /*S46*/{
                NetworkAclId: "",
                IsDefault: false,
                Associations: [ {
                    NetworkAclId: "",
                    SubnetId: "",
                    NetworkAclAssociationId: ""
                } /*, ...*/ ],
                VpcId: "",
                Entries: [ {
                    Egress: false,
                    RuleNumber: 0,
                    Protocol: "",
                    PortRange: /*S4b*/{
                        To: 0,
                        From: 0
                    },
                    IcmpTypeCode: /*S4a*/{
                        Type: 0,
                        Code: 0
                    },
                    CidrBlock: "",
                    RuleAction: ""
                } /*, ...*/ ],
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeInternetGateways = function DescribeInternetGateways(aws) {
        var InternetGatewayIds = aws.params['InternetGatewayIds'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            InternetGateways: [ /*S3t*/{
                Attachments: [ {
                    VpcId: "",
                    State: ""
                } /*, ...*/ ],
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ],
                InternetGatewayId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.AttachVolume = function AttachVolume(aws) {
        var VolumeId = aws.params['VolumeId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var InstanceId = aws.params['InstanceId'];
        var Device = aws.params['Device'];
        if (! VolumeId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VolumeId"];
        }        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }        if (! Device) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Device"];
        }

        // TODO implement code

        var ret = /*Sy*/{
            AttachTime: now(),
            VolumeId: "",
            InstanceId: "",
            State: "",
            DeleteOnTermination: false,
            Device: ""
        };
        return [200, ret];
    }
module.exports.CreateInternetGateway = function CreateInternetGateway(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;


        // TODO implement code

        var ret = {
            InternetGateway: /*S3t*/{
                Attachments: [ {
                    VpcId: "",
                    State: ""
                } /*, ...*/ ],
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ],
                InternetGatewayId: ""
            }
        };
        return [200, ret];
    }
module.exports.AssociateDhcpOptions = function AssociateDhcpOptions(aws) {
        var VpcId = aws.params['VpcId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var DhcpOptionsId = aws.params['DhcpOptionsId'];
        if (! DhcpOptionsId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DhcpOptionsId"];
        }        if (! VpcId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpcId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeVolumeAttribute = function DescribeVolumeAttribute(aws) {
        var VolumeId = aws.params['VolumeId'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Attribute = aws.params['Attribute'];
        if (! VolumeId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VolumeId"];
        }

        // TODO implement code

        var ret = {
            AutoEnableIO: /*Sar*/{
                Value: false
            },
            VolumeId: "",
            ProductCodes: /*S9t*/[ {
                ProductCodeType: "",
                ProductCodeId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteSubnet = function DeleteSubnet(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var SubnetId = aws.params['SubnetId'];
        if (! SubnetId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubnetId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeleteVpnConnectionRoute = function DeleteVpnConnectionRoute(aws) {
        var VpnConnectionId = aws.params['VpnConnectionId'];
        var DestinationCidrBlock = aws.params['DestinationCidrBlock'];
        if (! VpnConnectionId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpnConnectionId"];
        }        if (! DestinationCidrBlock) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DestinationCidrBlock"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ModifyVpcAttribute = function ModifyVpcAttribute(aws) {
        var EnableDnsHostnames = aws.params['EnableDnsHostnames'];
        var VpcId = aws.params['VpcId'];
        var EnableDnsSupport = aws.params['EnableDnsSupport'];
        if (! VpcId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpcId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeSecurityGroups = function DescribeSecurityGroups(aws) {
        var GroupIds = aws.params['GroupIds'];
        var DryRun = aws.params['DryRun'] /* boolean */;
        var Filters = aws.params['Filters'];
        var GroupNames = aws.params['GroupNames'];


        // TODO implement code

        var ret = {
            SecurityGroups: [ {
                Description: "",
                GroupId: "",
                VpcId: "",
                OwnerId: "",
                IpPermissionsEgress: /*S15*/[ {
                    ToPort: 0,
                    UserIdGroupPairs: [ {
                        GroupId: "",
                        UserId: "",
                        GroupName: ""
                    } /*, ...*/ ],
                    IpProtocol: "",
                    FromPort: 0,
                    IpRanges: [ {
                        CidrIp: ""
                    } /*, ...*/ ],
                    PrefixListIds: [ {
                        PrefixListId: ""
                    } /*, ...*/ ]
                } /*, ...*/ ],
                GroupName: "",
                IpPermissions: /*S15*/[ {
                    ToPort: 0,
                    UserIdGroupPairs: [ {
                        GroupId: "",
                        UserId: "",
                        GroupName: ""
                    } /*, ...*/ ],
                    IpProtocol: "",
                    FromPort: 0,
                    IpRanges: [ {
                        CidrIp: ""
                    } /*, ...*/ ],
                    PrefixListIds: [ {
                        PrefixListId: ""
                    } /*, ...*/ ]
                } /*, ...*/ ],
                Tags: /*Sa*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.GetPasswordData = function GetPasswordData(aws) {
        var DryRun = aws.params['DryRun'] /* boolean */;
        var InstanceId = aws.params['InstanceId'];
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }

        // TODO implement code

        var ret = {
            PasswordData: "",
            Timestamp: now(),
            InstanceId: ""
        };
        return [200, ret];
    }
