'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * AWS Security Token Service version 2011-06-15
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol query
require('../../lib/aws-common/shape_http')('query', module.exports, 'https://sts.amazonaws.com/doc/2011-06-15/')
module.exports.GetFederationToken = function GetFederationToken(aws) {
        var Name = aws.params['Name'];
        var Policy = aws.params['Policy'];
        var DurationSeconds = aws.params['DurationSeconds'] /* integer */;
        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }


        // TODO implement code

        var ret = {
            FederatedUser: {
                FederatedUserId: "",
                Arn: ""
            },
            PackedPolicySize: 0,
            Credentials: /*Sa*/{
                SessionToken: "",
                AccessKeyId: "",
                Expiration: now(),
                SecretAccessKey: ""
            }
        };
        return [200, ret];
    }
module.exports.AssumeRoleWithSAML = function AssumeRoleWithSAML(aws) {
        var SAMLAssertion = aws.params['SAMLAssertion'];
        var PrincipalArn = aws.params['PrincipalArn'];
        var Policy = aws.params['Policy'];
        var RoleArn = aws.params['RoleArn'];
        var DurationSeconds = aws.params['DurationSeconds'] /* integer */;
        if (! RoleArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RoleArn"];
        }
        if (! PrincipalArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PrincipalArn"];
        }
        if (! SAMLAssertion) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SAMLAssertion"];
        }


        // TODO implement code

        var ret = {
            Issuer: "",
            SubjectType: "",
            AssumedRoleUser: /*Sf*/{
                AssumedRoleId: "",
                Arn: ""
            },
            Subject: "",
            Audience: "",
            Credentials: /*Sa*/{
                SessionToken: "",
                AccessKeyId: "",
                Expiration: now(),
                SecretAccessKey: ""
            },
            NameQualifier: "",
            PackedPolicySize: 0
        };
        return [200, ret];
    }
module.exports.DecodeAuthorizationMessage = function DecodeAuthorizationMessage(aws) {
        var EncodedMessage = aws.params['EncodedMessage'];
        if (! EncodedMessage) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter EncodedMessage"];
        }


        // TODO implement code

        var ret = {
            DecodedMessage: ""
        };
        return [200, ret];
    }
module.exports.AssumeRole = function AssumeRole(aws) {
        var TokenCode = aws.params['TokenCode'];
        var SerialNumber = aws.params['SerialNumber'];
        var RoleArn = aws.params['RoleArn'];
        var DurationSeconds = aws.params['DurationSeconds'] /* integer */;
        var ExternalId = aws.params['ExternalId'];
        var RoleSessionName = aws.params['RoleSessionName'];
        var Policy = aws.params['Policy'];
        if (! RoleArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RoleArn"];
        }
        if (! RoleSessionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RoleSessionName"];
        }


        // TODO implement code

        var ret = {
            PackedPolicySize: 0,
            AssumedRoleUser: /*Sf*/{
                AssumedRoleId: "",
                Arn: ""
            },
            Credentials: /*Sa*/{
                SessionToken: "",
                AccessKeyId: "",
                Expiration: now(),
                SecretAccessKey: ""
            }
        };
        return [200, ret];
    }
module.exports.GetSessionToken = function GetSessionToken(aws) {
        var TokenCode = aws.params['TokenCode'];
        var SerialNumber = aws.params['SerialNumber'];
        var DurationSeconds = aws.params['DurationSeconds'] /* integer */;


        // TODO implement code

        var ret = {
            Credentials: /*Sa*/{
                SessionToken: "",
                AccessKeyId: "",
                Expiration: now(),
                SecretAccessKey: ""
            }
        };
        return [200, ret];
    }
module.exports.AssumeRoleWithWebIdentity = function AssumeRoleWithWebIdentity(aws) {
        var RoleArn = aws.params['RoleArn'];
        var DurationSeconds = aws.params['DurationSeconds'] /* integer */;
        var WebIdentityToken = aws.params['WebIdentityToken'];
        var ProviderId = aws.params['ProviderId'];
        var RoleSessionName = aws.params['RoleSessionName'];
        var Policy = aws.params['Policy'];
        if (! RoleArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RoleArn"];
        }
        if (! RoleSessionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RoleSessionName"];
        }
        if (! WebIdentityToken) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter WebIdentityToken"];
        }


        // TODO implement code

        var ret = {
            SubjectFromWebIdentityToken: "",
            AssumedRoleUser: /*Sf*/{
                AssumedRoleId: "",
                Arn: ""
            },
            Credentials: /*Sa*/{
                SessionToken: "",
                AccessKeyId: "",
                Expiration: now(),
                SecretAccessKey: ""
            },
            Provider: "",
            Audience: "",
            PackedPolicySize: 0
        };
        return [200, ret];
    }
