'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * AWS Security Token Service version 2011-06-15
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol query
require('../../lib/aws-common/shape_http')('query', module.exports, 'https://sts.amazonaws.com/doc/2011-06-15/');
// -----------------------------------
module.exports.AssumeRole = function AssumeRole(aws) {
  var durationSeconds = aws.params.DurationSeconds /* Type integer */;
  var externalId = aws.params.ExternalId;
  var policy = aws.params.Policy;
  var roleArn = aws.params.RoleArn;
  var roleSessionName = aws.params.RoleSessionName;
  var serialNumber = aws.params.SerialNumber;
  var tokenCode = aws.params.TokenCode;
  if (!roleArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RoleArn'];
  }
  if (!roleSessionName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RoleSessionName'];
  }


  // TODO implement code

  var ret = {
    AssumedRoleUser: /*Sf*/{
      Arn: '',
      AssumedRoleId: '',
    },
    Credentials: /*Sa*/{
      AccessKeyId: '',
      Expiration: awsCommon.timestamp(),
      SecretAccessKey: '',
      SessionToken: '',
    },
    PackedPolicySize: 0,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AssumeRoleWithSAML = function AssumeRoleWithSAML(aws) {
  var durationSeconds = aws.params.DurationSeconds /* Type integer */;
  var policy = aws.params.Policy;
  var principalArn = aws.params.PrincipalArn;
  var roleArn = aws.params.RoleArn;
  var sAMLAssertion = aws.params.SAMLAssertion;
  if (!principalArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PrincipalArn'];
  }
  if (!roleArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RoleArn'];
  }
  if (!sAMLAssertion) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SAMLAssertion'];
  }


  // TODO implement code

  var ret = {
    AssumedRoleUser: /*Sf*/{
      Arn: '',
      AssumedRoleId: '',
    },
    Audience: '',
    Credentials: /*Sa*/{
      AccessKeyId: '',
      Expiration: awsCommon.timestamp(),
      SecretAccessKey: '',
      SessionToken: '',
    },
    Issuer: '',
    NameQualifier: '',
    PackedPolicySize: 0,
    Subject: '',
    SubjectType: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AssumeRoleWithWebIdentity = function AssumeRoleWithWebIdentity(aws) {
  var durationSeconds = aws.params.DurationSeconds /* Type integer */;
  var policy = aws.params.Policy;
  var providerId = aws.params.ProviderId;
  var roleArn = aws.params.RoleArn;
  var roleSessionName = aws.params.RoleSessionName;
  var webIdentityToken = aws.params.WebIdentityToken;
  if (!roleArn) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RoleArn'];
  }
  if (!roleSessionName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RoleSessionName'];
  }
  if (!webIdentityToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter WebIdentityToken'];
  }


  // TODO implement code

  var ret = {
    AssumedRoleUser: /*Sf*/{
      Arn: '',
      AssumedRoleId: '',
    },
    Audience: '',
    Credentials: /*Sa*/{
      AccessKeyId: '',
      Expiration: awsCommon.timestamp(),
      SecretAccessKey: '',
      SessionToken: '',
    },
    PackedPolicySize: 0,
    Provider: '',
    SubjectFromWebIdentityToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DecodeAuthorizationMessage = function DecodeAuthorizationMessage(aws) {
  var encodedMessage = aws.params.EncodedMessage;
  if (!encodedMessage) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EncodedMessage'];
  }


  // TODO implement code

  var ret = {
    DecodedMessage: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetCallerIdentity = function GetCallerIdentity(aws) {


  // TODO implement code

  var ret = {
    Account: '',
    Arn: '',
    UserId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetFederationToken = function GetFederationToken(aws) {
  var durationSeconds = aws.params.DurationSeconds /* Type integer */;
  var name = aws.params.Name;
  var policy = aws.params.Policy;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }


  // TODO implement code

  var ret = {
    Credentials: /*Sa*/{
      AccessKeyId: '',
      Expiration: awsCommon.timestamp(),
      SecretAccessKey: '',
      SessionToken: '',
    },
    FederatedUser: {
      Arn: '',
      FederatedUserId: '',
    },
    PackedPolicySize: 0,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetSessionToken = function GetSessionToken(aws) {
  var durationSeconds = aws.params.DurationSeconds /* Type integer */;
  var serialNumber = aws.params.SerialNumber;
  var tokenCode = aws.params.TokenCode;


  // TODO implement code

  var ret = {
    Credentials: /*Sa*/{
      AccessKeyId: '',
      Expiration: awsCommon.timestamp(),
      SecretAccessKey: '',
      SessionToken: '',
    },
  };
  return [200, ret];
};
