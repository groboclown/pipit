'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * Amazon API Gateway version 2015-07-09
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.GetDomainNames = aws_common.as(
    "GET",
    "/domainnames",
    function GetDomainNames(aws) {
        var position = aws.params.position;
        var limit = aws.params.limit /* integer */;


        // TODO implement code

        var ret = {
            position: "",
            items: [ /*Sk*/{
                domainName: "",
                certificateName: "",
                distributionDomainName: "",
                certificateUploadDate: now()
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.DeleteMethodResponse = aws_common.as(
    "DELETE",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method/responses/:status_code",
    function DeleteMethodResponse(aws) {
        var httpMethod = aws.reqParams.http_method;
        var resourceId = aws.reqParams.resource_id;
        var restApiId = aws.reqParams.restapi_id;
        var statusCode = aws.reqParams.status_code;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }        if (! statusCode) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter statusCode"];
        }

        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.CreateApiKey = aws_common.as(
    "/apikeys",
    function CreateApiKey(aws) {
        var stageKeys = aws.params.stageKeys /* list */;
        var enabled = aws.params.enabled /* boolean */;
        var name = aws.params.name;
        var description = aws.params.description;


        // TODO implement code

        var ret = /*S6*/{
            createdDate: now(),
            name: "",
            lastUpdatedDate: now(),
            enabled: false,
            stageKeys: /*S7*/[ "" /*, ...*/ ],
            id: "",
            description: ""
        };
        return [201, ret];
    });
module.exports.UpdateDeployment = aws_common.as(
    "PATCH",
    "/restapis/:restapi_id/deployments/:deployment_id",
    function UpdateDeployment(aws) {
        var patchOperations = aws.params.patchOperations;
        var restApiId = aws.reqParams.restapi_id;
        var deploymentId = aws.reqParams.deployment_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! deploymentId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter deploymentId"];
        }

        // TODO implement code

        var ret = /*Sf*/{
            createdDate: now(),
            apiSummary: {} /* map */,
            id: "",
            description: ""
        };
        return [200, ret];
    });
module.exports.DeleteRestApi = aws_common.as(
    "DELETE",
    "/restapis/:restapi_id",
    function DeleteRestApi(aws) {
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }

        // TODO implement code

        var ret = {};
        return [202, ret];
    });
module.exports.GetDomainName = aws_common.as(
    "GET",
    "/domainnames/:domain_name",
    function GetDomainName(aws) {
        var domainName = aws.reqParams.domain_name;
        if (! domainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domainName"];
        }

        // TODO implement code

        var ret = /*Sk*/{
            domainName: "",
            certificateName: "",
            distributionDomainName: "",
            certificateUploadDate: now()
        };
        return [200, ret];
    });
module.exports.DeleteDeployment = aws_common.as(
    "DELETE",
    "/restapis/:restapi_id/deployments/:deployment_id",
    function DeleteDeployment(aws) {
        var restApiId = aws.reqParams.restapi_id;
        var deploymentId = aws.reqParams.deployment_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! deploymentId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter deploymentId"];
        }

        // TODO implement code

        var ret = {};
        return [202, ret];
    });
module.exports.UpdateIntegration = aws_common.as(
    "PATCH",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method/integration",
    function UpdateIntegration(aws) {
        var httpMethod = aws.reqParams.http_method;
        var resourceId = aws.reqParams.resource_id;
        var restApiId = aws.reqParams.restapi_id;
        var patchOperations = aws.params.patchOperations;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }

        // TODO implement code

        var ret = /*Sv*/{
            requestTemplates: /*Se*/{} /* map */,
            httpMethod: "",
            type: "",
            cacheKeyParameters: /*S7*/[ "" /*, ...*/ ],
            cacheNamespace: "",
            uri: "",
            integrationResponses: {} /* map */,
            requestParameters: /*Se*/{} /* map */,
            credentials: ""
        };
        return [200, ret];
    });
module.exports.GetAccount = aws_common.as(
    "GET",
    "/account",
    function GetAccount(aws) {


        // TODO implement code

        var ret = /*S1p*/{
            cloudwatchRoleArn: "",
            throttleSettings: {
                burstLimit: 0,
                rateLimit: 0.0 /*double*/
            }
        };
        return [200, ret];
    });
module.exports.CreateResource = aws_common.as(
    "/restapis/:restapi_id/resources/:parent_id",
    function CreateResource(aws) {
        var pathPart = aws.params.pathPart;
        var parentId = aws.reqParams.parent_id;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! parentId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter parentId"];
        }        if (! pathPart) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter pathPart"];
        }

        // TODO implement code

        var ret = /*So*/{
            path: "",
            pathPart: "",
            parentId: "",
            id: "",
            resourceMethods: {} /* map */
        };
        return [201, ret];
    });
module.exports.GetModels = aws_common.as(
    "GET",
    "/restapis/:restapi_id/models",
    function GetModels(aws) {
        var position = aws.params.position;
        var restApiId = aws.reqParams.restapi_id;
        var limit = aws.params.limit /* integer */;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }

        // TODO implement code

        var ret = {
            position: "",
            items: [ /*Sm*/{
                name: "",
                schema: "",
                id: "",
                description: "",
                contentType: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.GetRestApis = aws_common.as(
    "GET",
    "/restapis",
    function GetRestApis(aws) {
        var position = aws.params.position;
        var limit = aws.params.limit /* integer */;


        // TODO implement code

        var ret = {
            position: "",
            items: [ /*S10*/{
                createdDate: now(),
                name: "",
                id: "",
                description: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.GetResources = aws_common.as(
    "GET",
    "/restapis/:restapi_id/resources",
    function GetResources(aws) {
        var position = aws.params.position;
        var restApiId = aws.reqParams.restapi_id;
        var limit = aws.params.limit /* integer */;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }

        // TODO implement code

        var ret = {
            position: "",
            items: [ /*So*/{
                path: "",
                pathPart: "",
                parentId: "",
                id: "",
                resourceMethods: {} /* map */
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.UpdateMethodResponse = aws_common.as(
    "PATCH",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method/responses/:status_code",
    function UpdateMethodResponse(aws) {
        var httpMethod = aws.reqParams.http_method;
        var resourceId = aws.reqParams.resource_id;
        var restApiId = aws.reqParams.restapi_id;
        var patchOperations = aws.params.patchOperations;
        var statusCode = aws.reqParams.status_code;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }        if (! statusCode) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter statusCode"];
        }

        // TODO implement code

        var ret = /*St*/{
            responseModels: /*Se*/{} /* map */,
            responseParameters: /*Sr*/{} /* map */,
            statusCode: ""
        };
        return [201, ret];
    });
module.exports.GenerateClientCertificate = aws_common.as(
    "/clientcertificates",
    function GenerateClientCertificate(aws) {
        var description = aws.params.description;


        // TODO implement code

        var ret = /*S1n*/{
            createdDate: now(),
            clientCertificateId: "",
            expirationDate: now(),
            description: "",
            pemEncodedCertificate: ""
        };
        return [201, ret];
    });
module.exports.TestInvokeMethod = aws_common.as(
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method",
    function TestInvokeMethod(aws) {
        var httpMethod = aws.reqParams.http_method;
        var stageVariables = aws.params.stageVariables;
        var resourceId = aws.reqParams.resource_id;
        var headers = aws.params.headers;
        var pathWithQueryString = aws.params.pathWithQueryString;
        var clientCertificateId = aws.params.clientCertificateId;
        var restApiId = aws.reqParams.restapi_id;
        var body = aws.params.body;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }

        // TODO implement code

        var ret = {
            latency: 0 /*long*/,
            status: 0,
            log: "",
            headers: /*S36*/{} /* map */,
            body: ""
        };
        return [200, ret];
    });
module.exports.GetRestApi = aws_common.as(
    "GET",
    "/restapis/:restapi_id",
    function GetRestApi(aws) {
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }

        // TODO implement code

        var ret = /*S10*/{
            createdDate: now(),
            name: "",
            id: "",
            description: ""
        };
        return [200, ret];
    });
module.exports.UpdateResource = aws_common.as(
    "PATCH",
    "/restapis/:restapi_id/resources/:resource_id",
    function UpdateResource(aws) {
        var patchOperations = aws.params.patchOperations;
        var resourceId = aws.reqParams.resource_id;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }

        // TODO implement code

        var ret = /*So*/{
            path: "",
            pathPart: "",
            parentId: "",
            id: "",
            resourceMethods: {} /* map */
        };
        return [200, ret];
    });
module.exports.GetMethodResponse = aws_common.as(
    "GET",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method/responses/:status_code",
    function GetMethodResponse(aws) {
        var httpMethod = aws.reqParams.http_method;
        var resourceId = aws.reqParams.resource_id;
        var restApiId = aws.reqParams.restapi_id;
        var statusCode = aws.reqParams.status_code;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }        if (! statusCode) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter statusCode"];
        }

        // TODO implement code

        var ret = /*St*/{
            responseModels: /*Se*/{} /* map */,
            responseParameters: /*Sr*/{} /* map */,
            statusCode: ""
        };
        return [200, ret];
    });
module.exports.GetResource = aws_common.as(
    "GET",
    "/restapis/:restapi_id/resources/:resource_id",
    function GetResource(aws) {
        var resourceId = aws.reqParams.resource_id;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }

        // TODO implement code

        var ret = /*So*/{
            path: "",
            pathPart: "",
            parentId: "",
            id: "",
            resourceMethods: {} /* map */
        };
        return [200, ret];
    });
module.exports.UpdateApiKey = aws_common.as(
    "PATCH",
    "/apikeys/:api_Key",
    function UpdateApiKey(aws) {
        var patchOperations = aws.params.patchOperations;
        var apiKey = aws.reqParams.api_Key;
        if (! apiKey) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter apiKey"];
        }

        // TODO implement code

        var ret = /*S6*/{
            createdDate: now(),
            name: "",
            lastUpdatedDate: now(),
            enabled: false,
            stageKeys: /*S7*/[ "" /*, ...*/ ],
            id: "",
            description: ""
        };
        return [200, ret];
    });
module.exports.FlushStageCache = aws_common.as(
    "DELETE",
    "/restapis/:restapi_id/stages/:stage_name/cache/data",
    function FlushStageCache(aws) {
        var stageName = aws.reqParams.stage_name;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! stageName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter stageName"];
        }

        // TODO implement code

        var ret = {};
        return [202, ret];
    });
module.exports.GetIntegrationResponse = aws_common.as(
    "GET",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method/integration/responses/:status_code",
    function GetIntegrationResponse(aws) {
        var httpMethod = aws.reqParams.http_method;
        var resourceId = aws.reqParams.resource_id;
        var restApiId = aws.reqParams.restapi_id;
        var statusCode = aws.reqParams.status_code;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }        if (! statusCode) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter statusCode"];
        }

        // TODO implement code

        var ret = /*Sy*/{
            selectionPattern: "",
            responseTemplates: /*Se*/{} /* map */,
            responseParameters: /*Se*/{} /* map */,
            statusCode: ""
        };
        return [200, ret];
    });
module.exports.PutMethod = aws_common.as(
    "PUT",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method",
    function PutMethod(aws) {
        var apiKeyRequired = aws.params.apiKeyRequired /* boolean */;
        var httpMethod = aws.reqParams.http_method;
        var resourceId = aws.reqParams.resource_id;
        var authorizationType = aws.params.authorizationType;
        var requestModels = aws.params.requestModels;
        var requestParameters = aws.params.requestParameters;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }        if (! authorizationType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter authorizationType"];
        }

        // TODO implement code

        var ret = /*Sq*/{
            apiKeyRequired: false,
            httpMethod: "",
            requestModels: /*Se*/{} /* map */,
            authorizationType: "",
            requestParameters: /*Sr*/{} /* map */,
            methodResponses: {} /* map */,
            methodIntegration: /*Sv*/{
                requestTemplates: /*Se*/{} /* map */,
                httpMethod: "",
                type: "",
                cacheKeyParameters: /*S7*/[ "" /*, ...*/ ],
                cacheNamespace: "",
                uri: "",
                integrationResponses: {} /* map */,
                requestParameters: /*Se*/{} /* map */,
                credentials: ""
            }
        };
        return [201, ret];
    });
module.exports.DeleteClientCertificate = aws_common.as(
    "DELETE",
    "/clientcertificates/:clientcertificate_id",
    function DeleteClientCertificate(aws) {
        var clientCertificateId = aws.reqParams.clientcertificate_id;
        if (! clientCertificateId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter clientCertificateId"];
        }

        // TODO implement code

        var ret = {};
        return [202, ret];
    });
module.exports.GetClientCertificate = aws_common.as(
    "GET",
    "/clientcertificates/:clientcertificate_id",
    function GetClientCertificate(aws) {
        var clientCertificateId = aws.reqParams.clientcertificate_id;
        if (! clientCertificateId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter clientCertificateId"];
        }

        // TODO implement code

        var ret = /*S1n*/{
            createdDate: now(),
            clientCertificateId: "",
            expirationDate: now(),
            description: "",
            pemEncodedCertificate: ""
        };
        return [200, ret];
    });
module.exports.GetModel = aws_common.as(
    "GET",
    "/restapis/:restapi_id/models/:model_name",
    function GetModel(aws) {
        var flatten = aws.params.flatten /* boolean */;
        var modelName = aws.reqParams.model_name;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! modelName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter modelName"];
        }

        // TODO implement code

        var ret = /*Sm*/{
            name: "",
            schema: "",
            id: "",
            description: "",
            contentType: ""
        };
        return [200, ret];
    });
module.exports.DeleteStage = aws_common.as(
    "DELETE",
    "/restapis/:restapi_id/stages/:stage_name",
    function DeleteStage(aws) {
        var stageName = aws.reqParams.stage_name;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! stageName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter stageName"];
        }

        // TODO implement code

        var ret = {};
        return [202, ret];
    });
module.exports.PutIntegrationResponse = aws_common.as(
    "PUT",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method/integration/responses/:status_code",
    function PutIntegrationResponse(aws) {
        var httpMethod = aws.reqParams.http_method;
        var responseTemplates = aws.params.responseTemplates;
        var resourceId = aws.reqParams.resource_id;
        var responseParameters = aws.params.responseParameters;
        var statusCode = aws.reqParams.status_code;
        var selectionPattern = aws.params.selectionPattern;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }        if (! statusCode) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter statusCode"];
        }

        // TODO implement code

        var ret = /*Sy*/{
            selectionPattern: "",
            responseTemplates: /*Se*/{} /* map */,
            responseParameters: /*Se*/{} /* map */,
            statusCode: ""
        };
        return [201, ret];
    });
module.exports.UpdateBasePathMapping = aws_common.as(
    "PATCH",
    "/domainnames/:domain_name/basepathmappings/:base_path",
    function UpdateBasePathMapping(aws) {
        var domainName = aws.reqParams.domain_name;
        var basePath = aws.reqParams.base_path;
        var patchOperations = aws.params.patchOperations;
        if (! domainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domainName"];
        }        if (! basePath) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter basePath"];
        }

        // TODO implement code

        var ret = /*Sa*/{
            basePath: "",
            restApiId: "",
            stage: ""
        };
        return [200, ret];
    });
module.exports.DeleteBasePathMapping = aws_common.as(
    "DELETE",
    "/domainnames/:domain_name/basepathmappings/:base_path",
    function DeleteBasePathMapping(aws) {
        var domainName = aws.reqParams.domain_name;
        var basePath = aws.reqParams.base_path;
        if (! domainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domainName"];
        }        if (! basePath) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter basePath"];
        }

        // TODO implement code

        var ret = {};
        return [202, ret];
    });
module.exports.UpdateIntegrationResponse = aws_common.as(
    "PATCH",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method/integration/responses/:status_code",
    function UpdateIntegrationResponse(aws) {
        var httpMethod = aws.reqParams.http_method;
        var resourceId = aws.reqParams.resource_id;
        var restApiId = aws.reqParams.restapi_id;
        var patchOperations = aws.params.patchOperations;
        var statusCode = aws.reqParams.status_code;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }        if (! statusCode) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter statusCode"];
        }

        // TODO implement code

        var ret = /*Sy*/{
            selectionPattern: "",
            responseTemplates: /*Se*/{} /* map */,
            responseParameters: /*Se*/{} /* map */,
            statusCode: ""
        };
        return [200, ret];
    });
module.exports.GetApiKeys = aws_common.as(
    "GET",
    "/apikeys",
    function GetApiKeys(aws) {
        var position = aws.params.position;
        var limit = aws.params.limit /* integer */;


        // TODO implement code

        var ret = {
            position: "",
            items: [ /*S6*/{
                createdDate: now(),
                name: "",
                lastUpdatedDate: now(),
                enabled: false,
                stageKeys: /*S7*/[ "" /*, ...*/ ],
                id: "",
                description: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.CreateDomainName = aws_common.as(
    "/domainnames",
    function CreateDomainName(aws) {
        var domainName = aws.params.domainName;
        var certificateName = aws.params.certificateName;
        var certificateChain = aws.params.certificateChain;
        var certificateBody = aws.params.certificateBody;
        var certificatePrivateKey = aws.params.certificatePrivateKey;
        if (! domainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domainName"];
        }        if (! certificateName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter certificateName"];
        }        if (! certificateBody) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter certificateBody"];
        }        if (! certificatePrivateKey) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter certificatePrivateKey"];
        }        if (! certificateChain) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter certificateChain"];
        }

        // TODO implement code

        var ret = /*Sk*/{
            domainName: "",
            certificateName: "",
            distributionDomainName: "",
            certificateUploadDate: now()
        };
        return [201, ret];
    });
module.exports.CreateRestApi = aws_common.as(
    "/restapis",
    function CreateRestApi(aws) {
        var name = aws.params.name;
        var cloneFrom = aws.params.cloneFrom;
        var description = aws.params.description;
        if (! name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter name"];
        }

        // TODO implement code

        var ret = /*S10*/{
            createdDate: now(),
            name: "",
            id: "",
            description: ""
        };
        return [201, ret];
    });
module.exports.CreateStage = aws_common.as(
    "/restapis/:restapi_id/stages",
    function CreateStage(aws) {
        var variables = aws.params.variables;
        var description = aws.params.description;
        var deploymentId = aws.params.deploymentId;
        var stageName = aws.params.stageName;
        var restApiId = aws.reqParams.restapi_id;
        var cacheClusterEnabled = aws.params.cacheClusterEnabled /* boolean */;
        var cacheClusterSize = aws.params.cacheClusterSize;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! stageName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter stageName"];
        }        if (! deploymentId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter deploymentId"];
        }

        // TODO implement code

        var ret = /*S12*/{
            variables: /*Se*/{} /* map */,
            createdDate: now(),
            methodSettings: {} /* map */,
            description: "",
            deploymentId: "",
            lastUpdatedDate: now(),
            cacheClusterStatus: "",
            clientCertificateId: "",
            stageName: "",
            cacheClusterEnabled: false,
            cacheClusterSize: ""
        };
        return [201, ret];
    });
module.exports.DeleteMethod = aws_common.as(
    "DELETE",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method",
    function DeleteMethod(aws) {
        var httpMethod = aws.reqParams.http_method;
        var resourceId = aws.reqParams.resource_id;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }

        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.CreateModel = aws_common.as(
    "/restapis/:restapi_id/models",
    function CreateModel(aws) {
        var name = aws.params.name;
        var schema = aws.params.schema;
        var restApiId = aws.reqParams.restapi_id;
        var description = aws.params.description;
        var contentType = aws.params.contentType;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter name"];
        }        if (! contentType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter contentType"];
        }

        // TODO implement code

        var ret = /*Sm*/{
            name: "",
            schema: "",
            id: "",
            description: "",
            contentType: ""
        };
        return [201, ret];
    });
module.exports.GetBasePathMapping = aws_common.as(
    "GET",
    "/domainnames/:domain_name/basepathmappings/:base_path",
    function GetBasePathMapping(aws) {
        var domainName = aws.reqParams.domain_name;
        var basePath = aws.reqParams.base_path;
        if (! domainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domainName"];
        }        if (! basePath) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter basePath"];
        }

        // TODO implement code

        var ret = /*Sa*/{
            basePath: "",
            restApiId: "",
            stage: ""
        };
        return [200, ret];
    });
module.exports.DeleteResource = aws_common.as(
    "DELETE",
    "/restapis/:restapi_id/resources/:resource_id",
    function DeleteResource(aws) {
        var resourceId = aws.reqParams.resource_id;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }

        // TODO implement code

        var ret = {};
        return [202, ret];
    });
module.exports.UpdateClientCertificate = aws_common.as(
    "PATCH",
    "/clientcertificates/:clientcertificate_id",
    function UpdateClientCertificate(aws) {
        var clientCertificateId = aws.reqParams.clientcertificate_id;
        var patchOperations = aws.params.patchOperations;
        if (! clientCertificateId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter clientCertificateId"];
        }

        // TODO implement code

        var ret = /*S1n*/{
            createdDate: now(),
            clientCertificateId: "",
            expirationDate: now(),
            description: "",
            pemEncodedCertificate: ""
        };
        return [200, ret];
    });
module.exports.CreateDeployment = aws_common.as(
    "/restapis/:restapi_id/deployments",
    function CreateDeployment(aws) {
        var variables = aws.params.variables;
        var description = aws.params.description;
        var stageName = aws.params.stageName;
        var stageDescription = aws.params.stageDescription;
        var restApiId = aws.reqParams.restapi_id;
        var cacheClusterEnabled = aws.params.cacheClusterEnabled /* boolean */;
        var cacheClusterSize = aws.params.cacheClusterSize;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! stageName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter stageName"];
        }

        // TODO implement code

        var ret = /*Sf*/{
            createdDate: now(),
            apiSummary: {} /* map */,
            id: "",
            description: ""
        };
        return [201, ret];
    });
module.exports.GetSdk = aws_common.as(
    "GET",
    "/restapis/:restapi_id/stages/:stage_name/sdks/:sdk_type",
    function GetSdk(aws) {
        var parameters = aws.params.parameters;
        var stageName = aws.reqParams.stage_name;
        var restApiId = aws.reqParams.restapi_id;
        var sdkType = aws.reqParams.sdk_type;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! stageName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter stageName"];
        }        if (! sdkType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter sdkType"];
        }

        // TODO implement code

        var ret = {
            contentDisposition: "",
            contentType: "",
            body: null /*blob*/
        };
        return [200, ret];
    });
module.exports.DeleteApiKey = aws_common.as(
    "DELETE",
    "/apikeys/:api_Key",
    function DeleteApiKey(aws) {
        var apiKey = aws.reqParams.api_Key;
        if (! apiKey) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter apiKey"];
        }

        // TODO implement code

        var ret = {};
        return [202, ret];
    });
module.exports.UpdateMethod = aws_common.as(
    "PATCH",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method",
    function UpdateMethod(aws) {
        var httpMethod = aws.reqParams.http_method;
        var resourceId = aws.reqParams.resource_id;
        var restApiId = aws.reqParams.restapi_id;
        var patchOperations = aws.params.patchOperations;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }

        // TODO implement code

        var ret = /*Sq*/{
            apiKeyRequired: false,
            httpMethod: "",
            requestModels: /*Se*/{} /* map */,
            authorizationType: "",
            requestParameters: /*Sr*/{} /* map */,
            methodResponses: {} /* map */,
            methodIntegration: /*Sv*/{
                requestTemplates: /*Se*/{} /* map */,
                httpMethod: "",
                type: "",
                cacheKeyParameters: /*S7*/[ "" /*, ...*/ ],
                cacheNamespace: "",
                uri: "",
                integrationResponses: {} /* map */,
                requestParameters: /*Se*/{} /* map */,
                credentials: ""
            }
        };
        return [200, ret];
    });
module.exports.GetBasePathMappings = aws_common.as(
    "GET",
    "/domainnames/:domain_name/basepathmappings",
    function GetBasePathMappings(aws) {
        var domainName = aws.reqParams.domain_name;
        var position = aws.params.position;
        var limit = aws.params.limit /* integer */;
        if (! domainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domainName"];
        }

        // TODO implement code

        var ret = {
            position: "",
            items: [ /*Sa*/{
                basePath: "",
                restApiId: "",
                stage: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.UpdateDomainName = aws_common.as(
    "PATCH",
    "/domainnames/:domain_name",
    function UpdateDomainName(aws) {
        var domainName = aws.reqParams.domain_name;
        var patchOperations = aws.params.patchOperations;
        if (! domainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domainName"];
        }

        // TODO implement code

        var ret = /*Sk*/{
            domainName: "",
            certificateName: "",
            distributionDomainName: "",
            certificateUploadDate: now()
        };
        return [200, ret];
    });
module.exports.DeleteIntegrationResponse = aws_common.as(
    "DELETE",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method/integration/responses/:status_code",
    function DeleteIntegrationResponse(aws) {
        var httpMethod = aws.reqParams.http_method;
        var resourceId = aws.reqParams.resource_id;
        var restApiId = aws.reqParams.restapi_id;
        var statusCode = aws.reqParams.status_code;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }        if (! statusCode) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter statusCode"];
        }

        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.DeleteIntegration = aws_common.as(
    "DELETE",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method/integration",
    function DeleteIntegration(aws) {
        var httpMethod = aws.reqParams.http_method;
        var resourceId = aws.reqParams.resource_id;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }

        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.GetMethod = aws_common.as(
    "GET",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method",
    function GetMethod(aws) {
        var httpMethod = aws.reqParams.http_method;
        var resourceId = aws.reqParams.resource_id;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }

        // TODO implement code

        var ret = /*Sq*/{
            apiKeyRequired: false,
            httpMethod: "",
            requestModels: /*Se*/{} /* map */,
            authorizationType: "",
            requestParameters: /*Sr*/{} /* map */,
            methodResponses: {} /* map */,
            methodIntegration: /*Sv*/{
                requestTemplates: /*Se*/{} /* map */,
                httpMethod: "",
                type: "",
                cacheKeyParameters: /*S7*/[ "" /*, ...*/ ],
                cacheNamespace: "",
                uri: "",
                integrationResponses: {} /* map */,
                requestParameters: /*Se*/{} /* map */,
                credentials: ""
            }
        };
        return [200, ret];
    });
module.exports.GetModelTemplate = aws_common.as(
    "GET",
    "/restapis/:restapi_id/models/:model_name/default_template",
    function GetModelTemplate(aws) {
        var modelName = aws.reqParams.model_name;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! modelName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter modelName"];
        }

        // TODO implement code

        var ret = {
            value: ""
        };
        return [200, ret];
    });
module.exports.GetIntegration = aws_common.as(
    "GET",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method/integration",
    function GetIntegration(aws) {
        var httpMethod = aws.reqParams.http_method;
        var resourceId = aws.reqParams.resource_id;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }

        // TODO implement code

        var ret = /*Sv*/{
            requestTemplates: /*Se*/{} /* map */,
            httpMethod: "",
            type: "",
            cacheKeyParameters: /*S7*/[ "" /*, ...*/ ],
            cacheNamespace: "",
            uri: "",
            integrationResponses: {} /* map */,
            requestParameters: /*Se*/{} /* map */,
            credentials: ""
        };
        return [200, ret];
    });
module.exports.GetDeployments = aws_common.as(
    "GET",
    "/restapis/:restapi_id/deployments",
    function GetDeployments(aws) {
        var position = aws.params.position;
        var restApiId = aws.reqParams.restapi_id;
        var limit = aws.params.limit /* integer */;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }

        // TODO implement code

        var ret = {
            position: "",
            items: [ /*Sf*/{
                createdDate: now(),
                apiSummary: {} /* map */,
                id: "",
                description: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.DeleteDomainName = aws_common.as(
    "DELETE",
    "/domainnames/:domain_name",
    function DeleteDomainName(aws) {
        var domainName = aws.reqParams.domain_name;
        if (! domainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domainName"];
        }

        // TODO implement code

        var ret = {};
        return [202, ret];
    });
module.exports.GetStages = aws_common.as(
    "GET",
    "/restapis/:restapi_id/stages",
    function GetStages(aws) {
        var restApiId = aws.reqParams.restapi_id;
        var deploymentId = aws.params.deploymentId;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }

        // TODO implement code

        var ret = {
            item: [ /*S12*/{
                variables: /*Se*/{} /* map */,
                createdDate: now(),
                methodSettings: {} /* map */,
                description: "",
                deploymentId: "",
                lastUpdatedDate: now(),
                cacheClusterStatus: "",
                clientCertificateId: "",
                stageName: "",
                cacheClusterEnabled: false,
                cacheClusterSize: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.GetDeployment = aws_common.as(
    "GET",
    "/restapis/:restapi_id/deployments/:deployment_id",
    function GetDeployment(aws) {
        var restApiId = aws.reqParams.restapi_id;
        var deploymentId = aws.reqParams.deployment_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! deploymentId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter deploymentId"];
        }

        // TODO implement code

        var ret = /*Sf*/{
            createdDate: now(),
            apiSummary: {} /* map */,
            id: "",
            description: ""
        };
        return [200, ret];
    });
module.exports.DeleteModel = aws_common.as(
    "DELETE",
    "/restapis/:restapi_id/models/:model_name",
    function DeleteModel(aws) {
        var modelName = aws.reqParams.model_name;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! modelName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter modelName"];
        }

        // TODO implement code

        var ret = {};
        return [202, ret];
    });
module.exports.UpdateAccount = aws_common.as(
    "PATCH",
    "/account",
    function UpdateAccount(aws) {
        var patchOperations = aws.params.patchOperations;


        // TODO implement code

        var ret = /*S1p*/{
            cloudwatchRoleArn: "",
            throttleSettings: {
                burstLimit: 0,
                rateLimit: 0.0 /*double*/
            }
        };
        return [200, ret];
    });
module.exports.GetStage = aws_common.as(
    "GET",
    "/restapis/:restapi_id/stages/:stage_name",
    function GetStage(aws) {
        var stageName = aws.reqParams.stage_name;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! stageName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter stageName"];
        }

        // TODO implement code

        var ret = /*S12*/{
            variables: /*Se*/{} /* map */,
            createdDate: now(),
            methodSettings: {} /* map */,
            description: "",
            deploymentId: "",
            lastUpdatedDate: now(),
            cacheClusterStatus: "",
            clientCertificateId: "",
            stageName: "",
            cacheClusterEnabled: false,
            cacheClusterSize: ""
        };
        return [200, ret];
    });
module.exports.PutIntegration = aws_common.as(
    "PUT",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method/integration",
    function PutIntegration(aws) {
        var requestTemplates = aws.params.requestTemplates;
        var httpMethod = aws.reqParams.http_method;
        var resourceId = aws.reqParams.resource_id;
        var integrationHttpMethod = aws.params.integrationHttpMethod;
        var cacheKeyParameters = aws.params.cacheKeyParameters;
        var cacheNamespace = aws.params.cacheNamespace;
        var uri = aws.params.uri;
        var credentials = aws.params.credentials;
        var requestParameters = aws.params.requestParameters;
        var restApiId = aws.reqParams.restapi_id;
        var type = aws.params.type;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }        if (! type) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter type"];
        }

        // TODO implement code

        var ret = /*Sv*/{
            requestTemplates: /*Se*/{} /* map */,
            httpMethod: "",
            type: "",
            cacheKeyParameters: /*S7*/[ "" /*, ...*/ ],
            cacheNamespace: "",
            uri: "",
            integrationResponses: {} /* map */,
            requestParameters: /*Se*/{} /* map */,
            credentials: ""
        };
        return [201, ret];
    });
module.exports.PutMethodResponse = aws_common.as(
    "PUT",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method/responses/:status_code",
    function PutMethodResponse(aws) {
        var httpMethod = aws.reqParams.http_method;
        var resourceId = aws.reqParams.resource_id;
        var responseParameters = aws.params.responseParameters;
        var statusCode = aws.reqParams.status_code;
        var restApiId = aws.reqParams.restapi_id;
        var responseModels = aws.params.responseModels;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }        if (! statusCode) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter statusCode"];
        }

        // TODO implement code

        var ret = /*St*/{
            responseModels: /*Se*/{} /* map */,
            responseParameters: /*Sr*/{} /* map */,
            statusCode: ""
        };
        return [201, ret];
    });
module.exports.UpdateRestApi = aws_common.as(
    "PATCH",
    "/restapis/:restapi_id",
    function UpdateRestApi(aws) {
        var patchOperations = aws.params.patchOperations;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }

        // TODO implement code

        var ret = /*S10*/{
            createdDate: now(),
            name: "",
            id: "",
            description: ""
        };
        return [200, ret];
    });
module.exports.GetApiKey = aws_common.as(
    "GET",
    "/apikeys/:api_Key",
    function GetApiKey(aws) {
        var apiKey = aws.reqParams.api_Key;
        if (! apiKey) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter apiKey"];
        }

        // TODO implement code

        var ret = /*S6*/{
            createdDate: now(),
            name: "",
            lastUpdatedDate: now(),
            enabled: false,
            stageKeys: /*S7*/[ "" /*, ...*/ ],
            id: "",
            description: ""
        };
        return [200, ret];
    });
module.exports.GetClientCertificates = aws_common.as(
    "GET",
    "/clientcertificates",
    function GetClientCertificates(aws) {
        var position = aws.params.position;
        var limit = aws.params.limit /* integer */;


        // TODO implement code

        var ret = {
            position: "",
            items: [ /*S1n*/{
                createdDate: now(),
                clientCertificateId: "",
                expirationDate: now(),
                description: "",
                pemEncodedCertificate: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.UpdateStage = aws_common.as(
    "PATCH",
    "/restapis/:restapi_id/stages/:stage_name",
    function UpdateStage(aws) {
        var stageName = aws.reqParams.stage_name;
        var patchOperations = aws.params.patchOperations;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! stageName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter stageName"];
        }

        // TODO implement code

        var ret = /*S12*/{
            variables: /*Se*/{} /* map */,
            createdDate: now(),
            methodSettings: {} /* map */,
            description: "",
            deploymentId: "",
            lastUpdatedDate: now(),
            cacheClusterStatus: "",
            clientCertificateId: "",
            stageName: "",
            cacheClusterEnabled: false,
            cacheClusterSize: ""
        };
        return [200, ret];
    });
module.exports.UpdateModel = aws_common.as(
    "PATCH",
    "/restapis/:restapi_id/models/:model_name",
    function UpdateModel(aws) {
        var patchOperations = aws.params.patchOperations;
        var modelName = aws.reqParams.model_name;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }        if (! modelName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter modelName"];
        }

        // TODO implement code

        var ret = /*Sm*/{
            name: "",
            schema: "",
            id: "",
            description: "",
            contentType: ""
        };
        return [200, ret];
    });
module.exports.CreateBasePathMapping = aws_common.as(
    "/domainnames/:domain_name/basepathmappings",
    function CreateBasePathMapping(aws) {
        var domainName = aws.reqParams.domain_name;
        var basePath = aws.params.basePath;
        var restApiId = aws.params.restApiId;
        var stage = aws.params.stage;
        if (! domainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domainName"];
        }        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }

        // TODO implement code

        var ret = /*Sa*/{
            basePath: "",
            restApiId: "",
            stage: ""
        };
        return [201, ret];
    });
