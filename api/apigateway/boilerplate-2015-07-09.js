'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * Amazon API Gateway version 2015-07-09
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol rest-json
require('../../lib/aws-common/shape_http')('rest-json', module.exports, null)
module.exports.GetStages = aws_common.as(
    "GET",
    "/restapis/:restapi_id/stages",
    function GetStages(aws) {
        var deploymentId = aws.params['deploymentId'];
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }


        // TODO implement code

        var ret = {
            item: [ /*S12*/{
                cacheClusterEnabled: false,
                description: "",
                cacheClusterStatus: "",
                variables: /*Se*/{} /* map */,
                deploymentId: "",
                stageName: "",
                methodSettings: {} /* map */,
                clientCertificateId: "",
                createdDate: now(),
                lastUpdatedDate: now(),
                cacheClusterSize: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.DeleteApiKey = aws_common.as(
    "DELETE",
    "/apikeys/:api_Key",
    function DeleteApiKey(aws) {
        var apiKey = aws.reqParams.api_Key;
        if (! apiKey) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter apiKey"];
        }


        // TODO implement code

        var ret = {};
        return [202, ret];
    });
module.exports.DeleteIntegration = aws_common.as(
    "DELETE",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method/integration",
    function DeleteIntegration(aws) {
        var resourceId = aws.reqParams.resource_id;
        var httpMethod = aws.reqParams.http_method;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }
        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }


        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.GetRestApis = aws_common.as(
    "GET",
    "/restapis",
    function GetRestApis(aws) {
        var position = aws.params['position'];
        var limit = aws.params['limit'] /* integer */;


        // TODO implement code

        var ret = {
            position: "",
            items: [ /*S10*/{
                description: "",
                createdDate: now(),
                id: "",
                name: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.CreateModel = aws_common.as(
    "/restapis/:restapi_id/models",
    function CreateModel(aws) {
        var description = aws.params['description'];
        var name = aws.params['name'];
        var contentType = aws.params['contentType'];
        var schema = aws.params['schema'];
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter name"];
        }
        if (! contentType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter contentType"];
        }


        // TODO implement code

        var ret = /*Sm*/{
            description: "",
            contentType: "",
            schema: "",
            id: "",
            name: ""
        };
        return [201, ret];
    });
module.exports.CreateStage = aws_common.as(
    "/restapis/:restapi_id/stages",
    function CreateStage(aws) {
        var cacheClusterEnabled = aws.params['cacheClusterEnabled'] /* boolean */;
        var description = aws.params['description'];
        var variables = aws.params['variables'];
        var deploymentId = aws.params['deploymentId'];
        var restApiId = aws.reqParams.restapi_id;
        var stageName = aws.params['stageName'];
        var cacheClusterSize = aws.params['cacheClusterSize'];
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! stageName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter stageName"];
        }
        if (! deploymentId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter deploymentId"];
        }


        // TODO implement code

        var ret = /*S12*/{
            cacheClusterEnabled: false,
            description: "",
            cacheClusterStatus: "",
            variables: /*Se*/{} /* map */,
            deploymentId: "",
            stageName: "",
            methodSettings: {} /* map */,
            clientCertificateId: "",
            createdDate: now(),
            lastUpdatedDate: now(),
            cacheClusterSize: ""
        };
        return [201, ret];
    });
module.exports.UpdateApiKey = aws_common.as(
    "PATCH",
    "/apikeys/:api_Key",
    function UpdateApiKey(aws) {
        var patchOperations = aws.params['patchOperations'];
        var apiKey = aws.reqParams.api_Key;
        if (! apiKey) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter apiKey"];
        }


        // TODO implement code

        var ret = /*S6*/{
            stageKeys: /*S7*/[ "" /*, ...*/ ],
            description: "",
            createdDate: now(),
            id: "",
            name: "",
            enabled: false,
            lastUpdatedDate: now()
        };
        return [200, ret];
    });
module.exports.GetDeployments = aws_common.as(
    "GET",
    "/restapis/:restapi_id/deployments",
    function GetDeployments(aws) {
        var position = aws.params['position'];
        var limit = aws.params['limit'] /* integer */;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }


        // TODO implement code

        var ret = {
            position: "",
            items: [ /*Sf*/{
                description: "",
                createdDate: now(),
                apiSummary: {} /* map */,
                id: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.CreateResource = aws_common.as(
    "/restapis/:restapi_id/resources/:parent_id",
    function CreateResource(aws) {
        var pathPart = aws.params['pathPart'];
        var parentId = aws.reqParams.parent_id;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! parentId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter parentId"];
        }
        if (! pathPart) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter pathPart"];
        }


        // TODO implement code

        var ret = /*So*/{
            path: "",
            resourceMethods: {} /* map */,
            parentId: "",
            id: "",
            pathPart: ""
        };
        return [201, ret];
    });
module.exports.DeleteBasePathMapping = aws_common.as(
    "DELETE",
    "/domainnames/:domain_name/basepathmappings/:base_path",
    function DeleteBasePathMapping(aws) {
        var basePath = aws.reqParams.base_path;
        var domainName = aws.reqParams.domain_name;
        if (! domainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domainName"];
        }
        if (! basePath) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter basePath"];
        }


        // TODO implement code

        var ret = {};
        return [202, ret];
    });
module.exports.PutMethodResponse = aws_common.as(
    "PUT",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method/responses/:status_code",
    function PutMethodResponse(aws) {
        var responseParameters = aws.params['responseParameters'];
        var httpMethod = aws.reqParams.http_method;
        var statusCode = aws.reqParams.status_code;
        var resourceId = aws.reqParams.resource_id;
        var restApiId = aws.reqParams.restapi_id;
        var responseModels = aws.params['responseModels'];
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }
        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }
        if (! statusCode) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter statusCode"];
        }


        // TODO implement code

        var ret = /*St*/{
            responseModels: /*Se*/{} /* map */,
            responseParameters: /*Sr*/{} /* map */,
            statusCode: ""
        };
        return [201, ret];
    });
module.exports.DeleteIntegrationResponse = aws_common.as(
    "DELETE",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method/integration/responses/:status_code",
    function DeleteIntegrationResponse(aws) {
        var resourceId = aws.reqParams.resource_id;
        var statusCode = aws.reqParams.status_code;
        var httpMethod = aws.reqParams.http_method;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }
        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }
        if (! statusCode) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter statusCode"];
        }


        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.UpdateIntegrationResponse = aws_common.as(
    "PATCH",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method/integration/responses/:status_code",
    function UpdateIntegrationResponse(aws) {
        var resourceId = aws.reqParams.resource_id;
        var statusCode = aws.reqParams.status_code;
        var httpMethod = aws.reqParams.http_method;
        var patchOperations = aws.params['patchOperations'];
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }
        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }
        if (! statusCode) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter statusCode"];
        }


        // TODO implement code

        var ret = /*Sy*/{
            selectionPattern: "",
            responseTemplates: /*Se*/{} /* map */,
            responseParameters: /*Se*/{} /* map */,
            statusCode: ""
        };
        return [200, ret];
    });
module.exports.CreateBasePathMapping = aws_common.as(
    "/domainnames/:domain_name/basepathmappings",
    function CreateBasePathMapping(aws) {
        var stage = aws.params['stage'];
        var restApiId = aws.params['restApiId'];
        var basePath = aws.params['basePath'];
        var domainName = aws.reqParams.domain_name;
        if (! domainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domainName"];
        }
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }


        // TODO implement code

        var ret = /*Sa*/{
            stage: "",
            basePath: "",
            restApiId: ""
        };
        return [201, ret];
    });
module.exports.GetResource = aws_common.as(
    "GET",
    "/restapis/:restapi_id/resources/:resource_id",
    function GetResource(aws) {
        var resourceId = aws.reqParams.resource_id;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }


        // TODO implement code

        var ret = /*So*/{
            path: "",
            resourceMethods: {} /* map */,
            parentId: "",
            id: "",
            pathPart: ""
        };
        return [200, ret];
    });
module.exports.UpdateDomainName = aws_common.as(
    "PATCH",
    "/domainnames/:domain_name",
    function UpdateDomainName(aws) {
        var patchOperations = aws.params['patchOperations'];
        var domainName = aws.reqParams.domain_name;
        if (! domainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domainName"];
        }


        // TODO implement code

        var ret = /*Sk*/{
            distributionDomainName: "",
            certificateUploadDate: now(),
            certificateName: "",
            domainName: ""
        };
        return [200, ret];
    });
module.exports.DeleteRestApi = aws_common.as(
    "DELETE",
    "/restapis/:restapi_id",
    function DeleteRestApi(aws) {
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }


        // TODO implement code

        var ret = {};
        return [202, ret];
    });
module.exports.GenerateClientCertificate = aws_common.as(
    "/clientcertificates",
    function GenerateClientCertificate(aws) {
        var description = aws.params['description'];


        // TODO implement code

        var ret = /*S1n*/{
            description: "",
            clientCertificateId: "",
            createdDate: now(),
            pemEncodedCertificate: "",
            expirationDate: now()
        };
        return [201, ret];
    });
module.exports.PutIntegration = aws_common.as(
    "PUT",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method/integration",
    function PutIntegration(aws) {
        var cacheKeyParameters = aws.params['cacheKeyParameters'];
        var type = aws.params['type'];
        var integrationHttpMethod = aws.params['integrationHttpMethod'];
        var cacheNamespace = aws.params['cacheNamespace'];
        var httpMethod = aws.reqParams.http_method;
        var requestTemplates = aws.params['requestTemplates'];
        var requestParameters = aws.params['requestParameters'];
        var restApiId = aws.reqParams.restapi_id;
        var uri = aws.params['uri'];
        var resourceId = aws.reqParams.resource_id;
        var credentials = aws.params['credentials'];
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }
        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }
        if (! type) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter type"];
        }


        // TODO implement code

        var ret = /*Sv*/{
            type: "",
            cacheNamespace: "",
            httpMethod: "",
            requestTemplates: /*Se*/{} /* map */,
            requestParameters: /*Se*/{} /* map */,
            uri: "",
            cacheKeyParameters: /*S7*/[ "" /*, ...*/ ],
            credentials: "",
            integrationResponses: {} /* map */
        };
        return [201, ret];
    });
module.exports.GetApiKey = aws_common.as(
    "GET",
    "/apikeys/:api_Key",
    function GetApiKey(aws) {
        var apiKey = aws.reqParams.api_Key;
        if (! apiKey) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter apiKey"];
        }


        // TODO implement code

        var ret = /*S6*/{
            stageKeys: /*S7*/[ "" /*, ...*/ ],
            description: "",
            createdDate: now(),
            id: "",
            name: "",
            enabled: false,
            lastUpdatedDate: now()
        };
        return [200, ret];
    });
module.exports.UpdateDeployment = aws_common.as(
    "PATCH",
    "/restapis/:restapi_id/deployments/:deployment_id",
    function UpdateDeployment(aws) {
        var patchOperations = aws.params['patchOperations'];
        var deploymentId = aws.reqParams.deployment_id;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! deploymentId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter deploymentId"];
        }


        // TODO implement code

        var ret = /*Sf*/{
            description: "",
            createdDate: now(),
            apiSummary: {} /* map */,
            id: ""
        };
        return [200, ret];
    });
module.exports.DeleteModel = aws_common.as(
    "DELETE",
    "/restapis/:restapi_id/models/:model_name",
    function DeleteModel(aws) {
        var modelName = aws.reqParams.model_name;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! modelName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter modelName"];
        }


        // TODO implement code

        var ret = {};
        return [202, ret];
    });
module.exports.GetApiKeys = aws_common.as(
    "GET",
    "/apikeys",
    function GetApiKeys(aws) {
        var position = aws.params['position'];
        var limit = aws.params['limit'] /* integer */;


        // TODO implement code

        var ret = {
            position: "",
            items: [ /*S6*/{
                stageKeys: /*S7*/[ "" /*, ...*/ ],
                description: "",
                createdDate: now(),
                id: "",
                name: "",
                enabled: false,
                lastUpdatedDate: now()
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.DeleteDeployment = aws_common.as(
    "DELETE",
    "/restapis/:restapi_id/deployments/:deployment_id",
    function DeleteDeployment(aws) {
        var deploymentId = aws.reqParams.deployment_id;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! deploymentId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter deploymentId"];
        }


        // TODO implement code

        var ret = {};
        return [202, ret];
    });
module.exports.GetClientCertificates = aws_common.as(
    "GET",
    "/clientcertificates",
    function GetClientCertificates(aws) {
        var position = aws.params['position'];
        var limit = aws.params['limit'] /* integer */;


        // TODO implement code

        var ret = {
            position: "",
            items: [ /*S1n*/{
                description: "",
                clientCertificateId: "",
                createdDate: now(),
                pemEncodedCertificate: "",
                expirationDate: now()
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.DeleteClientCertificate = aws_common.as(
    "DELETE",
    "/clientcertificates/:clientcertificate_id",
    function DeleteClientCertificate(aws) {
        var clientCertificateId = aws.reqParams.clientcertificate_id;
        if (! clientCertificateId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter clientCertificateId"];
        }


        // TODO implement code

        var ret = {};
        return [202, ret];
    });
module.exports.UpdateStage = aws_common.as(
    "PATCH",
    "/restapis/:restapi_id/stages/:stage_name",
    function UpdateStage(aws) {
        var stageName = aws.reqParams.stage_name;
        var patchOperations = aws.params['patchOperations'];
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! stageName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter stageName"];
        }


        // TODO implement code

        var ret = /*S12*/{
            cacheClusterEnabled: false,
            description: "",
            cacheClusterStatus: "",
            variables: /*Se*/{} /* map */,
            deploymentId: "",
            stageName: "",
            methodSettings: {} /* map */,
            clientCertificateId: "",
            createdDate: now(),
            lastUpdatedDate: now(),
            cacheClusterSize: ""
        };
        return [200, ret];
    });
module.exports.PutMethod = aws_common.as(
    "PUT",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method",
    function PutMethod(aws) {
        var httpMethod = aws.reqParams.http_method;
        var authorizationType = aws.params['authorizationType'];
        var requestParameters = aws.params['requestParameters'];
        var apiKeyRequired = aws.params['apiKeyRequired'] /* boolean */;
        var requestModels = aws.params['requestModels'];
        var resourceId = aws.reqParams.resource_id;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }
        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }
        if (! authorizationType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter authorizationType"];
        }


        // TODO implement code

        var ret = /*Sq*/{
            methodResponses: {} /* map */,
            requestModels: /*Se*/{} /* map */,
            authorizationType: "",
            requestParameters: /*Sr*/{} /* map */,
            apiKeyRequired: false,
            httpMethod: "",
            methodIntegration: /*Sv*/{
                type: "",
                cacheNamespace: "",
                httpMethod: "",
                requestTemplates: /*Se*/{} /* map */,
                requestParameters: /*Se*/{} /* map */,
                uri: "",
                cacheKeyParameters: /*S7*/[ "" /*, ...*/ ],
                credentials: "",
                integrationResponses: {} /* map */
            }
        };
        return [201, ret];
    });
module.exports.GetMethodResponse = aws_common.as(
    "GET",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method/responses/:status_code",
    function GetMethodResponse(aws) {
        var resourceId = aws.reqParams.resource_id;
        var statusCode = aws.reqParams.status_code;
        var httpMethod = aws.reqParams.http_method;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }
        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }
        if (! statusCode) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter statusCode"];
        }


        // TODO implement code

        var ret = /*St*/{
            responseModels: /*Se*/{} /* map */,
            responseParameters: /*Sr*/{} /* map */,
            statusCode: ""
        };
        return [200, ret];
    });
module.exports.GetResources = aws_common.as(
    "GET",
    "/restapis/:restapi_id/resources",
    function GetResources(aws) {
        var position = aws.params['position'];
        var limit = aws.params['limit'] /* integer */;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }


        // TODO implement code

        var ret = {
            position: "",
            items: [ /*So*/{
                path: "",
                resourceMethods: {} /* map */,
                parentId: "",
                id: "",
                pathPart: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.GetDeployment = aws_common.as(
    "GET",
    "/restapis/:restapi_id/deployments/:deployment_id",
    function GetDeployment(aws) {
        var deploymentId = aws.reqParams.deployment_id;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! deploymentId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter deploymentId"];
        }


        // TODO implement code

        var ret = /*Sf*/{
            description: "",
            createdDate: now(),
            apiSummary: {} /* map */,
            id: ""
        };
        return [200, ret];
    });
module.exports.FlushStageCache = aws_common.as(
    "DELETE",
    "/restapis/:restapi_id/stages/:stage_name/cache/data",
    function FlushStageCache(aws) {
        var stageName = aws.reqParams.stage_name;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! stageName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter stageName"];
        }


        // TODO implement code

        var ret = {};
        return [202, ret];
    });
module.exports.DeleteDomainName = aws_common.as(
    "DELETE",
    "/domainnames/:domain_name",
    function DeleteDomainName(aws) {
        var domainName = aws.reqParams.domain_name;
        if (! domainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domainName"];
        }


        // TODO implement code

        var ret = {};
        return [202, ret];
    });
module.exports.TestInvokeMethod = aws_common.as(
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method",
    function TestInvokeMethod(aws) {
        var clientCertificateId = aws.params['clientCertificateId'];
        var httpMethod = aws.reqParams.http_method;
        var restApiId = aws.reqParams.restapi_id;
        var stageVariables = aws.params['stageVariables'];
        var resourceId = aws.reqParams.resource_id;
        var headers = aws.params['headers'];
        var body = aws.params['body'];
        var pathWithQueryString = aws.params['pathWithQueryString'];
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }
        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }


        // TODO implement code

        var ret = {
            latency: 0 /*long*/,
            log: "",
            body: "",
            status: 0,
            headers: /*S36*/{} /* map */
        };
        return [200, ret];
    });
module.exports.UpdateModel = aws_common.as(
    "PATCH",
    "/restapis/:restapi_id/models/:model_name",
    function UpdateModel(aws) {
        var modelName = aws.reqParams.model_name;
        var patchOperations = aws.params['patchOperations'];
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! modelName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter modelName"];
        }


        // TODO implement code

        var ret = /*Sm*/{
            description: "",
            contentType: "",
            schema: "",
            id: "",
            name: ""
        };
        return [200, ret];
    });
module.exports.GetClientCertificate = aws_common.as(
    "GET",
    "/clientcertificates/:clientcertificate_id",
    function GetClientCertificate(aws) {
        var clientCertificateId = aws.reqParams.clientcertificate_id;
        if (! clientCertificateId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter clientCertificateId"];
        }


        // TODO implement code

        var ret = /*S1n*/{
            description: "",
            clientCertificateId: "",
            createdDate: now(),
            pemEncodedCertificate: "",
            expirationDate: now()
        };
        return [200, ret];
    });
module.exports.UpdateMethodResponse = aws_common.as(
    "PATCH",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method/responses/:status_code",
    function UpdateMethodResponse(aws) {
        var resourceId = aws.reqParams.resource_id;
        var statusCode = aws.reqParams.status_code;
        var httpMethod = aws.reqParams.http_method;
        var patchOperations = aws.params['patchOperations'];
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }
        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }
        if (! statusCode) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter statusCode"];
        }


        // TODO implement code

        var ret = /*St*/{
            responseModels: /*Se*/{} /* map */,
            responseParameters: /*Sr*/{} /* map */,
            statusCode: ""
        };
        return [201, ret];
    });
module.exports.UpdateIntegration = aws_common.as(
    "PATCH",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method/integration",
    function UpdateIntegration(aws) {
        var resourceId = aws.reqParams.resource_id;
        var httpMethod = aws.reqParams.http_method;
        var patchOperations = aws.params['patchOperations'];
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }
        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }


        // TODO implement code

        var ret = /*Sv*/{
            type: "",
            cacheNamespace: "",
            httpMethod: "",
            requestTemplates: /*Se*/{} /* map */,
            requestParameters: /*Se*/{} /* map */,
            uri: "",
            cacheKeyParameters: /*S7*/[ "" /*, ...*/ ],
            credentials: "",
            integrationResponses: {} /* map */
        };
        return [200, ret];
    });
module.exports.CreateDeployment = aws_common.as(
    "/restapis/:restapi_id/deployments",
    function CreateDeployment(aws) {
        var cacheClusterEnabled = aws.params['cacheClusterEnabled'] /* boolean */;
        var description = aws.params['description'];
        var variables = aws.params['variables'];
        var restApiId = aws.reqParams.restapi_id;
        var stageName = aws.params['stageName'];
        var stageDescription = aws.params['stageDescription'];
        var cacheClusterSize = aws.params['cacheClusterSize'];
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! stageName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter stageName"];
        }


        // TODO implement code

        var ret = /*Sf*/{
            description: "",
            createdDate: now(),
            apiSummary: {} /* map */,
            id: ""
        };
        return [201, ret];
    });
module.exports.DeleteStage = aws_common.as(
    "DELETE",
    "/restapis/:restapi_id/stages/:stage_name",
    function DeleteStage(aws) {
        var stageName = aws.reqParams.stage_name;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! stageName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter stageName"];
        }


        // TODO implement code

        var ret = {};
        return [202, ret];
    });
module.exports.UpdateAccount = aws_common.as(
    "PATCH",
    "/account",
    function UpdateAccount(aws) {
        var patchOperations = aws.params['patchOperations'];


        // TODO implement code

        var ret = /*S1p*/{
            throttleSettings: {
                burstLimit: 0,
                rateLimit: 0.0 /*double*/
            },
            cloudwatchRoleArn: ""
        };
        return [200, ret];
    });
module.exports.GetModel = aws_common.as(
    "GET",
    "/restapis/:restapi_id/models/:model_name",
    function GetModel(aws) {
        var modelName = aws.reqParams.model_name;
        var flatten = aws.params['flatten'] /* boolean */;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! modelName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter modelName"];
        }


        // TODO implement code

        var ret = /*Sm*/{
            description: "",
            contentType: "",
            schema: "",
            id: "",
            name: ""
        };
        return [200, ret];
    });
module.exports.UpdateMethod = aws_common.as(
    "PATCH",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method",
    function UpdateMethod(aws) {
        var resourceId = aws.reqParams.resource_id;
        var httpMethod = aws.reqParams.http_method;
        var patchOperations = aws.params['patchOperations'];
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }
        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }


        // TODO implement code

        var ret = /*Sq*/{
            methodResponses: {} /* map */,
            requestModels: /*Se*/{} /* map */,
            authorizationType: "",
            requestParameters: /*Sr*/{} /* map */,
            apiKeyRequired: false,
            httpMethod: "",
            methodIntegration: /*Sv*/{
                type: "",
                cacheNamespace: "",
                httpMethod: "",
                requestTemplates: /*Se*/{} /* map */,
                requestParameters: /*Se*/{} /* map */,
                uri: "",
                cacheKeyParameters: /*S7*/[ "" /*, ...*/ ],
                credentials: "",
                integrationResponses: {} /* map */
            }
        };
        return [200, ret];
    });
module.exports.GetRestApi = aws_common.as(
    "GET",
    "/restapis/:restapi_id",
    function GetRestApi(aws) {
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }


        // TODO implement code

        var ret = /*S10*/{
            description: "",
            createdDate: now(),
            id: "",
            name: ""
        };
        return [200, ret];
    });
module.exports.GetIntegration = aws_common.as(
    "GET",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method/integration",
    function GetIntegration(aws) {
        var resourceId = aws.reqParams.resource_id;
        var httpMethod = aws.reqParams.http_method;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }
        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }


        // TODO implement code

        var ret = /*Sv*/{
            type: "",
            cacheNamespace: "",
            httpMethod: "",
            requestTemplates: /*Se*/{} /* map */,
            requestParameters: /*Se*/{} /* map */,
            uri: "",
            cacheKeyParameters: /*S7*/[ "" /*, ...*/ ],
            credentials: "",
            integrationResponses: {} /* map */
        };
        return [200, ret];
    });
module.exports.GetModelTemplate = aws_common.as(
    "GET",
    "/restapis/:restapi_id/models/:model_name/default_template",
    function GetModelTemplate(aws) {
        var modelName = aws.reqParams.model_name;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! modelName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter modelName"];
        }


        // TODO implement code

        var ret = {
            value: ""
        };
        return [200, ret];
    });
module.exports.GetBasePathMappings = aws_common.as(
    "GET",
    "/domainnames/:domain_name/basepathmappings",
    function GetBasePathMappings(aws) {
        var position = aws.params['position'];
        var limit = aws.params['limit'] /* integer */;
        var domainName = aws.reqParams.domain_name;
        if (! domainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domainName"];
        }


        // TODO implement code

        var ret = {
            position: "",
            items: [ /*Sa*/{
                stage: "",
                basePath: "",
                restApiId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.GetSdk = aws_common.as(
    "GET",
    "/restapis/:restapi_id/stages/:stage_name/sdks/:sdk_type",
    function GetSdk(aws) {
        var stageName = aws.reqParams.stage_name;
        var parameters = aws.params['parameters'];
        var sdkType = aws.reqParams.sdk_type;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! stageName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter stageName"];
        }
        if (! sdkType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter sdkType"];
        }


        // TODO implement code

        var ret = {
            body: null /*blob*/,
            contentDisposition: "",
            contentType: ""
        };
        return [200, ret];
    });
module.exports.GetStage = aws_common.as(
    "GET",
    "/restapis/:restapi_id/stages/:stage_name",
    function GetStage(aws) {
        var stageName = aws.reqParams.stage_name;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! stageName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter stageName"];
        }


        // TODO implement code

        var ret = /*S12*/{
            cacheClusterEnabled: false,
            description: "",
            cacheClusterStatus: "",
            variables: /*Se*/{} /* map */,
            deploymentId: "",
            stageName: "",
            methodSettings: {} /* map */,
            clientCertificateId: "",
            createdDate: now(),
            lastUpdatedDate: now(),
            cacheClusterSize: ""
        };
        return [200, ret];
    });
module.exports.GetModels = aws_common.as(
    "GET",
    "/restapis/:restapi_id/models",
    function GetModels(aws) {
        var position = aws.params['position'];
        var limit = aws.params['limit'] /* integer */;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }


        // TODO implement code

        var ret = {
            position: "",
            items: [ /*Sm*/{
                description: "",
                contentType: "",
                schema: "",
                id: "",
                name: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.PutIntegrationResponse = aws_common.as(
    "PUT",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method/integration/responses/:status_code",
    function PutIntegrationResponse(aws) {
        var selectionPattern = aws.params['selectionPattern'];
        var responseTemplates = aws.params['responseTemplates'];
        var responseParameters = aws.params['responseParameters'];
        var httpMethod = aws.reqParams.http_method;
        var statusCode = aws.reqParams.status_code;
        var resourceId = aws.reqParams.resource_id;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }
        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }
        if (! statusCode) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter statusCode"];
        }


        // TODO implement code

        var ret = /*Sy*/{
            selectionPattern: "",
            responseTemplates: /*Se*/{} /* map */,
            responseParameters: /*Se*/{} /* map */,
            statusCode: ""
        };
        return [201, ret];
    });
module.exports.CreateRestApi = aws_common.as(
    "/restapis",
    function CreateRestApi(aws) {
        var description = aws.params['description'];
        var cloneFrom = aws.params['cloneFrom'];
        var name = aws.params['name'];
        if (! name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter name"];
        }


        // TODO implement code

        var ret = /*S10*/{
            description: "",
            createdDate: now(),
            id: "",
            name: ""
        };
        return [201, ret];
    });
module.exports.CreateDomainName = aws_common.as(
    "/domainnames",
    function CreateDomainName(aws) {
        var certificateChain = aws.params['certificateChain'];
        var certificateName = aws.params['certificateName'];
        var certificateBody = aws.params['certificateBody'];
        var certificatePrivateKey = aws.params['certificatePrivateKey'];
        var domainName = aws.params['domainName'];
        if (! domainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domainName"];
        }
        if (! certificateName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter certificateName"];
        }
        if (! certificateBody) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter certificateBody"];
        }
        if (! certificatePrivateKey) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter certificatePrivateKey"];
        }
        if (! certificateChain) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter certificateChain"];
        }


        // TODO implement code

        var ret = /*Sk*/{
            distributionDomainName: "",
            certificateUploadDate: now(),
            certificateName: "",
            domainName: ""
        };
        return [201, ret];
    });
module.exports.DeleteMethod = aws_common.as(
    "DELETE",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method",
    function DeleteMethod(aws) {
        var resourceId = aws.reqParams.resource_id;
        var httpMethod = aws.reqParams.http_method;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }
        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }


        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.GetBasePathMapping = aws_common.as(
    "GET",
    "/domainnames/:domain_name/basepathmappings/:base_path",
    function GetBasePathMapping(aws) {
        var basePath = aws.reqParams.base_path;
        var domainName = aws.reqParams.domain_name;
        if (! domainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domainName"];
        }
        if (! basePath) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter basePath"];
        }


        // TODO implement code

        var ret = /*Sa*/{
            stage: "",
            basePath: "",
            restApiId: ""
        };
        return [200, ret];
    });
module.exports.GetDomainName = aws_common.as(
    "GET",
    "/domainnames/:domain_name",
    function GetDomainName(aws) {
        var domainName = aws.reqParams.domain_name;
        if (! domainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domainName"];
        }


        // TODO implement code

        var ret = /*Sk*/{
            distributionDomainName: "",
            certificateUploadDate: now(),
            certificateName: "",
            domainName: ""
        };
        return [200, ret];
    });
module.exports.DeleteMethodResponse = aws_common.as(
    "DELETE",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method/responses/:status_code",
    function DeleteMethodResponse(aws) {
        var resourceId = aws.reqParams.resource_id;
        var statusCode = aws.reqParams.status_code;
        var httpMethod = aws.reqParams.http_method;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }
        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }
        if (! statusCode) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter statusCode"];
        }


        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.GetAccount = aws_common.as(
    "GET",
    "/account",
    function GetAccount(aws) {


        // TODO implement code

        var ret = /*S1p*/{
            throttleSettings: {
                burstLimit: 0,
                rateLimit: 0.0 /*double*/
            },
            cloudwatchRoleArn: ""
        };
        return [200, ret];
    });
module.exports.GetIntegrationResponse = aws_common.as(
    "GET",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method/integration/responses/:status_code",
    function GetIntegrationResponse(aws) {
        var resourceId = aws.reqParams.resource_id;
        var statusCode = aws.reqParams.status_code;
        var httpMethod = aws.reqParams.http_method;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }
        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }
        if (! statusCode) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter statusCode"];
        }


        // TODO implement code

        var ret = /*Sy*/{
            selectionPattern: "",
            responseTemplates: /*Se*/{} /* map */,
            responseParameters: /*Se*/{} /* map */,
            statusCode: ""
        };
        return [200, ret];
    });
module.exports.CreateApiKey = aws_common.as(
    "/apikeys",
    function CreateApiKey(aws) {
        var stageKeys = aws.params['stageKeys'] /* list */;
        var description = aws.params['description'];
        var enabled = aws.params['enabled'] /* boolean */;
        var name = aws.params['name'];


        // TODO implement code

        var ret = /*S6*/{
            stageKeys: /*S7*/[ "" /*, ...*/ ],
            description: "",
            createdDate: now(),
            id: "",
            name: "",
            enabled: false,
            lastUpdatedDate: now()
        };
        return [201, ret];
    });
module.exports.UpdateBasePathMapping = aws_common.as(
    "PATCH",
    "/domainnames/:domain_name/basepathmappings/:base_path",
    function UpdateBasePathMapping(aws) {
        var patchOperations = aws.params['patchOperations'];
        var basePath = aws.reqParams.base_path;
        var domainName = aws.reqParams.domain_name;
        if (! domainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter domainName"];
        }
        if (! basePath) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter basePath"];
        }


        // TODO implement code

        var ret = /*Sa*/{
            stage: "",
            basePath: "",
            restApiId: ""
        };
        return [200, ret];
    });
module.exports.DeleteResource = aws_common.as(
    "DELETE",
    "/restapis/:restapi_id/resources/:resource_id",
    function DeleteResource(aws) {
        var resourceId = aws.reqParams.resource_id;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }


        // TODO implement code

        var ret = {};
        return [202, ret];
    });
module.exports.GetMethod = aws_common.as(
    "GET",
    "/restapis/:restapi_id/resources/:resource_id/methods/:http_method",
    function GetMethod(aws) {
        var resourceId = aws.reqParams.resource_id;
        var httpMethod = aws.reqParams.http_method;
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }
        if (! httpMethod) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter httpMethod"];
        }


        // TODO implement code

        var ret = /*Sq*/{
            methodResponses: {} /* map */,
            requestModels: /*Se*/{} /* map */,
            authorizationType: "",
            requestParameters: /*Sr*/{} /* map */,
            apiKeyRequired: false,
            httpMethod: "",
            methodIntegration: /*Sv*/{
                type: "",
                cacheNamespace: "",
                httpMethod: "",
                requestTemplates: /*Se*/{} /* map */,
                requestParameters: /*Se*/{} /* map */,
                uri: "",
                cacheKeyParameters: /*S7*/[ "" /*, ...*/ ],
                credentials: "",
                integrationResponses: {} /* map */
            }
        };
        return [200, ret];
    });
module.exports.UpdateResource = aws_common.as(
    "PATCH",
    "/restapis/:restapi_id/resources/:resource_id",
    function UpdateResource(aws) {
        var resourceId = aws.reqParams.resource_id;
        var patchOperations = aws.params['patchOperations'];
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }
        if (! resourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter resourceId"];
        }


        // TODO implement code

        var ret = /*So*/{
            path: "",
            resourceMethods: {} /* map */,
            parentId: "",
            id: "",
            pathPart: ""
        };
        return [200, ret];
    });
module.exports.UpdateRestApi = aws_common.as(
    "PATCH",
    "/restapis/:restapi_id",
    function UpdateRestApi(aws) {
        var patchOperations = aws.params['patchOperations'];
        var restApiId = aws.reqParams.restapi_id;
        if (! restApiId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter restApiId"];
        }


        // TODO implement code

        var ret = /*S10*/{
            description: "",
            createdDate: now(),
            id: "",
            name: ""
        };
        return [200, ret];
    });
module.exports.GetDomainNames = aws_common.as(
    "GET",
    "/domainnames",
    function GetDomainNames(aws) {
        var position = aws.params['position'];
        var limit = aws.params['limit'] /* integer */;


        // TODO implement code

        var ret = {
            position: "",
            items: [ /*Sk*/{
                distributionDomainName: "",
                certificateUploadDate: now(),
                certificateName: "",
                domainName: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.UpdateClientCertificate = aws_common.as(
    "PATCH",
    "/clientcertificates/:clientcertificate_id",
    function UpdateClientCertificate(aws) {
        var patchOperations = aws.params['patchOperations'];
        var clientCertificateId = aws.reqParams.clientcertificate_id;
        if (! clientCertificateId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter clientCertificateId"];
        }


        // TODO implement code

        var ret = /*S1n*/{
            description: "",
            clientCertificateId: "",
            createdDate: now(),
            pemEncodedCertificate: "",
            expirationDate: now()
        };
        return [200, ret];
    });
