'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * AWS Device Farm version 2015-06-23
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.ListUploads = function ListUploads(aws) {
        var arn = aws.params['arn'];
        var nextToken = aws.params['nextToken'];
        if (! arn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter arn"];
        }

        // TODO implement code

        var ret = {
            uploads: [ /*Sl*/{
                status: "",
                created: now(),
                type: "",
                metadata: "",
                message: "",
                name: "",
                arn: "",
                contentType: "",
                url: ""
            } /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.ListSuites = function ListSuites(aws) {
        var arn = aws.params['arn'];
        var nextToken = aws.params['nextToken'];
        if (! arn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter arn"];
        }

        // TODO implement code

        var ret = {
            suites: [ /*S21*/{
                status: "",
                created: now(),
                started: now(),
                type: "",
                result: "",
                stopped: now(),
                deviceMinutes: /*S1s*/{
                    unmetered: 0.0 /*double*/,
                    total: 0.0 /*double*/,
                    metered: 0.0 /*double*/
                },
                name: "",
                arn: "",
                counters: /*S1r*/{
                    stopped: 0,
                    skipped: 0,
                    warned: 0,
                    total: 0,
                    errored: 0,
                    failed: 0,
                    passed: 0
                },
                message: ""
            } /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.GetAccountSettings = function GetAccountSettings(aws) {


        // TODO implement code

        var ret = {
            accountSettings: {
                awsAccountNumber: "",
                unmeteredDevices: {} /* map */
            }
        };
        return [200, ret];
    }
module.exports.ListTests = function ListTests(aws) {
        var arn = aws.params['arn'];
        var nextToken = aws.params['nextToken'];
        if (! arn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter arn"];
        }

        // TODO implement code

        var ret = {
            tests: [ /*S24*/{
                status: "",
                created: now(),
                started: now(),
                type: "",
                result: "",
                stopped: now(),
                deviceMinutes: /*S1s*/{
                    unmetered: 0.0 /*double*/,
                    total: 0.0 /*double*/,
                    metered: 0.0 /*double*/
                },
                name: "",
                arn: "",
                counters: /*S1r*/{
                    stopped: 0,
                    skipped: 0,
                    warned: 0,
                    total: 0,
                    errored: 0,
                    failed: 0,
                    passed: 0
                },
                message: ""
            } /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.UpdateDevicePool = function UpdateDevicePool(aws) {
        var description = aws.params['description'];
        var name = aws.params['name'];
        var arn = aws.params['arn'];
        var rules = aws.params['rules'];
        if (! arn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter arn"];
        }

        // TODO implement code

        var ret = {
            devicePool: /*Sb*/{
                description: "",
                name: "",
                arn: "",
                type: "",
                rules: /*S5*/[ {
                    attribute: "",
                    value: "",
                    operator: ""
                } /*, ...*/ ]
            }
        };
        return [200, ret];
    }
module.exports.ScheduleRun = function ScheduleRun(aws) {
        var appArn = aws.params['appArn'];
        var projectArn = aws.params['projectArn'];
        var devicePoolArn = aws.params['devicePoolArn'];
        var configuration = aws.params['configuration'] /* structure */;
        var name = aws.params['name'];
        var test = aws.params['test'] /* structure */;
        if (! projectArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter projectArn"];
        }        if (! devicePoolArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter devicePoolArn"];
        }        if (! test) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter test"];
        }

        // TODO implement code

        var ret = {
            run: /*S1x*/{
                status: "",
                started: now(),
                totalJobs: 0,
                type: "",
                result: "",
                platform: "",
                stopped: now(),
                name: "",
                message: "",
                counters: /*S1r*/{
                    stopped: 0,
                    skipped: 0,
                    warned: 0,
                    total: 0,
                    errored: 0,
                    failed: 0,
                    passed: 0
                },
                completedJobs: 0,
                created: now(),
                billingMethod: "",
                deviceMinutes: /*S1s*/{
                    unmetered: 0.0 /*double*/,
                    total: 0.0 /*double*/,
                    metered: 0.0 /*double*/
                },
                arn: ""
            }
        };
        return [200, ret];
    }
module.exports.GetJob = function GetJob(aws) {
        var arn = aws.params['arn'];
        if (! arn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter arn"];
        }

        // TODO implement code

        var ret = {
            job: /*S1o*/{
                status: "",
                started: now(),
                type: "",
                result: "",
                stopped: now(),
                device: /*S16*/{
                    carrier: "",
                    heapSize: 0 /*long*/,
                    image: "",
                    radio: "",
                    memory: 0 /*long*/,
                    platform: "",
                    model: "",
                    name: "",
                    os: "",
                    manufacturer: "",
                    cpu: {
                        architecture: "",
                        frequency: "",
                        clock: 0.0 /*double*/
                    },
                    resolution: {
                        height: 0,
                        width: 0
                    },
                    arn: "",
                    formFactor: ""
                },
                name: "",
                message: "",
                counters: /*S1r*/{
                    stopped: 0,
                    skipped: 0,
                    warned: 0,
                    total: 0,
                    errored: 0,
                    failed: 0,
                    passed: 0
                },
                created: now(),
                deviceMinutes: /*S1s*/{
                    unmetered: 0.0 /*double*/,
                    total: 0.0 /*double*/,
                    metered: 0.0 /*double*/
                },
                arn: ""
            }
        };
        return [200, ret];
    }
module.exports.GetDevicePoolCompatibility = function GetDevicePoolCompatibility(aws) {
        var testType = aws.params['testType'];
        var appArn = aws.params['appArn'];
        var devicePoolArn = aws.params['devicePoolArn'];
        if (! devicePoolArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter devicePoolArn"];
        }

        // TODO implement code

        var ret = {
            compatibleDevices: /*S1h*/[ {
                incompatibilityMessages: [ {
                    message: "",
                    type: ""
                } /*, ...*/ ],
                device: /*S16*/{
                    carrier: "",
                    heapSize: 0 /*long*/,
                    image: "",
                    radio: "",
                    memory: 0 /*long*/,
                    platform: "",
                    model: "",
                    name: "",
                    os: "",
                    manufacturer: "",
                    cpu: {
                        architecture: "",
                        frequency: "",
                        clock: 0.0 /*double*/
                    },
                    resolution: {
                        height: 0,
                        width: 0
                    },
                    arn: "",
                    formFactor: ""
                },
                compatible: false
            } /*, ...*/ ],
            incompatibleDevices: /*S1h*/[ {
                incompatibilityMessages: [ {
                    message: "",
                    type: ""
                } /*, ...*/ ],
                device: /*S16*/{
                    carrier: "",
                    heapSize: 0 /*long*/,
                    image: "",
                    radio: "",
                    memory: 0 /*long*/,
                    platform: "",
                    model: "",
                    name: "",
                    os: "",
                    manufacturer: "",
                    cpu: {
                        architecture: "",
                        frequency: "",
                        clock: 0.0 /*double*/
                    },
                    resolution: {
                        height: 0,
                        width: 0
                    },
                    arn: "",
                    formFactor: ""
                },
                compatible: false
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteUpload = function DeleteUpload(aws) {
        var arn = aws.params['arn'];
        if (! arn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter arn"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.GetDevicePool = function GetDevicePool(aws) {
        var arn = aws.params['arn'];
        if (! arn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter arn"];
        }

        // TODO implement code

        var ret = {
            devicePool: /*Sb*/{
                description: "",
                name: "",
                arn: "",
                type: "",
                rules: /*S5*/[ {
                    attribute: "",
                    value: "",
                    operator: ""
                } /*, ...*/ ]
            }
        };
        return [200, ret];
    }
module.exports.GetSuite = function GetSuite(aws) {
        var arn = aws.params['arn'];
        if (! arn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter arn"];
        }

        // TODO implement code

        var ret = {
            suite: /*S21*/{
                status: "",
                created: now(),
                started: now(),
                type: "",
                result: "",
                stopped: now(),
                deviceMinutes: /*S1s*/{
                    unmetered: 0.0 /*double*/,
                    total: 0.0 /*double*/,
                    metered: 0.0 /*double*/
                },
                name: "",
                arn: "",
                counters: /*S1r*/{
                    stopped: 0,
                    skipped: 0,
                    warned: 0,
                    total: 0,
                    errored: 0,
                    failed: 0,
                    passed: 0
                },
                message: ""
            }
        };
        return [200, ret];
    }
module.exports.GetDevice = function GetDevice(aws) {
        var arn = aws.params['arn'];
        if (! arn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter arn"];
        }

        // TODO implement code

        var ret = {
            device: /*S16*/{
                carrier: "",
                heapSize: 0 /*long*/,
                image: "",
                radio: "",
                memory: 0 /*long*/,
                platform: "",
                model: "",
                name: "",
                os: "",
                manufacturer: "",
                cpu: {
                    architecture: "",
                    frequency: "",
                    clock: 0.0 /*double*/
                },
                resolution: {
                    height: 0,
                    width: 0
                },
                arn: "",
                formFactor: ""
            }
        };
        return [200, ret];
    }
module.exports.ListProjects = function ListProjects(aws) {
        var arn = aws.params['arn'];
        var nextToken = aws.params['nextToken'];


        // TODO implement code

        var ret = {
            projects: [ /*Sf*/{
                created: now(),
                name: "",
                arn: ""
            } /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.ListDevicePools = function ListDevicePools(aws) {
        var arn = aws.params['arn'];
        var type = aws.params['type'];
        var nextToken = aws.params['nextToken'];
        if (! arn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter arn"];
        }

        // TODO implement code

        var ret = {
            devicePools: [ /*Sb*/{
                description: "",
                name: "",
                arn: "",
                type: "",
                rules: /*S5*/[ {
                    attribute: "",
                    value: "",
                    operator: ""
                } /*, ...*/ ]
            } /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.ListSamples = function ListSamples(aws) {
        var arn = aws.params['arn'];
        var nextToken = aws.params['nextToken'];
        if (! arn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter arn"];
        }

        // TODO implement code

        var ret = {
            samples: [ {
                arn: "",
                type: "",
                url: ""
            } /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.ListJobs = function ListJobs(aws) {
        var arn = aws.params['arn'];
        var nextToken = aws.params['nextToken'];
        if (! arn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter arn"];
        }

        // TODO implement code

        var ret = {
            jobs: [ /*S1o*/{
                status: "",
                started: now(),
                type: "",
                result: "",
                stopped: now(),
                device: /*S16*/{
                    carrier: "",
                    heapSize: 0 /*long*/,
                    image: "",
                    radio: "",
                    memory: 0 /*long*/,
                    platform: "",
                    model: "",
                    name: "",
                    os: "",
                    manufacturer: "",
                    cpu: {
                        architecture: "",
                        frequency: "",
                        clock: 0.0 /*double*/
                    },
                    resolution: {
                        height: 0,
                        width: 0
                    },
                    arn: "",
                    formFactor: ""
                },
                name: "",
                message: "",
                counters: /*S1r*/{
                    stopped: 0,
                    skipped: 0,
                    warned: 0,
                    total: 0,
                    errored: 0,
                    failed: 0,
                    passed: 0
                },
                created: now(),
                deviceMinutes: /*S1s*/{
                    unmetered: 0.0 /*double*/,
                    total: 0.0 /*double*/,
                    metered: 0.0 /*double*/
                },
                arn: ""
            } /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.GetRun = function GetRun(aws) {
        var arn = aws.params['arn'];
        if (! arn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter arn"];
        }

        // TODO implement code

        var ret = {
            run: /*S1x*/{
                status: "",
                started: now(),
                totalJobs: 0,
                type: "",
                result: "",
                platform: "",
                stopped: now(),
                name: "",
                message: "",
                counters: /*S1r*/{
                    stopped: 0,
                    skipped: 0,
                    warned: 0,
                    total: 0,
                    errored: 0,
                    failed: 0,
                    passed: 0
                },
                completedJobs: 0,
                created: now(),
                billingMethod: "",
                deviceMinutes: /*S1s*/{
                    unmetered: 0.0 /*double*/,
                    total: 0.0 /*double*/,
                    metered: 0.0 /*double*/
                },
                arn: ""
            }
        };
        return [200, ret];
    }
module.exports.GetProject = function GetProject(aws) {
        var arn = aws.params['arn'];
        if (! arn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter arn"];
        }

        // TODO implement code

        var ret = {
            project: /*Sf*/{
                created: now(),
                name: "",
                arn: ""
            }
        };
        return [200, ret];
    }
module.exports.CreateUpload = function CreateUpload(aws) {
        var contentType = aws.params['contentType'];
        var name = aws.params['name'];
        var projectArn = aws.params['projectArn'];
        var type = aws.params['type'];
        if (! projectArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter projectArn"];
        }        if (! name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter name"];
        }        if (! type) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter type"];
        }

        // TODO implement code

        var ret = {
            upload: /*Sl*/{
                status: "",
                created: now(),
                type: "",
                metadata: "",
                message: "",
                name: "",
                arn: "",
                contentType: "",
                url: ""
            }
        };
        return [200, ret];
    }
module.exports.CreateDevicePool = function CreateDevicePool(aws) {
        var description = aws.params['description'];
        var name = aws.params['name'];
        var projectArn = aws.params['projectArn'];
        var rules = aws.params['rules'];
        if (! projectArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter projectArn"];
        }        if (! name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter name"];
        }        if (! rules) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter rules"];
        }

        // TODO implement code

        var ret = {
            devicePool: /*Sb*/{
                description: "",
                name: "",
                arn: "",
                type: "",
                rules: /*S5*/[ {
                    attribute: "",
                    value: "",
                    operator: ""
                } /*, ...*/ ]
            }
        };
        return [200, ret];
    }
module.exports.ListRuns = function ListRuns(aws) {
        var arn = aws.params['arn'];
        var nextToken = aws.params['nextToken'];
        if (! arn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter arn"];
        }

        // TODO implement code

        var ret = {
            runs: [ /*S1x*/{
                status: "",
                started: now(),
                totalJobs: 0,
                type: "",
                result: "",
                platform: "",
                stopped: now(),
                name: "",
                message: "",
                counters: /*S1r*/{
                    stopped: 0,
                    skipped: 0,
                    warned: 0,
                    total: 0,
                    errored: 0,
                    failed: 0,
                    passed: 0
                },
                completedJobs: 0,
                created: now(),
                billingMethod: "",
                deviceMinutes: /*S1s*/{
                    unmetered: 0.0 /*double*/,
                    total: 0.0 /*double*/,
                    metered: 0.0 /*double*/
                },
                arn: ""
            } /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.DeleteProject = function DeleteProject(aws) {
        var arn = aws.params['arn'];
        if (! arn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter arn"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.DeleteDevicePool = function DeleteDevicePool(aws) {
        var arn = aws.params['arn'];
        if (! arn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter arn"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.CreateProject = function CreateProject(aws) {
        var name = aws.params['name'];
        if (! name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter name"];
        }

        // TODO implement code

        var ret = {
            project: /*Sf*/{
                created: now(),
                name: "",
                arn: ""
            }
        };
        return [200, ret];
    }
module.exports.GetUpload = function GetUpload(aws) {
        var arn = aws.params['arn'];
        if (! arn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter arn"];
        }

        // TODO implement code

        var ret = {
            upload: /*Sl*/{
                status: "",
                created: now(),
                type: "",
                metadata: "",
                message: "",
                name: "",
                arn: "",
                contentType: "",
                url: ""
            }
        };
        return [200, ret];
    }
module.exports.ListUniqueProblems = function ListUniqueProblems(aws) {
        var arn = aws.params['arn'];
        var nextToken = aws.params['nextToken'];
        if (! arn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter arn"];
        }

        // TODO implement code

        var ret = {
            uniqueProblems: {} /* map */,
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.GetTest = function GetTest(aws) {
        var arn = aws.params['arn'];
        if (! arn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter arn"];
        }

        // TODO implement code

        var ret = {
            test: /*S24*/{
                status: "",
                created: now(),
                started: now(),
                type: "",
                result: "",
                stopped: now(),
                deviceMinutes: /*S1s*/{
                    unmetered: 0.0 /*double*/,
                    total: 0.0 /*double*/,
                    metered: 0.0 /*double*/
                },
                name: "",
                arn: "",
                counters: /*S1r*/{
                    stopped: 0,
                    skipped: 0,
                    warned: 0,
                    total: 0,
                    errored: 0,
                    failed: 0,
                    passed: 0
                },
                message: ""
            }
        };
        return [200, ret];
    }
module.exports.ListDevices = function ListDevices(aws) {
        var arn = aws.params['arn'];
        var nextToken = aws.params['nextToken'];


        // TODO implement code

        var ret = {
            devices: [ /*S16*/{
                carrier: "",
                heapSize: 0 /*long*/,
                image: "",
                radio: "",
                memory: 0 /*long*/,
                platform: "",
                model: "",
                name: "",
                os: "",
                manufacturer: "",
                cpu: {
                    architecture: "",
                    frequency: "",
                    clock: 0.0 /*double*/
                },
                resolution: {
                    height: 0,
                    width: 0
                },
                arn: "",
                formFactor: ""
            } /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.ListArtifacts = function ListArtifacts(aws) {
        var arn = aws.params['arn'];
        var type = aws.params['type'];
        var nextToken = aws.params['nextToken'];
        if (! arn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter arn"];
        }        if (! type) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter type"];
        }

        // TODO implement code

        var ret = {
            artifacts: [ {
                extension: "",
                name: "",
                arn: "",
                type: "",
                url: ""
            } /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.UpdateProject = function UpdateProject(aws) {
        var name = aws.params['name'];
        var arn = aws.params['arn'];
        if (! arn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter arn"];
        }

        // TODO implement code

        var ret = {
            project: /*Sf*/{
                created: now(),
                name: "",
                arn: ""
            }
        };
        return [200, ret];
    }
module.exports.DeleteRun = function DeleteRun(aws) {
        var arn = aws.params['arn'];
        if (! arn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter arn"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
