'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * AWS Directory Service version 2015-04-16
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol json
require('../../lib/aws-common/shape_http')('json', module.exports, null);
// -----------------------------------
module.exports.ConnectDirectory = function ConnectDirectory(aws) {
  var connectSettings = aws.params.ConnectSettings /* Type structure */;
  var description = aws.params.Description;
  var name = aws.params.Name;
  var password = aws.params.Password;
  var shortName = aws.params.ShortName;
  var size = aws.params.Size;
  if (!connectSettings) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ConnectSettings'];
  }
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }
  if (!password) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Password'];
  }
  if (!size) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Size'];
  }


  // TODO implement code

  var ret = {
    DirectoryId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateAlias = function CreateAlias(aws) {
  var alias = aws.params.Alias;
  var directoryId = aws.params.DirectoryId;
  if (!alias) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Alias'];
  }
  if (!directoryId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DirectoryId'];
  }


  // TODO implement code

  var ret = {
    Alias: '',
    DirectoryId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateComputer = function CreateComputer(aws) {
  var computerAttributes = aws.params.ComputerAttributes;
  var computerName = aws.params.ComputerName;
  var directoryId = aws.params.DirectoryId;
  var organizationalUnitDistinguishedName = aws.params.OrganizationalUnitDistinguishedName;
  var password = aws.params.Password /* Type string */;
  if (!computerName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ComputerName'];
  }
  if (!directoryId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DirectoryId'];
  }
  if (!password) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Password'];
  }


  // TODO implement code

  var ret = {
    Computer: {
      ComputerAttributes: /*Sn*/[ {
        Name: '',
        Value: '',
      }, /* ...*/ ],
      ComputerId: '',
      ComputerName: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateConditionalForwarder = function CreateConditionalForwarder(aws) {
  var directoryId = aws.params.DirectoryId;
  var dnsIpAddrs = aws.params.DnsIpAddrs;
  var remoteDomainName = aws.params.RemoteDomainName;
  if (!directoryId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DirectoryId'];
  }
  if (!dnsIpAddrs) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DnsIpAddrs'];
  }
  if (!remoteDomainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RemoteDomainName'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateDirectory = function CreateDirectory(aws) {
  var description = aws.params.Description;
  var name = aws.params.Name;
  var password = aws.params.Password;
  var shortName = aws.params.ShortName;
  var size = aws.params.Size;
  var vpcSettings = aws.params.VpcSettings;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }
  if (!password) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Password'];
  }
  if (!size) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Size'];
  }


  // TODO implement code

  var ret = {
    DirectoryId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateMicrosoftAD = function CreateMicrosoftAD(aws) {
  var description = aws.params.Description;
  var name = aws.params.Name;
  var password = aws.params.Password;
  var shortName = aws.params.ShortName;
  var vpcSettings = aws.params.VpcSettings;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }
  if (!password) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Password'];
  }
  if (!vpcSettings) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VpcSettings'];
  }


  // TODO implement code

  var ret = {
    DirectoryId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateSnapshot = function CreateSnapshot(aws) {
  var directoryId = aws.params.DirectoryId;
  var name = aws.params.Name;
  if (!directoryId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DirectoryId'];
  }


  // TODO implement code

  var ret = {
    SnapshotId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateTrust = function CreateTrust(aws) {
  var conditionalForwarderIpAddrs = aws.params.ConditionalForwarderIpAddrs;
  var directoryId = aws.params.DirectoryId;
  var remoteDomainName = aws.params.RemoteDomainName;
  var trustDirection = aws.params.TrustDirection;
  var trustPassword = aws.params.TrustPassword /* Type string */;
  var trustType = aws.params.TrustType;
  if (!directoryId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DirectoryId'];
  }
  if (!remoteDomainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RemoteDomainName'];
  }
  if (!trustDirection) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TrustDirection'];
  }
  if (!trustPassword) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TrustPassword'];
  }


  // TODO implement code

  var ret = {
    TrustId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteConditionalForwarder = function DeleteConditionalForwarder(aws) {
  var directoryId = aws.params.DirectoryId;
  var remoteDomainName = aws.params.RemoteDomainName;
  if (!directoryId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DirectoryId'];
  }
  if (!remoteDomainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RemoteDomainName'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteDirectory = function DeleteDirectory(aws) {
  var directoryId = aws.params.DirectoryId;
  if (!directoryId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DirectoryId'];
  }


  // TODO implement code

  var ret = {
    DirectoryId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteSnapshot = function DeleteSnapshot(aws) {
  var snapshotId = aws.params.SnapshotId;
  if (!snapshotId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SnapshotId'];
  }


  // TODO implement code

  var ret = {
    SnapshotId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteTrust = function DeleteTrust(aws) {
  var deleteAssociatedConditionalForwarder = aws.params.DeleteAssociatedConditionalForwarder /* Type boolean */;
  var trustId = aws.params.TrustId;
  if (!trustId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TrustId'];
  }


  // TODO implement code

  var ret = {
    TrustId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeregisterEventTopic = function DeregisterEventTopic(aws) {
  var directoryId = aws.params.DirectoryId;
  var topicName = aws.params.TopicName;
  if (!directoryId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DirectoryId'];
  }
  if (!topicName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TopicName'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeConditionalForwarders = function DescribeConditionalForwarders(aws) {
  var directoryId = aws.params.DirectoryId;
  var remoteDomainNames = aws.params.RemoteDomainNames /* Type list */;
  if (!directoryId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DirectoryId'];
  }


  // TODO implement code

  var ret = {
    ConditionalForwarders: [ {
      DnsIpAddrs: /*Sb*/[ '', /* ...*/ ],
      RemoteDomainName: '',
      ReplicationScope: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeDirectories = function DescribeDirectories(aws) {
  var directoryIds = aws.params.DirectoryIds /* Type list */;
  var limit = aws.params.Limit /* Type integer */;
  var nextToken = aws.params.NextToken;


  // TODO implement code

  var ret = {
    DirectoryDescriptions: [ {
      AccessUrl: '',
      Alias: '',
      ConnectSettings: {
        AvailabilityZones: /*S29*/[ '', /* ...*/ ],
        ConnectIps: [ '', /* ...*/ ],
        CustomerUserName: '',
        SecurityGroupId: '',
        SubnetIds: /*S9*/[ '', /* ...*/ ],
        VpcId: '',
      },
      Description: '',
      DirectoryId: '',
      DnsIpAddrs: /*Sb*/[ '', /* ...*/ ],
      LaunchTime: awsCommon.timestamp(),
      Name: '',
      RadiusSettings: /*S2d*/{
        AuthenticationProtocol: '',
        DisplayLabel: '',
        RadiusPort: 0,
        RadiusRetries: 0,
        RadiusServers: [ '', /* ...*/ ],
        RadiusTimeout: 0,
        SharedSecret: '',
        UseSameUsername: false,
      },
      RadiusStatus: '',
      ShortName: '',
      Size: '',
      SsoEnabled: false,
      Stage: '',
      StageLastUpdatedDateTime: awsCommon.timestamp(),
      StageReason: '',
      Type: '',
      VpcSettings: {
        AvailabilityZones: /*S29*/[ '', /* ...*/ ],
        SecurityGroupId: '',
        SubnetIds: /*S9*/[ '', /* ...*/ ],
        VpcId: '',
      },
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeEventTopics = function DescribeEventTopics(aws) {
  var directoryId = aws.params.DirectoryId;
  var topicNames = aws.params.TopicNames /* Type list */;


  // TODO implement code

  var ret = {
    EventTopics: [ {
      CreatedDateTime: awsCommon.timestamp(),
      DirectoryId: '',
      Status: '',
      TopicArn: '',
      TopicName: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeSnapshots = function DescribeSnapshots(aws) {
  var directoryId = aws.params.DirectoryId;
  var limit = aws.params.Limit /* Type integer */;
  var nextToken = aws.params.NextToken;
  var snapshotIds = aws.params.SnapshotIds /* Type list */;


  // TODO implement code

  var ret = {
    NextToken: '',
    Snapshots: [ {
      DirectoryId: '',
      Name: '',
      SnapshotId: '',
      StartTime: awsCommon.timestamp(),
      Status: '',
      Type: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeTrusts = function DescribeTrusts(aws) {
  var directoryId = aws.params.DirectoryId;
  var limit = aws.params.Limit /* Type integer */;
  var nextToken = aws.params.NextToken;
  var trustIds = aws.params.TrustIds /* Type list */;


  // TODO implement code

  var ret = {
    NextToken: '',
    Trusts: [ {
      CreatedDateTime: awsCommon.timestamp(),
      DirectoryId: '',
      LastUpdatedDateTime: awsCommon.timestamp(),
      RemoteDomainName: '',
      StateLastUpdatedDateTime: awsCommon.timestamp(),
      TrustDirection: '',
      TrustId: '',
      TrustState: '',
      TrustStateReason: '',
      TrustType: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DisableRadius = function DisableRadius(aws) {
  var directoryId = aws.params.DirectoryId;
  if (!directoryId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DirectoryId'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.DisableSso = function DisableSso(aws) {
  var directoryId = aws.params.DirectoryId;
  var password = aws.params.Password;
  var userName = aws.params.UserName;
  if (!directoryId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DirectoryId'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.EnableRadius = function EnableRadius(aws) {
  var directoryId = aws.params.DirectoryId;
  var radiusSettings = aws.params.RadiusSettings;
  if (!directoryId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DirectoryId'];
  }
  if (!radiusSettings) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RadiusSettings'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.EnableSso = function EnableSso(aws) {
  var directoryId = aws.params.DirectoryId;
  var password = aws.params.Password;
  var userName = aws.params.UserName;
  if (!directoryId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DirectoryId'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetDirectoryLimits = function GetDirectoryLimits(aws) {


  // TODO implement code

  var ret = {
    DirectoryLimits: {
      CloudOnlyDirectoriesCurrentCount: 0,
      CloudOnlyDirectoriesLimit: 0,
      CloudOnlyDirectoriesLimitReached: false,
      CloudOnlyMicrosoftADCurrentCount: 0,
      CloudOnlyMicrosoftADLimit: 0,
      CloudOnlyMicrosoftADLimitReached: false,
      ConnectedDirectoriesCurrentCount: 0,
      ConnectedDirectoriesLimit: 0,
      ConnectedDirectoriesLimitReached: false,
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetSnapshotLimits = function GetSnapshotLimits(aws) {
  var directoryId = aws.params.DirectoryId;
  if (!directoryId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DirectoryId'];
  }


  // TODO implement code

  var ret = {
    SnapshotLimits: {
      ManualSnapshotsCurrentCount: 0,
      ManualSnapshotsLimit: 0,
      ManualSnapshotsLimitReached: false,
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RegisterEventTopic = function RegisterEventTopic(aws) {
  var directoryId = aws.params.DirectoryId;
  var topicName = aws.params.TopicName;
  if (!directoryId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DirectoryId'];
  }
  if (!topicName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TopicName'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.RestoreFromSnapshot = function RestoreFromSnapshot(aws) {
  var snapshotId = aws.params.SnapshotId;
  if (!snapshotId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SnapshotId'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateConditionalForwarder = function UpdateConditionalForwarder(aws) {
  var directoryId = aws.params.DirectoryId;
  var dnsIpAddrs = aws.params.DnsIpAddrs;
  var remoteDomainName = aws.params.RemoteDomainName;
  if (!directoryId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DirectoryId'];
  }
  if (!dnsIpAddrs) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DnsIpAddrs'];
  }
  if (!remoteDomainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RemoteDomainName'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateRadius = function UpdateRadius(aws) {
  var directoryId = aws.params.DirectoryId;
  var radiusSettings = aws.params.RadiusSettings;
  if (!directoryId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DirectoryId'];
  }
  if (!radiusSettings) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RadiusSettings'];
  }


  // TODO implement code

  var ret = {

  };
  return [200, ret];
};
// -----------------------------------
module.exports.VerifyTrust = function VerifyTrust(aws) {
  var trustId = aws.params.TrustId;
  if (!trustId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TrustId'];
  }


  // TODO implement code

  var ret = {
    TrustId: '',
  };
  return [200, ret];
};
