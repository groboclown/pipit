'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * AWS Directory Service version 2015-04-16
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.CreateMicrosoftAD = function CreateMicrosoftAD(aws) {
        var Name = aws.params.Name;
        var ShortName = aws.params.ShortName;
        var Description = aws.params.Description;
        var VpcSettings = aws.params.VpcSettings;
        var Password = aws.params.Password;
        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }        if (! Password) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Password"];
        }        if (! VpcSettings) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpcSettings"];
        }

        // TODO implement code

        var ret = {
            DirectoryId: ""
        };
        return [200, ret];
    }
module.exports.DeleteTrust = function DeleteTrust(aws) {
        var TrustId = aws.params.TrustId;
        if (! TrustId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TrustId"];
        }

        // TODO implement code

        var ret = {
            TrustId: ""
        };
        return [200, ret];
    }
module.exports.CreateComputer = function CreateComputer(aws) {
        var Password = aws.params.Password /* string */;
        var ComputerName = aws.params.ComputerName;
        var ComputerAttributes = aws.params.ComputerAttributes;
        var DirectoryId = aws.params.DirectoryId;
        var OrganizationalUnitDistinguishedName = aws.params.OrganizationalUnitDistinguishedName;
        if (! DirectoryId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DirectoryId"];
        }        if (! ComputerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ComputerName"];
        }        if (! Password) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Password"];
        }

        // TODO implement code

        var ret = {
            Computer: {
                ComputerName: "",
                ComputerAttributes: /*Sn*/[ {
                    Name: "",
                    Value: ""
                } /*, ...*/ ],
                ComputerId: ""
            }
        };
        return [200, ret];
    }
module.exports.DeleteDirectory = function DeleteDirectory(aws) {
        var DirectoryId = aws.params.DirectoryId;
        if (! DirectoryId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DirectoryId"];
        }

        // TODO implement code

        var ret = {
            DirectoryId: ""
        };
        return [200, ret];
    }
module.exports.RestoreFromSnapshot = function RestoreFromSnapshot(aws) {
        var SnapshotId = aws.params.SnapshotId;
        if (! SnapshotId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SnapshotId"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.DescribeDirectories = function DescribeDirectories(aws) {
        var DirectoryIds = aws.params.DirectoryIds /* list */;
        var Limit = aws.params.Limit /* integer */;
        var NextToken = aws.params.NextToken;


        // TODO implement code

        var ret = {
            NextToken: "",
            DirectoryDescriptions: [ {
                Name: "",
                LaunchTime: now(),
                DirectoryId: "",
                RadiusStatus: "",
                Description: "",
                ConnectSettings: {
                    CustomerUserName: "",
                    ConnectIps: [ "" /*, ...*/ ],
                    AvailabilityZones: /*S1v*/[ "" /*, ...*/ ],
                    VpcId: "",
                    SecurityGroupId: "",
                    SubnetIds: /*S9*/[ "" /*, ...*/ ]
                },
                StageLastUpdatedDateTime: now(),
                ShortName: "",
                DnsIpAddrs: /*Sb*/[ "" /*, ...*/ ],
                Type: "",
                Alias: "",
                StageReason: "",
                VpcSettings: {
                    SecurityGroupId: "",
                    SubnetIds: /*S9*/[ "" /*, ...*/ ],
                    VpcId: "",
                    AvailabilityZones: /*S1v*/[ "" /*, ...*/ ]
                },
                Size: "",
                RadiusSettings: /*S1z*/{
                    RadiusPort: 0,
                    RadiusTimeout: 0,
                    DisplayLabel: "",
                    UseSameUsername: false,
                    RadiusServers: [ "" /*, ...*/ ],
                    RadiusRetries: 0,
                    SharedSecret: "",
                    AuthenticationProtocol: ""
                },
                AccessUrl: "",
                Stage: "",
                SsoEnabled: false
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateDirectory = function CreateDirectory(aws) {
        var Name = aws.params.Name;
        var ShortName = aws.params.ShortName;
        var Size = aws.params.Size;
        var Password = aws.params.Password;
        var VpcSettings = aws.params.VpcSettings;
        var Description = aws.params.Description;
        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }        if (! Password) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Password"];
        }        if (! Size) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Size"];
        }

        // TODO implement code

        var ret = {
            DirectoryId: ""
        };
        return [200, ret];
    }
module.exports.DisableSso = function DisableSso(aws) {
        var UserName = aws.params.UserName;
        var Password = aws.params.Password;
        var DirectoryId = aws.params.DirectoryId;
        if (! DirectoryId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DirectoryId"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.UpdateRadius = function UpdateRadius(aws) {
        var RadiusSettings = aws.params.RadiusSettings;
        var DirectoryId = aws.params.DirectoryId;
        if (! DirectoryId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DirectoryId"];
        }        if (! RadiusSettings) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RadiusSettings"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.CreateSnapshot = function CreateSnapshot(aws) {
        var Name = aws.params.Name;
        var DirectoryId = aws.params.DirectoryId;
        if (! DirectoryId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DirectoryId"];
        }

        // TODO implement code

        var ret = {
            SnapshotId: ""
        };
        return [200, ret];
    }
module.exports.DeleteSnapshot = function DeleteSnapshot(aws) {
        var SnapshotId = aws.params.SnapshotId;
        if (! SnapshotId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SnapshotId"];
        }

        // TODO implement code

        var ret = {
            SnapshotId: ""
        };
        return [200, ret];
    }
module.exports.EnableSso = function EnableSso(aws) {
        var UserName = aws.params.UserName;
        var Password = aws.params.Password;
        var DirectoryId = aws.params.DirectoryId;
        if (! DirectoryId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DirectoryId"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.EnableRadius = function EnableRadius(aws) {
        var RadiusSettings = aws.params.RadiusSettings;
        var DirectoryId = aws.params.DirectoryId;
        if (! DirectoryId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DirectoryId"];
        }        if (! RadiusSettings) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RadiusSettings"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.GetSnapshotLimits = function GetSnapshotLimits(aws) {
        var DirectoryId = aws.params.DirectoryId;
        if (! DirectoryId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DirectoryId"];
        }

        // TODO implement code

        var ret = {
            SnapshotLimits: {
                ManualSnapshotsCurrentCount: 0,
                ManualSnapshotsLimitReached: false,
                ManualSnapshotsLimit: 0
            }
        };
        return [200, ret];
    }
module.exports.CreateTrust = function CreateTrust(aws) {
        var TrustType = aws.params.TrustType;
        var TrustDirection = aws.params.TrustDirection;
        var TrustPassword = aws.params.TrustPassword /* string */;
        var DirectoryId = aws.params.DirectoryId;
        var RemoteDomainName = aws.params.RemoteDomainName;
        if (! DirectoryId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DirectoryId"];
        }        if (! RemoteDomainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RemoteDomainName"];
        }        if (! TrustPassword) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TrustPassword"];
        }        if (! TrustDirection) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TrustDirection"];
        }

        // TODO implement code

        var ret = {
            TrustId: ""
        };
        return [200, ret];
    }
module.exports.DescribeSnapshots = function DescribeSnapshots(aws) {
        var Limit = aws.params.Limit /* integer */;
        var DirectoryId = aws.params.DirectoryId;
        var SnapshotIds = aws.params.SnapshotIds /* list */;
        var NextToken = aws.params.NextToken;


        // TODO implement code

        var ret = {
            NextToken: "",
            Snapshots: [ {
                Name: "",
                Type: "",
                DirectoryId: "",
                StartTime: now(),
                SnapshotId: "",
                Status: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateAlias = function CreateAlias(aws) {
        var Alias = aws.params.Alias;
        var DirectoryId = aws.params.DirectoryId;
        if (! DirectoryId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DirectoryId"];
        }        if (! Alias) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Alias"];
        }

        // TODO implement code

        var ret = {
            Alias: "",
            DirectoryId: ""
        };
        return [200, ret];
    }
module.exports.VerifyTrust = function VerifyTrust(aws) {
        var TrustId = aws.params.TrustId;
        if (! TrustId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TrustId"];
        }

        // TODO implement code

        var ret = {
            TrustId: ""
        };
        return [200, ret];
    }
module.exports.ConnectDirectory = function ConnectDirectory(aws) {
        var Name = aws.params.Name;
        var ShortName = aws.params.ShortName;
        var Size = aws.params.Size;
        var Password = aws.params.Password;
        var Description = aws.params.Description;
        var ConnectSettings = aws.params.ConnectSettings /* structure */;
        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }        if (! Password) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Password"];
        }        if (! Size) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Size"];
        }        if (! ConnectSettings) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ConnectSettings"];
        }

        // TODO implement code

        var ret = {
            DirectoryId: ""
        };
        return [200, ret];
    }
module.exports.GetDirectoryLimits = function GetDirectoryLimits(aws) {


        // TODO implement code

        var ret = {
            DirectoryLimits: {
                CloudOnlyDirectoriesLimit: 0,
                CloudOnlyDirectoriesLimitReached: false,
                ConnectedDirectoriesLimitReached: false,
                ConnectedDirectoriesCurrentCount: 0,
                CloudOnlyMicrosoftADLimit: 0,
                CloudOnlyMicrosoftADCurrentCount: 0,
                CloudOnlyDirectoriesCurrentCount: 0,
                ConnectedDirectoriesLimit: 0,
                CloudOnlyMicrosoftADLimitReached: false
            }
        };
        return [200, ret];
    }
module.exports.DisableRadius = function DisableRadius(aws) {
        var DirectoryId = aws.params.DirectoryId;
        if (! DirectoryId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DirectoryId"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.DescribeTrusts = function DescribeTrusts(aws) {
        var Limit = aws.params.Limit /* integer */;
        var TrustIds = aws.params.TrustIds /* list */;
        var DirectoryId = aws.params.DirectoryId;
        var NextToken = aws.params.NextToken;


        // TODO implement code

        var ret = {
            Trusts: [ {
                TrustType: "",
                CreatedDateTime: now(),
                DirectoryId: "",
                RemoteDomainName: "",
                TrustId: "",
                TrustState: "",
                LastUpdatedDateTime: now(),
                StateLastUpdatedDateTime: now(),
                TrustDirection: ""
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
