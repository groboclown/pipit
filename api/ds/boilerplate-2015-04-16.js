'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * AWS Directory Service version 2015-04-16
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol json
require('../../lib/aws-common/shape_http')('json', module.exports, null)
module.exports.DisableSso = function DisableSso(aws) {
        var DirectoryId = aws.params['DirectoryId'];
        var UserName = aws.params['UserName'];
        var Password = aws.params['Password'];
        if (! DirectoryId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DirectoryId"];
        }


        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.DisableRadius = function DisableRadius(aws) {
        var DirectoryId = aws.params['DirectoryId'];
        if (! DirectoryId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DirectoryId"];
        }


        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.CreateMicrosoftAD = function CreateMicrosoftAD(aws) {
        var VpcSettings = aws.params['VpcSettings'];
        var Password = aws.params['Password'];
        var Description = aws.params['Description'];
        var Name = aws.params['Name'];
        var ShortName = aws.params['ShortName'];
        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }
        if (! Password) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Password"];
        }
        if (! VpcSettings) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VpcSettings"];
        }


        // TODO implement code

        var ret = {
            DirectoryId: ""
        };
        return [200, ret];
    }
module.exports.GetSnapshotLimits = function GetSnapshotLimits(aws) {
        var DirectoryId = aws.params['DirectoryId'];
        if (! DirectoryId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DirectoryId"];
        }


        // TODO implement code

        var ret = {
            SnapshotLimits: {
                ManualSnapshotsCurrentCount: 0,
                ManualSnapshotsLimit: 0,
                ManualSnapshotsLimitReached: false
            }
        };
        return [200, ret];
    }
module.exports.EnableSso = function EnableSso(aws) {
        var DirectoryId = aws.params['DirectoryId'];
        var UserName = aws.params['UserName'];
        var Password = aws.params['Password'];
        if (! DirectoryId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DirectoryId"];
        }


        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.ConnectDirectory = function ConnectDirectory(aws) {
        var Description = aws.params['Description'];
        var ShortName = aws.params['ShortName'];
        var Password = aws.params['Password'];
        var ConnectSettings = aws.params['ConnectSettings'] /* structure */;
        var Size = aws.params['Size'];
        var Name = aws.params['Name'];
        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }
        if (! Password) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Password"];
        }
        if (! Size) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Size"];
        }
        if (! ConnectSettings) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ConnectSettings"];
        }


        // TODO implement code

        var ret = {
            DirectoryId: ""
        };
        return [200, ret];
    }
module.exports.DescribeDirectories = function DescribeDirectories(aws) {
        var DirectoryIds = aws.params['DirectoryIds'] /* list */;
        var NextToken = aws.params['NextToken'];
        var Limit = aws.params['Limit'] /* integer */;


        // TODO implement code

        var ret = {
            NextToken: "",
            DirectoryDescriptions: [ {
                StageReason: "",
                Size: "",
                SsoEnabled: false,
                RadiusSettings: /*S1z*/{
                    SharedSecret: "",
                    RadiusPort: 0,
                    RadiusRetries: 0,
                    AuthenticationProtocol: "",
                    UseSameUsername: false,
                    DisplayLabel: "",
                    RadiusServers: [ "" /*, ...*/ ],
                    RadiusTimeout: 0
                },
                LaunchTime: now(),
                StageLastUpdatedDateTime: now(),
                Description: "",
                Stage: "",
                DirectoryId: "",
                VpcSettings: {
                    SubnetIds: /*S9*/[ "" /*, ...*/ ],
                    AvailabilityZones: /*S1v*/[ "" /*, ...*/ ],
                    SecurityGroupId: "",
                    VpcId: ""
                },
                Type: "",
                Alias: "",
                ShortName: "",
                DnsIpAddrs: /*Sb*/[ "" /*, ...*/ ],
                AccessUrl: "",
                ConnectSettings: {
                    AvailabilityZones: /*S1v*/[ "" /*, ...*/ ],
                    SecurityGroupId: "",
                    SubnetIds: /*S9*/[ "" /*, ...*/ ],
                    ConnectIps: [ "" /*, ...*/ ],
                    CustomerUserName: "",
                    VpcId: ""
                },
                Name: "",
                RadiusStatus: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.UpdateRadius = function UpdateRadius(aws) {
        var DirectoryId = aws.params['DirectoryId'];
        var RadiusSettings = aws.params['RadiusSettings'];
        if (! DirectoryId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DirectoryId"];
        }
        if (! RadiusSettings) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RadiusSettings"];
        }


        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.CreateTrust = function CreateTrust(aws) {
        var DirectoryId = aws.params['DirectoryId'];
        var TrustPassword = aws.params['TrustPassword'] /* string */;
        var TrustType = aws.params['TrustType'];
        var RemoteDomainName = aws.params['RemoteDomainName'];
        var TrustDirection = aws.params['TrustDirection'];
        if (! DirectoryId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DirectoryId"];
        }
        if (! RemoteDomainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RemoteDomainName"];
        }
        if (! TrustPassword) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TrustPassword"];
        }
        if (! TrustDirection) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TrustDirection"];
        }


        // TODO implement code

        var ret = {
            TrustId: ""
        };
        return [200, ret];
    }
module.exports.DeleteTrust = function DeleteTrust(aws) {
        var TrustId = aws.params['TrustId'];
        if (! TrustId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TrustId"];
        }


        // TODO implement code

        var ret = {
            TrustId: ""
        };
        return [200, ret];
    }
module.exports.EnableRadius = function EnableRadius(aws) {
        var DirectoryId = aws.params['DirectoryId'];
        var RadiusSettings = aws.params['RadiusSettings'];
        if (! DirectoryId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DirectoryId"];
        }
        if (! RadiusSettings) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RadiusSettings"];
        }


        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.DescribeTrusts = function DescribeTrusts(aws) {
        var DirectoryId = aws.params['DirectoryId'];
        var NextToken = aws.params['NextToken'];
        var Limit = aws.params['Limit'] /* integer */;
        var TrustIds = aws.params['TrustIds'] /* list */;


        // TODO implement code

        var ret = {
            NextToken: "",
            Trusts: [ {
                DirectoryId: "",
                TrustDirection: "",
                TrustState: "",
                LastUpdatedDateTime: now(),
                TrustType: "",
                StateLastUpdatedDateTime: now(),
                RemoteDomainName: "",
                CreatedDateTime: now(),
                TrustId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteSnapshot = function DeleteSnapshot(aws) {
        var SnapshotId = aws.params['SnapshotId'];
        if (! SnapshotId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SnapshotId"];
        }


        // TODO implement code

        var ret = {
            SnapshotId: ""
        };
        return [200, ret];
    }
module.exports.CreateSnapshot = function CreateSnapshot(aws) {
        var DirectoryId = aws.params['DirectoryId'];
        var Name = aws.params['Name'];
        if (! DirectoryId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DirectoryId"];
        }


        // TODO implement code

        var ret = {
            SnapshotId: ""
        };
        return [200, ret];
    }
module.exports.DeleteDirectory = function DeleteDirectory(aws) {
        var DirectoryId = aws.params['DirectoryId'];
        if (! DirectoryId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DirectoryId"];
        }


        // TODO implement code

        var ret = {
            DirectoryId: ""
        };
        return [200, ret];
    }
module.exports.GetDirectoryLimits = function GetDirectoryLimits(aws) {


        // TODO implement code

        var ret = {
            DirectoryLimits: {
                ConnectedDirectoriesLimitReached: false,
                CloudOnlyMicrosoftADCurrentCount: 0,
                ConnectedDirectoriesLimit: 0,
                CloudOnlyMicrosoftADLimit: 0,
                CloudOnlyDirectoriesLimit: 0,
                CloudOnlyDirectoriesCurrentCount: 0,
                ConnectedDirectoriesCurrentCount: 0,
                CloudOnlyMicrosoftADLimitReached: false,
                CloudOnlyDirectoriesLimitReached: false
            }
        };
        return [200, ret];
    }
module.exports.CreateDirectory = function CreateDirectory(aws) {
        var Description = aws.params['Description'];
        var ShortName = aws.params['ShortName'];
        var VpcSettings = aws.params['VpcSettings'];
        var Password = aws.params['Password'];
        var Size = aws.params['Size'];
        var Name = aws.params['Name'];
        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }
        if (! Password) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Password"];
        }
        if (! Size) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Size"];
        }


        // TODO implement code

        var ret = {
            DirectoryId: ""
        };
        return [200, ret];
    }
module.exports.VerifyTrust = function VerifyTrust(aws) {
        var TrustId = aws.params['TrustId'];
        if (! TrustId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TrustId"];
        }


        // TODO implement code

        var ret = {
            TrustId: ""
        };
        return [200, ret];
    }
module.exports.RestoreFromSnapshot = function RestoreFromSnapshot(aws) {
        var SnapshotId = aws.params['SnapshotId'];
        if (! SnapshotId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SnapshotId"];
        }


        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.CreateAlias = function CreateAlias(aws) {
        var DirectoryId = aws.params['DirectoryId'];
        var Alias = aws.params['Alias'];
        if (! DirectoryId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DirectoryId"];
        }
        if (! Alias) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Alias"];
        }


        // TODO implement code

        var ret = {
            DirectoryId: "",
            Alias: ""
        };
        return [200, ret];
    }
module.exports.CreateComputer = function CreateComputer(aws) {
        var DirectoryId = aws.params['DirectoryId'];
        var Password = aws.params['Password'] /* string */;
        var ComputerName = aws.params['ComputerName'];
        var ComputerAttributes = aws.params['ComputerAttributes'];
        var OrganizationalUnitDistinguishedName = aws.params['OrganizationalUnitDistinguishedName'];
        if (! DirectoryId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DirectoryId"];
        }
        if (! ComputerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ComputerName"];
        }
        if (! Password) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Password"];
        }


        // TODO implement code

        var ret = {
            Computer: {
                ComputerName: "",
                ComputerAttributes: /*Sn*/[ {
                    Value: "",
                    Name: ""
                } /*, ...*/ ],
                ComputerId: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeSnapshots = function DescribeSnapshots(aws) {
        var DirectoryId = aws.params['DirectoryId'];
        var NextToken = aws.params['NextToken'];
        var Limit = aws.params['Limit'] /* integer */;
        var SnapshotIds = aws.params['SnapshotIds'] /* list */;


        // TODO implement code

        var ret = {
            Snapshots: [ {
                DirectoryId: "",
                Status: "",
                Type: "",
                StartTime: now(),
                SnapshotId: "",
                Name: ""
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
