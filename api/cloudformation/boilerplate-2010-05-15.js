'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * AWS CloudFormation version 2010-05-15
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.DescribeAccountLimits = function DescribeAccountLimits(aws) {
        var NextToken = aws.params.NextToken;


        // TODO implement code

        var ret = {
            AccountLimits: [ {
                Name: "",
                Value: 0
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.SignalResource = function SignalResource(aws) {
        var UniqueId = aws.params.UniqueId;
        var Status = aws.params.Status;
        var StackName = aws.params.StackName;
        var LogicalResourceId = aws.params.LogicalResourceId;
        if (! StackName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackName"];
        }        if (! LogicalResourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LogicalResourceId"];
        }        if (! UniqueId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter UniqueId"];
        }        if (! Status) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Status"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ValidateTemplate = function ValidateTemplate(aws) {
        var TemplateBody = aws.params.TemplateBody;
        var TemplateURL = aws.params.TemplateURL;


        // TODO implement code

        var ret = {
            CapabilitiesReason: "",
            Description: "",
            Parameters: [ {
                DefaultValue: "",
                Description: "",
                ParameterKey: "",
                NoEcho: false
            } /*, ...*/ ],
            Capabilities: /*Si*/[ "" /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.SetStackPolicy = function SetStackPolicy(aws) {
        var StackPolicyURL = aws.params.StackPolicyURL;
        var StackName = aws.params.StackName;
        var StackPolicyBody = aws.params.StackPolicyBody;
        if (! StackName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.EstimateTemplateCost = function EstimateTemplateCost(aws) {
        var TemplateBody = aws.params.TemplateBody;
        var Parameters = aws.params.Parameters;
        var TemplateURL = aws.params.TemplateURL;


        // TODO implement code

        var ret = {
            Url: ""
        };
        return [200, ret];
    }
module.exports.ListStacks = function ListStacks(aws) {
        var StackStatusFilter = aws.params.StackStatusFilter /* list */;
        var NextToken = aws.params.NextToken;


        // TODO implement code

        var ret = {
            StackSummaries: [ {
                StackId: "",
                CreationTime: now(),
                StackStatusReason: "",
                TemplateDescription: "",
                StackStatus: "",
                LastUpdatedTime: now(),
                StackName: "",
                DeletionTime: now()
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.CancelUpdateStack = function CancelUpdateStack(aws) {
        var StackName = aws.params.StackName;
        if (! StackName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.GetStackPolicy = function GetStackPolicy(aws) {
        var StackName = aws.params.StackName;
        if (! StackName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackName"];
        }

        // TODO implement code

        var ret = {
            StackPolicyBody: ""
        };
        return [200, ret];
    }
module.exports.DescribeStacks = function DescribeStacks(aws) {
        var StackName = aws.params.StackName;
        var NextToken = aws.params.NextToken;


        // TODO implement code

        var ret = {
            NextToken: "",
            Stacks: [ {
                StackId: "",
                CreationTime: now(),
                StackStatusReason: "",
                Capabilities: /*Si*/[ "" /*, ...*/ ],
                Description: "",
                NotificationARNs: /*Sg*/[ "" /*, ...*/ ],
                DisableRollback: false,
                TimeoutInMinutes: 0,
                StackName: "",
                Tags: /*Sp*/[ {
                    Value: "",
                    Key: ""
                } /*, ...*/ ],
                Outputs: [ {
                    Description: "",
                    OutputKey: "",
                    OutputValue: ""
                } /*, ...*/ ],
                StackStatus: "",
                LastUpdatedTime: now(),
                Parameters: /*S9*/[ {
                    ParameterValue: "",
                    ParameterKey: "",
                    UsePreviousValue: false
                } /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateStack = function CreateStack(aws) {
        var OnFailure = aws.params.OnFailure;
        var StackPolicyURL = aws.params.StackPolicyURL;
        var Capabilities = aws.params.Capabilities;
        var NotificationARNs = aws.params.NotificationARNs;
        var Parameters = aws.params.Parameters;
        var TimeoutInMinutes = aws.params.TimeoutInMinutes /* integer */;
        var StackName = aws.params.StackName;
        var TemplateURL = aws.params.TemplateURL;
        var Tags = aws.params.Tags;
        var ResourceTypes = aws.params.ResourceTypes;
        var TemplateBody = aws.params.TemplateBody;
        var StackPolicyBody = aws.params.StackPolicyBody;
        var DisableRollback = aws.params.DisableRollback /* boolean */;
        if (! StackName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackName"];
        }

        // TODO implement code

        var ret = {
            StackId: ""
        };
        return [200, ret];
    }
module.exports.UpdateStack = function UpdateStack(aws) {
        var UsePreviousTemplate = aws.params.UsePreviousTemplate /* boolean */;
        var StackPolicyURL = aws.params.StackPolicyURL;
        var Capabilities = aws.params.Capabilities;
        var NotificationARNs = aws.params.NotificationARNs;
        var StackName = aws.params.StackName;
        var ResourceTypes = aws.params.ResourceTypes;
        var TemplateURL = aws.params.TemplateURL;
        var StackPolicyDuringUpdateBody = aws.params.StackPolicyDuringUpdateBody;
        var TemplateBody = aws.params.TemplateBody;
        var StackPolicyBody = aws.params.StackPolicyBody;
        var StackPolicyDuringUpdateURL = aws.params.StackPolicyDuringUpdateURL;
        var Parameters = aws.params.Parameters;
        if (! StackName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackName"];
        }

        // TODO implement code

        var ret = {
            StackId: ""
        };
        return [200, ret];
    }
module.exports.DeleteStack = function DeleteStack(aws) {
        var StackName = aws.params.StackName;
        if (! StackName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.GetTemplate = function GetTemplate(aws) {
        var StackName = aws.params.StackName;
        if (! StackName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackName"];
        }

        // TODO implement code

        var ret = {
            TemplateBody: ""
        };
        return [200, ret];
    }
module.exports.DescribeStackResource = function DescribeStackResource(aws) {
        var StackName = aws.params.StackName;
        var LogicalResourceId = aws.params.LogicalResourceId;
        if (! StackName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackName"];
        }        if (! LogicalResourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LogicalResourceId"];
        }

        // TODO implement code

        var ret = {
            StackResourceDetail: {
                StackId: "",
                ResourceType: "",
                PhysicalResourceId: "",
                LogicalResourceId: "",
                ResourceStatus: "",
                Metadata: "",
                Description: "",
                StackName: "",
                LastUpdatedTimestamp: now(),
                ResourceStatusReason: ""
            }
        };
        return [200, ret];
    }
module.exports.ContinueUpdateRollback = function ContinueUpdateRollback(aws) {
        var StackName = aws.params.StackName;
        if (! StackName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackName"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.ListStackResources = function ListStackResources(aws) {
        var StackName = aws.params.StackName;
        var NextToken = aws.params.NextToken;
        if (! StackName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackName"];
        }

        // TODO implement code

        var ret = {
            StackResourceSummaries: [ {
                ResourceStatus: "",
                PhysicalResourceId: "",
                LogicalResourceId: "",
                ResourceType: "",
                LastUpdatedTimestamp: now(),
                ResourceStatusReason: ""
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.DescribeStackResources = function DescribeStackResources(aws) {
        var StackName = aws.params.StackName;
        var PhysicalResourceId = aws.params.PhysicalResourceId;
        var LogicalResourceId = aws.params.LogicalResourceId;


        // TODO implement code

        var ret = {
            StackResources: [ {
                StackId: "",
                ResourceStatus: "",
                ResourceType: "",
                PhysicalResourceId: "",
                LogicalResourceId: "",
                Timestamp: now(),
                Description: "",
                StackName: "",
                ResourceStatusReason: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.GetTemplateSummary = function GetTemplateSummary(aws) {
        var TemplateBody = aws.params.TemplateBody;
        var StackName = aws.params.StackName;
        var TemplateURL = aws.params.TemplateURL;


        // TODO implement code

        var ret = {
            Version: "",
            ResourceTypes: /*Sk*/[ "" /*, ...*/ ],
            CapabilitiesReason: "",
            Capabilities: /*Si*/[ "" /*, ...*/ ],
            Description: "",
            Parameters: [ {
                DefaultValue: "",
                ParameterConstraints: {
                    AllowedValues: [ "" /*, ...*/ ]
                },
                ParameterType: "",
                Description: "",
                ParameterKey: "",
                NoEcho: false
            } /*, ...*/ ],
            Metadata: ""
        };
        return [200, ret];
    }
module.exports.DescribeStackEvents = function DescribeStackEvents(aws) {
        var StackName = aws.params.StackName;
        var NextToken = aws.params.NextToken;


        // TODO implement code

        var ret = {
            StackEvents: [ {
                StackId: "",
                ResourceStatus: "",
                ResourceType: "",
                PhysicalResourceId: "",
                ResourceProperties: "",
                LogicalResourceId: "",
                Timestamp: now(),
                EventId: "",
                StackName: "",
                ResourceStatusReason: ""
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
