'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * AWS CloudFormation version 2010-05-15
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.DescribeStackResources = function DescribeStackResources(aws) {
        var PhysicalResourceId = aws.params['PhysicalResourceId'];
        var StackName = aws.params['StackName'];
        var LogicalResourceId = aws.params['LogicalResourceId'];


        // TODO implement code

        var ret = {
            StackResources: [ {
                PhysicalResourceId: "",
                StackName: "",
                ResourceStatus: "",
                Description: "",
                Timestamp: now(),
                ResourceType: "",
                ResourceStatusReason: "",
                StackId: "",
                LogicalResourceId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.UpdateStack = function UpdateStack(aws) {
        var Parameters = aws.params['Parameters'];
        var StackPolicyBody = aws.params['StackPolicyBody'];
        var NotificationARNs = aws.params['NotificationARNs'];
        var UsePreviousTemplate = aws.params['UsePreviousTemplate'] /* boolean */;
        var StackPolicyDuringUpdateBody = aws.params['StackPolicyDuringUpdateBody'];
        var TemplateURL = aws.params['TemplateURL'];
        var StackPolicyURL = aws.params['StackPolicyURL'];
        var TemplateBody = aws.params['TemplateBody'];
        var StackName = aws.params['StackName'];
        var StackPolicyDuringUpdateURL = aws.params['StackPolicyDuringUpdateURL'];
        var ResourceTypes = aws.params['ResourceTypes'];
        var Capabilities = aws.params['Capabilities'];
        if (! StackName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackName"];
        }

        // TODO implement code

        var ret = {
            StackId: ""
        };
        return [200, ret];
    }
module.exports.SetStackPolicy = function SetStackPolicy(aws) {
        var StackPolicyBody = aws.params['StackPolicyBody'];
        var StackName = aws.params['StackName'];
        var StackPolicyURL = aws.params['StackPolicyURL'];
        if (! StackName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CancelUpdateStack = function CancelUpdateStack(aws) {
        var StackName = aws.params['StackName'];
        if (! StackName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ListStackResources = function ListStackResources(aws) {
        var StackName = aws.params['StackName'];
        var NextToken = aws.params['NextToken'];
        if (! StackName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackName"];
        }

        // TODO implement code

        var ret = {
            StackResourceSummaries: [ {
                PhysicalResourceId: "",
                ResourceStatus: "",
                LogicalResourceId: "",
                ResourceType: "",
                ResourceStatusReason: "",
                LastUpdatedTimestamp: now()
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.GetTemplate = function GetTemplate(aws) {
        var StackName = aws.params['StackName'];
        if (! StackName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackName"];
        }

        // TODO implement code

        var ret = {
            TemplateBody: ""
        };
        return [200, ret];
    }
module.exports.ListStacks = function ListStacks(aws) {
        var NextToken = aws.params['NextToken'];
        var StackStatusFilter = aws.params['StackStatusFilter'] /* list */;


        // TODO implement code

        var ret = {
            StackSummaries: [ {
                DeletionTime: now(),
                StackName: "",
                LastUpdatedTime: now(),
                StackStatusReason: "",
                CreationTime: now(),
                TemplateDescription: "",
                StackId: "",
                StackStatus: ""
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.ContinueUpdateRollback = function ContinueUpdateRollback(aws) {
        var StackName = aws.params['StackName'];
        if (! StackName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackName"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.DeleteStack = function DeleteStack(aws) {
        var StackName = aws.params['StackName'];
        if (! StackName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeStackEvents = function DescribeStackEvents(aws) {
        var StackName = aws.params['StackName'];
        var NextToken = aws.params['NextToken'];


        // TODO implement code

        var ret = {
            StackEvents: [ {
                PhysicalResourceId: "",
                StackName: "",
                ResourceStatus: "",
                Timestamp: now(),
                EventId: "",
                ResourceProperties: "",
                ResourceType: "",
                ResourceStatusReason: "",
                StackId: "",
                LogicalResourceId: ""
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.EstimateTemplateCost = function EstimateTemplateCost(aws) {
        var TemplateBody = aws.params['TemplateBody'];
        var Parameters = aws.params['Parameters'];
        var TemplateURL = aws.params['TemplateURL'];


        // TODO implement code

        var ret = {
            Url: ""
        };
        return [200, ret];
    }
module.exports.ValidateTemplate = function ValidateTemplate(aws) {
        var TemplateBody = aws.params['TemplateBody'];
        var TemplateURL = aws.params['TemplateURL'];


        // TODO implement code

        var ret = {
            Parameters: [ {
                NoEcho: false,
                Description: "",
                ParameterKey: "",
                DefaultValue: ""
            } /*, ...*/ ],
            CapabilitiesReason: "",
            Description: "",
            Capabilities: /*Si*/[ "" /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.GetStackPolicy = function GetStackPolicy(aws) {
        var StackName = aws.params['StackName'];
        if (! StackName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackName"];
        }

        // TODO implement code

        var ret = {
            StackPolicyBody: ""
        };
        return [200, ret];
    }
module.exports.GetTemplateSummary = function GetTemplateSummary(aws) {
        var TemplateBody = aws.params['TemplateBody'];
        var StackName = aws.params['StackName'];
        var TemplateURL = aws.params['TemplateURL'];


        // TODO implement code

        var ret = {
            Parameters: [ {
                ParameterConstraints: {
                    AllowedValues: [ "" /*, ...*/ ]
                },
                Description: "",
                DefaultValue: "",
                NoEcho: false,
                ParameterType: "",
                ParameterKey: ""
            } /*, ...*/ ],
            Metadata: "",
            Description: "",
            Version: "",
            ResourceTypes: /*Sk*/[ "" /*, ...*/ ],
            CapabilitiesReason: "",
            Capabilities: /*Si*/[ "" /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.SignalResource = function SignalResource(aws) {
        var StackName = aws.params['StackName'];
        var UniqueId = aws.params['UniqueId'];
        var Status = aws.params['Status'];
        var LogicalResourceId = aws.params['LogicalResourceId'];
        if (! StackName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackName"];
        }        if (! LogicalResourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LogicalResourceId"];
        }        if (! UniqueId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter UniqueId"];
        }        if (! Status) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Status"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeAccountLimits = function DescribeAccountLimits(aws) {
        var NextToken = aws.params['NextToken'];


        // TODO implement code

        var ret = {
            AccountLimits: [ {
                Name: "",
                Value: 0
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.CreateStack = function CreateStack(aws) {
        var Parameters = aws.params['Parameters'];
        var StackPolicyBody = aws.params['StackPolicyBody'];
        var NotificationARNs = aws.params['NotificationARNs'];
        var DisableRollback = aws.params['DisableRollback'] /* boolean */;
        var TemplateURL = aws.params['TemplateURL'];
        var StackPolicyURL = aws.params['StackPolicyURL'];
        var TemplateBody = aws.params['TemplateBody'];
        var StackName = aws.params['StackName'];
        var OnFailure = aws.params['OnFailure'];
        var ResourceTypes = aws.params['ResourceTypes'];
        var TimeoutInMinutes = aws.params['TimeoutInMinutes'] /* integer */;
        var Tags = aws.params['Tags'];
        var Capabilities = aws.params['Capabilities'];
        if (! StackName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackName"];
        }

        // TODO implement code

        var ret = {
            StackId: ""
        };
        return [200, ret];
    }
module.exports.DescribeStacks = function DescribeStacks(aws) {
        var StackName = aws.params['StackName'];
        var NextToken = aws.params['NextToken'];


        // TODO implement code

        var ret = {
            NextToken: "",
            Stacks: [ {
                Parameters: /*S9*/[ {
                    ParameterValue: "",
                    ParameterKey: "",
                    UsePreviousValue: false
                } /*, ...*/ ],
                NotificationARNs: /*Sg*/[ "" /*, ...*/ ],
                CreationTime: now(),
                DisableRollback: false,
                StackStatus: "",
                Tags: /*Sp*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ],
                LastUpdatedTime: now(),
                StackName: "",
                Description: "",
                StackId: "",
                TimeoutInMinutes: 0,
                Outputs: [ {
                    OutputKey: "",
                    Description: "",
                    OutputValue: ""
                } /*, ...*/ ],
                StackStatusReason: "",
                Capabilities: /*Si*/[ "" /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeStackResource = function DescribeStackResource(aws) {
        var StackName = aws.params['StackName'];
        var LogicalResourceId = aws.params['LogicalResourceId'];
        if (! StackName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StackName"];
        }        if (! LogicalResourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LogicalResourceId"];
        }

        // TODO implement code

        var ret = {
            StackResourceDetail: {
                PhysicalResourceId: "",
                StackName: "",
                ResourceStatus: "",
                Description: "",
                LastUpdatedTimestamp: now(),
                ResourceType: "",
                Metadata: "",
                ResourceStatusReason: "",
                StackId: "",
                LogicalResourceId: ""
            }
        };
        return [200, ret];
    }
