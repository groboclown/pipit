'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * AWS WAF version 2015-08-24
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol json
require('../../lib/aws-common/shape_http')('json', module.exports, null);
// -----------------------------------
module.exports.CreateWebACL = function CreateWebACL(aws) {
  var name = aws.params.Name;
  var metricName = aws.params.MetricName;
  var changeToken = aws.params.ChangeToken;
  var defaultAction = aws.params.DefaultAction;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }
  if (!metricName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MetricName'];
  }
  if (!defaultAction) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DefaultAction'];
  }
  if (!changeToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ChangeToken'];
  }


  // TODO implement code

  var ret = {
    WebACL: /*S1a*/{
      WebACLId: '',
      Name: '',
      MetricName: '',
      Rules: [ /*S1c*/{
        RuleId: '',
        Priority: 0,
        Action: /*S17*/{
          Type: '',
        },
      }, /* ...*/ ],
      DefaultAction: /*S17*/{
          Type: '',
        },
    },
    ChangeToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateByteMatchSet = function UpdateByteMatchSet(aws) {
  var updates = aws.params.Updates /* Type list */;
  var byteMatchSetId = aws.params.ByteMatchSetId;
  var changeToken = aws.params.ChangeToken;
  if (!byteMatchSetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ByteMatchSetId'];
  }
  if (!changeToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ChangeToken'];
  }
  if (!updates) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Updates'];
  }


  // TODO implement code

  var ret = {
    ChangeToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateByteMatchSet = function CreateByteMatchSet(aws) {
  var name = aws.params.Name;
  var changeToken = aws.params.ChangeToken;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }
  if (!changeToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ChangeToken'];
  }


  // TODO implement code

  var ret = {
    ByteMatchSet: /*S5*/{
      Name: '',
      ByteMatchTuples: [ /*S8*/{
        PositionalConstraint: '',
        TargetString: null /*Blob*/,
        TextTransformation: '',
        FieldToMatch: /*S9*/{
          Data: '',
          Type: '',
        },
      }, /* ...*/ ],
      ByteMatchSetId: '',
    },
    ChangeToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteSizeConstraintSet = function DeleteSizeConstraintSet(aws) {
  var sizeConstraintSetId = aws.params.SizeConstraintSetId;
  var changeToken = aws.params.ChangeToken;
  if (!sizeConstraintSetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SizeConstraintSetId'];
  }
  if (!changeToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ChangeToken'];
  }


  // TODO implement code

  var ret = {
    ChangeToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteIPSet = function DeleteIPSet(aws) {
  var iPSetId = aws.params.IPSetId;
  var changeToken = aws.params.ChangeToken;
  if (!iPSetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter IPSetId'];
  }
  if (!changeToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ChangeToken'];
  }


  // TODO implement code

  var ret = {
    ChangeToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListSqlInjectionMatchSets = function ListSqlInjectionMatchSets(aws) {
  var nextMarker = aws.params.NextMarker;
  var limit = aws.params.Limit /* Type integer */;
  if (!limit) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Limit'];
  }


  // TODO implement code

  var ret = {
    NextMarker: '',
    SqlInjectionMatchSets: [ {
      Name: '',
      SqlInjectionMatchSetId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetSizeConstraintSet = function GetSizeConstraintSet(aws) {
  var sizeConstraintSetId = aws.params.SizeConstraintSetId;
  if (!sizeConstraintSetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SizeConstraintSetId'];
  }


  // TODO implement code

  var ret = {
    SizeConstraintSet: /*Sw*/{
      Name: '',
      SizeConstraints: [ /*Sy*/{
        ComparisonOperator: '',
        Size: 0 /*Long*/,
        TextTransformation: '',
        FieldToMatch: /*S9*/{
          Data: '',
          Type: '',
        },
      }, /* ...*/ ],
      SizeConstraintSetId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteSqlInjectionMatchSet = function DeleteSqlInjectionMatchSet(aws) {
  var sqlInjectionMatchSetId = aws.params.SqlInjectionMatchSetId;
  var changeToken = aws.params.ChangeToken;
  if (!sqlInjectionMatchSetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SqlInjectionMatchSetId'];
  }
  if (!changeToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ChangeToken'];
  }


  // TODO implement code

  var ret = {
    ChangeToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListRules = function ListRules(aws) {
  var nextMarker = aws.params.NextMarker;
  var limit = aws.params.Limit /* Type integer */;
  if (!limit) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Limit'];
  }


  // TODO implement code

  var ret = {
    NextMarker: '',
    Rules: [ {
      Name: '',
      RuleId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListWebACLs = function ListWebACLs(aws) {
  var nextMarker = aws.params.NextMarker;
  var limit = aws.params.Limit /* Type integer */;
  if (!limit) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Limit'];
  }


  // TODO implement code

  var ret = {
    NextMarker: '',
    WebACLs: [ {
      WebACLId: '',
      Name: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetChangeTokenStatus = function GetChangeTokenStatus(aws) {
  var changeToken = aws.params.ChangeToken;
  if (!changeToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ChangeToken'];
  }


  // TODO implement code

  var ret = {
    ChangeTokenStatus: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateSizeConstraintSet = function UpdateSizeConstraintSet(aws) {
  var sizeConstraintSetId = aws.params.SizeConstraintSetId;
  var updates = aws.params.Updates /* Type list */;
  var changeToken = aws.params.ChangeToken;
  if (!sizeConstraintSetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SizeConstraintSetId'];
  }
  if (!changeToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ChangeToken'];
  }
  if (!updates) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Updates'];
  }


  // TODO implement code

  var ret = {
    ChangeToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetChangeToken = function GetChangeToken(aws) {


  // TODO implement code

  var ret = {
    ChangeToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteByteMatchSet = function DeleteByteMatchSet(aws) {
  var byteMatchSetId = aws.params.ByteMatchSetId;
  var changeToken = aws.params.ChangeToken;
  if (!byteMatchSetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ByteMatchSetId'];
  }
  if (!changeToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ChangeToken'];
  }


  // TODO implement code

  var ret = {
    ChangeToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateRule = function UpdateRule(aws) {
  var updates = aws.params.Updates /* Type list */;
  var ruleId = aws.params.RuleId;
  var changeToken = aws.params.ChangeToken;
  if (!ruleId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RuleId'];
  }
  if (!changeToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ChangeToken'];
  }
  if (!updates) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Updates'];
  }


  // TODO implement code

  var ret = {
    ChangeToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListSizeConstraintSets = function ListSizeConstraintSets(aws) {
  var nextMarker = aws.params.NextMarker;
  var limit = aws.params.Limit /* Type integer */;
  if (!limit) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Limit'];
  }


  // TODO implement code

  var ret = {
    NextMarker: '',
    SizeConstraintSets: [ {
      Name: '',
      SizeConstraintSetId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateSqlInjectionMatchSet = function CreateSqlInjectionMatchSet(aws) {
  var name = aws.params.Name;
  var changeToken = aws.params.ChangeToken;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }
  if (!changeToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ChangeToken'];
  }


  // TODO implement code

  var ret = {
    SqlInjectionMatchSet: /*S13*/{
      Name: '',
      SqlInjectionMatchTuples: [ /*S15*/{
        TextTransformation: '',
        FieldToMatch: /*S9*/{
          Data: '',
          Type: '',
        },
      }, /* ...*/ ],
      SqlInjectionMatchSetId: '',
    },
    ChangeToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetSqlInjectionMatchSet = function GetSqlInjectionMatchSet(aws) {
  var sqlInjectionMatchSetId = aws.params.SqlInjectionMatchSetId;
  if (!sqlInjectionMatchSetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SqlInjectionMatchSetId'];
  }


  // TODO implement code

  var ret = {
    SqlInjectionMatchSet: /*S13*/{
      Name: '',
      SqlInjectionMatchTuples: [ /*S15*/{
        TextTransformation: '',
        FieldToMatch: /*S9*/{
          Data: '',
          Type: '',
        },
      }, /* ...*/ ],
      SqlInjectionMatchSetId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteWebACL = function DeleteWebACL(aws) {
  var webACLId = aws.params.WebACLId;
  var changeToken = aws.params.ChangeToken;
  if (!webACLId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter WebACLId'];
  }
  if (!changeToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ChangeToken'];
  }


  // TODO implement code

  var ret = {
    ChangeToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateIPSet = function CreateIPSet(aws) {
  var name = aws.params.Name;
  var changeToken = aws.params.ChangeToken;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }
  if (!changeToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ChangeToken'];
  }


  // TODO implement code

  var ret = {
    IPSet: /*Sh*/{
      IPSetId: '',
      IPSetDescriptors: [ /*Sj*/{
        Value: '',
        Type: '',
      }, /* ...*/ ],
      Name: '',
    },
    ChangeToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetSampledRequests = function GetSampledRequests(aws) {
  var maxItems = aws.params.MaxItems /* Type long */;
  var timeWindow = aws.params.TimeWindow;
  var webAclId = aws.params.WebAclId;
  var ruleId = aws.params.RuleId;
  if (!webAclId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter WebAclId'];
  }
  if (!ruleId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RuleId'];
  }
  if (!timeWindow) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TimeWindow'];
  }
  if (!maxItems) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MaxItems'];
  }


  // TODO implement code

  var ret = {
    SampledRequests: [ {
      Timestamp: awsCommon.timestamp(),
      Request: {
        URI: '',
        Headers: [ {
          Name: '',
          Value: '',
        }, /* ...*/ ],
        ClientIP: '',
        HTTPVersion: '',
        Method: '',
        Country: '',
      },
      Weight: 0 /*Long*/,
      Action: '',
    }, /* ...*/ ],
    TimeWindow: /*S22*/{
      EndTime: awsCommon.timestamp(),
      StartTime: awsCommon.timestamp(),
    },
    PopulationSize: 0 /*Long*/,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateSqlInjectionMatchSet = function UpdateSqlInjectionMatchSet(aws) {
  var sqlInjectionMatchSetId = aws.params.SqlInjectionMatchSetId;
  var updates = aws.params.Updates /* Type list */;
  var changeToken = aws.params.ChangeToken;
  if (!sqlInjectionMatchSetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SqlInjectionMatchSetId'];
  }
  if (!changeToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ChangeToken'];
  }
  if (!updates) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Updates'];
  }


  // TODO implement code

  var ret = {
    ChangeToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetByteMatchSet = function GetByteMatchSet(aws) {
  var byteMatchSetId = aws.params.ByteMatchSetId;
  if (!byteMatchSetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ByteMatchSetId'];
  }


  // TODO implement code

  var ret = {
    ByteMatchSet: /*S5*/{
      Name: '',
      ByteMatchTuples: [ /*S8*/{
        PositionalConstraint: '',
        TargetString: null /*Blob*/,
        TextTransformation: '',
        FieldToMatch: /*S9*/{
          Data: '',
          Type: '',
        },
      }, /* ...*/ ],
      ByteMatchSetId: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateWebACL = function UpdateWebACL(aws) {
  var webACLId = aws.params.WebACLId;
  var updates = aws.params.Updates /* Type list */;
  var changeToken = aws.params.ChangeToken;
  var defaultAction = aws.params.DefaultAction;
  if (!webACLId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter WebACLId'];
  }
  if (!changeToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ChangeToken'];
  }


  // TODO implement code

  var ret = {
    ChangeToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListIPSets = function ListIPSets(aws) {
  var nextMarker = aws.params.NextMarker;
  var limit = aws.params.Limit /* Type integer */;
  if (!limit) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Limit'];
  }


  // TODO implement code

  var ret = {
    NextMarker: '',
    IPSets: [ {
      IPSetId: '',
      Name: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetIPSet = function GetIPSet(aws) {
  var iPSetId = aws.params.IPSetId;
  if (!iPSetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter IPSetId'];
  }


  // TODO implement code

  var ret = {
    IPSet: /*Sh*/{
      IPSetId: '',
      IPSetDescriptors: [ /*Sj*/{
        Value: '',
        Type: '',
      }, /* ...*/ ],
      Name: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateSizeConstraintSet = function CreateSizeConstraintSet(aws) {
  var name = aws.params.Name;
  var changeToken = aws.params.ChangeToken;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }
  if (!changeToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ChangeToken'];
  }


  // TODO implement code

  var ret = {
    SizeConstraintSet: /*Sw*/{
      Name: '',
      SizeConstraints: [ /*Sy*/{
        ComparisonOperator: '',
        Size: 0 /*Long*/,
        TextTransformation: '',
        FieldToMatch: /*S9*/{
          Data: '',
          Type: '',
        },
      }, /* ...*/ ],
      SizeConstraintSetId: '',
    },
    ChangeToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateRule = function CreateRule(aws) {
  var name = aws.params.Name;
  var metricName = aws.params.MetricName;
  var changeToken = aws.params.ChangeToken;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }
  if (!metricName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MetricName'];
  }
  if (!changeToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ChangeToken'];
  }


  // TODO implement code

  var ret = {
    ChangeToken: '',
    Rule: /*Sp*/{
      Name: '',
      MetricName: '',
      RuleId: '',
      Predicates: [ /*Sr*/{
        DataId: '',
        Negated: false,
        Type: '',
      }, /* ...*/ ],
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListByteMatchSets = function ListByteMatchSets(aws) {
  var nextMarker = aws.params.NextMarker;
  var limit = aws.params.Limit /* Type integer */;
  if (!limit) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Limit'];
  }


  // TODO implement code

  var ret = {
    NextMarker: '',
    ByteMatchSets: [ {
      Name: '',
      ByteMatchSetId: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteRule = function DeleteRule(aws) {
  var ruleId = aws.params.RuleId;
  var changeToken = aws.params.ChangeToken;
  if (!ruleId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RuleId'];
  }
  if (!changeToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ChangeToken'];
  }


  // TODO implement code

  var ret = {
    ChangeToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetRule = function GetRule(aws) {
  var ruleId = aws.params.RuleId;
  if (!ruleId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RuleId'];
  }


  // TODO implement code

  var ret = {
    Rule: /*Sp*/{
      Name: '',
      MetricName: '',
      RuleId: '',
      Predicates: [ /*Sr*/{
        DataId: '',
        Negated: false,
        Type: '',
      }, /* ...*/ ],
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateIPSet = function UpdateIPSet(aws) {
  var iPSetId = aws.params.IPSetId;
  var updates = aws.params.Updates /* Type list */;
  var changeToken = aws.params.ChangeToken;
  if (!iPSetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter IPSetId'];
  }
  if (!changeToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ChangeToken'];
  }
  if (!updates) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Updates'];
  }


  // TODO implement code

  var ret = {
    ChangeToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetWebACL = function GetWebACL(aws) {
  var webACLId = aws.params.WebACLId;
  if (!webACLId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter WebACLId'];
  }


  // TODO implement code

  var ret = {
    WebACL: /*S1a*/{
      WebACLId: '',
      Name: '',
      MetricName: '',
      Rules: [ /*S1c*/{
        RuleId: '',
        Priority: 0,
        Action: /*S17*/{
          Type: '',
        },
      }, /* ...*/ ],
      DefaultAction: /*S17*/{
          Type: '',
        },
    },
  };
  return [200, ret];
};
