'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * Amazon GameLift version 2015-10-01
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol json
require('../../lib/aws-common/shape_http')('json', module.exports, null);
// -----------------------------------
module.exports.CreateAlias = function CreateAlias(aws) {
  var description = aws.params.Description;
  var name = aws.params.Name;
  var routingStrategy = aws.params.RoutingStrategy;
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }
  if (!routingStrategy) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RoutingStrategy'];
  }


  // TODO implement code

  var ret = {
    Alias: /*S8*/{
      AliasId: '',
      CreationTime: awsCommon.timestamp(),
      Description: '',
      LastUpdatedTime: awsCommon.timestamp(),
      Name: '',
      RoutingStrategy: /*S3*/{
        FleetId: '',
        Message: '',
        Type: '',
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateBuild = function CreateBuild(aws) {
  var name = aws.params.Name;
  var storageLocation = aws.params.StorageLocation;
  var version = aws.params.Version;


  // TODO implement code

  var ret = {
    Build: /*Sf*/{
      BuildId: '',
      CreationTime: awsCommon.timestamp(),
      Name: '',
      SizeOnDisk: 0 /*Long*/,
      Status: '',
      Version: '',
    },
    StorageLocation: /*Sc*/{
      Bucket: '',
      Key: '',
      RoleArn: '',
    },
    UploadCredentials: /*Sj*/{
      AccessKeyId: '',
      SecretAccessKey: '',
      SessionToken: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateFleet = function CreateFleet(aws) {
  var buildId = aws.params.BuildId;
  var description = aws.params.Description;
  var eC2InboundPermissions = aws.params.EC2InboundPermissions;
  var eC2InstanceType = aws.params.EC2InstanceType;
  var logPaths = aws.params.LogPaths;
  var name = aws.params.Name;
  var newGameSessionProtectionPolicy = aws.params.NewGameSessionProtectionPolicy;
  var serverLaunchParameters = aws.params.ServerLaunchParameters;
  var serverLaunchPath = aws.params.ServerLaunchPath;
  if (!buildId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter BuildId'];
  }
  if (!eC2InstanceType) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EC2InstanceType'];
  }
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }
  if (!serverLaunchPath) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ServerLaunchPath'];
  }


  // TODO implement code

  var ret = {
    FleetAttributes: /*Su*/{
      BuildId: '',
      CreationTime: awsCommon.timestamp(),
      Description: '',
      FleetId: '',
      LogPaths: /*Sl*/[ '', /* ...*/ ],
      Name: '',
      NewGameSessionProtectionPolicy: '',
      ServerLaunchParameters: '',
      ServerLaunchPath: '',
      Status: '',
      TerminationTime: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateGameSession = function CreateGameSession(aws) {
  var aliasId = aws.params.AliasId;
  var fleetId = aws.params.FleetId;
  var gameProperties = aws.params.GameProperties;
  var maximumPlayerSessionCount = aws.params.MaximumPlayerSessionCount /* Type integer */;
  var name = aws.params.Name;
  if (!maximumPlayerSessionCount) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MaximumPlayerSessionCount'];
  }


  // TODO implement code

  var ret = {
    GameSession: /*S13*/{
      CreationTime: awsCommon.timestamp(),
      CurrentPlayerSessionCount: 0,
      FleetId: '',
      GameProperties: /*Sy*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      GameSessionId: '',
      IpAddress: '',
      MaximumPlayerSessionCount: 0,
      Name: '',
      PlayerSessionCreationPolicy: '',
      Status: '',
      TerminationTime: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreatePlayerSession = function CreatePlayerSession(aws) {
  var gameSessionId = aws.params.GameSessionId;
  var playerId = aws.params.PlayerId;
  if (!gameSessionId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GameSessionId'];
  }
  if (!playerId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PlayerId'];
  }


  // TODO implement code

  var ret = {
    PlayerSession: /*S1a*/{
      CreationTime: awsCommon.timestamp(),
      FleetId: '',
      GameSessionId: '',
      IpAddress: '',
      PlayerId: '',
      PlayerSessionId: '',
      Status: '',
      TerminationTime: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreatePlayerSessions = function CreatePlayerSessions(aws) {
  var gameSessionId = aws.params.GameSessionId;
  var playerIds = aws.params.PlayerIds /* Type list */;
  if (!gameSessionId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GameSessionId'];
  }
  if (!playerIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PlayerIds'];
  }


  // TODO implement code

  var ret = {
    PlayerSessions: /*S1g*/[ /*S1a*/{
      CreationTime: awsCommon.timestamp(),
      FleetId: '',
      GameSessionId: '',
      IpAddress: '',
      PlayerId: '',
      PlayerSessionId: '',
      Status: '',
      TerminationTime: awsCommon.timestamp(),
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteAlias = function DeleteAlias(aws) {
  var aliasId = aws.params.AliasId;
  if (!aliasId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AliasId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteBuild = function DeleteBuild(aws) {
  var buildId = aws.params.BuildId;
  if (!buildId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter BuildId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteFleet = function DeleteFleet(aws) {
  var fleetId = aws.params.FleetId;
  if (!fleetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FleetId'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteScalingPolicy = function DeleteScalingPolicy(aws) {
  var fleetId = aws.params.FleetId;
  var name = aws.params.Name;
  if (!fleetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FleetId'];
  }
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }


  // TODO implement code

  var ret = {};
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeAlias = function DescribeAlias(aws) {
  var aliasId = aws.params.AliasId;
  if (!aliasId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AliasId'];
  }


  // TODO implement code

  var ret = {
    Alias: /*S8*/{
      AliasId: '',
      CreationTime: awsCommon.timestamp(),
      Description: '',
      LastUpdatedTime: awsCommon.timestamp(),
      Name: '',
      RoutingStrategy: /*S3*/{
        FleetId: '',
        Message: '',
        Type: '',
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeBuild = function DescribeBuild(aws) {
  var buildId = aws.params.BuildId;
  if (!buildId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter BuildId'];
  }


  // TODO implement code

  var ret = {
    Build: /*Sf*/{
      BuildId: '',
      CreationTime: awsCommon.timestamp(),
      Name: '',
      SizeOnDisk: 0 /*Long*/,
      Status: '',
      Version: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeEC2InstanceLimits = function DescribeEC2InstanceLimits(aws) {
  var eC2InstanceType = aws.params.EC2InstanceType;


  // TODO implement code

  var ret = {
    EC2InstanceLimits: [ {
      CurrentInstances: 0,
      EC2InstanceType: '',
      InstanceLimit: 0,
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeFleetAttributes = function DescribeFleetAttributes(aws) {
  var fleetIds = aws.params.FleetIds;
  var limit = aws.params.Limit /* Type integer */;
  var nextToken = aws.params.NextToken;


  // TODO implement code

  var ret = {
    FleetAttributes: [ /*Su*/{
      BuildId: '',
      CreationTime: awsCommon.timestamp(),
      Description: '',
      FleetId: '',
      LogPaths: /*Sl*/[ '', /* ...*/ ],
      Name: '',
      NewGameSessionProtectionPolicy: '',
      ServerLaunchParameters: '',
      ServerLaunchPath: '',
      Status: '',
      TerminationTime: awsCommon.timestamp(),
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeFleetCapacity = function DescribeFleetCapacity(aws) {
  var fleetIds = aws.params.FleetIds;
  var limit = aws.params.Limit /* Type integer */;
  var nextToken = aws.params.NextToken;


  // TODO implement code

  var ret = {
    FleetCapacity: [ {
      FleetId: '',
      InstanceCounts: {
        ACTIVE: 0,
        DESIRED: 0,
        IDLE: 0,
        MAXIMUM: 0,
        MINIMUM: 0,
        PENDING: 0,
        TERMINATING: 0,
      },
      InstanceType: '',
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeFleetEvents = function DescribeFleetEvents(aws) {
  var endTime = aws.params.EndTime /* Type timestamp */;
  var fleetId = aws.params.FleetId;
  var limit = aws.params.Limit /* Type integer */;
  var nextToken = aws.params.NextToken;
  var startTime = aws.params.StartTime /* Type timestamp */;
  if (!fleetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FleetId'];
  }


  // TODO implement code

  var ret = {
    Events: [ {
      EventCode: '',
      EventId: '',
      EventTime: awsCommon.timestamp(),
      Message: '',
      ResourceId: '',
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeFleetPortSettings = function DescribeFleetPortSettings(aws) {
  var fleetId = aws.params.FleetId;
  if (!fleetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FleetId'];
  }


  // TODO implement code

  var ret = {
    InboundPermissions: /*Sn*/[ {
      FromPort: 0,
      IpRange: '',
      Protocol: '',
      ToPort: 0,
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeFleetUtilization = function DescribeFleetUtilization(aws) {
  var fleetIds = aws.params.FleetIds;
  var limit = aws.params.Limit /* Type integer */;
  var nextToken = aws.params.NextToken;


  // TODO implement code

  var ret = {
    FleetUtilization: [ {
      ActiveGameSessionCount: 0,
      CurrentPlayerSessionCount: 0,
      FleetId: '',
      MaximumPlayerSessionCount: 0,
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeGameSessionDetails = function DescribeGameSessionDetails(aws) {
  var aliasId = aws.params.AliasId;
  var fleetId = aws.params.FleetId;
  var gameSessionId = aws.params.GameSessionId;
  var limit = aws.params.Limit /* Type integer */;
  var nextToken = aws.params.NextToken;
  var statusFilter = aws.params.StatusFilter;


  // TODO implement code

  var ret = {
    GameSessionDetails: [ {
      GameSession: /*S13*/{
        CreationTime: awsCommon.timestamp(),
        CurrentPlayerSessionCount: 0,
        FleetId: '',
        GameProperties: /*Sy*/[ {
          Key: '',
          Value: '',
        }, /* ...*/ ],
        GameSessionId: '',
        IpAddress: '',
        MaximumPlayerSessionCount: 0,
        Name: '',
        PlayerSessionCreationPolicy: '',
        Status: '',
        TerminationTime: awsCommon.timestamp(),
      },
      ProtectionPolicy: '',
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeGameSessions = function DescribeGameSessions(aws) {
  var aliasId = aws.params.AliasId;
  var fleetId = aws.params.FleetId;
  var gameSessionId = aws.params.GameSessionId;
  var limit = aws.params.Limit /* Type integer */;
  var nextToken = aws.params.NextToken;
  var statusFilter = aws.params.StatusFilter;


  // TODO implement code

  var ret = {
    GameSessions: [ /*S13*/{
      CreationTime: awsCommon.timestamp(),
      CurrentPlayerSessionCount: 0,
      FleetId: '',
      GameProperties: /*Sy*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      GameSessionId: '',
      IpAddress: '',
      MaximumPlayerSessionCount: 0,
      Name: '',
      PlayerSessionCreationPolicy: '',
      Status: '',
      TerminationTime: awsCommon.timestamp(),
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribePlayerSessions = function DescribePlayerSessions(aws) {
  var gameSessionId = aws.params.GameSessionId;
  var limit = aws.params.Limit /* Type integer */;
  var nextToken = aws.params.NextToken;
  var playerId = aws.params.PlayerId;
  var playerSessionId = aws.params.PlayerSessionId;
  var playerSessionStatusFilter = aws.params.PlayerSessionStatusFilter;


  // TODO implement code

  var ret = {
    NextToken: '',
    PlayerSessions: /*S1g*/[ /*S1a*/{
      CreationTime: awsCommon.timestamp(),
      FleetId: '',
      GameSessionId: '',
      IpAddress: '',
      PlayerId: '',
      PlayerSessionId: '',
      Status: '',
      TerminationTime: awsCommon.timestamp(),
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeScalingPolicies = function DescribeScalingPolicies(aws) {
  var fleetId = aws.params.FleetId;
  var limit = aws.params.Limit /* Type integer */;
  var nextToken = aws.params.NextToken;
  var statusFilter = aws.params.StatusFilter;
  if (!fleetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FleetId'];
  }


  // TODO implement code

  var ret = {
    NextToken: '',
    ScalingPolicies: [ {
      ComparisonOperator: '',
      EvaluationPeriods: 0,
      FleetId: '',
      MetricName: '',
      Name: '',
      ScalingAdjustment: 0,
      ScalingAdjustmentType: '',
      Status: '',
      Threshold: 0.0 /*Double*/,
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetGameSessionLogUrl = function GetGameSessionLogUrl(aws) {
  var gameSessionId = aws.params.GameSessionId;
  if (!gameSessionId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GameSessionId'];
  }


  // TODO implement code

  var ret = {
    PreSignedUrl: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListAliases = function ListAliases(aws) {
  var limit = aws.params.Limit /* Type integer */;
  var name = aws.params.Name;
  var nextToken = aws.params.NextToken;
  var routingStrategyType = aws.params.RoutingStrategyType;


  // TODO implement code

  var ret = {
    Aliases: [ /*S8*/{
      AliasId: '',
      CreationTime: awsCommon.timestamp(),
      Description: '',
      LastUpdatedTime: awsCommon.timestamp(),
      Name: '',
      RoutingStrategy: /*S3*/{
        FleetId: '',
        Message: '',
        Type: '',
      },
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListBuilds = function ListBuilds(aws) {
  var limit = aws.params.Limit /* Type integer */;
  var nextToken = aws.params.NextToken;
  var status = aws.params.Status;


  // TODO implement code

  var ret = {
    Builds: [ /*Sf*/{
      BuildId: '',
      CreationTime: awsCommon.timestamp(),
      Name: '',
      SizeOnDisk: 0 /*Long*/,
      Status: '',
      Version: '',
    }, /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListFleets = function ListFleets(aws) {
  var buildId = aws.params.BuildId;
  var limit = aws.params.Limit /* Type integer */;
  var nextToken = aws.params.NextToken;


  // TODO implement code

  var ret = {
    FleetIds: /*S1u*/[ '', /* ...*/ ],
    NextToken: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.PutScalingPolicy = function PutScalingPolicy(aws) {
  var comparisonOperator = aws.params.ComparisonOperator;
  var evaluationPeriods = aws.params.EvaluationPeriods /* Type integer */;
  var fleetId = aws.params.FleetId;
  var metricName = aws.params.MetricName;
  var name = aws.params.Name;
  var scalingAdjustment = aws.params.ScalingAdjustment /* Type integer */;
  var scalingAdjustmentType = aws.params.ScalingAdjustmentType;
  var threshold = aws.params.Threshold /* Type double */;
  if (!comparisonOperator) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ComparisonOperator'];
  }
  if (!evaluationPeriods) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EvaluationPeriods'];
  }
  if (!fleetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FleetId'];
  }
  if (!metricName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MetricName'];
  }
  if (!name) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Name'];
  }
  if (!scalingAdjustment) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ScalingAdjustment'];
  }
  if (!scalingAdjustmentType) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ScalingAdjustmentType'];
  }
  if (!threshold) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Threshold'];
  }


  // TODO implement code

  var ret = {
    Name: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RequestUploadCredentials = function RequestUploadCredentials(aws) {
  var buildId = aws.params.BuildId;
  if (!buildId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter BuildId'];
  }


  // TODO implement code

  var ret = {
    StorageLocation: /*Sc*/{
      Bucket: '',
      Key: '',
      RoleArn: '',
    },
    UploadCredentials: /*Sj*/{
      AccessKeyId: '',
      SecretAccessKey: '',
      SessionToken: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ResolveAlias = function ResolveAlias(aws) {
  var aliasId = aws.params.AliasId;
  if (!aliasId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AliasId'];
  }


  // TODO implement code

  var ret = {
    FleetId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateAlias = function UpdateAlias(aws) {
  var aliasId = aws.params.AliasId;
  var description = aws.params.Description;
  var name = aws.params.Name;
  var routingStrategy = aws.params.RoutingStrategy;
  if (!aliasId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AliasId'];
  }


  // TODO implement code

  var ret = {
    Alias: /*S8*/{
      AliasId: '',
      CreationTime: awsCommon.timestamp(),
      Description: '',
      LastUpdatedTime: awsCommon.timestamp(),
      Name: '',
      RoutingStrategy: /*S3*/{
        FleetId: '',
        Message: '',
        Type: '',
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateBuild = function UpdateBuild(aws) {
  var buildId = aws.params.BuildId;
  var name = aws.params.Name;
  var version = aws.params.Version;
  if (!buildId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter BuildId'];
  }


  // TODO implement code

  var ret = {
    Build: /*Sf*/{
      BuildId: '',
      CreationTime: awsCommon.timestamp(),
      Name: '',
      SizeOnDisk: 0 /*Long*/,
      Status: '',
      Version: '',
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateFleetAttributes = function UpdateFleetAttributes(aws) {
  var description = aws.params.Description;
  var fleetId = aws.params.FleetId;
  var name = aws.params.Name;
  var newGameSessionProtectionPolicy = aws.params.NewGameSessionProtectionPolicy;
  if (!fleetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FleetId'];
  }


  // TODO implement code

  var ret = {
    FleetId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateFleetCapacity = function UpdateFleetCapacity(aws) {
  var desiredInstances = aws.params.DesiredInstances /* Type integer */;
  var fleetId = aws.params.FleetId;
  var maxSize = aws.params.MaxSize /* Type integer */;
  var minSize = aws.params.MinSize /* Type integer */;
  if (!fleetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FleetId'];
  }


  // TODO implement code

  var ret = {
    FleetId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateFleetPortSettings = function UpdateFleetPortSettings(aws) {
  var fleetId = aws.params.FleetId;
  var inboundPermissionAuthorizations = aws.params.InboundPermissionAuthorizations;
  var inboundPermissionRevocations = aws.params.InboundPermissionRevocations;
  if (!fleetId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FleetId'];
  }


  // TODO implement code

  var ret = {
    FleetId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateGameSession = function UpdateGameSession(aws) {
  var gameSessionId = aws.params.GameSessionId;
  var maximumPlayerSessionCount = aws.params.MaximumPlayerSessionCount /* Type integer */;
  var name = aws.params.Name;
  var playerSessionCreationPolicy = aws.params.PlayerSessionCreationPolicy;
  var protectionPolicy = aws.params.ProtectionPolicy;
  if (!gameSessionId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GameSessionId'];
  }


  // TODO implement code

  var ret = {
    GameSession: /*S13*/{
      CreationTime: awsCommon.timestamp(),
      CurrentPlayerSessionCount: 0,
      FleetId: '',
      GameProperties: /*Sy*/[ {
        Key: '',
        Value: '',
      }, /* ...*/ ],
      GameSessionId: '',
      IpAddress: '',
      MaximumPlayerSessionCount: 0,
      Name: '',
      PlayerSessionCreationPolicy: '',
      Status: '',
      TerminationTime: awsCommon.timestamp(),
    },
  };
  return [200, ret];
};
