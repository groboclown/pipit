'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * Amazon Relational Database Service version 2013-01-10
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.AddSourceIdentifierToSubscription = function AddSourceIdentifierToSubscription(aws) {
        var SourceIdentifier = aws.params['SourceIdentifier'];
        var SubscriptionName = aws.params['SubscriptionName'];
        if (! SubscriptionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubscriptionName"];
        }        if (! SourceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SourceIdentifier"];
        }

        // TODO implement code

        var ret = {
            EventSubscription: /*S4*/{
                SourceType: "",
                SourceIdsList: /*S5*/[ "" /*, ...*/ ],
                CustSubscriptionId: "",
                CustomerAwsId: "",
                SnsTopicArn: "",
                Id: "",
                EventCategoriesList: /*S6*/[ "" /*, ...*/ ],
                SubscriptionCreationTime: "",
                Enabled: false,
                Status: ""
            }
        };
        return [200, ret];
    }
module.exports.ListTagsForResource = function ListTagsForResource(aws) {
        var ResourceName = aws.params['ResourceName'];
        if (! ResourceName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResourceName"];
        }

        // TODO implement code

        var ret = {
            TagList: /*S9*/[ {
                Key: "",
                Value: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeDBSnapshots = function DescribeDBSnapshots(aws) {
        var DBInstanceIdentifier = aws.params['DBInstanceIdentifier'];
        var SnapshotType = aws.params['SnapshotType'];
        var Marker = aws.params['Marker'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        var DBSnapshotIdentifier = aws.params['DBSnapshotIdentifier'];


        // TODO implement code

        var ret = {
            DBSnapshots: [ /*Sk*/{
                SnapshotType: "",
                InstanceCreateTime: now(),
                DBSnapshotIdentifier: "",
                DBInstanceIdentifier: "",
                VpcId: "",
                SnapshotCreateTime: now(),
                Engine: "",
                AvailabilityZone: "",
                MasterUsername: "",
                Iops: 0,
                Port: 0,
                AllocatedStorage: 0,
                EngineVersion: "",
                Status: "",
                LicenseModel: ""
            } /*, ...*/ ],
            Marker: ""
        };
        return [200, ret];
    }
module.exports.RemoveTagsFromResource = function RemoveTagsFromResource(aws) {
        var ResourceName = aws.params['ResourceName'];
        var TagKeys = aws.params['TagKeys'] /* list */;
        if (! ResourceName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResourceName"];
        }        if (! TagKeys) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TagKeys"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.RemoveSourceIdentifierFromSubscription = function RemoveSourceIdentifierFromSubscription(aws) {
        var SourceIdentifier = aws.params['SourceIdentifier'];
        var SubscriptionName = aws.params['SubscriptionName'];
        if (! SubscriptionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubscriptionName"];
        }        if (! SourceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SourceIdentifier"];
        }

        // TODO implement code

        var ret = {
            EventSubscription: /*S4*/{
                SourceType: "",
                SourceIdsList: /*S5*/[ "" /*, ...*/ ],
                CustSubscriptionId: "",
                CustomerAwsId: "",
                SnsTopicArn: "",
                Id: "",
                EventCategoriesList: /*S6*/[ "" /*, ...*/ ],
                SubscriptionCreationTime: "",
                Enabled: false,
                Status: ""
            }
        };
        return [200, ret];
    }
module.exports.RevokeDBSecurityGroupIngress = function RevokeDBSecurityGroupIngress(aws) {
        var EC2SecurityGroupOwnerId = aws.params['EC2SecurityGroupOwnerId'];
        var EC2SecurityGroupId = aws.params['EC2SecurityGroupId'];
        var CIDRIP = aws.params['CIDRIP'];
        var DBSecurityGroupName = aws.params['DBSecurityGroupName'];
        var EC2SecurityGroupName = aws.params['EC2SecurityGroupName'];
        if (! DBSecurityGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSecurityGroupName"];
        }

        // TODO implement code

        var ret = {
            DBSecurityGroup: /*Sd*/{
                DBSecurityGroupDescription: "",
                DBSecurityGroupName: "",
                EC2SecurityGroups: [ {
                    EC2SecurityGroupId: "",
                    EC2SecurityGroupOwnerId: "",
                    EC2SecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                IPRanges: [ {
                    CIDRIP: "",
                    Status: ""
                } /*, ...*/ ],
                OwnerId: "",
                VpcId: ""
            }
        };
        return [200, ret];
    }
module.exports.DeleteDBSnapshot = function DeleteDBSnapshot(aws) {
        var DBSnapshotIdentifier = aws.params['DBSnapshotIdentifier'];
        if (! DBSnapshotIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSnapshotIdentifier"];
        }

        // TODO implement code

        var ret = {
            DBSnapshot: /*Sk*/{
                SnapshotType: "",
                InstanceCreateTime: now(),
                DBSnapshotIdentifier: "",
                DBInstanceIdentifier: "",
                VpcId: "",
                SnapshotCreateTime: now(),
                Engine: "",
                AvailabilityZone: "",
                MasterUsername: "",
                Iops: 0,
                Port: 0,
                AllocatedStorage: 0,
                EngineVersion: "",
                Status: "",
                LicenseModel: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeOrderableDBInstanceOptions = function DescribeOrderableDBInstanceOptions(aws) {
        var Engine = aws.params['Engine'];
        var DBInstanceClass = aws.params['DBInstanceClass'];
        var LicenseModel = aws.params['LicenseModel'];
        var EngineVersion = aws.params['EngineVersion'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        var Marker = aws.params['Marker'];
        var Vpc = aws.params['Vpc'] /* boolean */;
        if (! Engine) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Engine"];
        }

        // TODO implement code

        var ret = {
            Marker: "",
            OrderableDBInstanceOptions: [ {
                Engine: "",
                ReadReplicaCapable: false,
                DBInstanceClass: "",
                LicenseModel: "",
                AvailabilityZones: [ /*S14*/{
                    Name: "",
                    ProvisionedIopsCapable: false
                } /*, ...*/ ],
                EngineVersion: "",
                MultiAZCapable: false,
                Vpc: false
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeDBParameters = function DescribeDBParameters(aws) {
        var Marker = aws.params['Marker'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        var DBParameterGroupName = aws.params['DBParameterGroupName'];
        var Source = aws.params['Source'];
        if (! DBParameterGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBParameterGroupName"];
        }

        // TODO implement code

        var ret = {
            Parameters: /*S2f*/[ {
                MinimumEngineVersion: "",
                Description: "",
                IsModifiable: false,
                AllowedValues: "",
                ApplyType: "",
                ParameterName: "",
                ParameterValue: "",
                DataType: "",
                ApplyMethod: "",
                Source: ""
            } /*, ...*/ ],
            Marker: ""
        };
        return [200, ret];
    }
module.exports.CreateDBInstanceReadReplica = function CreateDBInstanceReadReplica(aws) {
        var Port = aws.params['Port'] /* integer */;
        var AutoMinorVersionUpgrade = aws.params['AutoMinorVersionUpgrade'] /* boolean */;
        var DBInstanceClass = aws.params['DBInstanceClass'];
        var Iops = aws.params['Iops'] /* integer */;
        var DBInstanceIdentifier = aws.params['DBInstanceIdentifier'];
        var OptionGroupName = aws.params['OptionGroupName'];
        var SourceDBInstanceIdentifier = aws.params['SourceDBInstanceIdentifier'];
        var AvailabilityZone = aws.params['AvailabilityZone'];
        var PubliclyAccessible = aws.params['PubliclyAccessible'] /* boolean */;
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }        if (! SourceDBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SourceDBInstanceIdentifier"];
        }

        // TODO implement code

        var ret = {
            DBInstance: /*St*/{
                DBSecurityGroups: /*Sv*/[ {
                    DBSecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                DBInstanceClass: "",
                LicenseModel: "",
                VpcSecurityGroups: /*Sx*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                DBInstanceIdentifier: "",
                CharacterSetName: "",
                PreferredBackupWindow: "",
                DBSubnetGroup: /*S11*/{
                    Subnets: [ {
                        SubnetIdentifier: "",
                        SubnetAvailabilityZone: /*S14*/{
                            Name: "",
                            ProvisionedIopsCapable: false
                        },
                        SubnetStatus: ""
                    } /*, ...*/ ],
                    DBSubnetGroupDescription: "",
                    DBSubnetGroupName: "",
                    SubnetGroupStatus: "",
                    VpcId: ""
                },
                BackupRetentionPeriod: 0,
                AutoMinorVersionUpgrade: false,
                PreferredMaintenanceWindow: "",
                LatestRestorableTime: now(),
                MultiAZ: false,
                AllocatedStorage: 0,
                ReadReplicaSourceDBInstanceIdentifier: "",
                DBParameterGroups: [ {
                    DBParameterGroupName: "",
                    ParameterApplyStatus: ""
                } /*, ...*/ ],
                PendingModifiedValues: {
                    BackupRetentionPeriod: 0,
                    DBInstanceIdentifier: "",
                    DBInstanceClass: "",
                    MasterUserPassword: "",
                    Iops: 0,
                    Port: 0,
                    AllocatedStorage: 0,
                    EngineVersion: "",
                    MultiAZ: false
                },
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                Engine: "",
                InstanceCreateTime: now(),
                DBInstanceStatus: "",
                EngineVersion: "",
                DBName: "",
                PubliclyAccessible: false,
                Endpoint: {
                    Address: "",
                    Port: 0
                },
                SecondaryAvailabilityZone: "",
                AvailabilityZone: "",
                MasterUsername: "",
                Iops: 0,
                OptionGroupMembership: {
                    OptionGroupName: "",
                    Status: ""
                }
            }
        };
        return [200, ret];
    }
module.exports.DescribeReservedDBInstancesOfferings = function DescribeReservedDBInstancesOfferings(aws) {
        var Duration = aws.params['Duration'];
        var OfferingType = aws.params['OfferingType'];
        var DBInstanceClass = aws.params['DBInstanceClass'];
        var MultiAZ = aws.params['MultiAZ'] /* boolean */;
        var ProductDescription = aws.params['ProductDescription'];
        var Marker = aws.params['Marker'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        var ReservedDBInstancesOfferingId = aws.params['ReservedDBInstancesOfferingId'];


        // TODO implement code

        var ret = {
            Marker: "",
            ReservedDBInstancesOfferings: [ {
                Duration: 0,
                OfferingType: "",
                DBInstanceClass: "",
                MultiAZ: false,
                ProductDescription: "",
                FixedPrice: 0.0 /*double*/,
                ReservedDBInstancesOfferingId: "",
                RecurringCharges: /*S3o*/[ {
                    RecurringChargeFrequency: "",
                    RecurringChargeAmount: 0.0 /*double*/
                } /*, ...*/ ],
                CurrencyCode: "",
                UsagePrice: 0.0 /*double*/
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.AddTagsToResource = function AddTagsToResource(aws) {
        var ResourceName = aws.params['ResourceName'];
        var Tags = aws.params['Tags'];
        if (! ResourceName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResourceName"];
        }        if (! Tags) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Tags"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ResetDBParameterGroup = function ResetDBParameterGroup(aws) {
        var ResetAllParameters = aws.params['ResetAllParameters'] /* boolean */;
        var Parameters = aws.params['Parameters'];
        var DBParameterGroupName = aws.params['DBParameterGroupName'];
        if (! DBParameterGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBParameterGroupName"];
        }

        // TODO implement code

        var ret = /*S3z*/{
            DBParameterGroupName: ""
        };
        return [200, ret];
    }
module.exports.RestoreDBInstanceToPointInTime = function RestoreDBInstanceToPointInTime(aws) {
        var RestoreTime = aws.params['RestoreTime'] /* timestamp */;
        var DBSubnetGroupName = aws.params['DBSubnetGroupName'];
        var TargetDBInstanceIdentifier = aws.params['TargetDBInstanceIdentifier'];
        var LicenseModel = aws.params['LicenseModel'];
        var OptionGroupName = aws.params['OptionGroupName'];
        var DBInstanceClass = aws.params['DBInstanceClass'];
        var DBName = aws.params['DBName'];
        var PubliclyAccessible = aws.params['PubliclyAccessible'] /* boolean */;
        var Engine = aws.params['Engine'];
        var UseLatestRestorableTime = aws.params['UseLatestRestorableTime'] /* boolean */;
        var AutoMinorVersionUpgrade = aws.params['AutoMinorVersionUpgrade'] /* boolean */;
        var MultiAZ = aws.params['MultiAZ'] /* boolean */;
        var Iops = aws.params['Iops'] /* integer */;
        var Port = aws.params['Port'] /* integer */;
        var SourceDBInstanceIdentifier = aws.params['SourceDBInstanceIdentifier'];
        var AvailabilityZone = aws.params['AvailabilityZone'];
        if (! SourceDBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SourceDBInstanceIdentifier"];
        }        if (! TargetDBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TargetDBInstanceIdentifier"];
        }

        // TODO implement code

        var ret = {
            DBInstance: /*St*/{
                DBSecurityGroups: /*Sv*/[ {
                    DBSecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                DBInstanceClass: "",
                LicenseModel: "",
                VpcSecurityGroups: /*Sx*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                DBInstanceIdentifier: "",
                CharacterSetName: "",
                PreferredBackupWindow: "",
                DBSubnetGroup: /*S11*/{
                    Subnets: [ {
                        SubnetIdentifier: "",
                        SubnetAvailabilityZone: /*S14*/{
                            Name: "",
                            ProvisionedIopsCapable: false
                        },
                        SubnetStatus: ""
                    } /*, ...*/ ],
                    DBSubnetGroupDescription: "",
                    DBSubnetGroupName: "",
                    SubnetGroupStatus: "",
                    VpcId: ""
                },
                BackupRetentionPeriod: 0,
                AutoMinorVersionUpgrade: false,
                PreferredMaintenanceWindow: "",
                LatestRestorableTime: now(),
                MultiAZ: false,
                AllocatedStorage: 0,
                ReadReplicaSourceDBInstanceIdentifier: "",
                DBParameterGroups: [ {
                    DBParameterGroupName: "",
                    ParameterApplyStatus: ""
                } /*, ...*/ ],
                PendingModifiedValues: {
                    BackupRetentionPeriod: 0,
                    DBInstanceIdentifier: "",
                    DBInstanceClass: "",
                    MasterUserPassword: "",
                    Iops: 0,
                    Port: 0,
                    AllocatedStorage: 0,
                    EngineVersion: "",
                    MultiAZ: false
                },
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                Engine: "",
                InstanceCreateTime: now(),
                DBInstanceStatus: "",
                EngineVersion: "",
                DBName: "",
                PubliclyAccessible: false,
                Endpoint: {
                    Address: "",
                    Port: 0
                },
                SecondaryAvailabilityZone: "",
                AvailabilityZone: "",
                MasterUsername: "",
                Iops: 0,
                OptionGroupMembership: {
                    OptionGroupName: "",
                    Status: ""
                }
            }
        };
        return [200, ret];
    }
module.exports.PromoteReadReplica = function PromoteReadReplica(aws) {
        var DBInstanceIdentifier = aws.params['DBInstanceIdentifier'];
        var BackupRetentionPeriod = aws.params['BackupRetentionPeriod'] /* integer */;
        var PreferredBackupWindow = aws.params['PreferredBackupWindow'];
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }

        // TODO implement code

        var ret = {
            DBInstance: /*St*/{
                DBSecurityGroups: /*Sv*/[ {
                    DBSecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                DBInstanceClass: "",
                LicenseModel: "",
                VpcSecurityGroups: /*Sx*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                DBInstanceIdentifier: "",
                CharacterSetName: "",
                PreferredBackupWindow: "",
                DBSubnetGroup: /*S11*/{
                    Subnets: [ {
                        SubnetIdentifier: "",
                        SubnetAvailabilityZone: /*S14*/{
                            Name: "",
                            ProvisionedIopsCapable: false
                        },
                        SubnetStatus: ""
                    } /*, ...*/ ],
                    DBSubnetGroupDescription: "",
                    DBSubnetGroupName: "",
                    SubnetGroupStatus: "",
                    VpcId: ""
                },
                BackupRetentionPeriod: 0,
                AutoMinorVersionUpgrade: false,
                PreferredMaintenanceWindow: "",
                LatestRestorableTime: now(),
                MultiAZ: false,
                AllocatedStorage: 0,
                ReadReplicaSourceDBInstanceIdentifier: "",
                DBParameterGroups: [ {
                    DBParameterGroupName: "",
                    ParameterApplyStatus: ""
                } /*, ...*/ ],
                PendingModifiedValues: {
                    BackupRetentionPeriod: 0,
                    DBInstanceIdentifier: "",
                    DBInstanceClass: "",
                    MasterUserPassword: "",
                    Iops: 0,
                    Port: 0,
                    AllocatedStorage: 0,
                    EngineVersion: "",
                    MultiAZ: false
                },
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                Engine: "",
                InstanceCreateTime: now(),
                DBInstanceStatus: "",
                EngineVersion: "",
                DBName: "",
                PubliclyAccessible: false,
                Endpoint: {
                    Address: "",
                    Port: 0
                },
                SecondaryAvailabilityZone: "",
                AvailabilityZone: "",
                MasterUsername: "",
                Iops: 0,
                OptionGroupMembership: {
                    OptionGroupName: "",
                    Status: ""
                }
            }
        };
        return [200, ret];
    }
module.exports.CreateEventSubscription = function CreateEventSubscription(aws) {
        var SourceType = aws.params['SourceType'];
        var SnsTopicArn = aws.params['SnsTopicArn'];
        var SubscriptionName = aws.params['SubscriptionName'];
        var SourceIds = aws.params['SourceIds'];
        var EventCategories = aws.params['EventCategories'];
        var Enabled = aws.params['Enabled'] /* boolean */;
        if (! SubscriptionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubscriptionName"];
        }        if (! SnsTopicArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SnsTopicArn"];
        }

        // TODO implement code

        var ret = {
            EventSubscription: /*S4*/{
                SourceType: "",
                SourceIdsList: /*S5*/[ "" /*, ...*/ ],
                CustSubscriptionId: "",
                CustomerAwsId: "",
                SnsTopicArn: "",
                Id: "",
                EventCategoriesList: /*S6*/[ "" /*, ...*/ ],
                SubscriptionCreationTime: "",
                Enabled: false,
                Status: ""
            }
        };
        return [200, ret];
    }
module.exports.CreateDBParameterGroup = function CreateDBParameterGroup(aws) {
        var DBParameterGroupFamily = aws.params['DBParameterGroupFamily'];
        var Description = aws.params['Description'];
        var DBParameterGroupName = aws.params['DBParameterGroupName'];
        if (! DBParameterGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBParameterGroupName"];
        }        if (! DBParameterGroupFamily) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBParameterGroupFamily"];
        }        if (! Description) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Description"];
        }

        // TODO implement code

        var ret = {
            DBParameterGroup: /*S1c*/{
                DBParameterGroupFamily: "",
                Description: "",
                DBParameterGroupName: ""
            }
        };
        return [200, ret];
    }
module.exports.AuthorizeDBSecurityGroupIngress = function AuthorizeDBSecurityGroupIngress(aws) {
        var EC2SecurityGroupOwnerId = aws.params['EC2SecurityGroupOwnerId'];
        var EC2SecurityGroupId = aws.params['EC2SecurityGroupId'];
        var CIDRIP = aws.params['CIDRIP'];
        var DBSecurityGroupName = aws.params['DBSecurityGroupName'];
        var EC2SecurityGroupName = aws.params['EC2SecurityGroupName'];
        if (! DBSecurityGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSecurityGroupName"];
        }

        // TODO implement code

        var ret = {
            DBSecurityGroup: /*Sd*/{
                DBSecurityGroupDescription: "",
                DBSecurityGroupName: "",
                EC2SecurityGroups: [ {
                    EC2SecurityGroupId: "",
                    EC2SecurityGroupOwnerId: "",
                    EC2SecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                IPRanges: [ {
                    CIDRIP: "",
                    Status: ""
                } /*, ...*/ ],
                OwnerId: "",
                VpcId: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeDBParameterGroups = function DescribeDBParameterGroups(aws) {
        var Marker = aws.params['Marker'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        var DBParameterGroupName = aws.params['DBParameterGroupName'];


        // TODO implement code

        var ret = {
            Marker: "",
            DBParameterGroups: [ /*S1c*/{
                DBParameterGroupFamily: "",
                Description: "",
                DBParameterGroupName: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeReservedDBInstances = function DescribeReservedDBInstances(aws) {
        var Duration = aws.params['Duration'];
        var OfferingType = aws.params['OfferingType'];
        var DBInstanceClass = aws.params['DBInstanceClass'];
        var MultiAZ = aws.params['MultiAZ'] /* boolean */;
        var ProductDescription = aws.params['ProductDescription'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        var Marker = aws.params['Marker'];
        var ReservedDBInstanceId = aws.params['ReservedDBInstanceId'];
        var ReservedDBInstancesOfferingId = aws.params['ReservedDBInstancesOfferingId'];


        // TODO implement code

        var ret = {
            Marker: "",
            ReservedDBInstances: [ /*S3m*/{
                Duration: 0,
                OfferingType: "",
                DBInstanceClass: "",
                ProductDescription: "",
                State: "",
                RecurringCharges: /*S3o*/[ {
                    RecurringChargeFrequency: "",
                    RecurringChargeAmount: 0.0 /*double*/
                } /*, ...*/ ],
                DBInstanceCount: 0,
                ReservedDBInstancesOfferingId: "",
                StartTime: now(),
                MultiAZ: false,
                FixedPrice: 0.0 /*double*/,
                ReservedDBInstanceId: "",
                CurrencyCode: "",
                UsagePrice: 0.0 /*double*/
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ModifyDBSubnetGroup = function ModifyDBSubnetGroup(aws) {
        var DBSubnetGroupDescription = aws.params['DBSubnetGroupDescription'];
        var DBSubnetGroupName = aws.params['DBSubnetGroupName'];
        var SubnetIds = aws.params['SubnetIds'];
        if (! DBSubnetGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSubnetGroupName"];
        }        if (! SubnetIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubnetIds"];
        }

        // TODO implement code

        var ret = {
            DBSubnetGroup: /*S11*/{
                Subnets: [ {
                    SubnetIdentifier: "",
                    SubnetAvailabilityZone: /*S14*/{
                        Name: "",
                        ProvisionedIopsCapable: false
                    },
                    SubnetStatus: ""
                } /*, ...*/ ],
                DBSubnetGroupDescription: "",
                DBSubnetGroupName: "",
                SubnetGroupStatus: "",
                VpcId: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeEventSubscriptions = function DescribeEventSubscriptions(aws) {
        var Marker = aws.params['Marker'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        var SubscriptionName = aws.params['SubscriptionName'];


        // TODO implement code

        var ret = {
            Marker: "",
            EventSubscriptionsList: [ /*S4*/{
                SourceType: "",
                SourceIdsList: /*S5*/[ "" /*, ...*/ ],
                CustSubscriptionId: "",
                CustomerAwsId: "",
                SnsTopicArn: "",
                Id: "",
                EventCategoriesList: /*S6*/[ "" /*, ...*/ ],
                SubscriptionCreationTime: "",
                Enabled: false,
                Status: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteDBSecurityGroup = function DeleteDBSecurityGroup(aws) {
        var DBSecurityGroupName = aws.params['DBSecurityGroupName'];
        if (! DBSecurityGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSecurityGroupName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeDBInstances = function DescribeDBInstances(aws) {
        var DBInstanceIdentifier = aws.params['DBInstanceIdentifier'];
        var Marker = aws.params['Marker'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;


        // TODO implement code

        var ret = {
            Marker: "",
            DBInstances: [ /*St*/{
                DBSecurityGroups: /*Sv*/[ {
                    DBSecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                DBInstanceClass: "",
                LicenseModel: "",
                VpcSecurityGroups: /*Sx*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                DBInstanceIdentifier: "",
                CharacterSetName: "",
                PreferredBackupWindow: "",
                DBSubnetGroup: /*S11*/{
                    Subnets: [ {
                        SubnetIdentifier: "",
                        SubnetAvailabilityZone: /*S14*/{
                            Name: "",
                            ProvisionedIopsCapable: false
                        },
                        SubnetStatus: ""
                    } /*, ...*/ ],
                    DBSubnetGroupDescription: "",
                    DBSubnetGroupName: "",
                    SubnetGroupStatus: "",
                    VpcId: ""
                },
                BackupRetentionPeriod: 0,
                AutoMinorVersionUpgrade: false,
                PreferredMaintenanceWindow: "",
                LatestRestorableTime: now(),
                MultiAZ: false,
                AllocatedStorage: 0,
                ReadReplicaSourceDBInstanceIdentifier: "",
                DBParameterGroups: [ {
                    DBParameterGroupName: "",
                    ParameterApplyStatus: ""
                } /*, ...*/ ],
                PendingModifiedValues: {
                    BackupRetentionPeriod: 0,
                    DBInstanceIdentifier: "",
                    DBInstanceClass: "",
                    MasterUserPassword: "",
                    Iops: 0,
                    Port: 0,
                    AllocatedStorage: 0,
                    EngineVersion: "",
                    MultiAZ: false
                },
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                Engine: "",
                InstanceCreateTime: now(),
                DBInstanceStatus: "",
                EngineVersion: "",
                DBName: "",
                PubliclyAccessible: false,
                Endpoint: {
                    Address: "",
                    Port: 0
                },
                SecondaryAvailabilityZone: "",
                AvailabilityZone: "",
                MasterUsername: "",
                Iops: 0,
                OptionGroupMembership: {
                    OptionGroupName: "",
                    Status: ""
                }
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ModifyDBInstance = function ModifyDBInstance(aws) {
        var DBSecurityGroups = aws.params['DBSecurityGroups'];
        var DBInstanceClass = aws.params['DBInstanceClass'];
        var MasterUserPassword = aws.params['MasterUserPassword'];
        var AllowMajorVersionUpgrade = aws.params['AllowMajorVersionUpgrade'] /* boolean */;
        var DBInstanceIdentifier = aws.params['DBInstanceIdentifier'];
        var OptionGroupName = aws.params['OptionGroupName'];
        var ApplyImmediately = aws.params['ApplyImmediately'] /* boolean */;
        var PreferredBackupWindow = aws.params['PreferredBackupWindow'];
        var DBParameterGroupName = aws.params['DBParameterGroupName'];
        var BackupRetentionPeriod = aws.params['BackupRetentionPeriod'] /* integer */;
        var AutoMinorVersionUpgrade = aws.params['AutoMinorVersionUpgrade'] /* boolean */;
        var PreferredMaintenanceWindow = aws.params['PreferredMaintenanceWindow'];
        var MultiAZ = aws.params['MultiAZ'] /* boolean */;
        var Iops = aws.params['Iops'] /* integer */;
        var VpcSecurityGroupIds = aws.params['VpcSecurityGroupIds'];
        var AllocatedStorage = aws.params['AllocatedStorage'] /* integer */;
        var NewDBInstanceIdentifier = aws.params['NewDBInstanceIdentifier'];
        var EngineVersion = aws.params['EngineVersion'];
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }

        // TODO implement code

        var ret = {
            DBInstance: /*St*/{
                DBSecurityGroups: /*Sv*/[ {
                    DBSecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                DBInstanceClass: "",
                LicenseModel: "",
                VpcSecurityGroups: /*Sx*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                DBInstanceIdentifier: "",
                CharacterSetName: "",
                PreferredBackupWindow: "",
                DBSubnetGroup: /*S11*/{
                    Subnets: [ {
                        SubnetIdentifier: "",
                        SubnetAvailabilityZone: /*S14*/{
                            Name: "",
                            ProvisionedIopsCapable: false
                        },
                        SubnetStatus: ""
                    } /*, ...*/ ],
                    DBSubnetGroupDescription: "",
                    DBSubnetGroupName: "",
                    SubnetGroupStatus: "",
                    VpcId: ""
                },
                BackupRetentionPeriod: 0,
                AutoMinorVersionUpgrade: false,
                PreferredMaintenanceWindow: "",
                LatestRestorableTime: now(),
                MultiAZ: false,
                AllocatedStorage: 0,
                ReadReplicaSourceDBInstanceIdentifier: "",
                DBParameterGroups: [ {
                    DBParameterGroupName: "",
                    ParameterApplyStatus: ""
                } /*, ...*/ ],
                PendingModifiedValues: {
                    BackupRetentionPeriod: 0,
                    DBInstanceIdentifier: "",
                    DBInstanceClass: "",
                    MasterUserPassword: "",
                    Iops: 0,
                    Port: 0,
                    AllocatedStorage: 0,
                    EngineVersion: "",
                    MultiAZ: false
                },
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                Engine: "",
                InstanceCreateTime: now(),
                DBInstanceStatus: "",
                EngineVersion: "",
                DBName: "",
                PubliclyAccessible: false,
                Endpoint: {
                    Address: "",
                    Port: 0
                },
                SecondaryAvailabilityZone: "",
                AvailabilityZone: "",
                MasterUsername: "",
                Iops: 0,
                OptionGroupMembership: {
                    OptionGroupName: "",
                    Status: ""
                }
            }
        };
        return [200, ret];
    }
module.exports.CreateDBSubnetGroup = function CreateDBSubnetGroup(aws) {
        var DBSubnetGroupDescription = aws.params['DBSubnetGroupDescription'];
        var DBSubnetGroupName = aws.params['DBSubnetGroupName'];
        var SubnetIds = aws.params['SubnetIds'];
        if (! DBSubnetGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSubnetGroupName"];
        }        if (! DBSubnetGroupDescription) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSubnetGroupDescription"];
        }        if (! SubnetIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubnetIds"];
        }

        // TODO implement code

        var ret = {
            DBSubnetGroup: /*S11*/{
                Subnets: [ {
                    SubnetIdentifier: "",
                    SubnetAvailabilityZone: /*S14*/{
                        Name: "",
                        ProvisionedIopsCapable: false
                    },
                    SubnetStatus: ""
                } /*, ...*/ ],
                DBSubnetGroupDescription: "",
                DBSubnetGroupName: "",
                SubnetGroupStatus: "",
                VpcId: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeDBEngineVersions = function DescribeDBEngineVersions(aws) {
        var Engine = aws.params['Engine'];
        var DefaultOnly = aws.params['DefaultOnly'] /* boolean */;
        var DBParameterGroupFamily = aws.params['DBParameterGroupFamily'];
        var EngineVersion = aws.params['EngineVersion'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        var ListSupportedCharacterSets = aws.params['ListSupportedCharacterSets'] /* boolean */;
        var Marker = aws.params['Marker'];


        // TODO implement code

        var ret = {
            Marker: "",
            DBEngineVersions: [ {
                Engine: "",
                SupportedCharacterSets: [ /*S25*/{
                    CharacterSetName: "",
                    CharacterSetDescription: ""
                } /*, ...*/ ],
                DefaultCharacterSet: /*S25*/{
                    CharacterSetName: "",
                    CharacterSetDescription: ""
                },
                DBParameterGroupFamily: "",
                EngineVersion: "",
                DBEngineDescription: "",
                DBEngineVersionDescription: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteEventSubscription = function DeleteEventSubscription(aws) {
        var SubscriptionName = aws.params['SubscriptionName'];
        if (! SubscriptionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubscriptionName"];
        }

        // TODO implement code

        var ret = {
            EventSubscription: /*S4*/{
                SourceType: "",
                SourceIdsList: /*S5*/[ "" /*, ...*/ ],
                CustSubscriptionId: "",
                CustomerAwsId: "",
                SnsTopicArn: "",
                Id: "",
                EventCategoriesList: /*S6*/[ "" /*, ...*/ ],
                SubscriptionCreationTime: "",
                Enabled: false,
                Status: ""
            }
        };
        return [200, ret];
    }
module.exports.DeleteOptionGroup = function DeleteOptionGroup(aws) {
        var OptionGroupName = aws.params['OptionGroupName'];
        if (! OptionGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter OptionGroupName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeleteDBSubnetGroup = function DeleteDBSubnetGroup(aws) {
        var DBSubnetGroupName = aws.params['DBSubnetGroupName'];
        if (! DBSubnetGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSubnetGroupName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeleteDBInstance = function DeleteDBInstance(aws) {
        var DBInstanceIdentifier = aws.params['DBInstanceIdentifier'];
        var SkipFinalSnapshot = aws.params['SkipFinalSnapshot'] /* boolean */;
        var FinalDBSnapshotIdentifier = aws.params['FinalDBSnapshotIdentifier'];
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }

        // TODO implement code

        var ret = {
            DBInstance: /*St*/{
                DBSecurityGroups: /*Sv*/[ {
                    DBSecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                DBInstanceClass: "",
                LicenseModel: "",
                VpcSecurityGroups: /*Sx*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                DBInstanceIdentifier: "",
                CharacterSetName: "",
                PreferredBackupWindow: "",
                DBSubnetGroup: /*S11*/{
                    Subnets: [ {
                        SubnetIdentifier: "",
                        SubnetAvailabilityZone: /*S14*/{
                            Name: "",
                            ProvisionedIopsCapable: false
                        },
                        SubnetStatus: ""
                    } /*, ...*/ ],
                    DBSubnetGroupDescription: "",
                    DBSubnetGroupName: "",
                    SubnetGroupStatus: "",
                    VpcId: ""
                },
                BackupRetentionPeriod: 0,
                AutoMinorVersionUpgrade: false,
                PreferredMaintenanceWindow: "",
                LatestRestorableTime: now(),
                MultiAZ: false,
                AllocatedStorage: 0,
                ReadReplicaSourceDBInstanceIdentifier: "",
                DBParameterGroups: [ {
                    DBParameterGroupName: "",
                    ParameterApplyStatus: ""
                } /*, ...*/ ],
                PendingModifiedValues: {
                    BackupRetentionPeriod: 0,
                    DBInstanceIdentifier: "",
                    DBInstanceClass: "",
                    MasterUserPassword: "",
                    Iops: 0,
                    Port: 0,
                    AllocatedStorage: 0,
                    EngineVersion: "",
                    MultiAZ: false
                },
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                Engine: "",
                InstanceCreateTime: now(),
                DBInstanceStatus: "",
                EngineVersion: "",
                DBName: "",
                PubliclyAccessible: false,
                Endpoint: {
                    Address: "",
                    Port: 0
                },
                SecondaryAvailabilityZone: "",
                AvailabilityZone: "",
                MasterUsername: "",
                Iops: 0,
                OptionGroupMembership: {
                    OptionGroupName: "",
                    Status: ""
                }
            }
        };
        return [200, ret];
    }
module.exports.CopyDBSnapshot = function CopyDBSnapshot(aws) {
        var TargetDBSnapshotIdentifier = aws.params['TargetDBSnapshotIdentifier'];
        var SourceDBSnapshotIdentifier = aws.params['SourceDBSnapshotIdentifier'];
        if (! SourceDBSnapshotIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SourceDBSnapshotIdentifier"];
        }        if (! TargetDBSnapshotIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TargetDBSnapshotIdentifier"];
        }

        // TODO implement code

        var ret = {
            DBSnapshot: /*Sk*/{
                SnapshotType: "",
                InstanceCreateTime: now(),
                DBSnapshotIdentifier: "",
                DBInstanceIdentifier: "",
                VpcId: "",
                SnapshotCreateTime: now(),
                Engine: "",
                AvailabilityZone: "",
                MasterUsername: "",
                Iops: 0,
                Port: 0,
                AllocatedStorage: 0,
                EngineVersion: "",
                Status: "",
                LicenseModel: ""
            }
        };
        return [200, ret];
    }
module.exports.CreateDBSnapshot = function CreateDBSnapshot(aws) {
        var DBInstanceIdentifier = aws.params['DBInstanceIdentifier'];
        var DBSnapshotIdentifier = aws.params['DBSnapshotIdentifier'];
        if (! DBSnapshotIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSnapshotIdentifier"];
        }        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }

        // TODO implement code

        var ret = {
            DBSnapshot: /*Sk*/{
                SnapshotType: "",
                InstanceCreateTime: now(),
                DBSnapshotIdentifier: "",
                DBInstanceIdentifier: "",
                VpcId: "",
                SnapshotCreateTime: now(),
                Engine: "",
                AvailabilityZone: "",
                MasterUsername: "",
                Iops: 0,
                Port: 0,
                AllocatedStorage: 0,
                EngineVersion: "",
                Status: "",
                LicenseModel: ""
            }
        };
        return [200, ret];
    }
module.exports.ModifyEventSubscription = function ModifyEventSubscription(aws) {
        var SourceType = aws.params['SourceType'];
        var EventCategories = aws.params['EventCategories'];
        var Enabled = aws.params['Enabled'] /* boolean */;
        var SnsTopicArn = aws.params['SnsTopicArn'];
        var SubscriptionName = aws.params['SubscriptionName'];
        if (! SubscriptionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubscriptionName"];
        }

        // TODO implement code

        var ret = {
            EventSubscription: /*S4*/{
                SourceType: "",
                SourceIdsList: /*S5*/[ "" /*, ...*/ ],
                CustSubscriptionId: "",
                CustomerAwsId: "",
                SnsTopicArn: "",
                Id: "",
                EventCategoriesList: /*S6*/[ "" /*, ...*/ ],
                SubscriptionCreationTime: "",
                Enabled: false,
                Status: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeEventCategories = function DescribeEventCategories(aws) {
        var SourceType = aws.params['SourceType'];


        // TODO implement code

        var ret = {
            EventCategoriesMapList: [ {
                SourceType: "",
                EventCategories: /*S6*/[ "" /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ModifyOptionGroup = function ModifyOptionGroup(aws) {
        var OptionGroupName = aws.params['OptionGroupName'];
        var ApplyImmediately = aws.params['ApplyImmediately'] /* boolean */;
        var OptionsToRemove = aws.params['OptionsToRemove'] /* list */;
        var OptionsToInclude = aws.params['OptionsToInclude'] /* list */;
        if (! OptionGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter OptionGroupName"];
        }

        // TODO implement code

        var ret = {
            OptionGroup: /*S1o*/{
                Options: [ {
                    Port: 0,
                    VpcSecurityGroupMemberships: /*Sx*/[ {
                        Status: "",
                        VpcSecurityGroupId: ""
                    } /*, ...*/ ],
                    DBSecurityGroupMemberships: /*Sv*/[ {
                        DBSecurityGroupName: "",
                        Status: ""
                    } /*, ...*/ ],
                    OptionName: "",
                    OptionDescription: ""
                } /*, ...*/ ],
                EngineName: "",
                OptionGroupDescription: "",
                OptionGroupName: "",
                VpcId: "",
                AllowsVpcAndNonVpcInstanceMemberships: false,
                MajorEngineVersion: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeEvents = function DescribeEvents(aws) {
        var StartTime = aws.params['StartTime'] /* timestamp */;
        var Duration = aws.params['Duration'] /* integer */;
        var SourceType = aws.params['SourceType'];
        var Marker = aws.params['Marker'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        var EventCategories = aws.params['EventCategories'];
        var EndTime = aws.params['EndTime'] /* timestamp */;
        var SourceIdentifier = aws.params['SourceIdentifier'];


        // TODO implement code

        var ret = {
            Marker: "",
            Events: [ {
                SourceType: "",
                Message: "",
                EventCategories: /*S6*/[ "" /*, ...*/ ],
                Date: now(),
                SourceIdentifier: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ModifyDBParameterGroup = function ModifyDBParameterGroup(aws) {
        var Parameters = aws.params['Parameters'];
        var DBParameterGroupName = aws.params['DBParameterGroupName'];
        if (! DBParameterGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBParameterGroupName"];
        }        if (! Parameters) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Parameters"];
        }

        // TODO implement code

        var ret = /*S3z*/{
            DBParameterGroupName: ""
        };
        return [200, ret];
    }
module.exports.DescribeEngineDefaultParameters = function DescribeEngineDefaultParameters(aws) {
        var DBParameterGroupFamily = aws.params['DBParameterGroupFamily'];
        var Marker = aws.params['Marker'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        if (! DBParameterGroupFamily) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBParameterGroupFamily"];
        }

        // TODO implement code

        var ret = {
            EngineDefaults: {
                Parameters: /*S2f*/[ {
                    MinimumEngineVersion: "",
                    Description: "",
                    IsModifiable: false,
                    AllowedValues: "",
                    ApplyType: "",
                    ParameterName: "",
                    ParameterValue: "",
                    DataType: "",
                    ApplyMethod: "",
                    Source: ""
                } /*, ...*/ ],
                DBParameterGroupFamily: "",
                Marker: ""
            }
        };
        return [200, ret];
    }
module.exports.RestoreDBInstanceFromDBSnapshot = function RestoreDBInstanceFromDBSnapshot(aws) {
        var DBSubnetGroupName = aws.params['DBSubnetGroupName'];
        var DBInstanceClass = aws.params['DBInstanceClass'];
        var LicenseModel = aws.params['LicenseModel'];
        var DBSnapshotIdentifier = aws.params['DBSnapshotIdentifier'];
        var DBInstanceIdentifier = aws.params['DBInstanceIdentifier'];
        var OptionGroupName = aws.params['OptionGroupName'];
        var DBName = aws.params['DBName'];
        var PubliclyAccessible = aws.params['PubliclyAccessible'] /* boolean */;
        var Engine = aws.params['Engine'];
        var AutoMinorVersionUpgrade = aws.params['AutoMinorVersionUpgrade'] /* boolean */;
        var AvailabilityZone = aws.params['AvailabilityZone'];
        var MultiAZ = aws.params['MultiAZ'] /* boolean */;
        var Iops = aws.params['Iops'] /* integer */;
        var Port = aws.params['Port'] /* integer */;
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }        if (! DBSnapshotIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSnapshotIdentifier"];
        }

        // TODO implement code

        var ret = {
            DBInstance: /*St*/{
                DBSecurityGroups: /*Sv*/[ {
                    DBSecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                DBInstanceClass: "",
                LicenseModel: "",
                VpcSecurityGroups: /*Sx*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                DBInstanceIdentifier: "",
                CharacterSetName: "",
                PreferredBackupWindow: "",
                DBSubnetGroup: /*S11*/{
                    Subnets: [ {
                        SubnetIdentifier: "",
                        SubnetAvailabilityZone: /*S14*/{
                            Name: "",
                            ProvisionedIopsCapable: false
                        },
                        SubnetStatus: ""
                    } /*, ...*/ ],
                    DBSubnetGroupDescription: "",
                    DBSubnetGroupName: "",
                    SubnetGroupStatus: "",
                    VpcId: ""
                },
                BackupRetentionPeriod: 0,
                AutoMinorVersionUpgrade: false,
                PreferredMaintenanceWindow: "",
                LatestRestorableTime: now(),
                MultiAZ: false,
                AllocatedStorage: 0,
                ReadReplicaSourceDBInstanceIdentifier: "",
                DBParameterGroups: [ {
                    DBParameterGroupName: "",
                    ParameterApplyStatus: ""
                } /*, ...*/ ],
                PendingModifiedValues: {
                    BackupRetentionPeriod: 0,
                    DBInstanceIdentifier: "",
                    DBInstanceClass: "",
                    MasterUserPassword: "",
                    Iops: 0,
                    Port: 0,
                    AllocatedStorage: 0,
                    EngineVersion: "",
                    MultiAZ: false
                },
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                Engine: "",
                InstanceCreateTime: now(),
                DBInstanceStatus: "",
                EngineVersion: "",
                DBName: "",
                PubliclyAccessible: false,
                Endpoint: {
                    Address: "",
                    Port: 0
                },
                SecondaryAvailabilityZone: "",
                AvailabilityZone: "",
                MasterUsername: "",
                Iops: 0,
                OptionGroupMembership: {
                    OptionGroupName: "",
                    Status: ""
                }
            }
        };
        return [200, ret];
    }
module.exports.RebootDBInstance = function RebootDBInstance(aws) {
        var DBInstanceIdentifier = aws.params['DBInstanceIdentifier'];
        var ForceFailover = aws.params['ForceFailover'] /* boolean */;
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }

        // TODO implement code

        var ret = {
            DBInstance: /*St*/{
                DBSecurityGroups: /*Sv*/[ {
                    DBSecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                DBInstanceClass: "",
                LicenseModel: "",
                VpcSecurityGroups: /*Sx*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                DBInstanceIdentifier: "",
                CharacterSetName: "",
                PreferredBackupWindow: "",
                DBSubnetGroup: /*S11*/{
                    Subnets: [ {
                        SubnetIdentifier: "",
                        SubnetAvailabilityZone: /*S14*/{
                            Name: "",
                            ProvisionedIopsCapable: false
                        },
                        SubnetStatus: ""
                    } /*, ...*/ ],
                    DBSubnetGroupDescription: "",
                    DBSubnetGroupName: "",
                    SubnetGroupStatus: "",
                    VpcId: ""
                },
                BackupRetentionPeriod: 0,
                AutoMinorVersionUpgrade: false,
                PreferredMaintenanceWindow: "",
                LatestRestorableTime: now(),
                MultiAZ: false,
                AllocatedStorage: 0,
                ReadReplicaSourceDBInstanceIdentifier: "",
                DBParameterGroups: [ {
                    DBParameterGroupName: "",
                    ParameterApplyStatus: ""
                } /*, ...*/ ],
                PendingModifiedValues: {
                    BackupRetentionPeriod: 0,
                    DBInstanceIdentifier: "",
                    DBInstanceClass: "",
                    MasterUserPassword: "",
                    Iops: 0,
                    Port: 0,
                    AllocatedStorage: 0,
                    EngineVersion: "",
                    MultiAZ: false
                },
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                Engine: "",
                InstanceCreateTime: now(),
                DBInstanceStatus: "",
                EngineVersion: "",
                DBName: "",
                PubliclyAccessible: false,
                Endpoint: {
                    Address: "",
                    Port: 0
                },
                SecondaryAvailabilityZone: "",
                AvailabilityZone: "",
                MasterUsername: "",
                Iops: 0,
                OptionGroupMembership: {
                    OptionGroupName: "",
                    Status: ""
                }
            }
        };
        return [200, ret];
    }
module.exports.DescribeOptionGroupOptions = function DescribeOptionGroupOptions(aws) {
        var EngineName = aws.params['EngineName'];
        var Marker = aws.params['Marker'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        var MajorEngineVersion = aws.params['MajorEngineVersion'];
        if (! EngineName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter EngineName"];
        }

        // TODO implement code

        var ret = {
            OptionGroupOptions: [ {
                EngineName: "",
                Description: "",
                DefaultPort: 0,
                MinimumRequiredMinorEngineVersion: "",
                PortRequired: false,
                OptionsDependedOn: [ "" /*, ...*/ ],
                Name: "",
                MajorEngineVersion: ""
            } /*, ...*/ ],
            Marker: ""
        };
        return [200, ret];
    }
module.exports.DescribeOptionGroups = function DescribeOptionGroups(aws) {
        var OptionGroupName = aws.params['OptionGroupName'];
        var Marker = aws.params['Marker'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        var MajorEngineVersion = aws.params['MajorEngineVersion'];
        var EngineName = aws.params['EngineName'];


        // TODO implement code

        var ret = {
            OptionGroupsList: [ /*S1o*/{
                Options: [ {
                    Port: 0,
                    VpcSecurityGroupMemberships: /*Sx*/[ {
                        Status: "",
                        VpcSecurityGroupId: ""
                    } /*, ...*/ ],
                    DBSecurityGroupMemberships: /*Sv*/[ {
                        DBSecurityGroupName: "",
                        Status: ""
                    } /*, ...*/ ],
                    OptionName: "",
                    OptionDescription: ""
                } /*, ...*/ ],
                EngineName: "",
                OptionGroupDescription: "",
                OptionGroupName: "",
                VpcId: "",
                AllowsVpcAndNonVpcInstanceMemberships: false,
                MajorEngineVersion: ""
            } /*, ...*/ ],
            Marker: ""
        };
        return [200, ret];
    }
module.exports.DeleteDBParameterGroup = function DeleteDBParameterGroup(aws) {
        var DBParameterGroupName = aws.params['DBParameterGroupName'];
        if (! DBParameterGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBParameterGroupName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CreateDBInstance = function CreateDBInstance(aws) {
        var DBSecurityGroups = aws.params['DBSecurityGroups'];
        var DBInstanceClass = aws.params['DBInstanceClass'];
        var MasterUserPassword = aws.params['MasterUserPassword'];
        var DBInstanceIdentifier = aws.params['DBInstanceIdentifier'];
        var OptionGroupName = aws.params['OptionGroupName'];
        var CharacterSetName = aws.params['CharacterSetName'];
        var PreferredBackupWindow = aws.params['PreferredBackupWindow'];
        var DBParameterGroupName = aws.params['DBParameterGroupName'];
        var Engine = aws.params['Engine'];
        var PreferredMaintenanceWindow = aws.params['PreferredMaintenanceWindow'];
        var MultiAZ = aws.params['MultiAZ'] /* boolean */;
        var Port = aws.params['Port'] /* integer */;
        var AllocatedStorage = aws.params['AllocatedStorage'] /* integer */;
        var LicenseModel = aws.params['LicenseModel'];
        var BackupRetentionPeriod = aws.params['BackupRetentionPeriod'] /* integer */;
        var DBSubnetGroupName = aws.params['DBSubnetGroupName'];
        var EngineVersion = aws.params['EngineVersion'];
        var DBName = aws.params['DBName'];
        var PubliclyAccessible = aws.params['PubliclyAccessible'] /* boolean */;
        var AutoMinorVersionUpgrade = aws.params['AutoMinorVersionUpgrade'] /* boolean */;
        var MasterUsername = aws.params['MasterUsername'];
        var Iops = aws.params['Iops'] /* integer */;
        var VpcSecurityGroupIds = aws.params['VpcSecurityGroupIds'];
        var AvailabilityZone = aws.params['AvailabilityZone'];
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }        if (! AllocatedStorage) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AllocatedStorage"];
        }        if (! DBInstanceClass) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceClass"];
        }        if (! Engine) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Engine"];
        }        if (! MasterUsername) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MasterUsername"];
        }        if (! MasterUserPassword) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MasterUserPassword"];
        }

        // TODO implement code

        var ret = {
            DBInstance: /*St*/{
                DBSecurityGroups: /*Sv*/[ {
                    DBSecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                DBInstanceClass: "",
                LicenseModel: "",
                VpcSecurityGroups: /*Sx*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                DBInstanceIdentifier: "",
                CharacterSetName: "",
                PreferredBackupWindow: "",
                DBSubnetGroup: /*S11*/{
                    Subnets: [ {
                        SubnetIdentifier: "",
                        SubnetAvailabilityZone: /*S14*/{
                            Name: "",
                            ProvisionedIopsCapable: false
                        },
                        SubnetStatus: ""
                    } /*, ...*/ ],
                    DBSubnetGroupDescription: "",
                    DBSubnetGroupName: "",
                    SubnetGroupStatus: "",
                    VpcId: ""
                },
                BackupRetentionPeriod: 0,
                AutoMinorVersionUpgrade: false,
                PreferredMaintenanceWindow: "",
                LatestRestorableTime: now(),
                MultiAZ: false,
                AllocatedStorage: 0,
                ReadReplicaSourceDBInstanceIdentifier: "",
                DBParameterGroups: [ {
                    DBParameterGroupName: "",
                    ParameterApplyStatus: ""
                } /*, ...*/ ],
                PendingModifiedValues: {
                    BackupRetentionPeriod: 0,
                    DBInstanceIdentifier: "",
                    DBInstanceClass: "",
                    MasterUserPassword: "",
                    Iops: 0,
                    Port: 0,
                    AllocatedStorage: 0,
                    EngineVersion: "",
                    MultiAZ: false
                },
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                Engine: "",
                InstanceCreateTime: now(),
                DBInstanceStatus: "",
                EngineVersion: "",
                DBName: "",
                PubliclyAccessible: false,
                Endpoint: {
                    Address: "",
                    Port: 0
                },
                SecondaryAvailabilityZone: "",
                AvailabilityZone: "",
                MasterUsername: "",
                Iops: 0,
                OptionGroupMembership: {
                    OptionGroupName: "",
                    Status: ""
                }
            }
        };
        return [200, ret];
    }
module.exports.CreateDBSecurityGroup = function CreateDBSecurityGroup(aws) {
        var DBSecurityGroupDescription = aws.params['DBSecurityGroupDescription'];
        var DBSecurityGroupName = aws.params['DBSecurityGroupName'];
        if (! DBSecurityGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSecurityGroupName"];
        }        if (! DBSecurityGroupDescription) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSecurityGroupDescription"];
        }

        // TODO implement code

        var ret = {
            DBSecurityGroup: /*Sd*/{
                DBSecurityGroupDescription: "",
                DBSecurityGroupName: "",
                EC2SecurityGroups: [ {
                    EC2SecurityGroupId: "",
                    EC2SecurityGroupOwnerId: "",
                    EC2SecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                IPRanges: [ {
                    CIDRIP: "",
                    Status: ""
                } /*, ...*/ ],
                OwnerId: "",
                VpcId: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeDBSubnetGroups = function DescribeDBSubnetGroups(aws) {
        var DBSubnetGroupName = aws.params['DBSubnetGroupName'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        var Marker = aws.params['Marker'];


        // TODO implement code

        var ret = {
            DBSubnetGroups: [ /*S11*/{
                Subnets: [ {
                    SubnetIdentifier: "",
                    SubnetAvailabilityZone: /*S14*/{
                        Name: "",
                        ProvisionedIopsCapable: false
                    },
                    SubnetStatus: ""
                } /*, ...*/ ],
                DBSubnetGroupDescription: "",
                DBSubnetGroupName: "",
                SubnetGroupStatus: "",
                VpcId: ""
            } /*, ...*/ ],
            Marker: ""
        };
        return [200, ret];
    }
module.exports.PurchaseReservedDBInstancesOffering = function PurchaseReservedDBInstancesOffering(aws) {
        var ReservedDBInstanceId = aws.params['ReservedDBInstanceId'];
        var DBInstanceCount = aws.params['DBInstanceCount'] /* integer */;
        var ReservedDBInstancesOfferingId = aws.params['ReservedDBInstancesOfferingId'];
        if (! ReservedDBInstancesOfferingId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ReservedDBInstancesOfferingId"];
        }

        // TODO implement code

        var ret = {
            ReservedDBInstance: /*S3m*/{
                Duration: 0,
                OfferingType: "",
                DBInstanceClass: "",
                ProductDescription: "",
                State: "",
                RecurringCharges: /*S3o*/[ {
                    RecurringChargeFrequency: "",
                    RecurringChargeAmount: 0.0 /*double*/
                } /*, ...*/ ],
                DBInstanceCount: 0,
                ReservedDBInstancesOfferingId: "",
                StartTime: now(),
                MultiAZ: false,
                FixedPrice: 0.0 /*double*/,
                ReservedDBInstanceId: "",
                CurrencyCode: "",
                UsagePrice: 0.0 /*double*/
            }
        };
        return [200, ret];
    }
module.exports.DescribeDBSecurityGroups = function DescribeDBSecurityGroups(aws) {
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        var DBSecurityGroupName = aws.params['DBSecurityGroupName'];
        var Marker = aws.params['Marker'];


        // TODO implement code

        var ret = {
            DBSecurityGroups: [ /*Sd*/{
                DBSecurityGroupDescription: "",
                DBSecurityGroupName: "",
                EC2SecurityGroups: [ {
                    EC2SecurityGroupId: "",
                    EC2SecurityGroupOwnerId: "",
                    EC2SecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                IPRanges: [ {
                    CIDRIP: "",
                    Status: ""
                } /*, ...*/ ],
                OwnerId: "",
                VpcId: ""
            } /*, ...*/ ],
            Marker: ""
        };
        return [200, ret];
    }
module.exports.CreateOptionGroup = function CreateOptionGroup(aws) {
        var OptionGroupDescription = aws.params['OptionGroupDescription'];
        var OptionGroupName = aws.params['OptionGroupName'];
        var MajorEngineVersion = aws.params['MajorEngineVersion'];
        var EngineName = aws.params['EngineName'];
        if (! OptionGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter OptionGroupName"];
        }        if (! EngineName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter EngineName"];
        }        if (! MajorEngineVersion) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MajorEngineVersion"];
        }        if (! OptionGroupDescription) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter OptionGroupDescription"];
        }

        // TODO implement code

        var ret = {
            OptionGroup: /*S1o*/{
                Options: [ {
                    Port: 0,
                    VpcSecurityGroupMemberships: /*Sx*/[ {
                        Status: "",
                        VpcSecurityGroupId: ""
                    } /*, ...*/ ],
                    DBSecurityGroupMemberships: /*Sv*/[ {
                        DBSecurityGroupName: "",
                        Status: ""
                    } /*, ...*/ ],
                    OptionName: "",
                    OptionDescription: ""
                } /*, ...*/ ],
                EngineName: "",
                OptionGroupDescription: "",
                OptionGroupName: "",
                VpcId: "",
                AllowsVpcAndNonVpcInstanceMemberships: false,
                MajorEngineVersion: ""
            }
        };
        return [200, ret];
    }
