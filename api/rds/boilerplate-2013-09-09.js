'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * Amazon Relational Database Service version 2013-09-09
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.RestoreDBInstanceFromDBSnapshot = function RestoreDBInstanceFromDBSnapshot(aws) {
        var OptionGroupName = aws.params.OptionGroupName;
        var Tags = aws.params.Tags;
        var DBSnapshotIdentifier = aws.params.DBSnapshotIdentifier;
        var DBInstanceIdentifier = aws.params.DBInstanceIdentifier;
        var DBInstanceClass = aws.params.DBInstanceClass;
        var Iops = aws.params.Iops /* integer */;
        var MultiAZ = aws.params.MultiAZ /* boolean */;
        var LicenseModel = aws.params.LicenseModel;
        var PubliclyAccessible = aws.params.PubliclyAccessible /* boolean */;
        var AutoMinorVersionUpgrade = aws.params.AutoMinorVersionUpgrade /* boolean */;
        var Engine = aws.params.Engine;
        var AvailabilityZone = aws.params.AvailabilityZone;
        var DBSubnetGroupName = aws.params.DBSubnetGroupName;
        var Port = aws.params.Port /* integer */;
        var DBName = aws.params.DBName;
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }        if (! DBSnapshotIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSnapshotIdentifier"];
        }

        // TODO implement code

        var ret = {
            DBInstance: /*St*/{
                EngineVersion: "",
                ReadReplicaSourceDBInstanceIdentifier: "",
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                Endpoint: {
                    Port: 0,
                    Address: ""
                },
                LatestRestorableTime: now(),
                DBInstanceIdentifier: "",
                OptionGroupMemberships: [ {
                    Status: "",
                    OptionGroupName: ""
                } /*, ...*/ ],
                MasterUsername: "",
                InstanceCreateTime: now(),
                MultiAZ: false,
                Engine: "",
                AvailabilityZone: "",
                VpcSecurityGroups: /*Sx*/[ {
                    VpcSecurityGroupId: "",
                    Status: ""
                } /*, ...*/ ],
                DBName: "",
                PendingModifiedValues: {
                    EngineVersion: "",
                    Iops: 0,
                    DBInstanceIdentifier: "",
                    MultiAZ: false,
                    DBInstanceClass: "",
                    Port: 0,
                    MasterUserPassword: "",
                    BackupRetentionPeriod: 0,
                    AllocatedStorage: 0
                },
                DBParameterGroups: [ {
                    ParameterApplyStatus: "",
                    DBParameterGroupName: ""
                } /*, ...*/ ],
                DBInstanceStatus: "",
                DBInstanceClass: "",
                BackupRetentionPeriod: 0,
                LicenseModel: "",
                SecondaryAvailabilityZone: "",
                PubliclyAccessible: false,
                AutoMinorVersionUpgrade: false,
                DBSubnetGroup: /*S11*/{
                    DBSubnetGroupName: "",
                    DBSubnetGroupDescription: "",
                    Subnets: [ {
                        SubnetAvailabilityZone: /*S14*/{
                            Name: "",
                            ProvisionedIopsCapable: false
                        },
                        SubnetIdentifier: "",
                        SubnetStatus: ""
                    } /*, ...*/ ],
                    VpcId: "",
                    SubnetGroupStatus: ""
                },
                PreferredBackupWindow: "",
                Iops: 0,
                DBSecurityGroups: /*Sv*/[ {
                    DBSecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                CharacterSetName: "",
                PreferredMaintenanceWindow: "",
                StatusInfos: [ {
                    Message: "",
                    Normal: false,
                    StatusType: "",
                    Status: ""
                } /*, ...*/ ],
                AllocatedStorage: 0
            }
        };
        return [200, ret];
    }
module.exports.DescribeEvents = function DescribeEvents(aws) {
        var Filters = aws.params.Filters;
        var Duration = aws.params.Duration /* integer */;
        var EndTime = aws.params.EndTime /* timestamp */;
        var EventCategories = aws.params.EventCategories;
        var Marker = aws.params.Marker;
        var StartTime = aws.params.StartTime /* timestamp */;
        var SourceIdentifier = aws.params.SourceIdentifier;
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var SourceType = aws.params.SourceType;


        // TODO implement code

        var ret = {
            Events: [ {
                SourceIdentifier: "",
                Message: "",
                SourceType: "",
                Date: now(),
                EventCategories: /*S6*/[ "" /*, ...*/ ]
            } /*, ...*/ ],
            Marker: ""
        };
        return [200, ret];
    }
module.exports.ModifyEventSubscription = function ModifyEventSubscription(aws) {
        var SnsTopicArn = aws.params.SnsTopicArn;
        var SourceType = aws.params.SourceType;
        var EventCategories = aws.params.EventCategories;
        var Enabled = aws.params.Enabled /* boolean */;
        var SubscriptionName = aws.params.SubscriptionName;
        if (! SubscriptionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubscriptionName"];
        }

        // TODO implement code

        var ret = {
            EventSubscription: /*S4*/{
                SourceIdsList: /*S5*/[ "" /*, ...*/ ],
                CustomerAwsId: "",
                EventCategoriesList: /*S6*/[ "" /*, ...*/ ],
                CustSubscriptionId: "",
                SnsTopicArn: "",
                Enabled: false,
                Status: "",
                SourceType: "",
                SubscriptionCreationTime: ""
            }
        };
        return [200, ret];
    }
module.exports.AuthorizeDBSecurityGroupIngress = function AuthorizeDBSecurityGroupIngress(aws) {
        var CIDRIP = aws.params.CIDRIP;
        var EC2SecurityGroupName = aws.params.EC2SecurityGroupName;
        var EC2SecurityGroupOwnerId = aws.params.EC2SecurityGroupOwnerId;
        var DBSecurityGroupName = aws.params.DBSecurityGroupName;
        var EC2SecurityGroupId = aws.params.EC2SecurityGroupId;
        if (! DBSecurityGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSecurityGroupName"];
        }

        // TODO implement code

        var ret = {
            DBSecurityGroup: /*Sd*/{
                EC2SecurityGroups: [ {
                    EC2SecurityGroupId: "",
                    EC2SecurityGroupOwnerId: "",
                    EC2SecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                IPRanges: [ {
                    CIDRIP: "",
                    Status: ""
                } /*, ...*/ ],
                DBSecurityGroupName: "",
                VpcId: "",
                DBSecurityGroupDescription: "",
                OwnerId: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeDBLogFiles = function DescribeDBLogFiles(aws) {
        var DBInstanceIdentifier = aws.params.DBInstanceIdentifier;
        var Marker = aws.params.Marker;
        var Filters = aws.params.Filters;
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var FileSize = aws.params.FileSize /* long */;
        var FilenameContains = aws.params.FilenameContains;
        var FileLastWritten = aws.params.FileLastWritten /* long */;
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }

        // TODO implement code

        var ret = {
            Marker: "",
            DescribeDBLogFiles: [ {
                LastWritten: 0 /*long*/,
                LogFileName: "",
                Size: 0 /*long*/
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateDBSecurityGroup = function CreateDBSecurityGroup(aws) {
        var DBSecurityGroupDescription = aws.params.DBSecurityGroupDescription;
        var Tags = aws.params.Tags;
        var DBSecurityGroupName = aws.params.DBSecurityGroupName;
        if (! DBSecurityGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSecurityGroupName"];
        }        if (! DBSecurityGroupDescription) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSecurityGroupDescription"];
        }

        // TODO implement code

        var ret = {
            DBSecurityGroup: /*Sd*/{
                EC2SecurityGroups: [ {
                    EC2SecurityGroupId: "",
                    EC2SecurityGroupOwnerId: "",
                    EC2SecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                IPRanges: [ {
                    CIDRIP: "",
                    Status: ""
                } /*, ...*/ ],
                DBSecurityGroupName: "",
                VpcId: "",
                DBSecurityGroupDescription: "",
                OwnerId: ""
            }
        };
        return [200, ret];
    }
module.exports.DeleteDBParameterGroup = function DeleteDBParameterGroup(aws) {
        var DBParameterGroupName = aws.params.DBParameterGroupName;
        if (! DBParameterGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBParameterGroupName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ResetDBParameterGroup = function ResetDBParameterGroup(aws) {
        var DBParameterGroupName = aws.params.DBParameterGroupName;
        var Parameters = aws.params.Parameters;
        var ResetAllParameters = aws.params.ResetAllParameters /* boolean */;
        if (! DBParameterGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBParameterGroupName"];
        }

        // TODO implement code

        var ret = /*S4g*/{
            DBParameterGroupName: ""
        };
        return [200, ret];
    }
module.exports.CreateDBInstance = function CreateDBInstance(aws) {
        var EngineVersion = aws.params.EngineVersion;
        var DBInstanceIdentifier = aws.params.DBInstanceIdentifier;
        var OptionGroupName = aws.params.OptionGroupName;
        var MultiAZ = aws.params.MultiAZ /* boolean */;
        var MasterUsername = aws.params.MasterUsername;
        var DBParameterGroupName = aws.params.DBParameterGroupName;
        var Engine = aws.params.Engine;
        var AvailabilityZone = aws.params.AvailabilityZone;
        var DBSubnetGroupName = aws.params.DBSubnetGroupName;
        var Port = aws.params.Port /* integer */;
        var MasterUserPassword = aws.params.MasterUserPassword;
        var DBName = aws.params.DBName;
        var PreferredMaintenanceWindow = aws.params.PreferredMaintenanceWindow;
        var DBInstanceClass = aws.params.DBInstanceClass;
        var Tags = aws.params.Tags;
        var BackupRetentionPeriod = aws.params.BackupRetentionPeriod /* integer */;
        var LicenseModel = aws.params.LicenseModel;
        var PubliclyAccessible = aws.params.PubliclyAccessible /* boolean */;
        var AutoMinorVersionUpgrade = aws.params.AutoMinorVersionUpgrade /* boolean */;
        var PreferredBackupWindow = aws.params.PreferredBackupWindow;
        var Iops = aws.params.Iops /* integer */;
        var DBSecurityGroups = aws.params.DBSecurityGroups;
        var CharacterSetName = aws.params.CharacterSetName;
        var VpcSecurityGroupIds = aws.params.VpcSecurityGroupIds;
        var AllocatedStorage = aws.params.AllocatedStorage /* integer */;
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }        if (! AllocatedStorage) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AllocatedStorage"];
        }        if (! DBInstanceClass) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceClass"];
        }        if (! Engine) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Engine"];
        }        if (! MasterUsername) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MasterUsername"];
        }        if (! MasterUserPassword) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MasterUserPassword"];
        }

        // TODO implement code

        var ret = {
            DBInstance: /*St*/{
                EngineVersion: "",
                ReadReplicaSourceDBInstanceIdentifier: "",
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                Endpoint: {
                    Port: 0,
                    Address: ""
                },
                LatestRestorableTime: now(),
                DBInstanceIdentifier: "",
                OptionGroupMemberships: [ {
                    Status: "",
                    OptionGroupName: ""
                } /*, ...*/ ],
                MasterUsername: "",
                InstanceCreateTime: now(),
                MultiAZ: false,
                Engine: "",
                AvailabilityZone: "",
                VpcSecurityGroups: /*Sx*/[ {
                    VpcSecurityGroupId: "",
                    Status: ""
                } /*, ...*/ ],
                DBName: "",
                PendingModifiedValues: {
                    EngineVersion: "",
                    Iops: 0,
                    DBInstanceIdentifier: "",
                    MultiAZ: false,
                    DBInstanceClass: "",
                    Port: 0,
                    MasterUserPassword: "",
                    BackupRetentionPeriod: 0,
                    AllocatedStorage: 0
                },
                DBParameterGroups: [ {
                    ParameterApplyStatus: "",
                    DBParameterGroupName: ""
                } /*, ...*/ ],
                DBInstanceStatus: "",
                DBInstanceClass: "",
                BackupRetentionPeriod: 0,
                LicenseModel: "",
                SecondaryAvailabilityZone: "",
                PubliclyAccessible: false,
                AutoMinorVersionUpgrade: false,
                DBSubnetGroup: /*S11*/{
                    DBSubnetGroupName: "",
                    DBSubnetGroupDescription: "",
                    Subnets: [ {
                        SubnetAvailabilityZone: /*S14*/{
                            Name: "",
                            ProvisionedIopsCapable: false
                        },
                        SubnetIdentifier: "",
                        SubnetStatus: ""
                    } /*, ...*/ ],
                    VpcId: "",
                    SubnetGroupStatus: ""
                },
                PreferredBackupWindow: "",
                Iops: 0,
                DBSecurityGroups: /*Sv*/[ {
                    DBSecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                CharacterSetName: "",
                PreferredMaintenanceWindow: "",
                StatusInfos: [ {
                    Message: "",
                    Normal: false,
                    StatusType: "",
                    Status: ""
                } /*, ...*/ ],
                AllocatedStorage: 0
            }
        };
        return [200, ret];
    }
module.exports.AddTagsToResource = function AddTagsToResource(aws) {
        var Tags = aws.params.Tags;
        var ResourceName = aws.params.ResourceName;
        if (! ResourceName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResourceName"];
        }        if (! Tags) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Tags"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CreateDBInstanceReadReplica = function CreateDBInstanceReadReplica(aws) {
        var OptionGroupName = aws.params.OptionGroupName;
        var AutoMinorVersionUpgrade = aws.params.AutoMinorVersionUpgrade /* boolean */;
        var SourceDBInstanceIdentifier = aws.params.SourceDBInstanceIdentifier;
        var Iops = aws.params.Iops /* integer */;
        var AvailabilityZone = aws.params.AvailabilityZone;
        var Tags = aws.params.Tags;
        var DBInstanceClass = aws.params.DBInstanceClass;
        var Port = aws.params.Port /* integer */;
        var DBInstanceIdentifier = aws.params.DBInstanceIdentifier;
        var PubliclyAccessible = aws.params.PubliclyAccessible /* boolean */;
        var DBSubnetGroupName = aws.params.DBSubnetGroupName;
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }        if (! SourceDBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SourceDBInstanceIdentifier"];
        }

        // TODO implement code

        var ret = {
            DBInstance: /*St*/{
                EngineVersion: "",
                ReadReplicaSourceDBInstanceIdentifier: "",
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                Endpoint: {
                    Port: 0,
                    Address: ""
                },
                LatestRestorableTime: now(),
                DBInstanceIdentifier: "",
                OptionGroupMemberships: [ {
                    Status: "",
                    OptionGroupName: ""
                } /*, ...*/ ],
                MasterUsername: "",
                InstanceCreateTime: now(),
                MultiAZ: false,
                Engine: "",
                AvailabilityZone: "",
                VpcSecurityGroups: /*Sx*/[ {
                    VpcSecurityGroupId: "",
                    Status: ""
                } /*, ...*/ ],
                DBName: "",
                PendingModifiedValues: {
                    EngineVersion: "",
                    Iops: 0,
                    DBInstanceIdentifier: "",
                    MultiAZ: false,
                    DBInstanceClass: "",
                    Port: 0,
                    MasterUserPassword: "",
                    BackupRetentionPeriod: 0,
                    AllocatedStorage: 0
                },
                DBParameterGroups: [ {
                    ParameterApplyStatus: "",
                    DBParameterGroupName: ""
                } /*, ...*/ ],
                DBInstanceStatus: "",
                DBInstanceClass: "",
                BackupRetentionPeriod: 0,
                LicenseModel: "",
                SecondaryAvailabilityZone: "",
                PubliclyAccessible: false,
                AutoMinorVersionUpgrade: false,
                DBSubnetGroup: /*S11*/{
                    DBSubnetGroupName: "",
                    DBSubnetGroupDescription: "",
                    Subnets: [ {
                        SubnetAvailabilityZone: /*S14*/{
                            Name: "",
                            ProvisionedIopsCapable: false
                        },
                        SubnetIdentifier: "",
                        SubnetStatus: ""
                    } /*, ...*/ ],
                    VpcId: "",
                    SubnetGroupStatus: ""
                },
                PreferredBackupWindow: "",
                Iops: 0,
                DBSecurityGroups: /*Sv*/[ {
                    DBSecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                CharacterSetName: "",
                PreferredMaintenanceWindow: "",
                StatusInfos: [ {
                    Message: "",
                    Normal: false,
                    StatusType: "",
                    Status: ""
                } /*, ...*/ ],
                AllocatedStorage: 0
            }
        };
        return [200, ret];
    }
module.exports.DescribeEventCategories = function DescribeEventCategories(aws) {
        var Filters = aws.params.Filters;
        var SourceType = aws.params.SourceType;


        // TODO implement code

        var ret = {
            EventCategoriesMapList: [ {
                SourceType: "",
                EventCategories: /*S6*/[ "" /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteDBSubnetGroup = function DeleteDBSubnetGroup(aws) {
        var DBSubnetGroupName = aws.params.DBSubnetGroupName;
        if (! DBSubnetGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSubnetGroupName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DownloadDBLogFilePortion = function DownloadDBLogFilePortion(aws) {
        var LogFileName = aws.params.LogFileName;
        var NumberOfLines = aws.params.NumberOfLines /* integer */;
        var Marker = aws.params.Marker;
        var DBInstanceIdentifier = aws.params.DBInstanceIdentifier;
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }        if (! LogFileName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LogFileName"];
        }

        // TODO implement code

        var ret = {
            AdditionalDataPending: false,
            Marker: "",
            LogFileData: ""
        };
        return [200, ret];
    }
module.exports.RebootDBInstance = function RebootDBInstance(aws) {
        var DBInstanceIdentifier = aws.params.DBInstanceIdentifier;
        var ForceFailover = aws.params.ForceFailover /* boolean */;
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }

        // TODO implement code

        var ret = {
            DBInstance: /*St*/{
                EngineVersion: "",
                ReadReplicaSourceDBInstanceIdentifier: "",
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                Endpoint: {
                    Port: 0,
                    Address: ""
                },
                LatestRestorableTime: now(),
                DBInstanceIdentifier: "",
                OptionGroupMemberships: [ {
                    Status: "",
                    OptionGroupName: ""
                } /*, ...*/ ],
                MasterUsername: "",
                InstanceCreateTime: now(),
                MultiAZ: false,
                Engine: "",
                AvailabilityZone: "",
                VpcSecurityGroups: /*Sx*/[ {
                    VpcSecurityGroupId: "",
                    Status: ""
                } /*, ...*/ ],
                DBName: "",
                PendingModifiedValues: {
                    EngineVersion: "",
                    Iops: 0,
                    DBInstanceIdentifier: "",
                    MultiAZ: false,
                    DBInstanceClass: "",
                    Port: 0,
                    MasterUserPassword: "",
                    BackupRetentionPeriod: 0,
                    AllocatedStorage: 0
                },
                DBParameterGroups: [ {
                    ParameterApplyStatus: "",
                    DBParameterGroupName: ""
                } /*, ...*/ ],
                DBInstanceStatus: "",
                DBInstanceClass: "",
                BackupRetentionPeriod: 0,
                LicenseModel: "",
                SecondaryAvailabilityZone: "",
                PubliclyAccessible: false,
                AutoMinorVersionUpgrade: false,
                DBSubnetGroup: /*S11*/{
                    DBSubnetGroupName: "",
                    DBSubnetGroupDescription: "",
                    Subnets: [ {
                        SubnetAvailabilityZone: /*S14*/{
                            Name: "",
                            ProvisionedIopsCapable: false
                        },
                        SubnetIdentifier: "",
                        SubnetStatus: ""
                    } /*, ...*/ ],
                    VpcId: "",
                    SubnetGroupStatus: ""
                },
                PreferredBackupWindow: "",
                Iops: 0,
                DBSecurityGroups: /*Sv*/[ {
                    DBSecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                CharacterSetName: "",
                PreferredMaintenanceWindow: "",
                StatusInfos: [ {
                    Message: "",
                    Normal: false,
                    StatusType: "",
                    Status: ""
                } /*, ...*/ ],
                AllocatedStorage: 0
            }
        };
        return [200, ret];
    }
module.exports.DescribeOrderableDBInstanceOptions = function DescribeOrderableDBInstanceOptions(aws) {
        var EngineVersion = aws.params.EngineVersion;
        var Marker = aws.params.Marker;
        var Filters = aws.params.Filters;
        var Engine = aws.params.Engine;
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var DBInstanceClass = aws.params.DBInstanceClass;
        var Vpc = aws.params.Vpc /* boolean */;
        var LicenseModel = aws.params.LicenseModel;
        if (! Engine) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Engine"];
        }

        // TODO implement code

        var ret = {
            OrderableDBInstanceOptions: [ {
                EngineVersion: "",
                AvailabilityZones: [ /*S14*/{
                    Name: "",
                    ProvisionedIopsCapable: false
                } /*, ...*/ ],
                Engine: "",
                DBInstanceClass: "",
                MultiAZCapable: false,
                Vpc: false,
                ReadReplicaCapable: false,
                LicenseModel: ""
            } /*, ...*/ ],
            Marker: ""
        };
        return [200, ret];
    }
module.exports.DescribeDBParameters = function DescribeDBParameters(aws) {
        var Filters = aws.params.Filters;
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var DBParameterGroupName = aws.params.DBParameterGroupName;
        var Source = aws.params.Source;
        var Marker = aws.params.Marker;
        if (! DBParameterGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBParameterGroupName"];
        }

        // TODO implement code

        var ret = {
            Marker: "",
            Parameters: /*S2s*/[ {
                ApplyType: "",
                AllowedValues: "",
                ApplyMethod: "",
                Source: "",
                IsModifiable: false,
                ParameterName: "",
                DataType: "",
                ParameterValue: "",
                Description: "",
                MinimumEngineVersion: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.RemoveSourceIdentifierFromSubscription = function RemoveSourceIdentifierFromSubscription(aws) {
        var SourceIdentifier = aws.params.SourceIdentifier;
        var SubscriptionName = aws.params.SubscriptionName;
        if (! SubscriptionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubscriptionName"];
        }        if (! SourceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SourceIdentifier"];
        }

        // TODO implement code

        var ret = {
            EventSubscription: /*S4*/{
                SourceIdsList: /*S5*/[ "" /*, ...*/ ],
                CustomerAwsId: "",
                EventCategoriesList: /*S6*/[ "" /*, ...*/ ],
                CustSubscriptionId: "",
                SnsTopicArn: "",
                Enabled: false,
                Status: "",
                SourceType: "",
                SubscriptionCreationTime: ""
            }
        };
        return [200, ret];
    }
module.exports.RestoreDBInstanceToPointInTime = function RestoreDBInstanceToPointInTime(aws) {
        var OptionGroupName = aws.params.OptionGroupName;
        var Tags = aws.params.Tags;
        var DBInstanceClass = aws.params.DBInstanceClass;
        var Iops = aws.params.Iops /* integer */;
        var MultiAZ = aws.params.MultiAZ /* boolean */;
        var LicenseModel = aws.params.LicenseModel;
        var RestoreTime = aws.params.RestoreTime /* timestamp */;
        var UseLatestRestorableTime = aws.params.UseLatestRestorableTime /* boolean */;
        var PubliclyAccessible = aws.params.PubliclyAccessible /* boolean */;
        var AutoMinorVersionUpgrade = aws.params.AutoMinorVersionUpgrade /* boolean */;
        var SourceDBInstanceIdentifier = aws.params.SourceDBInstanceIdentifier;
        var DBName = aws.params.DBName;
        var Engine = aws.params.Engine;
        var AvailabilityZone = aws.params.AvailabilityZone;
        var DBSubnetGroupName = aws.params.DBSubnetGroupName;
        var Port = aws.params.Port /* integer */;
        var TargetDBInstanceIdentifier = aws.params.TargetDBInstanceIdentifier;
        if (! SourceDBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SourceDBInstanceIdentifier"];
        }        if (! TargetDBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TargetDBInstanceIdentifier"];
        }

        // TODO implement code

        var ret = {
            DBInstance: /*St*/{
                EngineVersion: "",
                ReadReplicaSourceDBInstanceIdentifier: "",
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                Endpoint: {
                    Port: 0,
                    Address: ""
                },
                LatestRestorableTime: now(),
                DBInstanceIdentifier: "",
                OptionGroupMemberships: [ {
                    Status: "",
                    OptionGroupName: ""
                } /*, ...*/ ],
                MasterUsername: "",
                InstanceCreateTime: now(),
                MultiAZ: false,
                Engine: "",
                AvailabilityZone: "",
                VpcSecurityGroups: /*Sx*/[ {
                    VpcSecurityGroupId: "",
                    Status: ""
                } /*, ...*/ ],
                DBName: "",
                PendingModifiedValues: {
                    EngineVersion: "",
                    Iops: 0,
                    DBInstanceIdentifier: "",
                    MultiAZ: false,
                    DBInstanceClass: "",
                    Port: 0,
                    MasterUserPassword: "",
                    BackupRetentionPeriod: 0,
                    AllocatedStorage: 0
                },
                DBParameterGroups: [ {
                    ParameterApplyStatus: "",
                    DBParameterGroupName: ""
                } /*, ...*/ ],
                DBInstanceStatus: "",
                DBInstanceClass: "",
                BackupRetentionPeriod: 0,
                LicenseModel: "",
                SecondaryAvailabilityZone: "",
                PubliclyAccessible: false,
                AutoMinorVersionUpgrade: false,
                DBSubnetGroup: /*S11*/{
                    DBSubnetGroupName: "",
                    DBSubnetGroupDescription: "",
                    Subnets: [ {
                        SubnetAvailabilityZone: /*S14*/{
                            Name: "",
                            ProvisionedIopsCapable: false
                        },
                        SubnetIdentifier: "",
                        SubnetStatus: ""
                    } /*, ...*/ ],
                    VpcId: "",
                    SubnetGroupStatus: ""
                },
                PreferredBackupWindow: "",
                Iops: 0,
                DBSecurityGroups: /*Sv*/[ {
                    DBSecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                CharacterSetName: "",
                PreferredMaintenanceWindow: "",
                StatusInfos: [ {
                    Message: "",
                    Normal: false,
                    StatusType: "",
                    Status: ""
                } /*, ...*/ ],
                AllocatedStorage: 0
            }
        };
        return [200, ret];
    }
module.exports.DescribeDBParameterGroups = function DescribeDBParameterGroups(aws) {
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var DBParameterGroupName = aws.params.DBParameterGroupName;
        var Filters = aws.params.Filters;
        var Marker = aws.params.Marker;


        // TODO implement code

        var ret = {
            DBParameterGroups: [ /*S1f*/{
                DBParameterGroupName: "",
                Description: "",
                DBParameterGroupFamily: ""
            } /*, ...*/ ],
            Marker: ""
        };
        return [200, ret];
    }
module.exports.DeleteDBInstance = function DeleteDBInstance(aws) {
        var FinalDBSnapshotIdentifier = aws.params.FinalDBSnapshotIdentifier;
        var SkipFinalSnapshot = aws.params.SkipFinalSnapshot /* boolean */;
        var DBInstanceIdentifier = aws.params.DBInstanceIdentifier;
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }

        // TODO implement code

        var ret = {
            DBInstance: /*St*/{
                EngineVersion: "",
                ReadReplicaSourceDBInstanceIdentifier: "",
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                Endpoint: {
                    Port: 0,
                    Address: ""
                },
                LatestRestorableTime: now(),
                DBInstanceIdentifier: "",
                OptionGroupMemberships: [ {
                    Status: "",
                    OptionGroupName: ""
                } /*, ...*/ ],
                MasterUsername: "",
                InstanceCreateTime: now(),
                MultiAZ: false,
                Engine: "",
                AvailabilityZone: "",
                VpcSecurityGroups: /*Sx*/[ {
                    VpcSecurityGroupId: "",
                    Status: ""
                } /*, ...*/ ],
                DBName: "",
                PendingModifiedValues: {
                    EngineVersion: "",
                    Iops: 0,
                    DBInstanceIdentifier: "",
                    MultiAZ: false,
                    DBInstanceClass: "",
                    Port: 0,
                    MasterUserPassword: "",
                    BackupRetentionPeriod: 0,
                    AllocatedStorage: 0
                },
                DBParameterGroups: [ {
                    ParameterApplyStatus: "",
                    DBParameterGroupName: ""
                } /*, ...*/ ],
                DBInstanceStatus: "",
                DBInstanceClass: "",
                BackupRetentionPeriod: 0,
                LicenseModel: "",
                SecondaryAvailabilityZone: "",
                PubliclyAccessible: false,
                AutoMinorVersionUpgrade: false,
                DBSubnetGroup: /*S11*/{
                    DBSubnetGroupName: "",
                    DBSubnetGroupDescription: "",
                    Subnets: [ {
                        SubnetAvailabilityZone: /*S14*/{
                            Name: "",
                            ProvisionedIopsCapable: false
                        },
                        SubnetIdentifier: "",
                        SubnetStatus: ""
                    } /*, ...*/ ],
                    VpcId: "",
                    SubnetGroupStatus: ""
                },
                PreferredBackupWindow: "",
                Iops: 0,
                DBSecurityGroups: /*Sv*/[ {
                    DBSecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                CharacterSetName: "",
                PreferredMaintenanceWindow: "",
                StatusInfos: [ {
                    Message: "",
                    Normal: false,
                    StatusType: "",
                    Status: ""
                } /*, ...*/ ],
                AllocatedStorage: 0
            }
        };
        return [200, ret];
    }
module.exports.ModifyDBParameterGroup = function ModifyDBParameterGroup(aws) {
        var DBParameterGroupName = aws.params.DBParameterGroupName;
        var Parameters = aws.params.Parameters;
        if (! DBParameterGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBParameterGroupName"];
        }        if (! Parameters) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Parameters"];
        }

        // TODO implement code

        var ret = /*S4g*/{
            DBParameterGroupName: ""
        };
        return [200, ret];
    }
module.exports.DescribeDBSecurityGroups = function DescribeDBSecurityGroups(aws) {
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var Marker = aws.params.Marker;
        var Filters = aws.params.Filters;
        var DBSecurityGroupName = aws.params.DBSecurityGroupName;


        // TODO implement code

        var ret = {
            DBSecurityGroups: [ /*Sd*/{
                EC2SecurityGroups: [ {
                    EC2SecurityGroupId: "",
                    EC2SecurityGroupOwnerId: "",
                    EC2SecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                IPRanges: [ {
                    CIDRIP: "",
                    Status: ""
                } /*, ...*/ ],
                DBSecurityGroupName: "",
                VpcId: "",
                DBSecurityGroupDescription: "",
                OwnerId: ""
            } /*, ...*/ ],
            Marker: ""
        };
        return [200, ret];
    }
module.exports.DescribeReservedDBInstances = function DescribeReservedDBInstances(aws) {
        var ReservedDBInstancesOfferingId = aws.params.ReservedDBInstancesOfferingId;
        var OfferingType = aws.params.OfferingType;
        var ReservedDBInstanceId = aws.params.ReservedDBInstanceId;
        var ProductDescription = aws.params.ProductDescription;
        var Filters = aws.params.Filters;
        var Marker = aws.params.Marker;
        var Duration = aws.params.Duration;
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var DBInstanceClass = aws.params.DBInstanceClass;
        var MultiAZ = aws.params.MultiAZ /* boolean */;


        // TODO implement code

        var ret = {
            ReservedDBInstances: [ /*S41*/{
                ReservedDBInstancesOfferingId: "",
                ReservedDBInstanceId: "",
                ProductDescription: "",
                OfferingType: "",
                DBInstanceClass: "",
                MultiAZ: false,
                RecurringCharges: /*S43*/[ {
                    RecurringChargeAmount: 0.0 /*double*/,
                    RecurringChargeFrequency: ""
                } /*, ...*/ ],
                FixedPrice: 0.0 /*double*/,
                StartTime: now(),
                Duration: 0,
                DBInstanceCount: 0,
                UsagePrice: 0.0 /*double*/,
                State: "",
                CurrencyCode: ""
            } /*, ...*/ ],
            Marker: ""
        };
        return [200, ret];
    }
module.exports.DeleteDBSnapshot = function DeleteDBSnapshot(aws) {
        var DBSnapshotIdentifier = aws.params.DBSnapshotIdentifier;
        if (! DBSnapshotIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSnapshotIdentifier"];
        }

        // TODO implement code

        var ret = {
            DBSnapshot: /*Sk*/{
                EngineVersion: "",
                PercentProgress: 0,
                OptionGroupName: "",
                VpcId: "",
                DBSnapshotIdentifier: "",
                AllocatedStorage: 0,
                DBInstanceIdentifier: "",
                Iops: 0,
                LicenseModel: "",
                SnapshotCreateTime: now(),
                MasterUsername: "",
                SnapshotType: "",
                InstanceCreateTime: now(),
                SourceRegion: "",
                Engine: "",
                AvailabilityZone: "",
                Port: 0,
                Status: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeDBInstances = function DescribeDBInstances(aws) {
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var Marker = aws.params.Marker;
        var Filters = aws.params.Filters;
        var DBInstanceIdentifier = aws.params.DBInstanceIdentifier;


        // TODO implement code

        var ret = {
            Marker: "",
            DBInstances: [ /*St*/{
                EngineVersion: "",
                ReadReplicaSourceDBInstanceIdentifier: "",
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                Endpoint: {
                    Port: 0,
                    Address: ""
                },
                LatestRestorableTime: now(),
                DBInstanceIdentifier: "",
                OptionGroupMemberships: [ {
                    Status: "",
                    OptionGroupName: ""
                } /*, ...*/ ],
                MasterUsername: "",
                InstanceCreateTime: now(),
                MultiAZ: false,
                Engine: "",
                AvailabilityZone: "",
                VpcSecurityGroups: /*Sx*/[ {
                    VpcSecurityGroupId: "",
                    Status: ""
                } /*, ...*/ ],
                DBName: "",
                PendingModifiedValues: {
                    EngineVersion: "",
                    Iops: 0,
                    DBInstanceIdentifier: "",
                    MultiAZ: false,
                    DBInstanceClass: "",
                    Port: 0,
                    MasterUserPassword: "",
                    BackupRetentionPeriod: 0,
                    AllocatedStorage: 0
                },
                DBParameterGroups: [ {
                    ParameterApplyStatus: "",
                    DBParameterGroupName: ""
                } /*, ...*/ ],
                DBInstanceStatus: "",
                DBInstanceClass: "",
                BackupRetentionPeriod: 0,
                LicenseModel: "",
                SecondaryAvailabilityZone: "",
                PubliclyAccessible: false,
                AutoMinorVersionUpgrade: false,
                DBSubnetGroup: /*S11*/{
                    DBSubnetGroupName: "",
                    DBSubnetGroupDescription: "",
                    Subnets: [ {
                        SubnetAvailabilityZone: /*S14*/{
                            Name: "",
                            ProvisionedIopsCapable: false
                        },
                        SubnetIdentifier: "",
                        SubnetStatus: ""
                    } /*, ...*/ ],
                    VpcId: "",
                    SubnetGroupStatus: ""
                },
                PreferredBackupWindow: "",
                Iops: 0,
                DBSecurityGroups: /*Sv*/[ {
                    DBSecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                CharacterSetName: "",
                PreferredMaintenanceWindow: "",
                StatusInfos: [ {
                    Message: "",
                    Normal: false,
                    StatusType: "",
                    Status: ""
                } /*, ...*/ ],
                AllocatedStorage: 0
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeOptionGroups = function DescribeOptionGroups(aws) {
        var Filters = aws.params.Filters;
        var Marker = aws.params.Marker;
        var OptionGroupName = aws.params.OptionGroupName;
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var EngineName = aws.params.EngineName;
        var MajorEngineVersion = aws.params.MajorEngineVersion;


        // TODO implement code

        var ret = {
            OptionGroupsList: [ /*S1r*/{
                Options: [ {
                    OptionSettings: [ /*S1v*/{
                        Name: "",
                        DefaultValue: "",
                        Value: "",
                        IsModifiable: false,
                        DataType: "",
                        IsCollection: false,
                        AllowedValues: "",
                        Description: "",
                        ApplyType: ""
                    } /*, ...*/ ],
                    VpcSecurityGroupMemberships: /*Sx*/[ {
                        VpcSecurityGroupId: "",
                        Status: ""
                    } /*, ...*/ ],
                    OptionName: "",
                    OptionDescription: "",
                    Port: 0,
                    Persistent: false,
                    DBSecurityGroupMemberships: /*Sv*/[ {
                        DBSecurityGroupName: "",
                        Status: ""
                    } /*, ...*/ ],
                    Permanent: false
                } /*, ...*/ ],
                AllowsVpcAndNonVpcInstanceMemberships: false,
                OptionGroupDescription: "",
                VpcId: "",
                OptionGroupName: "",
                EngineName: "",
                MajorEngineVersion: ""
            } /*, ...*/ ],
            Marker: ""
        };
        return [200, ret];
    }
module.exports.DescribeEventSubscriptions = function DescribeEventSubscriptions(aws) {
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var Marker = aws.params.Marker;
        var Filters = aws.params.Filters;
        var SubscriptionName = aws.params.SubscriptionName;


        // TODO implement code

        var ret = {
            Marker: "",
            EventSubscriptionsList: [ /*S4*/{
                SourceIdsList: /*S5*/[ "" /*, ...*/ ],
                CustomerAwsId: "",
                EventCategoriesList: /*S6*/[ "" /*, ...*/ ],
                CustSubscriptionId: "",
                SnsTopicArn: "",
                Enabled: false,
                Status: "",
                SourceType: "",
                SubscriptionCreationTime: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.PurchaseReservedDBInstancesOffering = function PurchaseReservedDBInstancesOffering(aws) {
        var ReservedDBInstancesOfferingId = aws.params.ReservedDBInstancesOfferingId;
        var ReservedDBInstanceId = aws.params.ReservedDBInstanceId;
        var Tags = aws.params.Tags;
        var DBInstanceCount = aws.params.DBInstanceCount /* integer */;
        if (! ReservedDBInstancesOfferingId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ReservedDBInstancesOfferingId"];
        }

        // TODO implement code

        var ret = {
            ReservedDBInstance: /*S41*/{
                ReservedDBInstancesOfferingId: "",
                ReservedDBInstanceId: "",
                ProductDescription: "",
                OfferingType: "",
                DBInstanceClass: "",
                MultiAZ: false,
                RecurringCharges: /*S43*/[ {
                    RecurringChargeAmount: 0.0 /*double*/,
                    RecurringChargeFrequency: ""
                } /*, ...*/ ],
                FixedPrice: 0.0 /*double*/,
                StartTime: now(),
                Duration: 0,
                DBInstanceCount: 0,
                UsagePrice: 0.0 /*double*/,
                State: "",
                CurrencyCode: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeOptionGroupOptions = function DescribeOptionGroupOptions(aws) {
        var Filters = aws.params.Filters;
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var EngineName = aws.params.EngineName;
        var MajorEngineVersion = aws.params.MajorEngineVersion;
        var Marker = aws.params.Marker;
        if (! EngineName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter EngineName"];
        }

        // TODO implement code

        var ret = {
            Marker: "",
            OptionGroupOptions: [ {
                Name: "",
                OptionGroupOptionSettings: [ {
                    DefaultValue: "",
                    ApplyType: "",
                    SettingName: "",
                    IsModifiable: false,
                    SettingDescription: "",
                    AllowedValues: ""
                } /*, ...*/ ],
                DefaultPort: 0,
                MajorEngineVersion: "",
                Permanent: false,
                MinimumRequiredMinorEngineVersion: "",
                EngineName: "",
                Description: "",
                Persistent: false,
                OptionsDependedOn: [ "" /*, ...*/ ],
                PortRequired: false
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateDBSubnetGroup = function CreateDBSubnetGroup(aws) {
        var DBSubnetGroupName = aws.params.DBSubnetGroupName;
        var DBSubnetGroupDescription = aws.params.DBSubnetGroupDescription;
        var SubnetIds = aws.params.SubnetIds;
        var Tags = aws.params.Tags;
        if (! DBSubnetGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSubnetGroupName"];
        }        if (! DBSubnetGroupDescription) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSubnetGroupDescription"];
        }        if (! SubnetIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubnetIds"];
        }

        // TODO implement code

        var ret = {
            DBSubnetGroup: /*S11*/{
                DBSubnetGroupName: "",
                DBSubnetGroupDescription: "",
                Subnets: [ {
                    SubnetAvailabilityZone: /*S14*/{
                        Name: "",
                        ProvisionedIopsCapable: false
                    },
                    SubnetIdentifier: "",
                    SubnetStatus: ""
                } /*, ...*/ ],
                VpcId: "",
                SubnetGroupStatus: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeEngineDefaultParameters = function DescribeEngineDefaultParameters(aws) {
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var DBParameterGroupFamily = aws.params.DBParameterGroupFamily;
        var Filters = aws.params.Filters;
        var Marker = aws.params.Marker;
        if (! DBParameterGroupFamily) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBParameterGroupFamily"];
        }

        // TODO implement code

        var ret = {
            EngineDefaults: {
                DBParameterGroupFamily: "",
                Marker: "",
                Parameters: /*S2s*/[ {
                    ApplyType: "",
                    AllowedValues: "",
                    ApplyMethod: "",
                    Source: "",
                    IsModifiable: false,
                    ParameterName: "",
                    DataType: "",
                    ParameterValue: "",
                    Description: "",
                    MinimumEngineVersion: ""
                } /*, ...*/ ]
            }
        };
        return [200, ret];
    }
module.exports.RevokeDBSecurityGroupIngress = function RevokeDBSecurityGroupIngress(aws) {
        var CIDRIP = aws.params.CIDRIP;
        var EC2SecurityGroupName = aws.params.EC2SecurityGroupName;
        var EC2SecurityGroupOwnerId = aws.params.EC2SecurityGroupOwnerId;
        var DBSecurityGroupName = aws.params.DBSecurityGroupName;
        var EC2SecurityGroupId = aws.params.EC2SecurityGroupId;
        if (! DBSecurityGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSecurityGroupName"];
        }

        // TODO implement code

        var ret = {
            DBSecurityGroup: /*Sd*/{
                EC2SecurityGroups: [ {
                    EC2SecurityGroupId: "",
                    EC2SecurityGroupOwnerId: "",
                    EC2SecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                IPRanges: [ {
                    CIDRIP: "",
                    Status: ""
                } /*, ...*/ ],
                DBSecurityGroupName: "",
                VpcId: "",
                DBSecurityGroupDescription: "",
                OwnerId: ""
            }
        };
        return [200, ret];
    }
module.exports.DeleteDBSecurityGroup = function DeleteDBSecurityGroup(aws) {
        var DBSecurityGroupName = aws.params.DBSecurityGroupName;
        if (! DBSecurityGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSecurityGroupName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CreateDBSnapshot = function CreateDBSnapshot(aws) {
        var Tags = aws.params.Tags;
        var DBInstanceIdentifier = aws.params.DBInstanceIdentifier;
        var DBSnapshotIdentifier = aws.params.DBSnapshotIdentifier;
        if (! DBSnapshotIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSnapshotIdentifier"];
        }        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }

        // TODO implement code

        var ret = {
            DBSnapshot: /*Sk*/{
                EngineVersion: "",
                PercentProgress: 0,
                OptionGroupName: "",
                VpcId: "",
                DBSnapshotIdentifier: "",
                AllocatedStorage: 0,
                DBInstanceIdentifier: "",
                Iops: 0,
                LicenseModel: "",
                SnapshotCreateTime: now(),
                MasterUsername: "",
                SnapshotType: "",
                InstanceCreateTime: now(),
                SourceRegion: "",
                Engine: "",
                AvailabilityZone: "",
                Port: 0,
                Status: ""
            }
        };
        return [200, ret];
    }
module.exports.ModifyDBSubnetGroup = function ModifyDBSubnetGroup(aws) {
        var DBSubnetGroupName = aws.params.DBSubnetGroupName;
        var DBSubnetGroupDescription = aws.params.DBSubnetGroupDescription;
        var SubnetIds = aws.params.SubnetIds;
        if (! DBSubnetGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSubnetGroupName"];
        }        if (! SubnetIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubnetIds"];
        }

        // TODO implement code

        var ret = {
            DBSubnetGroup: /*S11*/{
                DBSubnetGroupName: "",
                DBSubnetGroupDescription: "",
                Subnets: [ {
                    SubnetAvailabilityZone: /*S14*/{
                        Name: "",
                        ProvisionedIopsCapable: false
                    },
                    SubnetIdentifier: "",
                    SubnetStatus: ""
                } /*, ...*/ ],
                VpcId: "",
                SubnetGroupStatus: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeReservedDBInstancesOfferings = function DescribeReservedDBInstancesOfferings(aws) {
        var ReservedDBInstancesOfferingId = aws.params.ReservedDBInstancesOfferingId;
        var OfferingType = aws.params.OfferingType;
        var Marker = aws.params.Marker;
        var ProductDescription = aws.params.ProductDescription;
        var Filters = aws.params.Filters;
        var Duration = aws.params.Duration;
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var DBInstanceClass = aws.params.DBInstanceClass;
        var MultiAZ = aws.params.MultiAZ /* boolean */;


        // TODO implement code

        var ret = {
            Marker: "",
            ReservedDBInstancesOfferings: [ {
                ReservedDBInstancesOfferingId: "",
                FixedPrice: 0.0 /*double*/,
                OfferingType: "",
                ProductDescription: "",
                Duration: 0,
                MultiAZ: false,
                DBInstanceClass: "",
                UsagePrice: 0.0 /*double*/,
                RecurringCharges: /*S43*/[ {
                    RecurringChargeAmount: 0.0 /*double*/,
                    RecurringChargeFrequency: ""
                } /*, ...*/ ],
                CurrencyCode: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.AddSourceIdentifierToSubscription = function AddSourceIdentifierToSubscription(aws) {
        var SourceIdentifier = aws.params.SourceIdentifier;
        var SubscriptionName = aws.params.SubscriptionName;
        if (! SubscriptionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubscriptionName"];
        }        if (! SourceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SourceIdentifier"];
        }

        // TODO implement code

        var ret = {
            EventSubscription: /*S4*/{
                SourceIdsList: /*S5*/[ "" /*, ...*/ ],
                CustomerAwsId: "",
                EventCategoriesList: /*S6*/[ "" /*, ...*/ ],
                CustSubscriptionId: "",
                SnsTopicArn: "",
                Enabled: false,
                Status: "",
                SourceType: "",
                SubscriptionCreationTime: ""
            }
        };
        return [200, ret];
    }
module.exports.ModifyDBInstance = function ModifyDBInstance(aws) {
        var EngineVersion = aws.params.EngineVersion;
        var ApplyImmediately = aws.params.ApplyImmediately /* boolean */;
        var MultiAZ = aws.params.MultiAZ /* boolean */;
        var DBInstanceClass = aws.params.DBInstanceClass;
        var OptionGroupName = aws.params.OptionGroupName;
        var DBInstanceIdentifier = aws.params.DBInstanceIdentifier;
        var BackupRetentionPeriod = aws.params.BackupRetentionPeriod /* integer */;
        var NewDBInstanceIdentifier = aws.params.NewDBInstanceIdentifier;
        var DBParameterGroupName = aws.params.DBParameterGroupName;
        var AutoMinorVersionUpgrade = aws.params.AutoMinorVersionUpgrade /* boolean */;
        var PreferredBackupWindow = aws.params.PreferredBackupWindow;
        var Iops = aws.params.Iops /* integer */;
        var DBSecurityGroups = aws.params.DBSecurityGroups;
        var VpcSecurityGroupIds = aws.params.VpcSecurityGroupIds;
        var MasterUserPassword = aws.params.MasterUserPassword;
        var AllowMajorVersionUpgrade = aws.params.AllowMajorVersionUpgrade /* boolean */;
        var PreferredMaintenanceWindow = aws.params.PreferredMaintenanceWindow;
        var AllocatedStorage = aws.params.AllocatedStorage /* integer */;
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }

        // TODO implement code

        var ret = {
            DBInstance: /*St*/{
                EngineVersion: "",
                ReadReplicaSourceDBInstanceIdentifier: "",
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                Endpoint: {
                    Port: 0,
                    Address: ""
                },
                LatestRestorableTime: now(),
                DBInstanceIdentifier: "",
                OptionGroupMemberships: [ {
                    Status: "",
                    OptionGroupName: ""
                } /*, ...*/ ],
                MasterUsername: "",
                InstanceCreateTime: now(),
                MultiAZ: false,
                Engine: "",
                AvailabilityZone: "",
                VpcSecurityGroups: /*Sx*/[ {
                    VpcSecurityGroupId: "",
                    Status: ""
                } /*, ...*/ ],
                DBName: "",
                PendingModifiedValues: {
                    EngineVersion: "",
                    Iops: 0,
                    DBInstanceIdentifier: "",
                    MultiAZ: false,
                    DBInstanceClass: "",
                    Port: 0,
                    MasterUserPassword: "",
                    BackupRetentionPeriod: 0,
                    AllocatedStorage: 0
                },
                DBParameterGroups: [ {
                    ParameterApplyStatus: "",
                    DBParameterGroupName: ""
                } /*, ...*/ ],
                DBInstanceStatus: "",
                DBInstanceClass: "",
                BackupRetentionPeriod: 0,
                LicenseModel: "",
                SecondaryAvailabilityZone: "",
                PubliclyAccessible: false,
                AutoMinorVersionUpgrade: false,
                DBSubnetGroup: /*S11*/{
                    DBSubnetGroupName: "",
                    DBSubnetGroupDescription: "",
                    Subnets: [ {
                        SubnetAvailabilityZone: /*S14*/{
                            Name: "",
                            ProvisionedIopsCapable: false
                        },
                        SubnetIdentifier: "",
                        SubnetStatus: ""
                    } /*, ...*/ ],
                    VpcId: "",
                    SubnetGroupStatus: ""
                },
                PreferredBackupWindow: "",
                Iops: 0,
                DBSecurityGroups: /*Sv*/[ {
                    DBSecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                CharacterSetName: "",
                PreferredMaintenanceWindow: "",
                StatusInfos: [ {
                    Message: "",
                    Normal: false,
                    StatusType: "",
                    Status: ""
                } /*, ...*/ ],
                AllocatedStorage: 0
            }
        };
        return [200, ret];
    }
module.exports.CreateOptionGroup = function CreateOptionGroup(aws) {
        var EngineName = aws.params.EngineName;
        var MajorEngineVersion = aws.params.MajorEngineVersion;
        var Tags = aws.params.Tags;
        var OptionGroupDescription = aws.params.OptionGroupDescription;
        var OptionGroupName = aws.params.OptionGroupName;
        if (! OptionGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter OptionGroupName"];
        }        if (! EngineName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter EngineName"];
        }        if (! MajorEngineVersion) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MajorEngineVersion"];
        }        if (! OptionGroupDescription) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter OptionGroupDescription"];
        }

        // TODO implement code

        var ret = {
            OptionGroup: /*S1r*/{
                Options: [ {
                    OptionSettings: [ /*S1v*/{
                        Name: "",
                        DefaultValue: "",
                        Value: "",
                        IsModifiable: false,
                        DataType: "",
                        IsCollection: false,
                        AllowedValues: "",
                        Description: "",
                        ApplyType: ""
                    } /*, ...*/ ],
                    VpcSecurityGroupMemberships: /*Sx*/[ {
                        VpcSecurityGroupId: "",
                        Status: ""
                    } /*, ...*/ ],
                    OptionName: "",
                    OptionDescription: "",
                    Port: 0,
                    Persistent: false,
                    DBSecurityGroupMemberships: /*Sv*/[ {
                        DBSecurityGroupName: "",
                        Status: ""
                    } /*, ...*/ ],
                    Permanent: false
                } /*, ...*/ ],
                AllowsVpcAndNonVpcInstanceMemberships: false,
                OptionGroupDescription: "",
                VpcId: "",
                OptionGroupName: "",
                EngineName: "",
                MajorEngineVersion: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeDBEngineVersions = function DescribeDBEngineVersions(aws) {
        var EngineVersion = aws.params.EngineVersion;
        var Marker = aws.params.Marker;
        var Filters = aws.params.Filters;
        var Engine = aws.params.Engine;
        var ListSupportedCharacterSets = aws.params.ListSupportedCharacterSets /* boolean */;
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var DBParameterGroupFamily = aws.params.DBParameterGroupFamily;
        var DefaultOnly = aws.params.DefaultOnly /* boolean */;


        // TODO implement code

        var ret = {
            Marker: "",
            DBEngineVersions: [ {
                EngineVersion: "",
                DefaultCharacterSet: /*S2d*/{
                    CharacterSetName: "",
                    CharacterSetDescription: ""
                },
                SupportedCharacterSets: [ /*S2d*/{
                    CharacterSetName: "",
                    CharacterSetDescription: ""
                } /*, ...*/ ],
                Engine: "",
                DBEngineDescription: "",
                DBParameterGroupFamily: "",
                DBEngineVersionDescription: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ListTagsForResource = function ListTagsForResource(aws) {
        var Filters = aws.params.Filters;
        var ResourceName = aws.params.ResourceName;
        if (! ResourceName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResourceName"];
        }

        // TODO implement code

        var ret = {
            TagList: /*S9*/[ {
                Value: "",
                Key: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateEventSubscription = function CreateEventSubscription(aws) {
        var EventCategories = aws.params.EventCategories;
        var Enabled = aws.params.Enabled /* boolean */;
        var SnsTopicArn = aws.params.SnsTopicArn;
        var SourceType = aws.params.SourceType;
        var Tags = aws.params.Tags;
        var SubscriptionName = aws.params.SubscriptionName;
        var SourceIds = aws.params.SourceIds;
        if (! SubscriptionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubscriptionName"];
        }        if (! SnsTopicArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SnsTopicArn"];
        }

        // TODO implement code

        var ret = {
            EventSubscription: /*S4*/{
                SourceIdsList: /*S5*/[ "" /*, ...*/ ],
                CustomerAwsId: "",
                EventCategoriesList: /*S6*/[ "" /*, ...*/ ],
                CustSubscriptionId: "",
                SnsTopicArn: "",
                Enabled: false,
                Status: "",
                SourceType: "",
                SubscriptionCreationTime: ""
            }
        };
        return [200, ret];
    }
module.exports.DeleteEventSubscription = function DeleteEventSubscription(aws) {
        var SubscriptionName = aws.params.SubscriptionName;
        if (! SubscriptionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubscriptionName"];
        }

        // TODO implement code

        var ret = {
            EventSubscription: /*S4*/{
                SourceIdsList: /*S5*/[ "" /*, ...*/ ],
                CustomerAwsId: "",
                EventCategoriesList: /*S6*/[ "" /*, ...*/ ],
                CustSubscriptionId: "",
                SnsTopicArn: "",
                Enabled: false,
                Status: "",
                SourceType: "",
                SubscriptionCreationTime: ""
            }
        };
        return [200, ret];
    }
module.exports.DeleteOptionGroup = function DeleteOptionGroup(aws) {
        var OptionGroupName = aws.params.OptionGroupName;
        if (! OptionGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter OptionGroupName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CopyDBSnapshot = function CopyDBSnapshot(aws) {
        var SourceDBSnapshotIdentifier = aws.params.SourceDBSnapshotIdentifier;
        var TargetDBSnapshotIdentifier = aws.params.TargetDBSnapshotIdentifier;
        var Tags = aws.params.Tags;
        if (! SourceDBSnapshotIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SourceDBSnapshotIdentifier"];
        }        if (! TargetDBSnapshotIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TargetDBSnapshotIdentifier"];
        }

        // TODO implement code

        var ret = {
            DBSnapshot: /*Sk*/{
                EngineVersion: "",
                PercentProgress: 0,
                OptionGroupName: "",
                VpcId: "",
                DBSnapshotIdentifier: "",
                AllocatedStorage: 0,
                DBInstanceIdentifier: "",
                Iops: 0,
                LicenseModel: "",
                SnapshotCreateTime: now(),
                MasterUsername: "",
                SnapshotType: "",
                InstanceCreateTime: now(),
                SourceRegion: "",
                Engine: "",
                AvailabilityZone: "",
                Port: 0,
                Status: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeDBSubnetGroups = function DescribeDBSubnetGroups(aws) {
        var DBSubnetGroupName = aws.params.DBSubnetGroupName;
        var Marker = aws.params.Marker;
        var Filters = aws.params.Filters;
        var MaxRecords = aws.params.MaxRecords /* integer */;


        // TODO implement code

        var ret = {
            Marker: "",
            DBSubnetGroups: [ /*S11*/{
                DBSubnetGroupName: "",
                DBSubnetGroupDescription: "",
                Subnets: [ {
                    SubnetAvailabilityZone: /*S14*/{
                        Name: "",
                        ProvisionedIopsCapable: false
                    },
                    SubnetIdentifier: "",
                    SubnetStatus: ""
                } /*, ...*/ ],
                VpcId: "",
                SubnetGroupStatus: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ModifyOptionGroup = function ModifyOptionGroup(aws) {
        var ApplyImmediately = aws.params.ApplyImmediately /* boolean */;
        var OptionsToInclude = aws.params.OptionsToInclude /* list */;
        var OptionsToRemove = aws.params.OptionsToRemove /* list */;
        var OptionGroupName = aws.params.OptionGroupName;
        if (! OptionGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter OptionGroupName"];
        }

        // TODO implement code

        var ret = {
            OptionGroup: /*S1r*/{
                Options: [ {
                    OptionSettings: [ /*S1v*/{
                        Name: "",
                        DefaultValue: "",
                        Value: "",
                        IsModifiable: false,
                        DataType: "",
                        IsCollection: false,
                        AllowedValues: "",
                        Description: "",
                        ApplyType: ""
                    } /*, ...*/ ],
                    VpcSecurityGroupMemberships: /*Sx*/[ {
                        VpcSecurityGroupId: "",
                        Status: ""
                    } /*, ...*/ ],
                    OptionName: "",
                    OptionDescription: "",
                    Port: 0,
                    Persistent: false,
                    DBSecurityGroupMemberships: /*Sv*/[ {
                        DBSecurityGroupName: "",
                        Status: ""
                    } /*, ...*/ ],
                    Permanent: false
                } /*, ...*/ ],
                AllowsVpcAndNonVpcInstanceMemberships: false,
                OptionGroupDescription: "",
                VpcId: "",
                OptionGroupName: "",
                EngineName: "",
                MajorEngineVersion: ""
            }
        };
        return [200, ret];
    }
module.exports.CreateDBParameterGroup = function CreateDBParameterGroup(aws) {
        var DBParameterGroupName = aws.params.DBParameterGroupName;
        var Description = aws.params.Description;
        var Tags = aws.params.Tags;
        var DBParameterGroupFamily = aws.params.DBParameterGroupFamily;
        if (! DBParameterGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBParameterGroupName"];
        }        if (! DBParameterGroupFamily) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBParameterGroupFamily"];
        }        if (! Description) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Description"];
        }

        // TODO implement code

        var ret = {
            DBParameterGroup: /*S1f*/{
                DBParameterGroupName: "",
                Description: "",
                DBParameterGroupFamily: ""
            }
        };
        return [200, ret];
    }
module.exports.PromoteReadReplica = function PromoteReadReplica(aws) {
        var DBInstanceIdentifier = aws.params.DBInstanceIdentifier;
        var PreferredBackupWindow = aws.params.PreferredBackupWindow;
        var BackupRetentionPeriod = aws.params.BackupRetentionPeriod /* integer */;
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }

        // TODO implement code

        var ret = {
            DBInstance: /*St*/{
                EngineVersion: "",
                ReadReplicaSourceDBInstanceIdentifier: "",
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                Endpoint: {
                    Port: 0,
                    Address: ""
                },
                LatestRestorableTime: now(),
                DBInstanceIdentifier: "",
                OptionGroupMemberships: [ {
                    Status: "",
                    OptionGroupName: ""
                } /*, ...*/ ],
                MasterUsername: "",
                InstanceCreateTime: now(),
                MultiAZ: false,
                Engine: "",
                AvailabilityZone: "",
                VpcSecurityGroups: /*Sx*/[ {
                    VpcSecurityGroupId: "",
                    Status: ""
                } /*, ...*/ ],
                DBName: "",
                PendingModifiedValues: {
                    EngineVersion: "",
                    Iops: 0,
                    DBInstanceIdentifier: "",
                    MultiAZ: false,
                    DBInstanceClass: "",
                    Port: 0,
                    MasterUserPassword: "",
                    BackupRetentionPeriod: 0,
                    AllocatedStorage: 0
                },
                DBParameterGroups: [ {
                    ParameterApplyStatus: "",
                    DBParameterGroupName: ""
                } /*, ...*/ ],
                DBInstanceStatus: "",
                DBInstanceClass: "",
                BackupRetentionPeriod: 0,
                LicenseModel: "",
                SecondaryAvailabilityZone: "",
                PubliclyAccessible: false,
                AutoMinorVersionUpgrade: false,
                DBSubnetGroup: /*S11*/{
                    DBSubnetGroupName: "",
                    DBSubnetGroupDescription: "",
                    Subnets: [ {
                        SubnetAvailabilityZone: /*S14*/{
                            Name: "",
                            ProvisionedIopsCapable: false
                        },
                        SubnetIdentifier: "",
                        SubnetStatus: ""
                    } /*, ...*/ ],
                    VpcId: "",
                    SubnetGroupStatus: ""
                },
                PreferredBackupWindow: "",
                Iops: 0,
                DBSecurityGroups: /*Sv*/[ {
                    DBSecurityGroupName: "",
                    Status: ""
                } /*, ...*/ ],
                CharacterSetName: "",
                PreferredMaintenanceWindow: "",
                StatusInfos: [ {
                    Message: "",
                    Normal: false,
                    StatusType: "",
                    Status: ""
                } /*, ...*/ ],
                AllocatedStorage: 0
            }
        };
        return [200, ret];
    }
module.exports.RemoveTagsFromResource = function RemoveTagsFromResource(aws) {
        var TagKeys = aws.params.TagKeys /* list */;
        var ResourceName = aws.params.ResourceName;
        if (! ResourceName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResourceName"];
        }        if (! TagKeys) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TagKeys"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeDBSnapshots = function DescribeDBSnapshots(aws) {
        var SnapshotType = aws.params.SnapshotType;
        var Filters = aws.params.Filters;
        var Marker = aws.params.Marker;
        var DBSnapshotIdentifier = aws.params.DBSnapshotIdentifier;
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var DBInstanceIdentifier = aws.params.DBInstanceIdentifier;


        // TODO implement code

        var ret = {
            Marker: "",
            DBSnapshots: [ /*Sk*/{
                EngineVersion: "",
                PercentProgress: 0,
                OptionGroupName: "",
                VpcId: "",
                DBSnapshotIdentifier: "",
                AllocatedStorage: 0,
                DBInstanceIdentifier: "",
                Iops: 0,
                LicenseModel: "",
                SnapshotCreateTime: now(),
                MasterUsername: "",
                SnapshotType: "",
                InstanceCreateTime: now(),
                SourceRegion: "",
                Engine: "",
                AvailabilityZone: "",
                Port: 0,
                Status: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
