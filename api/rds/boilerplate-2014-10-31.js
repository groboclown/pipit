'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * Amazon Relational Database Service version 2014-10-31
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol query
require('../../lib/aws-common/shape_http')('query', module.exports, 'http://rds.amazonaws.com/doc/2014-10-31/')
module.exports.RestoreDBClusterFromSnapshot = function RestoreDBClusterFromSnapshot(aws) {
        var Tags = aws.params['Tags'];
        var Port = aws.params['Port'] /* integer */;
        var AvailabilityZones = aws.params['AvailabilityZones'];
        var DBSubnetGroupName = aws.params['DBSubnetGroupName'];
        var VpcSecurityGroupIds = aws.params['VpcSecurityGroupIds'];
        var EngineVersion = aws.params['EngineVersion'];
        var DatabaseName = aws.params['DatabaseName'];
        var KmsKeyId = aws.params['KmsKeyId'];
        var OptionGroupName = aws.params['OptionGroupName'];
        var SnapshotIdentifier = aws.params['SnapshotIdentifier'];
        var DBClusterIdentifier = aws.params['DBClusterIdentifier'];
        var Engine = aws.params['Engine'];
        if (! DBClusterIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBClusterIdentifier"];
        }
        if (! SnapshotIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SnapshotIdentifier"];
        }
        if (! Engine) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Engine"];
        }


        // TODO implement code

        var ret = {
            DBCluster: /*S1f*/{
                Port: 0,
                AllocatedStorage: 0,
                VpcSecurityGroups: /*S1a*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                AvailabilityZones: /*Sr*/[ "" /*, ...*/ ],
                PreferredBackupWindow: "",
                MasterUsername: "",
                Endpoint: "",
                DBClusterOptionGroupMemberships: [ {
                    Status: "",
                    DBClusterOptionGroupName: ""
                } /*, ...*/ ],
                EngineVersion: "",
                DatabaseName: "",
                CharacterSetName: "",
                StorageEncrypted: false,
                HostedZoneId: "",
                Engine: "",
                PreferredMaintenanceWindow: "",
                DBSubnetGroup: "",
                Status: "",
                DBClusterMembers: [ {
                    DBClusterParameterGroupStatus: "",
                    DBInstanceIdentifier: "",
                    IsClusterWriter: false
                } /*, ...*/ ],
                BackupRetentionPeriod: 0,
                DBClusterParameterGroup: "",
                KmsKeyId: "",
                PercentProgress: "",
                EarliestRestorableTime: now(),
                LatestRestorableTime: now(),
                DBClusterIdentifier: "",
                DbClusterResourceId: ""
            }
        };
        return [200, ret];
    }
module.exports.ModifyDBSubnetGroup = function ModifyDBSubnetGroup(aws) {
        var DBSubnetGroupDescription = aws.params['DBSubnetGroupDescription'];
        var DBSubnetGroupName = aws.params['DBSubnetGroupName'];
        var SubnetIds = aws.params['SubnetIds'];
        if (! DBSubnetGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSubnetGroupName"];
        }
        if (! SubnetIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubnetIds"];
        }


        // TODO implement code

        var ret = {
            DBSubnetGroup: /*S1w*/{
                Subnets: [ {
                    SubnetIdentifier: "",
                    SubnetStatus: "",
                    SubnetAvailabilityZone: /*S1z*/{
                        Name: ""
                    }
                } /*, ...*/ ],
                DBSubnetGroupDescription: "",
                SubnetGroupStatus: "",
                DBSubnetGroupName: "",
                VpcId: ""
            }
        };
        return [200, ret];
    }
module.exports.ModifyOptionGroup = function ModifyOptionGroup(aws) {
        var OptionGroupName = aws.params['OptionGroupName'];
        var OptionsToInclude = aws.params['OptionsToInclude'] /* list */;
        var OptionsToRemove = aws.params['OptionsToRemove'] /* list */;
        var ApplyImmediately = aws.params['ApplyImmediately'] /* boolean */;
        if (! OptionGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter OptionGroupName"];
        }


        // TODO implement code

        var ret = {
            OptionGroup: /*S13*/{
                EngineName: "",
                MajorEngineVersion: "",
                Options: [ {
                    Port: 0,
                    Permanent: false,
                    DBSecurityGroupMemberships: /*S18*/[ {
                        Status: "",
                        DBSecurityGroupName: ""
                    } /*, ...*/ ],
                    OptionName: "",
                    OptionSettings: [ /*S17*/{
                        Value: "",
                        DefaultValue: "",
                        Description: "",
                        IsModifiable: false,
                        IsCollection: false,
                        AllowedValues: "",
                        DataType: "",
                        Name: "",
                        ApplyType: ""
                    } /*, ...*/ ],
                    OptionDescription: "",
                    VpcSecurityGroupMemberships: /*S1a*/[ {
                        Status: "",
                        VpcSecurityGroupId: ""
                    } /*, ...*/ ],
                    Persistent: false
                } /*, ...*/ ],
                OptionGroupName: "",
                VpcId: "",
                AllowsVpcAndNonVpcInstanceMemberships: false,
                OptionGroupDescription: ""
            }
        };
        return [200, ret];
    }
module.exports.ModifyDBClusterParameterGroup = function ModifyDBClusterParameterGroup(aws) {
        var Parameters = aws.params['Parameters'];
        var DBClusterParameterGroupName = aws.params['DBClusterParameterGroupName'];
        if (! DBClusterParameterGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBClusterParameterGroupName"];
        }
        if (! Parameters) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Parameters"];
        }


        // TODO implement code

        var ret = /*S68*/{
            DBClusterParameterGroupName: ""
        };
        return [200, ret];
    }
module.exports.DeleteDBClusterParameterGroup = function DeleteDBClusterParameterGroup(aws) {
        var DBClusterParameterGroupName = aws.params['DBClusterParameterGroupName'];
        if (! DBClusterParameterGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBClusterParameterGroupName"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeEngineDefaultClusterParameters = function DescribeEngineDefaultClusterParameters(aws) {
        var Marker = aws.params['Marker'];
        var Filters = aws.params['Filters'];
        var DBParameterGroupFamily = aws.params['DBParameterGroupFamily'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        if (! DBParameterGroupFamily) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBParameterGroupFamily"];
        }


        // TODO implement code

        var ret = {
            EngineDefaults: /*S4r*/{
                Marker: "",
                Parameters: /*S3h*/[ {
                    MinimumEngineVersion: "",
                    Description: "",
                    Source: "",
                    IsModifiable: false,
                    ParameterValue: "",
                    ParameterName: "",
                    ApplyMethod: "",
                    DataType: "",
                    ApplyType: "",
                    AllowedValues: ""
                } /*, ...*/ ],
                DBParameterGroupFamily: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeAccountAttributes = function DescribeAccountAttributes(aws) {


        // TODO implement code

        var ret = {
            AccountQuotas: [ {
                Used: 0 /*long*/,
                Max: 0 /*long*/,
                AccountQuotaName: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ModifyDBInstance = function ModifyDBInstance(aws) {
        var DBParameterGroupName = aws.params['DBParameterGroupName'];
        var AllocatedStorage = aws.params['AllocatedStorage'] /* integer */;
        var CACertificateIdentifier = aws.params['CACertificateIdentifier'];
        var PreferredBackupWindow = aws.params['PreferredBackupWindow'];
        var DBPortNumber = aws.params['DBPortNumber'] /* integer */;
        var DBInstanceIdentifier = aws.params['DBInstanceIdentifier'];
        var TdeCredentialPassword = aws.params['TdeCredentialPassword'];
        var TdeCredentialArn = aws.params['TdeCredentialArn'];
        var VpcSecurityGroupIds = aws.params['VpcSecurityGroupIds'];
        var EngineVersion = aws.params['EngineVersion'];
        var AllowMajorVersionUpgrade = aws.params['AllowMajorVersionUpgrade'] /* boolean */;
        var CopyTagsToSnapshot = aws.params['CopyTagsToSnapshot'] /* boolean */;
        var PubliclyAccessible = aws.params['PubliclyAccessible'] /* boolean */;
        var MasterUserPassword = aws.params['MasterUserPassword'];
        var StorageType = aws.params['StorageType'];
        var DBInstanceClass = aws.params['DBInstanceClass'];
        var MultiAZ = aws.params['MultiAZ'] /* boolean */;
        var OptionGroupName = aws.params['OptionGroupName'];
        var AutoMinorVersionUpgrade = aws.params['AutoMinorVersionUpgrade'] /* boolean */;
        var PreferredMaintenanceWindow = aws.params['PreferredMaintenanceWindow'];
        var NewDBInstanceIdentifier = aws.params['NewDBInstanceIdentifier'];
        var BackupRetentionPeriod = aws.params['BackupRetentionPeriod'] /* integer */;
        var Iops = aws.params['Iops'] /* integer */;
        var MonitoringInterval = aws.params['MonitoringInterval'] /* integer */;
        var MonitoringRoleArn = aws.params['MonitoringRoleArn'];
        var DBSecurityGroups = aws.params['DBSecurityGroups'];
        var ApplyImmediately = aws.params['ApplyImmediately'] /* boolean */;
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }


        // TODO implement code

        var ret = {
            DBInstance: /*S1s*/{
                EnhancedMonitoringResourceArn: "",
                AllocatedStorage: 0,
                VpcSecurityGroups: /*S1a*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                PreferredBackupWindow: "",
                MasterUsername: "",
                Endpoint: {
                    Address: "",
                    HostedZoneId: "",
                    Port: 0
                },
                StorageType: "",
                TdeCredentialArn: "",
                PendingModifiedValues: {
                    Port: 0,
                    AllocatedStorage: 0,
                    CACertificateIdentifier: "",
                    DBInstanceClass: "",
                    MasterUserPassword: "",
                    EngineVersion: "",
                    MultiAZ: false,
                    StorageType: "",
                    BackupRetentionPeriod: 0,
                    DBInstanceIdentifier: "",
                    Iops: 0
                },
                PubliclyAccessible: false,
                BackupRetentionPeriod: 0,
                EngineVersion: "",
                OptionGroupMemberships: [ {
                    Status: "",
                    OptionGroupName: ""
                } /*, ...*/ ],
                SecondaryAvailabilityZone: "",
                StatusInfos: [ {
                    Status: "",
                    Message: "",
                    Normal: false,
                    StatusType: ""
                } /*, ...*/ ],
                InstanceCreateTime: now(),
                MultiAZ: false,
                CACertificateIdentifier: "",
                Iops: 0,
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                DbInstancePort: 0,
                PreferredMaintenanceWindow: "",
                AutoMinorVersionUpgrade: false,
                DBInstanceClass: "",
                Engine: "",
                DBSubnetGroup: /*S1w*/{
                    Subnets: [ {
                        SubnetIdentifier: "",
                        SubnetStatus: "",
                        SubnetAvailabilityZone: /*S1z*/{
                            Name: ""
                        }
                    } /*, ...*/ ],
                    DBSubnetGroupDescription: "",
                    SubnetGroupStatus: "",
                    DBSubnetGroupName: "",
                    VpcId: ""
                },
                StorageEncrypted: false,
                LicenseModel: "",
                AvailabilityZone: "",
                DBName: "",
                DBSecurityGroups: /*S18*/[ {
                    Status: "",
                    DBSecurityGroupName: ""
                } /*, ...*/ ],
                CopyTagsToSnapshot: false,
                DbiResourceId: "",
                KmsKeyId: "",
                DBParameterGroups: [ {
                    ParameterApplyStatus: "",
                    DBParameterGroupName: ""
                } /*, ...*/ ],
                DBInstanceIdentifier: "",
                DBInstanceStatus: "",
                CharacterSetName: "",
                MonitoringInterval: 0,
                ReadReplicaSourceDBInstanceIdentifier: "",
                MonitoringRoleArn: "",
                LatestRestorableTime: now(),
                DBClusterIdentifier: ""
            }
        };
        return [200, ret];
    }
module.exports.RevokeDBSecurityGroupIngress = function RevokeDBSecurityGroupIngress(aws) {
        var CIDRIP = aws.params['CIDRIP'];
        var EC2SecurityGroupName = aws.params['EC2SecurityGroupName'];
        var EC2SecurityGroupId = aws.params['EC2SecurityGroupId'];
        var EC2SecurityGroupOwnerId = aws.params['EC2SecurityGroupOwnerId'];
        var DBSecurityGroupName = aws.params['DBSecurityGroupName'];
        if (! DBSecurityGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSecurityGroupName"];
        }


        // TODO implement code

        var ret = {
            DBSecurityGroup: /*Sj*/{
                IPRanges: [ {
                    Status: "",
                    CIDRIP: ""
                } /*, ...*/ ],
                EC2SecurityGroups: [ {
                    Status: "",
                    EC2SecurityGroupName: "",
                    EC2SecurityGroupId: "",
                    EC2SecurityGroupOwnerId: ""
                } /*, ...*/ ],
                OwnerId: "",
                DBSecurityGroupDescription: "",
                DBSecurityGroupName: "",
                VpcId: ""
            }
        };
        return [200, ret];
    }
module.exports.AddTagsToResource = function AddTagsToResource(aws) {
        var Tags = aws.params['Tags'];
        var ResourceName = aws.params['ResourceName'];
        if (! ResourceName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResourceName"];
        }
        if (! Tags) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Tags"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeDBEngineVersions = function DescribeDBEngineVersions(aws) {
        var EngineVersion = aws.params['EngineVersion'];
        var ListSupportedCharacterSets = aws.params['ListSupportedCharacterSets'] /* boolean */;
        var Filters = aws.params['Filters'];
        var Engine = aws.params['Engine'];
        var Marker = aws.params['Marker'];
        var DefaultOnly = aws.params['DefaultOnly'] /* boolean */;
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        var DBParameterGroupFamily = aws.params['DBParameterGroupFamily'];


        // TODO implement code

        var ret = {
            Marker: "",
            DBEngineVersions: [ {
                ValidUpgradeTarget: [ {
                    EngineVersion: "",
                    Description: "",
                    IsMajorVersionUpgrade: false,
                    Engine: "",
                    AutoUpgrade: false
                } /*, ...*/ ],
                EngineVersion: "",
                Engine: "",
                DBEngineVersionDescription: "",
                DBEngineDescription: "",
                SupportedCharacterSets: [ /*S3u*/{
                    CharacterSetName: "",
                    CharacterSetDescription: ""
                } /*, ...*/ ],
                DefaultCharacterSet: /*S3u*/{
                    CharacterSetName: "",
                    CharacterSetDescription: ""
                },
                DBParameterGroupFamily: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ResetDBParameterGroup = function ResetDBParameterGroup(aws) {
        var ResetAllParameters = aws.params['ResetAllParameters'] /* boolean */;
        var DBParameterGroupName = aws.params['DBParameterGroupName'];
        var Parameters = aws.params['Parameters'];
        if (! DBParameterGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBParameterGroupName"];
        }


        // TODO implement code

        var ret = /*S6c*/{
            DBParameterGroupName: ""
        };
        return [200, ret];
    }
module.exports.PromoteReadReplica = function PromoteReadReplica(aws) {
        var DBInstanceIdentifier = aws.params['DBInstanceIdentifier'];
        var BackupRetentionPeriod = aws.params['BackupRetentionPeriod'] /* integer */;
        var PreferredBackupWindow = aws.params['PreferredBackupWindow'];
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }


        // TODO implement code

        var ret = {
            DBInstance: /*S1s*/{
                EnhancedMonitoringResourceArn: "",
                AllocatedStorage: 0,
                VpcSecurityGroups: /*S1a*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                PreferredBackupWindow: "",
                MasterUsername: "",
                Endpoint: {
                    Address: "",
                    HostedZoneId: "",
                    Port: 0
                },
                StorageType: "",
                TdeCredentialArn: "",
                PendingModifiedValues: {
                    Port: 0,
                    AllocatedStorage: 0,
                    CACertificateIdentifier: "",
                    DBInstanceClass: "",
                    MasterUserPassword: "",
                    EngineVersion: "",
                    MultiAZ: false,
                    StorageType: "",
                    BackupRetentionPeriod: 0,
                    DBInstanceIdentifier: "",
                    Iops: 0
                },
                PubliclyAccessible: false,
                BackupRetentionPeriod: 0,
                EngineVersion: "",
                OptionGroupMemberships: [ {
                    Status: "",
                    OptionGroupName: ""
                } /*, ...*/ ],
                SecondaryAvailabilityZone: "",
                StatusInfos: [ {
                    Status: "",
                    Message: "",
                    Normal: false,
                    StatusType: ""
                } /*, ...*/ ],
                InstanceCreateTime: now(),
                MultiAZ: false,
                CACertificateIdentifier: "",
                Iops: 0,
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                DbInstancePort: 0,
                PreferredMaintenanceWindow: "",
                AutoMinorVersionUpgrade: false,
                DBInstanceClass: "",
                Engine: "",
                DBSubnetGroup: /*S1w*/{
                    Subnets: [ {
                        SubnetIdentifier: "",
                        SubnetStatus: "",
                        SubnetAvailabilityZone: /*S1z*/{
                            Name: ""
                        }
                    } /*, ...*/ ],
                    DBSubnetGroupDescription: "",
                    SubnetGroupStatus: "",
                    DBSubnetGroupName: "",
                    VpcId: ""
                },
                StorageEncrypted: false,
                LicenseModel: "",
                AvailabilityZone: "",
                DBName: "",
                DBSecurityGroups: /*S18*/[ {
                    Status: "",
                    DBSecurityGroupName: ""
                } /*, ...*/ ],
                CopyTagsToSnapshot: false,
                DbiResourceId: "",
                KmsKeyId: "",
                DBParameterGroups: [ {
                    ParameterApplyStatus: "",
                    DBParameterGroupName: ""
                } /*, ...*/ ],
                DBInstanceIdentifier: "",
                DBInstanceStatus: "",
                CharacterSetName: "",
                MonitoringInterval: 0,
                ReadReplicaSourceDBInstanceIdentifier: "",
                MonitoringRoleArn: "",
                LatestRestorableTime: now(),
                DBClusterIdentifier: ""
            }
        };
        return [200, ret];
    }
module.exports.DeleteDBSubnetGroup = function DeleteDBSubnetGroup(aws) {
        var DBSubnetGroupName = aws.params['DBSubnetGroupName'];
        if (! DBSubnetGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSubnetGroupName"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.RestoreDBInstanceToPointInTime = function RestoreDBInstanceToPointInTime(aws) {
        var Tags = aws.params['Tags'];
        var Port = aws.params['Port'] /* integer */;
        var TdeCredentialPassword = aws.params['TdeCredentialPassword'];
        var AutoMinorVersionUpgrade = aws.params['AutoMinorVersionUpgrade'] /* boolean */;
        var UseLatestRestorableTime = aws.params['UseLatestRestorableTime'] /* boolean */;
        var LicenseModel = aws.params['LicenseModel'];
        var SourceDBInstanceIdentifier = aws.params['SourceDBInstanceIdentifier'];
        var AvailabilityZone = aws.params['AvailabilityZone'];
        var DBSubnetGroupName = aws.params['DBSubnetGroupName'];
        var PubliclyAccessible = aws.params['PubliclyAccessible'] /* boolean */;
        var DBName = aws.params['DBName'];
        var TdeCredentialArn = aws.params['TdeCredentialArn'];
        var MultiAZ = aws.params['MultiAZ'] /* boolean */;
        var TargetDBInstanceIdentifier = aws.params['TargetDBInstanceIdentifier'];
        var CopyTagsToSnapshot = aws.params['CopyTagsToSnapshot'] /* boolean */;
        var RestoreTime = aws.params['RestoreTime'] /* timestamp */;
        var StorageType = aws.params['StorageType'];
        var DBInstanceClass = aws.params['DBInstanceClass'];
        var OptionGroupName = aws.params['OptionGroupName'];
        var Iops = aws.params['Iops'] /* integer */;
        var Engine = aws.params['Engine'];
        if (! SourceDBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SourceDBInstanceIdentifier"];
        }
        if (! TargetDBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TargetDBInstanceIdentifier"];
        }


        // TODO implement code

        var ret = {
            DBInstance: /*S1s*/{
                EnhancedMonitoringResourceArn: "",
                AllocatedStorage: 0,
                VpcSecurityGroups: /*S1a*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                PreferredBackupWindow: "",
                MasterUsername: "",
                Endpoint: {
                    Address: "",
                    HostedZoneId: "",
                    Port: 0
                },
                StorageType: "",
                TdeCredentialArn: "",
                PendingModifiedValues: {
                    Port: 0,
                    AllocatedStorage: 0,
                    CACertificateIdentifier: "",
                    DBInstanceClass: "",
                    MasterUserPassword: "",
                    EngineVersion: "",
                    MultiAZ: false,
                    StorageType: "",
                    BackupRetentionPeriod: 0,
                    DBInstanceIdentifier: "",
                    Iops: 0
                },
                PubliclyAccessible: false,
                BackupRetentionPeriod: 0,
                EngineVersion: "",
                OptionGroupMemberships: [ {
                    Status: "",
                    OptionGroupName: ""
                } /*, ...*/ ],
                SecondaryAvailabilityZone: "",
                StatusInfos: [ {
                    Status: "",
                    Message: "",
                    Normal: false,
                    StatusType: ""
                } /*, ...*/ ],
                InstanceCreateTime: now(),
                MultiAZ: false,
                CACertificateIdentifier: "",
                Iops: 0,
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                DbInstancePort: 0,
                PreferredMaintenanceWindow: "",
                AutoMinorVersionUpgrade: false,
                DBInstanceClass: "",
                Engine: "",
                DBSubnetGroup: /*S1w*/{
                    Subnets: [ {
                        SubnetIdentifier: "",
                        SubnetStatus: "",
                        SubnetAvailabilityZone: /*S1z*/{
                            Name: ""
                        }
                    } /*, ...*/ ],
                    DBSubnetGroupDescription: "",
                    SubnetGroupStatus: "",
                    DBSubnetGroupName: "",
                    VpcId: ""
                },
                StorageEncrypted: false,
                LicenseModel: "",
                AvailabilityZone: "",
                DBName: "",
                DBSecurityGroups: /*S18*/[ {
                    Status: "",
                    DBSecurityGroupName: ""
                } /*, ...*/ ],
                CopyTagsToSnapshot: false,
                DbiResourceId: "",
                KmsKeyId: "",
                DBParameterGroups: [ {
                    ParameterApplyStatus: "",
                    DBParameterGroupName: ""
                } /*, ...*/ ],
                DBInstanceIdentifier: "",
                DBInstanceStatus: "",
                CharacterSetName: "",
                MonitoringInterval: 0,
                ReadReplicaSourceDBInstanceIdentifier: "",
                MonitoringRoleArn: "",
                LatestRestorableTime: now(),
                DBClusterIdentifier: ""
            }
        };
        return [200, ret];
    }
module.exports.RemoveTagsFromResource = function RemoveTagsFromResource(aws) {
        var ResourceName = aws.params['ResourceName'];
        var TagKeys = aws.params['TagKeys'] /* list */;
        if (! ResourceName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResourceName"];
        }
        if (! TagKeys) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TagKeys"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeleteDBSecurityGroup = function DeleteDBSecurityGroup(aws) {
        var DBSecurityGroupName = aws.params['DBSecurityGroupName'];
        if (! DBSecurityGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSecurityGroupName"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ModifyDBParameterGroup = function ModifyDBParameterGroup(aws) {
        var Parameters = aws.params['Parameters'];
        var DBParameterGroupName = aws.params['DBParameterGroupName'];
        if (! DBParameterGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBParameterGroupName"];
        }
        if (! Parameters) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Parameters"];
        }


        // TODO implement code

        var ret = /*S6c*/{
            DBParameterGroupName: ""
        };
        return [200, ret];
    }
module.exports.CopyDBSnapshot = function CopyDBSnapshot(aws) {
        var SourceDBSnapshotIdentifier = aws.params['SourceDBSnapshotIdentifier'];
        var Tags = aws.params['Tags'];
        var TargetDBSnapshotIdentifier = aws.params['TargetDBSnapshotIdentifier'];
        var CopyTags = aws.params['CopyTags'] /* boolean */;
        if (! SourceDBSnapshotIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SourceDBSnapshotIdentifier"];
        }
        if (! TargetDBSnapshotIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TargetDBSnapshotIdentifier"];
        }


        // TODO implement code

        var ret = {
            DBSnapshot: /*Sz*/{
                Port: 0,
                AllocatedStorage: 0,
                KmsKeyId: "",
                MasterUsername: "",
                DBInstanceIdentifier: "",
                StorageType: "",
                SnapshotCreateTime: now(),
                SnapshotType: "",
                EngineVersion: "",
                DBSnapshotIdentifier: "",
                InstanceCreateTime: now(),
                OptionGroupName: "",
                VpcId: "",
                TdeCredentialArn: "",
                Engine: "",
                Status: "",
                LicenseModel: "",
                AvailabilityZone: "",
                Iops: 0,
                Encrypted: false,
                SourceDBSnapshotIdentifier: "",
                PercentProgress: 0,
                SourceRegion: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeDBClusters = function DescribeDBClusters(aws) {
        var Marker = aws.params['Marker'];
        var Filters = aws.params['Filters'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        var DBClusterIdentifier = aws.params['DBClusterIdentifier'];


        // TODO implement code

        var ret = {
            Marker: "",
            DBClusters: [ /*S1f*/{
                Port: 0,
                AllocatedStorage: 0,
                VpcSecurityGroups: /*S1a*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                AvailabilityZones: /*Sr*/[ "" /*, ...*/ ],
                PreferredBackupWindow: "",
                MasterUsername: "",
                Endpoint: "",
                DBClusterOptionGroupMemberships: [ {
                    Status: "",
                    DBClusterOptionGroupName: ""
                } /*, ...*/ ],
                EngineVersion: "",
                DatabaseName: "",
                CharacterSetName: "",
                StorageEncrypted: false,
                HostedZoneId: "",
                Engine: "",
                PreferredMaintenanceWindow: "",
                DBSubnetGroup: "",
                Status: "",
                DBClusterMembers: [ {
                    DBClusterParameterGroupStatus: "",
                    DBInstanceIdentifier: "",
                    IsClusterWriter: false
                } /*, ...*/ ],
                BackupRetentionPeriod: 0,
                DBClusterParameterGroup: "",
                KmsKeyId: "",
                PercentProgress: "",
                EarliestRestorableTime: now(),
                LatestRestorableTime: now(),
                DBClusterIdentifier: "",
                DbClusterResourceId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeDBLogFiles = function DescribeDBLogFiles(aws) {
        var FileSize = aws.params['FileSize'] /* long */;
        var Filters = aws.params['Filters'];
        var Marker = aws.params['Marker'];
        var DBInstanceIdentifier = aws.params['DBInstanceIdentifier'];
        var FilenameContains = aws.params['FilenameContains'];
        var FileLastWritten = aws.params['FileLastWritten'] /* long */;
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }


        // TODO implement code

        var ret = {
            Marker: "",
            DescribeDBLogFiles: [ {
                Size: 0 /*long*/,
                LogFileName: "",
                LastWritten: 0 /*long*/
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeDBClusterParameters = function DescribeDBClusterParameters(aws) {
        var Marker = aws.params['Marker'];
        var Source = aws.params['Source'];
        var DBClusterParameterGroupName = aws.params['DBClusterParameterGroupName'];
        var Filters = aws.params['Filters'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        if (! DBClusterParameterGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBClusterParameterGroupName"];
        }


        // TODO implement code

        var ret = {
            Marker: "",
            Parameters: /*S3h*/[ {
                MinimumEngineVersion: "",
                Description: "",
                Source: "",
                IsModifiable: false,
                ParameterValue: "",
                ParameterName: "",
                ApplyMethod: "",
                DataType: "",
                ApplyType: "",
                AllowedValues: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ModifyEventSubscription = function ModifyEventSubscription(aws) {
        var SourceType = aws.params['SourceType'];
        var Enabled = aws.params['Enabled'] /* boolean */;
        var SubscriptionName = aws.params['SubscriptionName'];
        var EventCategories = aws.params['EventCategories'];
        var SnsTopicArn = aws.params['SnsTopicArn'];
        if (! SubscriptionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubscriptionName"];
        }


        // TODO implement code

        var ret = {
            EventSubscription: /*S4*/{
                SourceType: "",
                Enabled: false,
                SubscriptionCreationTime: "",
                SnsTopicArn: "",
                SourceIdsList: /*S5*/[ "" /*, ...*/ ],
                Status: "",
                CustomerAwsId: "",
                EventCategoriesList: /*S6*/[ "" /*, ...*/ ],
                CustSubscriptionId: ""
            }
        };
        return [200, ret];
    }
module.exports.RemoveSourceIdentifierFromSubscription = function RemoveSourceIdentifierFromSubscription(aws) {
        var SubscriptionName = aws.params['SubscriptionName'];
        var SourceIdentifier = aws.params['SourceIdentifier'];
        if (! SubscriptionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubscriptionName"];
        }
        if (! SourceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SourceIdentifier"];
        }


        // TODO implement code

        var ret = {
            EventSubscription: /*S4*/{
                SourceType: "",
                Enabled: false,
                SubscriptionCreationTime: "",
                SnsTopicArn: "",
                SourceIdsList: /*S5*/[ "" /*, ...*/ ],
                Status: "",
                CustomerAwsId: "",
                EventCategoriesList: /*S6*/[ "" /*, ...*/ ],
                CustSubscriptionId: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeDBClusterParameterGroups = function DescribeDBClusterParameterGroups(aws) {
        var Marker = aws.params['Marker'];
        var DBClusterParameterGroupName = aws.params['DBClusterParameterGroupName'];
        var Filters = aws.params['Filters'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;


        // TODO implement code

        var ret = {
            Marker: "",
            DBClusterParameterGroups: [ /*S1m*/{
                Description: "",
                DBClusterParameterGroupName: "",
                DBParameterGroupFamily: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateDBSecurityGroup = function CreateDBSecurityGroup(aws) {
        var Tags = aws.params['Tags'];
        var DBSecurityGroupDescription = aws.params['DBSecurityGroupDescription'];
        var DBSecurityGroupName = aws.params['DBSecurityGroupName'];
        if (! DBSecurityGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSecurityGroupName"];
        }
        if (! DBSecurityGroupDescription) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSecurityGroupDescription"];
        }


        // TODO implement code

        var ret = {
            DBSecurityGroup: /*Sj*/{
                IPRanges: [ {
                    Status: "",
                    CIDRIP: ""
                } /*, ...*/ ],
                EC2SecurityGroups: [ {
                    Status: "",
                    EC2SecurityGroupName: "",
                    EC2SecurityGroupId: "",
                    EC2SecurityGroupOwnerId: ""
                } /*, ...*/ ],
                OwnerId: "",
                DBSecurityGroupDescription: "",
                DBSecurityGroupName: "",
                VpcId: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeDBParameterGroups = function DescribeDBParameterGroups(aws) {
        var Marker = aws.params['Marker'];
        var Filters = aws.params['Filters'];
        var DBParameterGroupName = aws.params['DBParameterGroupName'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;


        // TODO implement code

        var ret = {
            Marker: "",
            DBParameterGroups: [ /*Sv*/{
                Description: "",
                DBParameterGroupName: "",
                DBParameterGroupFamily: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateDBParameterGroup = function CreateDBParameterGroup(aws) {
        var Tags = aws.params['Tags'];
        var Description = aws.params['Description'];
        var DBParameterGroupName = aws.params['DBParameterGroupName'];
        var DBParameterGroupFamily = aws.params['DBParameterGroupFamily'];
        if (! DBParameterGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBParameterGroupName"];
        }
        if (! DBParameterGroupFamily) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBParameterGroupFamily"];
        }
        if (! Description) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Description"];
        }


        // TODO implement code

        var ret = {
            DBParameterGroup: /*Sv*/{
                Description: "",
                DBParameterGroupName: "",
                DBParameterGroupFamily: ""
            }
        };
        return [200, ret];
    }
module.exports.RestoreDBInstanceFromDBSnapshot = function RestoreDBInstanceFromDBSnapshot(aws) {
        var Tags = aws.params['Tags'];
        var Port = aws.params['Port'] /* integer */;
        var DBInstanceClass = aws.params['DBInstanceClass'];
        var Engine = aws.params['Engine'];
        var LicenseModel = aws.params['LicenseModel'];
        var DBInstanceIdentifier = aws.params['DBInstanceIdentifier'];
        var StorageType = aws.params['StorageType'];
        var AvailabilityZone = aws.params['AvailabilityZone'];
        var DBSubnetGroupName = aws.params['DBSubnetGroupName'];
        var PubliclyAccessible = aws.params['PubliclyAccessible'] /* boolean */;
        var DBName = aws.params['DBName'];
        var TdeCredentialPassword = aws.params['TdeCredentialPassword'];
        var MultiAZ = aws.params['MultiAZ'] /* boolean */;
        var TdeCredentialArn = aws.params['TdeCredentialArn'];
        var CopyTagsToSnapshot = aws.params['CopyTagsToSnapshot'] /* boolean */;
        var DBSnapshotIdentifier = aws.params['DBSnapshotIdentifier'];
        var AutoMinorVersionUpgrade = aws.params['AutoMinorVersionUpgrade'] /* boolean */;
        var OptionGroupName = aws.params['OptionGroupName'];
        var Iops = aws.params['Iops'] /* integer */;
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }
        if (! DBSnapshotIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSnapshotIdentifier"];
        }


        // TODO implement code

        var ret = {
            DBInstance: /*S1s*/{
                EnhancedMonitoringResourceArn: "",
                AllocatedStorage: 0,
                VpcSecurityGroups: /*S1a*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                PreferredBackupWindow: "",
                MasterUsername: "",
                Endpoint: {
                    Address: "",
                    HostedZoneId: "",
                    Port: 0
                },
                StorageType: "",
                TdeCredentialArn: "",
                PendingModifiedValues: {
                    Port: 0,
                    AllocatedStorage: 0,
                    CACertificateIdentifier: "",
                    DBInstanceClass: "",
                    MasterUserPassword: "",
                    EngineVersion: "",
                    MultiAZ: false,
                    StorageType: "",
                    BackupRetentionPeriod: 0,
                    DBInstanceIdentifier: "",
                    Iops: 0
                },
                PubliclyAccessible: false,
                BackupRetentionPeriod: 0,
                EngineVersion: "",
                OptionGroupMemberships: [ {
                    Status: "",
                    OptionGroupName: ""
                } /*, ...*/ ],
                SecondaryAvailabilityZone: "",
                StatusInfos: [ {
                    Status: "",
                    Message: "",
                    Normal: false,
                    StatusType: ""
                } /*, ...*/ ],
                InstanceCreateTime: now(),
                MultiAZ: false,
                CACertificateIdentifier: "",
                Iops: 0,
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                DbInstancePort: 0,
                PreferredMaintenanceWindow: "",
                AutoMinorVersionUpgrade: false,
                DBInstanceClass: "",
                Engine: "",
                DBSubnetGroup: /*S1w*/{
                    Subnets: [ {
                        SubnetIdentifier: "",
                        SubnetStatus: "",
                        SubnetAvailabilityZone: /*S1z*/{
                            Name: ""
                        }
                    } /*, ...*/ ],
                    DBSubnetGroupDescription: "",
                    SubnetGroupStatus: "",
                    DBSubnetGroupName: "",
                    VpcId: ""
                },
                StorageEncrypted: false,
                LicenseModel: "",
                AvailabilityZone: "",
                DBName: "",
                DBSecurityGroups: /*S18*/[ {
                    Status: "",
                    DBSecurityGroupName: ""
                } /*, ...*/ ],
                CopyTagsToSnapshot: false,
                DbiResourceId: "",
                KmsKeyId: "",
                DBParameterGroups: [ {
                    ParameterApplyStatus: "",
                    DBParameterGroupName: ""
                } /*, ...*/ ],
                DBInstanceIdentifier: "",
                DBInstanceStatus: "",
                CharacterSetName: "",
                MonitoringInterval: 0,
                ReadReplicaSourceDBInstanceIdentifier: "",
                MonitoringRoleArn: "",
                LatestRestorableTime: now(),
                DBClusterIdentifier: ""
            }
        };
        return [200, ret];
    }
module.exports.AddSourceIdentifierToSubscription = function AddSourceIdentifierToSubscription(aws) {
        var SubscriptionName = aws.params['SubscriptionName'];
        var SourceIdentifier = aws.params['SourceIdentifier'];
        if (! SubscriptionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubscriptionName"];
        }
        if (! SourceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SourceIdentifier"];
        }


        // TODO implement code

        var ret = {
            EventSubscription: /*S4*/{
                SourceType: "",
                Enabled: false,
                SubscriptionCreationTime: "",
                SnsTopicArn: "",
                SourceIdsList: /*S5*/[ "" /*, ...*/ ],
                Status: "",
                CustomerAwsId: "",
                EventCategoriesList: /*S6*/[ "" /*, ...*/ ],
                CustSubscriptionId: ""
            }
        };
        return [200, ret];
    }
module.exports.CreateDBCluster = function CreateDBCluster(aws) {
        var Tags = aws.params['Tags'];
        var Port = aws.params['Port'] /* integer */;
        var Engine = aws.params['Engine'];
        var PreferredBackupWindow = aws.params['PreferredBackupWindow'];
        var MasterUsername = aws.params['MasterUsername'];
        var BackupRetentionPeriod = aws.params['BackupRetentionPeriod'] /* integer */;
        var VpcSecurityGroupIds = aws.params['VpcSecurityGroupIds'];
        var DBSubnetGroupName = aws.params['DBSubnetGroupName'];
        var PreferredMaintenanceWindow = aws.params['PreferredMaintenanceWindow'];
        var EngineVersion = aws.params['EngineVersion'];
        var DatabaseName = aws.params['DatabaseName'];
        var KmsKeyId = aws.params['KmsKeyId'];
        var MasterUserPassword = aws.params['MasterUserPassword'];
        var CharacterSetName = aws.params['CharacterSetName'];
        var OptionGroupName = aws.params['OptionGroupName'];
        var DBClusterParameterGroupName = aws.params['DBClusterParameterGroupName'];
        var StorageEncrypted = aws.params['StorageEncrypted'] /* boolean */;
        var DBClusterIdentifier = aws.params['DBClusterIdentifier'];
        var AvailabilityZones = aws.params['AvailabilityZones'];
        if (! DBClusterIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBClusterIdentifier"];
        }
        if (! Engine) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Engine"];
        }
        if (! MasterUsername) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MasterUsername"];
        }
        if (! MasterUserPassword) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MasterUserPassword"];
        }


        // TODO implement code

        var ret = {
            DBCluster: /*S1f*/{
                Port: 0,
                AllocatedStorage: 0,
                VpcSecurityGroups: /*S1a*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                AvailabilityZones: /*Sr*/[ "" /*, ...*/ ],
                PreferredBackupWindow: "",
                MasterUsername: "",
                Endpoint: "",
                DBClusterOptionGroupMemberships: [ {
                    Status: "",
                    DBClusterOptionGroupName: ""
                } /*, ...*/ ],
                EngineVersion: "",
                DatabaseName: "",
                CharacterSetName: "",
                StorageEncrypted: false,
                HostedZoneId: "",
                Engine: "",
                PreferredMaintenanceWindow: "",
                DBSubnetGroup: "",
                Status: "",
                DBClusterMembers: [ {
                    DBClusterParameterGroupStatus: "",
                    DBInstanceIdentifier: "",
                    IsClusterWriter: false
                } /*, ...*/ ],
                BackupRetentionPeriod: 0,
                DBClusterParameterGroup: "",
                KmsKeyId: "",
                PercentProgress: "",
                EarliestRestorableTime: now(),
                LatestRestorableTime: now(),
                DBClusterIdentifier: "",
                DbClusterResourceId: ""
            }
        };
        return [200, ret];
    }
module.exports.CreateDBInstance = function CreateDBInstance(aws) {
        var Tags = aws.params['Tags'];
        var Port = aws.params['Port'] /* integer */;
        var AllocatedStorage = aws.params['AllocatedStorage'] /* integer */;
        var DBSecurityGroups = aws.params['DBSecurityGroups'];
        var PreferredBackupWindow = aws.params['PreferredBackupWindow'];
        var MasterUsername = aws.params['MasterUsername'];
        var DBInstanceIdentifier = aws.params['DBInstanceIdentifier'];
        var TdeCredentialArn = aws.params['TdeCredentialArn'];
        var DBSubnetGroupName = aws.params['DBSubnetGroupName'];
        var VpcSecurityGroupIds = aws.params['VpcSecurityGroupIds'];
        var BackupRetentionPeriod = aws.params['BackupRetentionPeriod'] /* integer */;
        var EngineVersion = aws.params['EngineVersion'];
        var CopyTagsToSnapshot = aws.params['CopyTagsToSnapshot'] /* boolean */;
        var PubliclyAccessible = aws.params['PubliclyAccessible'] /* boolean */;
        var MasterUserPassword = aws.params['MasterUserPassword'];
        var StorageType = aws.params['StorageType'];
        var MultiAZ = aws.params['MultiAZ'] /* boolean */;
        var OptionGroupName = aws.params['OptionGroupName'];
        var StorageEncrypted = aws.params['StorageEncrypted'] /* boolean */;
        var PreferredMaintenanceWindow = aws.params['PreferredMaintenanceWindow'];
        var AutoMinorVersionUpgrade = aws.params['AutoMinorVersionUpgrade'] /* boolean */;
        var DBInstanceClass = aws.params['DBInstanceClass'];
        var Engine = aws.params['Engine'];
        var LicenseModel = aws.params['LicenseModel'];
        var AvailabilityZone = aws.params['AvailabilityZone'];
        var DBName = aws.params['DBName'];
        var Iops = aws.params['Iops'] /* integer */;
        var TdeCredentialPassword = aws.params['TdeCredentialPassword'];
        var KmsKeyId = aws.params['KmsKeyId'];
        var CharacterSetName = aws.params['CharacterSetName'];
        var MonitoringInterval = aws.params['MonitoringInterval'] /* integer */;
        var MonitoringRoleArn = aws.params['MonitoringRoleArn'];
        var DBParameterGroupName = aws.params['DBParameterGroupName'];
        var DBClusterIdentifier = aws.params['DBClusterIdentifier'];
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }
        if (! DBInstanceClass) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceClass"];
        }
        if (! Engine) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Engine"];
        }


        // TODO implement code

        var ret = {
            DBInstance: /*S1s*/{
                EnhancedMonitoringResourceArn: "",
                AllocatedStorage: 0,
                VpcSecurityGroups: /*S1a*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                PreferredBackupWindow: "",
                MasterUsername: "",
                Endpoint: {
                    Address: "",
                    HostedZoneId: "",
                    Port: 0
                },
                StorageType: "",
                TdeCredentialArn: "",
                PendingModifiedValues: {
                    Port: 0,
                    AllocatedStorage: 0,
                    CACertificateIdentifier: "",
                    DBInstanceClass: "",
                    MasterUserPassword: "",
                    EngineVersion: "",
                    MultiAZ: false,
                    StorageType: "",
                    BackupRetentionPeriod: 0,
                    DBInstanceIdentifier: "",
                    Iops: 0
                },
                PubliclyAccessible: false,
                BackupRetentionPeriod: 0,
                EngineVersion: "",
                OptionGroupMemberships: [ {
                    Status: "",
                    OptionGroupName: ""
                } /*, ...*/ ],
                SecondaryAvailabilityZone: "",
                StatusInfos: [ {
                    Status: "",
                    Message: "",
                    Normal: false,
                    StatusType: ""
                } /*, ...*/ ],
                InstanceCreateTime: now(),
                MultiAZ: false,
                CACertificateIdentifier: "",
                Iops: 0,
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                DbInstancePort: 0,
                PreferredMaintenanceWindow: "",
                AutoMinorVersionUpgrade: false,
                DBInstanceClass: "",
                Engine: "",
                DBSubnetGroup: /*S1w*/{
                    Subnets: [ {
                        SubnetIdentifier: "",
                        SubnetStatus: "",
                        SubnetAvailabilityZone: /*S1z*/{
                            Name: ""
                        }
                    } /*, ...*/ ],
                    DBSubnetGroupDescription: "",
                    SubnetGroupStatus: "",
                    DBSubnetGroupName: "",
                    VpcId: ""
                },
                StorageEncrypted: false,
                LicenseModel: "",
                AvailabilityZone: "",
                DBName: "",
                DBSecurityGroups: /*S18*/[ {
                    Status: "",
                    DBSecurityGroupName: ""
                } /*, ...*/ ],
                CopyTagsToSnapshot: false,
                DbiResourceId: "",
                KmsKeyId: "",
                DBParameterGroups: [ {
                    ParameterApplyStatus: "",
                    DBParameterGroupName: ""
                } /*, ...*/ ],
                DBInstanceIdentifier: "",
                DBInstanceStatus: "",
                CharacterSetName: "",
                MonitoringInterval: 0,
                ReadReplicaSourceDBInstanceIdentifier: "",
                MonitoringRoleArn: "",
                LatestRestorableTime: now(),
                DBClusterIdentifier: ""
            }
        };
        return [200, ret];
    }
module.exports.FailoverDBCluster = function FailoverDBCluster(aws) {
        var DBClusterIdentifier = aws.params['DBClusterIdentifier'];


        // TODO implement code

        var ret = {
            DBCluster: /*S1f*/{
                Port: 0,
                AllocatedStorage: 0,
                VpcSecurityGroups: /*S1a*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                AvailabilityZones: /*Sr*/[ "" /*, ...*/ ],
                PreferredBackupWindow: "",
                MasterUsername: "",
                Endpoint: "",
                DBClusterOptionGroupMemberships: [ {
                    Status: "",
                    DBClusterOptionGroupName: ""
                } /*, ...*/ ],
                EngineVersion: "",
                DatabaseName: "",
                CharacterSetName: "",
                StorageEncrypted: false,
                HostedZoneId: "",
                Engine: "",
                PreferredMaintenanceWindow: "",
                DBSubnetGroup: "",
                Status: "",
                DBClusterMembers: [ {
                    DBClusterParameterGroupStatus: "",
                    DBInstanceIdentifier: "",
                    IsClusterWriter: false
                } /*, ...*/ ],
                BackupRetentionPeriod: 0,
                DBClusterParameterGroup: "",
                KmsKeyId: "",
                PercentProgress: "",
                EarliestRestorableTime: now(),
                LatestRestorableTime: now(),
                DBClusterIdentifier: "",
                DbClusterResourceId: ""
            }
        };
        return [200, ret];
    }
module.exports.AuthorizeDBSecurityGroupIngress = function AuthorizeDBSecurityGroupIngress(aws) {
        var CIDRIP = aws.params['CIDRIP'];
        var EC2SecurityGroupName = aws.params['EC2SecurityGroupName'];
        var EC2SecurityGroupId = aws.params['EC2SecurityGroupId'];
        var EC2SecurityGroupOwnerId = aws.params['EC2SecurityGroupOwnerId'];
        var DBSecurityGroupName = aws.params['DBSecurityGroupName'];
        if (! DBSecurityGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSecurityGroupName"];
        }


        // TODO implement code

        var ret = {
            DBSecurityGroup: /*Sj*/{
                IPRanges: [ {
                    Status: "",
                    CIDRIP: ""
                } /*, ...*/ ],
                EC2SecurityGroups: [ {
                    Status: "",
                    EC2SecurityGroupName: "",
                    EC2SecurityGroupId: "",
                    EC2SecurityGroupOwnerId: ""
                } /*, ...*/ ],
                OwnerId: "",
                DBSecurityGroupDescription: "",
                DBSecurityGroupName: "",
                VpcId: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeDBClusterSnapshots = function DescribeDBClusterSnapshots(aws) {
        var SnapshotType = aws.params['SnapshotType'];
        var Filters = aws.params['Filters'];
        var DBClusterIdentifier = aws.params['DBClusterIdentifier'];
        var Marker = aws.params['Marker'];
        var DBClusterSnapshotIdentifier = aws.params['DBClusterSnapshotIdentifier'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;


        // TODO implement code

        var ret = {
            Marker: "",
            DBClusterSnapshots: [ /*Sq*/{
                Port: 0,
                AllocatedStorage: 0,
                Engine: "",
                MasterUsername: "",
                Status: "",
                LicenseModel: "",
                SnapshotCreateTime: now(),
                SnapshotType: "",
                EngineVersion: "",
                KmsKeyId: "",
                DBClusterIdentifier: "",
                PercentProgress: 0,
                AvailabilityZones: /*Sr*/[ "" /*, ...*/ ],
                DBClusterSnapshotIdentifier: "",
                StorageEncrypted: false,
                ClusterCreateTime: now(),
                VpcId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeReservedDBInstances = function DescribeReservedDBInstances(aws) {
        var ReservedDBInstanceId = aws.params['ReservedDBInstanceId'];
        var MultiAZ = aws.params['MultiAZ'] /* boolean */;
        var Filters = aws.params['Filters'];
        var DBInstanceClass = aws.params['DBInstanceClass'];
        var Marker = aws.params['Marker'];
        var ReservedDBInstancesOfferingId = aws.params['ReservedDBInstancesOfferingId'];
        var ProductDescription = aws.params['ProductDescription'];
        var OfferingType = aws.params['OfferingType'];
        var Duration = aws.params['Duration'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;


        // TODO implement code

        var ret = {
            Marker: "",
            ReservedDBInstances: [ /*S5r*/{
                ReservedDBInstanceId: "",
                State: "",
                DBInstanceClass: "",
                RecurringCharges: /*S5t*/[ {
                    RecurringChargeAmount: 0.0 /*double*/,
                    RecurringChargeFrequency: ""
                } /*, ...*/ ],
                DBInstanceCount: 0,
                CurrencyCode: "",
                ReservedDBInstancesOfferingId: "",
                FixedPrice: 0.0 /*double*/,
                StartTime: now(),
                OfferingType: "",
                ProductDescription: "",
                MultiAZ: false,
                Duration: 0,
                UsagePrice: 0.0 /*double*/
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeDBSnapshotAttributes = function DescribeDBSnapshotAttributes(aws) {
        var DBSnapshotIdentifier = aws.params['DBSnapshotIdentifier'];


        // TODO implement code

        var ret = {
            DBSnapshotAttributesResult: /*S4f*/{
                DBSnapshotAttributes: [ {
                    AttributeValues: /*S4i*/[ "" /*, ...*/ ],
                    AttributeName: ""
                } /*, ...*/ ],
                DBSnapshotIdentifier: ""
            }
        };
        return [200, ret];
    }
module.exports.CopyDBParameterGroup = function CopyDBParameterGroup(aws) {
        var Tags = aws.params['Tags'];
        var SourceDBParameterGroupIdentifier = aws.params['SourceDBParameterGroupIdentifier'];
        var TargetDBParameterGroupIdentifier = aws.params['TargetDBParameterGroupIdentifier'];
        var TargetDBParameterGroupDescription = aws.params['TargetDBParameterGroupDescription'];
        if (! SourceDBParameterGroupIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SourceDBParameterGroupIdentifier"];
        }
        if (! TargetDBParameterGroupIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TargetDBParameterGroupIdentifier"];
        }
        if (! TargetDBParameterGroupDescription) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TargetDBParameterGroupDescription"];
        }


        // TODO implement code

        var ret = {
            DBParameterGroup: /*Sv*/{
                Description: "",
                DBParameterGroupName: "",
                DBParameterGroupFamily: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeEvents = function DescribeEvents(aws) {
        var Marker = aws.params['Marker'];
        var Filters = aws.params['Filters'];
        var SourceIdentifier = aws.params['SourceIdentifier'];
        var EndTime = aws.params['EndTime'] /* timestamp */;
        var StartTime = aws.params['StartTime'] /* timestamp */;
        var SourceType = aws.params['SourceType'];
        var EventCategories = aws.params['EventCategories'];
        var Duration = aws.params['Duration'] /* integer */;
        var MaxRecords = aws.params['MaxRecords'] /* integer */;


        // TODO implement code

        var ret = {
            Marker: "",
            Events: [ {
                SourceType: "",
                Message: "",
                Date: now(),
                SourceIdentifier: "",
                EventCategories: /*S6*/[ "" /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeDBSecurityGroups = function DescribeDBSecurityGroups(aws) {
        var Marker = aws.params['Marker'];
        var Filters = aws.params['Filters'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        var DBSecurityGroupName = aws.params['DBSecurityGroupName'];


        // TODO implement code

        var ret = {
            Marker: "",
            DBSecurityGroups: [ /*Sj*/{
                IPRanges: [ {
                    Status: "",
                    CIDRIP: ""
                } /*, ...*/ ],
                EC2SecurityGroups: [ {
                    Status: "",
                    EC2SecurityGroupName: "",
                    EC2SecurityGroupId: "",
                    EC2SecurityGroupOwnerId: ""
                } /*, ...*/ ],
                OwnerId: "",
                DBSecurityGroupDescription: "",
                DBSecurityGroupName: "",
                VpcId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeOptionGroups = function DescribeOptionGroups(aws) {
        var EngineName = aws.params['EngineName'];
        var MajorEngineVersion = aws.params['MajorEngineVersion'];
        var Filters = aws.params['Filters'];
        var Marker = aws.params['Marker'];
        var OptionGroupName = aws.params['OptionGroupName'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;


        // TODO implement code

        var ret = {
            Marker: "",
            OptionGroupsList: [ /*S13*/{
                EngineName: "",
                MajorEngineVersion: "",
                Options: [ {
                    Port: 0,
                    Permanent: false,
                    DBSecurityGroupMemberships: /*S18*/[ {
                        Status: "",
                        DBSecurityGroupName: ""
                    } /*, ...*/ ],
                    OptionName: "",
                    OptionSettings: [ /*S17*/{
                        Value: "",
                        DefaultValue: "",
                        Description: "",
                        IsModifiable: false,
                        IsCollection: false,
                        AllowedValues: "",
                        DataType: "",
                        Name: "",
                        ApplyType: ""
                    } /*, ...*/ ],
                    OptionDescription: "",
                    VpcSecurityGroupMemberships: /*S1a*/[ {
                        Status: "",
                        VpcSecurityGroupId: ""
                    } /*, ...*/ ],
                    Persistent: false
                } /*, ...*/ ],
                OptionGroupName: "",
                VpcId: "",
                AllowsVpcAndNonVpcInstanceMemberships: false,
                OptionGroupDescription: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteDBClusterSnapshot = function DeleteDBClusterSnapshot(aws) {
        var DBClusterSnapshotIdentifier = aws.params['DBClusterSnapshotIdentifier'];
        if (! DBClusterSnapshotIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBClusterSnapshotIdentifier"];
        }


        // TODO implement code

        var ret = {
            DBClusterSnapshot: /*Sq*/{
                Port: 0,
                AllocatedStorage: 0,
                Engine: "",
                MasterUsername: "",
                Status: "",
                LicenseModel: "",
                SnapshotCreateTime: now(),
                SnapshotType: "",
                EngineVersion: "",
                KmsKeyId: "",
                DBClusterIdentifier: "",
                PercentProgress: 0,
                AvailabilityZones: /*Sr*/[ "" /*, ...*/ ],
                DBClusterSnapshotIdentifier: "",
                StorageEncrypted: false,
                ClusterCreateTime: now(),
                VpcId: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeCertificates = function DescribeCertificates(aws) {
        var Marker = aws.params['Marker'];
        var Filters = aws.params['Filters'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        var CertificateIdentifier = aws.params['CertificateIdentifier'];


        // TODO implement code

        var ret = {
            Certificates: [ {
                Thumbprint: "",
                CertificateType: "",
                ValidTill: now(),
                ValidFrom: now(),
                CertificateIdentifier: ""
            } /*, ...*/ ],
            Marker: ""
        };
        return [200, ret];
    }
module.exports.DescribeReservedDBInstancesOfferings = function DescribeReservedDBInstancesOfferings(aws) {
        var OfferingType = aws.params['OfferingType'];
        var Marker = aws.params['Marker'];
        var Filters = aws.params['Filters'];
        var DBInstanceClass = aws.params['DBInstanceClass'];
        var ReservedDBInstancesOfferingId = aws.params['ReservedDBInstancesOfferingId'];
        var ProductDescription = aws.params['ProductDescription'];
        var MultiAZ = aws.params['MultiAZ'] /* boolean */;
        var Duration = aws.params['Duration'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;


        // TODO implement code

        var ret = {
            Marker: "",
            ReservedDBInstancesOfferings: [ {
                CurrencyCode: "",
                OfferingType: "",
                RecurringCharges: /*S5t*/[ {
                    RecurringChargeAmount: 0.0 /*double*/,
                    RecurringChargeFrequency: ""
                } /*, ...*/ ],
                DBInstanceClass: "",
                ProductDescription: "",
                ReservedDBInstancesOfferingId: "",
                FixedPrice: 0.0 /*double*/,
                MultiAZ: false,
                Duration: 0,
                UsagePrice: 0.0 /*double*/
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ResetDBClusterParameterGroup = function ResetDBClusterParameterGroup(aws) {
        var ResetAllParameters = aws.params['ResetAllParameters'] /* boolean */;
        var DBClusterParameterGroupName = aws.params['DBClusterParameterGroupName'];
        var Parameters = aws.params['Parameters'];
        if (! DBClusterParameterGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBClusterParameterGroupName"];
        }


        // TODO implement code

        var ret = /*S68*/{
            DBClusterParameterGroupName: ""
        };
        return [200, ret];
    }
module.exports.DownloadDBLogFilePortion = function DownloadDBLogFilePortion(aws) {
        var Marker = aws.params['Marker'];
        var DBInstanceIdentifier = aws.params['DBInstanceIdentifier'];
        var LogFileName = aws.params['LogFileName'];
        var NumberOfLines = aws.params['NumberOfLines'] /* integer */;
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }
        if (! LogFileName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LogFileName"];
        }


        // TODO implement code

        var ret = {
            Marker: "",
            LogFileData: "",
            AdditionalDataPending: false
        };
        return [200, ret];
    }
module.exports.DeleteDBInstance = function DeleteDBInstance(aws) {
        var DBInstanceIdentifier = aws.params['DBInstanceIdentifier'];
        var FinalDBSnapshotIdentifier = aws.params['FinalDBSnapshotIdentifier'];
        var SkipFinalSnapshot = aws.params['SkipFinalSnapshot'] /* boolean */;
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }


        // TODO implement code

        var ret = {
            DBInstance: /*S1s*/{
                EnhancedMonitoringResourceArn: "",
                AllocatedStorage: 0,
                VpcSecurityGroups: /*S1a*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                PreferredBackupWindow: "",
                MasterUsername: "",
                Endpoint: {
                    Address: "",
                    HostedZoneId: "",
                    Port: 0
                },
                StorageType: "",
                TdeCredentialArn: "",
                PendingModifiedValues: {
                    Port: 0,
                    AllocatedStorage: 0,
                    CACertificateIdentifier: "",
                    DBInstanceClass: "",
                    MasterUserPassword: "",
                    EngineVersion: "",
                    MultiAZ: false,
                    StorageType: "",
                    BackupRetentionPeriod: 0,
                    DBInstanceIdentifier: "",
                    Iops: 0
                },
                PubliclyAccessible: false,
                BackupRetentionPeriod: 0,
                EngineVersion: "",
                OptionGroupMemberships: [ {
                    Status: "",
                    OptionGroupName: ""
                } /*, ...*/ ],
                SecondaryAvailabilityZone: "",
                StatusInfos: [ {
                    Status: "",
                    Message: "",
                    Normal: false,
                    StatusType: ""
                } /*, ...*/ ],
                InstanceCreateTime: now(),
                MultiAZ: false,
                CACertificateIdentifier: "",
                Iops: 0,
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                DbInstancePort: 0,
                PreferredMaintenanceWindow: "",
                AutoMinorVersionUpgrade: false,
                DBInstanceClass: "",
                Engine: "",
                DBSubnetGroup: /*S1w*/{
                    Subnets: [ {
                        SubnetIdentifier: "",
                        SubnetStatus: "",
                        SubnetAvailabilityZone: /*S1z*/{
                            Name: ""
                        }
                    } /*, ...*/ ],
                    DBSubnetGroupDescription: "",
                    SubnetGroupStatus: "",
                    DBSubnetGroupName: "",
                    VpcId: ""
                },
                StorageEncrypted: false,
                LicenseModel: "",
                AvailabilityZone: "",
                DBName: "",
                DBSecurityGroups: /*S18*/[ {
                    Status: "",
                    DBSecurityGroupName: ""
                } /*, ...*/ ],
                CopyTagsToSnapshot: false,
                DbiResourceId: "",
                KmsKeyId: "",
                DBParameterGroups: [ {
                    ParameterApplyStatus: "",
                    DBParameterGroupName: ""
                } /*, ...*/ ],
                DBInstanceIdentifier: "",
                DBInstanceStatus: "",
                CharacterSetName: "",
                MonitoringInterval: 0,
                ReadReplicaSourceDBInstanceIdentifier: "",
                MonitoringRoleArn: "",
                LatestRestorableTime: now(),
                DBClusterIdentifier: ""
            }
        };
        return [200, ret];
    }
module.exports.ModifyDBSnapshotAttribute = function ModifyDBSnapshotAttribute(aws) {
        var ValuesToRemove = aws.params['ValuesToRemove'];
        var AttributeName = aws.params['AttributeName'];
        var ValuesToAdd = aws.params['ValuesToAdd'];
        var DBSnapshotIdentifier = aws.params['DBSnapshotIdentifier'];
        if (! DBSnapshotIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSnapshotIdentifier"];
        }


        // TODO implement code

        var ret = {
            DBSnapshotAttributesResult: /*S4f*/{
                DBSnapshotAttributes: [ {
                    AttributeValues: /*S4i*/[ "" /*, ...*/ ],
                    AttributeName: ""
                } /*, ...*/ ],
                DBSnapshotIdentifier: ""
            }
        };
        return [200, ret];
    }
module.exports.CreateDBSnapshot = function CreateDBSnapshot(aws) {
        var Tags = aws.params['Tags'];
        var DBInstanceIdentifier = aws.params['DBInstanceIdentifier'];
        var DBSnapshotIdentifier = aws.params['DBSnapshotIdentifier'];
        if (! DBSnapshotIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSnapshotIdentifier"];
        }
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }


        // TODO implement code

        var ret = {
            DBSnapshot: /*Sz*/{
                Port: 0,
                AllocatedStorage: 0,
                KmsKeyId: "",
                MasterUsername: "",
                DBInstanceIdentifier: "",
                StorageType: "",
                SnapshotCreateTime: now(),
                SnapshotType: "",
                EngineVersion: "",
                DBSnapshotIdentifier: "",
                InstanceCreateTime: now(),
                OptionGroupName: "",
                VpcId: "",
                TdeCredentialArn: "",
                Engine: "",
                Status: "",
                LicenseModel: "",
                AvailabilityZone: "",
                Iops: 0,
                Encrypted: false,
                SourceDBSnapshotIdentifier: "",
                PercentProgress: 0,
                SourceRegion: ""
            }
        };
        return [200, ret];
    }
module.exports.CreateEventSubscription = function CreateEventSubscription(aws) {
        var Tags = aws.params['Tags'];
        var Enabled = aws.params['Enabled'] /* boolean */;
        var SubscriptionName = aws.params['SubscriptionName'];
        var SnsTopicArn = aws.params['SnsTopicArn'];
        var SourceType = aws.params['SourceType'];
        var EventCategories = aws.params['EventCategories'];
        var SourceIds = aws.params['SourceIds'];
        if (! SubscriptionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubscriptionName"];
        }
        if (! SnsTopicArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SnsTopicArn"];
        }


        // TODO implement code

        var ret = {
            EventSubscription: /*S4*/{
                SourceType: "",
                Enabled: false,
                SubscriptionCreationTime: "",
                SnsTopicArn: "",
                SourceIdsList: /*S5*/[ "" /*, ...*/ ],
                Status: "",
                CustomerAwsId: "",
                EventCategoriesList: /*S6*/[ "" /*, ...*/ ],
                CustSubscriptionId: ""
            }
        };
        return [200, ret];
    }
module.exports.CreateDBClusterSnapshot = function CreateDBClusterSnapshot(aws) {
        var Tags = aws.params['Tags'];
        var DBClusterSnapshotIdentifier = aws.params['DBClusterSnapshotIdentifier'];
        var DBClusterIdentifier = aws.params['DBClusterIdentifier'];
        if (! DBClusterSnapshotIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBClusterSnapshotIdentifier"];
        }
        if (! DBClusterIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBClusterIdentifier"];
        }


        // TODO implement code

        var ret = {
            DBClusterSnapshot: /*Sq*/{
                Port: 0,
                AllocatedStorage: 0,
                Engine: "",
                MasterUsername: "",
                Status: "",
                LicenseModel: "",
                SnapshotCreateTime: now(),
                SnapshotType: "",
                EngineVersion: "",
                KmsKeyId: "",
                DBClusterIdentifier: "",
                PercentProgress: 0,
                AvailabilityZones: /*Sr*/[ "" /*, ...*/ ],
                DBClusterSnapshotIdentifier: "",
                StorageEncrypted: false,
                ClusterCreateTime: now(),
                VpcId: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeDBSubnetGroups = function DescribeDBSubnetGroups(aws) {
        var Marker = aws.params['Marker'];
        var Filters = aws.params['Filters'];
        var DBSubnetGroupName = aws.params['DBSubnetGroupName'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;


        // TODO implement code

        var ret = {
            Marker: "",
            DBSubnetGroups: [ /*S1w*/{
                Subnets: [ {
                    SubnetIdentifier: "",
                    SubnetStatus: "",
                    SubnetAvailabilityZone: /*S1z*/{
                        Name: ""
                    }
                } /*, ...*/ ],
                DBSubnetGroupDescription: "",
                SubnetGroupStatus: "",
                DBSubnetGroupName: "",
                VpcId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeEventSubscriptions = function DescribeEventSubscriptions(aws) {
        var Marker = aws.params['Marker'];
        var SubscriptionName = aws.params['SubscriptionName'];
        var Filters = aws.params['Filters'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;


        // TODO implement code

        var ret = {
            Marker: "",
            EventSubscriptionsList: [ /*S4*/{
                SourceType: "",
                Enabled: false,
                SubscriptionCreationTime: "",
                SnsTopicArn: "",
                SourceIdsList: /*S5*/[ "" /*, ...*/ ],
                Status: "",
                CustomerAwsId: "",
                EventCategoriesList: /*S6*/[ "" /*, ...*/ ],
                CustSubscriptionId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ApplyPendingMaintenanceAction = function ApplyPendingMaintenanceAction(aws) {
        var ResourceIdentifier = aws.params['ResourceIdentifier'];
        var OptInType = aws.params['OptInType'];
        var ApplyAction = aws.params['ApplyAction'];
        if (! ResourceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResourceIdentifier"];
        }
        if (! ApplyAction) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ApplyAction"];
        }
        if (! OptInType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter OptInType"];
        }


        // TODO implement code

        var ret = {
            ResourcePendingMaintenanceActions: /*Sd*/{
                PendingMaintenanceActionDetails: [ {
                    Action: "",
                    OptInStatus: "",
                    AutoAppliedAfterDate: now(),
                    ForcedApplyDate: now(),
                    CurrentApplyDate: now(),
                    Description: ""
                } /*, ...*/ ],
                ResourceIdentifier: ""
            }
        };
        return [200, ret];
    }
module.exports.ListTagsForResource = function ListTagsForResource(aws) {
        var Filters = aws.params['Filters'];
        var ResourceName = aws.params['ResourceName'];
        if (! ResourceName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResourceName"];
        }


        // TODO implement code

        var ret = {
            TagList: /*S9*/[ {
                Value: "",
                Key: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeOrderableDBInstanceOptions = function DescribeOrderableDBInstanceOptions(aws) {
        var EngineVersion = aws.params['EngineVersion'];
        var Vpc = aws.params['Vpc'] /* boolean */;
        var DBInstanceClass = aws.params['DBInstanceClass'];
        var Engine = aws.params['Engine'];
        var LicenseModel = aws.params['LicenseModel'];
        var Marker = aws.params['Marker'];
        var Filters = aws.params['Filters'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        if (! Engine) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Engine"];
        }


        // TODO implement code

        var ret = {
            Marker: "",
            OrderableDBInstanceOptions: [ {
                Vpc: false,
                DBInstanceClass: "",
                AvailabilityZones: [ /*S1z*/{
                    Name: ""
                } /*, ...*/ ],
                MultiAZCapable: false,
                LicenseModel: "",
                ReadReplicaCapable: false,
                EngineVersion: "",
                StorageType: "",
                SupportsStorageEncryption: false,
                SupportsIops: false,
                SupportsEnhancedMonitoring: false,
                Engine: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteEventSubscription = function DeleteEventSubscription(aws) {
        var SubscriptionName = aws.params['SubscriptionName'];
        if (! SubscriptionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubscriptionName"];
        }


        // TODO implement code

        var ret = {
            EventSubscription: /*S4*/{
                SourceType: "",
                Enabled: false,
                SubscriptionCreationTime: "",
                SnsTopicArn: "",
                SourceIdsList: /*S5*/[ "" /*, ...*/ ],
                Status: "",
                CustomerAwsId: "",
                EventCategoriesList: /*S6*/[ "" /*, ...*/ ],
                CustSubscriptionId: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeDBSnapshots = function DescribeDBSnapshots(aws) {
        var SnapshotType = aws.params['SnapshotType'];
        var Filters = aws.params['Filters'];
        var DBSnapshotIdentifier = aws.params['DBSnapshotIdentifier'];
        var Marker = aws.params['Marker'];
        var DBInstanceIdentifier = aws.params['DBInstanceIdentifier'];
        var IncludePublic = aws.params['IncludePublic'] /* boolean */;
        var IncludeShared = aws.params['IncludeShared'] /* boolean */;
        var MaxRecords = aws.params['MaxRecords'] /* integer */;


        // TODO implement code

        var ret = {
            Marker: "",
            DBSnapshots: [ /*Sz*/{
                Port: 0,
                AllocatedStorage: 0,
                KmsKeyId: "",
                MasterUsername: "",
                DBInstanceIdentifier: "",
                StorageType: "",
                SnapshotCreateTime: now(),
                SnapshotType: "",
                EngineVersion: "",
                DBSnapshotIdentifier: "",
                InstanceCreateTime: now(),
                OptionGroupName: "",
                VpcId: "",
                TdeCredentialArn: "",
                Engine: "",
                Status: "",
                LicenseModel: "",
                AvailabilityZone: "",
                Iops: 0,
                Encrypted: false,
                SourceDBSnapshotIdentifier: "",
                PercentProgress: 0,
                SourceRegion: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateDBSubnetGroup = function CreateDBSubnetGroup(aws) {
        var Tags = aws.params['Tags'];
        var DBSubnetGroupDescription = aws.params['DBSubnetGroupDescription'];
        var DBSubnetGroupName = aws.params['DBSubnetGroupName'];
        var SubnetIds = aws.params['SubnetIds'];
        if (! DBSubnetGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSubnetGroupName"];
        }
        if (! DBSubnetGroupDescription) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSubnetGroupDescription"];
        }
        if (! SubnetIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SubnetIds"];
        }


        // TODO implement code

        var ret = {
            DBSubnetGroup: /*S1w*/{
                Subnets: [ {
                    SubnetIdentifier: "",
                    SubnetStatus: "",
                    SubnetAvailabilityZone: /*S1z*/{
                        Name: ""
                    }
                } /*, ...*/ ],
                DBSubnetGroupDescription: "",
                SubnetGroupStatus: "",
                DBSubnetGroupName: "",
                VpcId: ""
            }
        };
        return [200, ret];
    }
module.exports.PurchaseReservedDBInstancesOffering = function PurchaseReservedDBInstancesOffering(aws) {
        var ReservedDBInstancesOfferingId = aws.params['ReservedDBInstancesOfferingId'];
        var ReservedDBInstanceId = aws.params['ReservedDBInstanceId'];
        var Tags = aws.params['Tags'];
        var DBInstanceCount = aws.params['DBInstanceCount'] /* integer */;
        if (! ReservedDBInstancesOfferingId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ReservedDBInstancesOfferingId"];
        }


        // TODO implement code

        var ret = {
            ReservedDBInstance: /*S5r*/{
                ReservedDBInstanceId: "",
                State: "",
                DBInstanceClass: "",
                RecurringCharges: /*S5t*/[ {
                    RecurringChargeAmount: 0.0 /*double*/,
                    RecurringChargeFrequency: ""
                } /*, ...*/ ],
                DBInstanceCount: 0,
                CurrencyCode: "",
                ReservedDBInstancesOfferingId: "",
                FixedPrice: 0.0 /*double*/,
                StartTime: now(),
                OfferingType: "",
                ProductDescription: "",
                MultiAZ: false,
                Duration: 0,
                UsagePrice: 0.0 /*double*/
            }
        };
        return [200, ret];
    }
module.exports.DescribeDBInstances = function DescribeDBInstances(aws) {
        var Marker = aws.params['Marker'];
        var DBInstanceIdentifier = aws.params['DBInstanceIdentifier'];
        var Filters = aws.params['Filters'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;


        // TODO implement code

        var ret = {
            Marker: "",
            DBInstances: [ /*S1s*/{
                EnhancedMonitoringResourceArn: "",
                AllocatedStorage: 0,
                VpcSecurityGroups: /*S1a*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                PreferredBackupWindow: "",
                MasterUsername: "",
                Endpoint: {
                    Address: "",
                    HostedZoneId: "",
                    Port: 0
                },
                StorageType: "",
                TdeCredentialArn: "",
                PendingModifiedValues: {
                    Port: 0,
                    AllocatedStorage: 0,
                    CACertificateIdentifier: "",
                    DBInstanceClass: "",
                    MasterUserPassword: "",
                    EngineVersion: "",
                    MultiAZ: false,
                    StorageType: "",
                    BackupRetentionPeriod: 0,
                    DBInstanceIdentifier: "",
                    Iops: 0
                },
                PubliclyAccessible: false,
                BackupRetentionPeriod: 0,
                EngineVersion: "",
                OptionGroupMemberships: [ {
                    Status: "",
                    OptionGroupName: ""
                } /*, ...*/ ],
                SecondaryAvailabilityZone: "",
                StatusInfos: [ {
                    Status: "",
                    Message: "",
                    Normal: false,
                    StatusType: ""
                } /*, ...*/ ],
                InstanceCreateTime: now(),
                MultiAZ: false,
                CACertificateIdentifier: "",
                Iops: 0,
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                DbInstancePort: 0,
                PreferredMaintenanceWindow: "",
                AutoMinorVersionUpgrade: false,
                DBInstanceClass: "",
                Engine: "",
                DBSubnetGroup: /*S1w*/{
                    Subnets: [ {
                        SubnetIdentifier: "",
                        SubnetStatus: "",
                        SubnetAvailabilityZone: /*S1z*/{
                            Name: ""
                        }
                    } /*, ...*/ ],
                    DBSubnetGroupDescription: "",
                    SubnetGroupStatus: "",
                    DBSubnetGroupName: "",
                    VpcId: ""
                },
                StorageEncrypted: false,
                LicenseModel: "",
                AvailabilityZone: "",
                DBName: "",
                DBSecurityGroups: /*S18*/[ {
                    Status: "",
                    DBSecurityGroupName: ""
                } /*, ...*/ ],
                CopyTagsToSnapshot: false,
                DbiResourceId: "",
                KmsKeyId: "",
                DBParameterGroups: [ {
                    ParameterApplyStatus: "",
                    DBParameterGroupName: ""
                } /*, ...*/ ],
                DBInstanceIdentifier: "",
                DBInstanceStatus: "",
                CharacterSetName: "",
                MonitoringInterval: 0,
                ReadReplicaSourceDBInstanceIdentifier: "",
                MonitoringRoleArn: "",
                LatestRestorableTime: now(),
                DBClusterIdentifier: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateDBClusterParameterGroup = function CreateDBClusterParameterGroup(aws) {
        var Tags = aws.params['Tags'];
        var Description = aws.params['Description'];
        var DBClusterParameterGroupName = aws.params['DBClusterParameterGroupName'];
        var DBParameterGroupFamily = aws.params['DBParameterGroupFamily'];
        if (! DBClusterParameterGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBClusterParameterGroupName"];
        }
        if (! DBParameterGroupFamily) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBParameterGroupFamily"];
        }
        if (! Description) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Description"];
        }


        // TODO implement code

        var ret = {
            DBClusterParameterGroup: /*S1m*/{
                Description: "",
                DBClusterParameterGroupName: "",
                DBParameterGroupFamily: ""
            }
        };
        return [200, ret];
    }
module.exports.CreateDBInstanceReadReplica = function CreateDBInstanceReadReplica(aws) {
        var Tags = aws.params['Tags'];
        var Port = aws.params['Port'] /* integer */;
        var DBInstanceClass = aws.params['DBInstanceClass'];
        var MonitoringRoleArn = aws.params['MonitoringRoleArn'];
        var SourceDBInstanceIdentifier = aws.params['SourceDBInstanceIdentifier'];
        var StorageType = aws.params['StorageType'];
        var AvailabilityZone = aws.params['AvailabilityZone'];
        var DBSubnetGroupName = aws.params['DBSubnetGroupName'];
        var PubliclyAccessible = aws.params['PubliclyAccessible'] /* boolean */;
        var Iops = aws.params['Iops'] /* integer */;
        var CopyTagsToSnapshot = aws.params['CopyTagsToSnapshot'] /* boolean */;
        var DBInstanceIdentifier = aws.params['DBInstanceIdentifier'];
        var AutoMinorVersionUpgrade = aws.params['AutoMinorVersionUpgrade'] /* boolean */;
        var OptionGroupName = aws.params['OptionGroupName'];
        var MonitoringInterval = aws.params['MonitoringInterval'] /* integer */;
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }
        if (! SourceDBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SourceDBInstanceIdentifier"];
        }


        // TODO implement code

        var ret = {
            DBInstance: /*S1s*/{
                EnhancedMonitoringResourceArn: "",
                AllocatedStorage: 0,
                VpcSecurityGroups: /*S1a*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                PreferredBackupWindow: "",
                MasterUsername: "",
                Endpoint: {
                    Address: "",
                    HostedZoneId: "",
                    Port: 0
                },
                StorageType: "",
                TdeCredentialArn: "",
                PendingModifiedValues: {
                    Port: 0,
                    AllocatedStorage: 0,
                    CACertificateIdentifier: "",
                    DBInstanceClass: "",
                    MasterUserPassword: "",
                    EngineVersion: "",
                    MultiAZ: false,
                    StorageType: "",
                    BackupRetentionPeriod: 0,
                    DBInstanceIdentifier: "",
                    Iops: 0
                },
                PubliclyAccessible: false,
                BackupRetentionPeriod: 0,
                EngineVersion: "",
                OptionGroupMemberships: [ {
                    Status: "",
                    OptionGroupName: ""
                } /*, ...*/ ],
                SecondaryAvailabilityZone: "",
                StatusInfos: [ {
                    Status: "",
                    Message: "",
                    Normal: false,
                    StatusType: ""
                } /*, ...*/ ],
                InstanceCreateTime: now(),
                MultiAZ: false,
                CACertificateIdentifier: "",
                Iops: 0,
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                DbInstancePort: 0,
                PreferredMaintenanceWindow: "",
                AutoMinorVersionUpgrade: false,
                DBInstanceClass: "",
                Engine: "",
                DBSubnetGroup: /*S1w*/{
                    Subnets: [ {
                        SubnetIdentifier: "",
                        SubnetStatus: "",
                        SubnetAvailabilityZone: /*S1z*/{
                            Name: ""
                        }
                    } /*, ...*/ ],
                    DBSubnetGroupDescription: "",
                    SubnetGroupStatus: "",
                    DBSubnetGroupName: "",
                    VpcId: ""
                },
                StorageEncrypted: false,
                LicenseModel: "",
                AvailabilityZone: "",
                DBName: "",
                DBSecurityGroups: /*S18*/[ {
                    Status: "",
                    DBSecurityGroupName: ""
                } /*, ...*/ ],
                CopyTagsToSnapshot: false,
                DbiResourceId: "",
                KmsKeyId: "",
                DBParameterGroups: [ {
                    ParameterApplyStatus: "",
                    DBParameterGroupName: ""
                } /*, ...*/ ],
                DBInstanceIdentifier: "",
                DBInstanceStatus: "",
                CharacterSetName: "",
                MonitoringInterval: 0,
                ReadReplicaSourceDBInstanceIdentifier: "",
                MonitoringRoleArn: "",
                LatestRestorableTime: now(),
                DBClusterIdentifier: ""
            }
        };
        return [200, ret];
    }
module.exports.DeleteDBParameterGroup = function DeleteDBParameterGroup(aws) {
        var DBParameterGroupName = aws.params['DBParameterGroupName'];
        if (! DBParameterGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBParameterGroupName"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeleteOptionGroup = function DeleteOptionGroup(aws) {
        var OptionGroupName = aws.params['OptionGroupName'];
        if (! OptionGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter OptionGroupName"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeleteDBCluster = function DeleteDBCluster(aws) {
        var FinalDBSnapshotIdentifier = aws.params['FinalDBSnapshotIdentifier'];
        var SkipFinalSnapshot = aws.params['SkipFinalSnapshot'] /* boolean */;
        var DBClusterIdentifier = aws.params['DBClusterIdentifier'];
        if (! DBClusterIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBClusterIdentifier"];
        }


        // TODO implement code

        var ret = {
            DBCluster: /*S1f*/{
                Port: 0,
                AllocatedStorage: 0,
                VpcSecurityGroups: /*S1a*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                AvailabilityZones: /*Sr*/[ "" /*, ...*/ ],
                PreferredBackupWindow: "",
                MasterUsername: "",
                Endpoint: "",
                DBClusterOptionGroupMemberships: [ {
                    Status: "",
                    DBClusterOptionGroupName: ""
                } /*, ...*/ ],
                EngineVersion: "",
                DatabaseName: "",
                CharacterSetName: "",
                StorageEncrypted: false,
                HostedZoneId: "",
                Engine: "",
                PreferredMaintenanceWindow: "",
                DBSubnetGroup: "",
                Status: "",
                DBClusterMembers: [ {
                    DBClusterParameterGroupStatus: "",
                    DBInstanceIdentifier: "",
                    IsClusterWriter: false
                } /*, ...*/ ],
                BackupRetentionPeriod: 0,
                DBClusterParameterGroup: "",
                KmsKeyId: "",
                PercentProgress: "",
                EarliestRestorableTime: now(),
                LatestRestorableTime: now(),
                DBClusterIdentifier: "",
                DbClusterResourceId: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribePendingMaintenanceActions = function DescribePendingMaintenanceActions(aws) {
        var Marker = aws.params['Marker'];
        var ResourceIdentifier = aws.params['ResourceIdentifier'];
        var Filters = aws.params['Filters'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;


        // TODO implement code

        var ret = {
            Marker: "",
            PendingMaintenanceActions: [ /*Sd*/{
                PendingMaintenanceActionDetails: [ {
                    Action: "",
                    OptInStatus: "",
                    AutoAppliedAfterDate: now(),
                    ForcedApplyDate: now(),
                    CurrentApplyDate: now(),
                    Description: ""
                } /*, ...*/ ],
                ResourceIdentifier: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteDBSnapshot = function DeleteDBSnapshot(aws) {
        var DBSnapshotIdentifier = aws.params['DBSnapshotIdentifier'];
        if (! DBSnapshotIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBSnapshotIdentifier"];
        }


        // TODO implement code

        var ret = {
            DBSnapshot: /*Sz*/{
                Port: 0,
                AllocatedStorage: 0,
                KmsKeyId: "",
                MasterUsername: "",
                DBInstanceIdentifier: "",
                StorageType: "",
                SnapshotCreateTime: now(),
                SnapshotType: "",
                EngineVersion: "",
                DBSnapshotIdentifier: "",
                InstanceCreateTime: now(),
                OptionGroupName: "",
                VpcId: "",
                TdeCredentialArn: "",
                Engine: "",
                Status: "",
                LicenseModel: "",
                AvailabilityZone: "",
                Iops: 0,
                Encrypted: false,
                SourceDBSnapshotIdentifier: "",
                PercentProgress: 0,
                SourceRegion: ""
            }
        };
        return [200, ret];
    }
module.exports.ModifyDBCluster = function ModifyDBCluster(aws) {
        var MasterUserPassword = aws.params['MasterUserPassword'];
        var Port = aws.params['Port'] /* integer */;
        var PreferredBackupWindow = aws.params['PreferredBackupWindow'];
        var VpcSecurityGroupIds = aws.params['VpcSecurityGroupIds'];
        var NewDBClusterIdentifier = aws.params['NewDBClusterIdentifier'];
        var PreferredMaintenanceWindow = aws.params['PreferredMaintenanceWindow'];
        var OptionGroupName = aws.params['OptionGroupName'];
        var DBClusterParameterGroupName = aws.params['DBClusterParameterGroupName'];
        var BackupRetentionPeriod = aws.params['BackupRetentionPeriod'] /* integer */;
        var DBClusterIdentifier = aws.params['DBClusterIdentifier'];
        var ApplyImmediately = aws.params['ApplyImmediately'] /* boolean */;
        if (! DBClusterIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBClusterIdentifier"];
        }


        // TODO implement code

        var ret = {
            DBCluster: /*S1f*/{
                Port: 0,
                AllocatedStorage: 0,
                VpcSecurityGroups: /*S1a*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                AvailabilityZones: /*Sr*/[ "" /*, ...*/ ],
                PreferredBackupWindow: "",
                MasterUsername: "",
                Endpoint: "",
                DBClusterOptionGroupMemberships: [ {
                    Status: "",
                    DBClusterOptionGroupName: ""
                } /*, ...*/ ],
                EngineVersion: "",
                DatabaseName: "",
                CharacterSetName: "",
                StorageEncrypted: false,
                HostedZoneId: "",
                Engine: "",
                PreferredMaintenanceWindow: "",
                DBSubnetGroup: "",
                Status: "",
                DBClusterMembers: [ {
                    DBClusterParameterGroupStatus: "",
                    DBInstanceIdentifier: "",
                    IsClusterWriter: false
                } /*, ...*/ ],
                BackupRetentionPeriod: 0,
                DBClusterParameterGroup: "",
                KmsKeyId: "",
                PercentProgress: "",
                EarliestRestorableTime: now(),
                LatestRestorableTime: now(),
                DBClusterIdentifier: "",
                DbClusterResourceId: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeEventCategories = function DescribeEventCategories(aws) {
        var SourceType = aws.params['SourceType'];
        var Filters = aws.params['Filters'];


        // TODO implement code

        var ret = {
            EventCategoriesMapList: [ {
                SourceType: "",
                EventCategories: /*S6*/[ "" /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CopyDBClusterSnapshot = function CopyDBClusterSnapshot(aws) {
        var SourceDBClusterSnapshotIdentifier = aws.params['SourceDBClusterSnapshotIdentifier'];
        var TargetDBClusterSnapshotIdentifier = aws.params['TargetDBClusterSnapshotIdentifier'];
        var Tags = aws.params['Tags'];
        if (! SourceDBClusterSnapshotIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SourceDBClusterSnapshotIdentifier"];
        }
        if (! TargetDBClusterSnapshotIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TargetDBClusterSnapshotIdentifier"];
        }


        // TODO implement code

        var ret = {
            DBClusterSnapshot: /*Sq*/{
                Port: 0,
                AllocatedStorage: 0,
                Engine: "",
                MasterUsername: "",
                Status: "",
                LicenseModel: "",
                SnapshotCreateTime: now(),
                SnapshotType: "",
                EngineVersion: "",
                KmsKeyId: "",
                DBClusterIdentifier: "",
                PercentProgress: 0,
                AvailabilityZones: /*Sr*/[ "" /*, ...*/ ],
                DBClusterSnapshotIdentifier: "",
                StorageEncrypted: false,
                ClusterCreateTime: now(),
                VpcId: ""
            }
        };
        return [200, ret];
    }
module.exports.RebootDBInstance = function RebootDBInstance(aws) {
        var DBInstanceIdentifier = aws.params['DBInstanceIdentifier'];
        var ForceFailover = aws.params['ForceFailover'] /* boolean */;
        if (! DBInstanceIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBInstanceIdentifier"];
        }


        // TODO implement code

        var ret = {
            DBInstance: /*S1s*/{
                EnhancedMonitoringResourceArn: "",
                AllocatedStorage: 0,
                VpcSecurityGroups: /*S1a*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                PreferredBackupWindow: "",
                MasterUsername: "",
                Endpoint: {
                    Address: "",
                    HostedZoneId: "",
                    Port: 0
                },
                StorageType: "",
                TdeCredentialArn: "",
                PendingModifiedValues: {
                    Port: 0,
                    AllocatedStorage: 0,
                    CACertificateIdentifier: "",
                    DBInstanceClass: "",
                    MasterUserPassword: "",
                    EngineVersion: "",
                    MultiAZ: false,
                    StorageType: "",
                    BackupRetentionPeriod: 0,
                    DBInstanceIdentifier: "",
                    Iops: 0
                },
                PubliclyAccessible: false,
                BackupRetentionPeriod: 0,
                EngineVersion: "",
                OptionGroupMemberships: [ {
                    Status: "",
                    OptionGroupName: ""
                } /*, ...*/ ],
                SecondaryAvailabilityZone: "",
                StatusInfos: [ {
                    Status: "",
                    Message: "",
                    Normal: false,
                    StatusType: ""
                } /*, ...*/ ],
                InstanceCreateTime: now(),
                MultiAZ: false,
                CACertificateIdentifier: "",
                Iops: 0,
                ReadReplicaDBInstanceIdentifiers: [ "" /*, ...*/ ],
                DbInstancePort: 0,
                PreferredMaintenanceWindow: "",
                AutoMinorVersionUpgrade: false,
                DBInstanceClass: "",
                Engine: "",
                DBSubnetGroup: /*S1w*/{
                    Subnets: [ {
                        SubnetIdentifier: "",
                        SubnetStatus: "",
                        SubnetAvailabilityZone: /*S1z*/{
                            Name: ""
                        }
                    } /*, ...*/ ],
                    DBSubnetGroupDescription: "",
                    SubnetGroupStatus: "",
                    DBSubnetGroupName: "",
                    VpcId: ""
                },
                StorageEncrypted: false,
                LicenseModel: "",
                AvailabilityZone: "",
                DBName: "",
                DBSecurityGroups: /*S18*/[ {
                    Status: "",
                    DBSecurityGroupName: ""
                } /*, ...*/ ],
                CopyTagsToSnapshot: false,
                DbiResourceId: "",
                KmsKeyId: "",
                DBParameterGroups: [ {
                    ParameterApplyStatus: "",
                    DBParameterGroupName: ""
                } /*, ...*/ ],
                DBInstanceIdentifier: "",
                DBInstanceStatus: "",
                CharacterSetName: "",
                MonitoringInterval: 0,
                ReadReplicaSourceDBInstanceIdentifier: "",
                MonitoringRoleArn: "",
                LatestRestorableTime: now(),
                DBClusterIdentifier: ""
            }
        };
        return [200, ret];
    }
module.exports.CopyOptionGroup = function CopyOptionGroup(aws) {
        var Tags = aws.params['Tags'];
        var SourceOptionGroupIdentifier = aws.params['SourceOptionGroupIdentifier'];
        var TargetOptionGroupIdentifier = aws.params['TargetOptionGroupIdentifier'];
        var TargetOptionGroupDescription = aws.params['TargetOptionGroupDescription'];
        if (! SourceOptionGroupIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SourceOptionGroupIdentifier"];
        }
        if (! TargetOptionGroupIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TargetOptionGroupIdentifier"];
        }
        if (! TargetOptionGroupDescription) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TargetOptionGroupDescription"];
        }


        // TODO implement code

        var ret = {
            OptionGroup: /*S13*/{
                EngineName: "",
                MajorEngineVersion: "",
                Options: [ {
                    Port: 0,
                    Permanent: false,
                    DBSecurityGroupMemberships: /*S18*/[ {
                        Status: "",
                        DBSecurityGroupName: ""
                    } /*, ...*/ ],
                    OptionName: "",
                    OptionSettings: [ /*S17*/{
                        Value: "",
                        DefaultValue: "",
                        Description: "",
                        IsModifiable: false,
                        IsCollection: false,
                        AllowedValues: "",
                        DataType: "",
                        Name: "",
                        ApplyType: ""
                    } /*, ...*/ ],
                    OptionDescription: "",
                    VpcSecurityGroupMemberships: /*S1a*/[ {
                        Status: "",
                        VpcSecurityGroupId: ""
                    } /*, ...*/ ],
                    Persistent: false
                } /*, ...*/ ],
                OptionGroupName: "",
                VpcId: "",
                AllowsVpcAndNonVpcInstanceMemberships: false,
                OptionGroupDescription: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeDBParameters = function DescribeDBParameters(aws) {
        var Marker = aws.params['Marker'];
        var Source = aws.params['Source'];
        var Filters = aws.params['Filters'];
        var DBParameterGroupName = aws.params['DBParameterGroupName'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        if (! DBParameterGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBParameterGroupName"];
        }


        // TODO implement code

        var ret = {
            Marker: "",
            Parameters: /*S3h*/[ {
                MinimumEngineVersion: "",
                Description: "",
                Source: "",
                IsModifiable: false,
                ParameterValue: "",
                ParameterName: "",
                ApplyMethod: "",
                DataType: "",
                ApplyType: "",
                AllowedValues: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.RestoreDBClusterToPointInTime = function RestoreDBClusterToPointInTime(aws) {
        var VpcSecurityGroupIds = aws.params['VpcSecurityGroupIds'];
        var Port = aws.params['Port'] /* integer */;
        var Tags = aws.params['Tags'];
        var KmsKeyId = aws.params['KmsKeyId'];
        var UseLatestRestorableTime = aws.params['UseLatestRestorableTime'] /* boolean */;
        var RestoreToTime = aws.params['RestoreToTime'] /* timestamp */;
        var OptionGroupName = aws.params['OptionGroupName'];
        var DBSubnetGroupName = aws.params['DBSubnetGroupName'];
        var DBClusterIdentifier = aws.params['DBClusterIdentifier'];
        var SourceDBClusterIdentifier = aws.params['SourceDBClusterIdentifier'];
        if (! DBClusterIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBClusterIdentifier"];
        }
        if (! SourceDBClusterIdentifier) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SourceDBClusterIdentifier"];
        }


        // TODO implement code

        var ret = {
            DBCluster: /*S1f*/{
                Port: 0,
                AllocatedStorage: 0,
                VpcSecurityGroups: /*S1a*/[ {
                    Status: "",
                    VpcSecurityGroupId: ""
                } /*, ...*/ ],
                AvailabilityZones: /*Sr*/[ "" /*, ...*/ ],
                PreferredBackupWindow: "",
                MasterUsername: "",
                Endpoint: "",
                DBClusterOptionGroupMemberships: [ {
                    Status: "",
                    DBClusterOptionGroupName: ""
                } /*, ...*/ ],
                EngineVersion: "",
                DatabaseName: "",
                CharacterSetName: "",
                StorageEncrypted: false,
                HostedZoneId: "",
                Engine: "",
                PreferredMaintenanceWindow: "",
                DBSubnetGroup: "",
                Status: "",
                DBClusterMembers: [ {
                    DBClusterParameterGroupStatus: "",
                    DBInstanceIdentifier: "",
                    IsClusterWriter: false
                } /*, ...*/ ],
                BackupRetentionPeriod: 0,
                DBClusterParameterGroup: "",
                KmsKeyId: "",
                PercentProgress: "",
                EarliestRestorableTime: now(),
                LatestRestorableTime: now(),
                DBClusterIdentifier: "",
                DbClusterResourceId: ""
            }
        };
        return [200, ret];
    }
module.exports.CreateOptionGroup = function CreateOptionGroup(aws) {
        var Tags = aws.params['Tags'];
        var OptionGroupName = aws.params['OptionGroupName'];
        var MajorEngineVersion = aws.params['MajorEngineVersion'];
        var EngineName = aws.params['EngineName'];
        var OptionGroupDescription = aws.params['OptionGroupDescription'];
        if (! OptionGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter OptionGroupName"];
        }
        if (! EngineName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter EngineName"];
        }
        if (! MajorEngineVersion) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MajorEngineVersion"];
        }
        if (! OptionGroupDescription) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter OptionGroupDescription"];
        }


        // TODO implement code

        var ret = {
            OptionGroup: /*S13*/{
                EngineName: "",
                MajorEngineVersion: "",
                Options: [ {
                    Port: 0,
                    Permanent: false,
                    DBSecurityGroupMemberships: /*S18*/[ {
                        Status: "",
                        DBSecurityGroupName: ""
                    } /*, ...*/ ],
                    OptionName: "",
                    OptionSettings: [ /*S17*/{
                        Value: "",
                        DefaultValue: "",
                        Description: "",
                        IsModifiable: false,
                        IsCollection: false,
                        AllowedValues: "",
                        DataType: "",
                        Name: "",
                        ApplyType: ""
                    } /*, ...*/ ],
                    OptionDescription: "",
                    VpcSecurityGroupMemberships: /*S1a*/[ {
                        Status: "",
                        VpcSecurityGroupId: ""
                    } /*, ...*/ ],
                    Persistent: false
                } /*, ...*/ ],
                OptionGroupName: "",
                VpcId: "",
                AllowsVpcAndNonVpcInstanceMemberships: false,
                OptionGroupDescription: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeEngineDefaultParameters = function DescribeEngineDefaultParameters(aws) {
        var Marker = aws.params['Marker'];
        var Filters = aws.params['Filters'];
        var DBParameterGroupFamily = aws.params['DBParameterGroupFamily'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        if (! DBParameterGroupFamily) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DBParameterGroupFamily"];
        }


        // TODO implement code

        var ret = {
            EngineDefaults: /*S4r*/{
                Marker: "",
                Parameters: /*S3h*/[ {
                    MinimumEngineVersion: "",
                    Description: "",
                    Source: "",
                    IsModifiable: false,
                    ParameterValue: "",
                    ParameterName: "",
                    ApplyMethod: "",
                    DataType: "",
                    ApplyType: "",
                    AllowedValues: ""
                } /*, ...*/ ],
                DBParameterGroupFamily: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeOptionGroupOptions = function DescribeOptionGroupOptions(aws) {
        var Marker = aws.params['Marker'];
        var EngineName = aws.params['EngineName'];
        var MajorEngineVersion = aws.params['MajorEngineVersion'];
        var Filters = aws.params['Filters'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        if (! EngineName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter EngineName"];
        }


        // TODO implement code

        var ret = {
            Marker: "",
            OptionGroupOptions: [ {
                EngineName: "",
                MajorEngineVersion: "",
                PortRequired: false,
                DefaultPort: 0,
                MinimumRequiredMinorEngineVersion: "",
                OptionsDependedOn: [ "" /*, ...*/ ],
                Permanent: false,
                OptionGroupOptionSettings: [ {
                    SettingName: "",
                    DefaultValue: "",
                    IsModifiable: false,
                    SettingDescription: "",
                    AllowedValues: "",
                    ApplyType: ""
                } /*, ...*/ ],
                Description: "",
                Persistent: false,
                Name: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
