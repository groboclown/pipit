'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * Amazon Kinesis version 2013-12-02
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.CreateStream = function CreateStream(aws) {
        var ShardCount = aws.params.ShardCount /* integer */;
        var StreamName = aws.params.StreamName;
        if (! StreamName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StreamName"];
        }        if (! ShardCount) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ShardCount"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.GetRecords = function GetRecords(aws) {
        var Limit = aws.params.Limit /* integer */;
        var ShardIterator = aws.params.ShardIterator;
        if (! ShardIterator) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ShardIterator"];
        }

        // TODO implement code

        var ret = {
            NextShardIterator: "",
            Records: [ {
                PartitionKey: "",
                ApproximateArrivalTimestamp: now(),
                Data: null /*blob*/,
                SequenceNumber: ""
            } /*, ...*/ ],
            MillisBehindLatest: 0 /*long*/
        };
        return [200, ret];
    }
module.exports.DeleteStream = function DeleteStream(aws) {
        var StreamName = aws.params.StreamName;
        if (! StreamName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StreamName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ListStreams = function ListStreams(aws) {
        var ExclusiveStartStreamName = aws.params.ExclusiveStartStreamName;
        var Limit = aws.params.Limit /* integer */;


        // TODO implement code

        var ret = {
            HasMoreStreams: false,
            StreamNames: [ "" /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.SplitShard = function SplitShard(aws) {
        var NewStartingHashKey = aws.params.NewStartingHashKey;
        var StreamName = aws.params.StreamName;
        var ShardToSplit = aws.params.ShardToSplit;
        if (! StreamName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StreamName"];
        }        if (! ShardToSplit) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ShardToSplit"];
        }        if (! NewStartingHashKey) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter NewStartingHashKey"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.AddTagsToStream = function AddTagsToStream(aws) {
        var Tags = aws.params.Tags /* map */;
        var StreamName = aws.params.StreamName;
        if (! StreamName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StreamName"];
        }        if (! Tags) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Tags"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.GetShardIterator = function GetShardIterator(aws) {
        var ShardId = aws.params.ShardId;
        var StreamName = aws.params.StreamName;
        var StartingSequenceNumber = aws.params.StartingSequenceNumber;
        var ShardIteratorType = aws.params.ShardIteratorType;
        if (! StreamName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StreamName"];
        }        if (! ShardId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ShardId"];
        }        if (! ShardIteratorType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ShardIteratorType"];
        }

        // TODO implement code

        var ret = {
            ShardIterator: ""
        };
        return [200, ret];
    }
module.exports.IncreaseStreamRetentionPeriod = function IncreaseStreamRetentionPeriod(aws) {
        var RetentionPeriodHours = aws.params.RetentionPeriodHours /* integer */;
        var StreamName = aws.params.StreamName;
        if (! StreamName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StreamName"];
        }        if (! RetentionPeriodHours) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RetentionPeriodHours"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.MergeShards = function MergeShards(aws) {
        var ShardToMerge = aws.params.ShardToMerge;
        var AdjacentShardToMerge = aws.params.AdjacentShardToMerge;
        var StreamName = aws.params.StreamName;
        if (! StreamName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StreamName"];
        }        if (! ShardToMerge) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ShardToMerge"];
        }        if (! AdjacentShardToMerge) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AdjacentShardToMerge"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DecreaseStreamRetentionPeriod = function DecreaseStreamRetentionPeriod(aws) {
        var RetentionPeriodHours = aws.params.RetentionPeriodHours /* integer */;
        var StreamName = aws.params.StreamName;
        if (! StreamName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StreamName"];
        }        if (! RetentionPeriodHours) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RetentionPeriodHours"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.PutRecords = function PutRecords(aws) {
        var StreamName = aws.params.StreamName;
        var Records = aws.params.Records /* list */;
        if (! Records) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Records"];
        }        if (! StreamName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StreamName"];
        }

        // TODO implement code

        var ret = {
            FailedRecordCount: 0,
            Records: [ {
                ErrorMessage: "",
                ShardId: "",
                ErrorCode: "",
                SequenceNumber: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ListTagsForStream = function ListTagsForStream(aws) {
        var Limit = aws.params.Limit /* integer */;
        var StreamName = aws.params.StreamName;
        var ExclusiveStartTagKey = aws.params.ExclusiveStartTagKey;
        if (! StreamName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StreamName"];
        }

        // TODO implement code

        var ret = {
            HasMoreTags: false,
            Tags: [ {
                Value: "",
                Key: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.PutRecord = function PutRecord(aws) {
        var PartitionKey = aws.params.PartitionKey;
        var Data = aws.params.Data /* blob */;
        var SequenceNumberForOrdering = aws.params.SequenceNumberForOrdering;
        var StreamName = aws.params.StreamName;
        var ExplicitHashKey = aws.params.ExplicitHashKey;
        if (! StreamName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StreamName"];
        }        if (! Data) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Data"];
        }        if (! PartitionKey) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PartitionKey"];
        }

        // TODO implement code

        var ret = {
            ShardId: "",
            SequenceNumber: ""
        };
        return [200, ret];
    }
module.exports.RemoveTagsFromStream = function RemoveTagsFromStream(aws) {
        var TagKeys = aws.params.TagKeys /* list */;
        var StreamName = aws.params.StreamName;
        if (! StreamName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StreamName"];
        }        if (! TagKeys) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TagKeys"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeStream = function DescribeStream(aws) {
        var Limit = aws.params.Limit /* integer */;
        var StreamName = aws.params.StreamName;
        var ExclusiveStartShardId = aws.params.ExclusiveStartShardId;
        if (! StreamName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StreamName"];
        }

        // TODO implement code

        var ret = {
            StreamDescription: {
                StreamARN: "",
                StreamStatus: "",
                HasMoreShards: false,
                Shards: [ {
                    HashKeyRange: {
                        StartingHashKey: "",
                        EndingHashKey: ""
                    },
                    ShardId: "",
                    AdjacentParentShardId: "",
                    ParentShardId: "",
                    SequenceNumberRange: {
                        EndingSequenceNumber: "",
                        StartingSequenceNumber: ""
                    }
                } /*, ...*/ ],
                StreamName: "",
                RetentionPeriodHours: 0
            }
        };
        return [200, ret];
    }
