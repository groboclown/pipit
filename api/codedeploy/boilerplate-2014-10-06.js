'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * AWS CodeDeploy version 2014-10-06
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.CreateDeploymentConfig = function CreateDeploymentConfig(aws) {
        var deploymentConfigName = aws.params.deploymentConfigName;
        var minimumHealthyHosts = aws.params.minimumHealthyHosts;
        if (! deploymentConfigName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter deploymentConfigName"];
        }

        // TODO implement code

        var ret = {
            deploymentConfigId: ""
        };
        return [200, ret];
    }
module.exports.DeleteDeploymentGroup = function DeleteDeploymentGroup(aws) {
        var applicationName = aws.params.applicationName;
        var deploymentGroupName = aws.params.deploymentGroupName;
        if (! applicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter applicationName"];
        }        if (! deploymentGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter deploymentGroupName"];
        }

        // TODO implement code

        var ret = {
            hooksNotCleanedUp: /*S24*/[ {
                hook: "",
                name: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ListApplications = function ListApplications(aws) {
        var nextToken = aws.params.nextToken;


        // TODO implement code

        var ret = {
            applications: /*S9*/[ "" /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.CreateDeploymentGroup = function CreateDeploymentGroup(aws) {
        var deploymentConfigName = aws.params.deploymentConfigName;
        var serviceRoleArn = aws.params.serviceRoleArn;
        var autoScalingGroups = aws.params.autoScalingGroups;
        var applicationName = aws.params.applicationName;
        var deploymentGroupName = aws.params.deploymentGroupName;
        var ec2TagFilters = aws.params.ec2TagFilters;
        var onPremisesInstanceTagFilters = aws.params.onPremisesInstanceTagFilters;
        if (! applicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter applicationName"];
        }        if (! deploymentGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter deploymentGroupName"];
        }        if (! serviceRoleArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter serviceRoleArn"];
        }

        // TODO implement code

        var ret = {
            deploymentGroupId: ""
        };
        return [200, ret];
    }
module.exports.BatchGetApplications = function BatchGetApplications(aws) {
        var applicationNames = aws.params.applicationNames;


        // TODO implement code

        var ret = {
            applicationsInfo: [ /*Sd*/{
                applicationId: "",
                applicationName: "",
                linkedToGitHub: false,
                createTime: now()
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.BatchGetDeployments = function BatchGetDeployments(aws) {
        var deploymentIds = aws.params.deploymentIds;


        // TODO implement code

        var ret = {
            deploymentsInfo: [ /*Sm*/{
                deploymentConfigName: "",
                revision: /*Sp*/{
                    revisionType: "",
                    s3Location: {
                        bucket: "",
                        key: "",
                        version: "",
                        eTag: "",
                        bundleType: ""
                    },
                    gitHubLocation: {
                        commitId: "",
                        repository: ""
                    }
                },
                createTime: now(),
                startTime: now(),
                errorInformation: {
                    code: "",
                    message: ""
                },
                description: "",
                ignoreApplicationStopFailures: false,
                deploymentId: "",
                creator: "",
                deploymentOverview: {
                    Failed: 0 /*long*/,
                    Succeeded: 0 /*long*/,
                    Pending: 0 /*long*/,
                    Skipped: 0 /*long*/,
                    InProgress: 0 /*long*/
                },
                status: "",
                completeTime: now(),
                applicationName: "",
                deploymentGroupName: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.GetDeploymentInstance = function GetDeploymentInstance(aws) {
        var deploymentId = aws.params.deploymentId;
        var instanceId = aws.params.instanceId;
        if (! deploymentId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter deploymentId"];
        }        if (! instanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter instanceId"];
        }

        // TODO implement code

        var ret = {
            instanceSummary: {
                lifecycleEvents: [ {
                    diagnostics: {
                        logTail: "",
                        errorCode: "",
                        message: "",
                        scriptName: ""
                    },
                    endTime: now(),
                    status: "",
                    lifecycleEventName: "",
                    startTime: now()
                } /*, ...*/ ],
                status: "",
                lastUpdatedAt: now(),
                deploymentId: "",
                instanceId: ""
            }
        };
        return [200, ret];
    }
module.exports.UpdateDeploymentGroup = function UpdateDeploymentGroup(aws) {
        var deploymentConfigName = aws.params.deploymentConfigName;
        var serviceRoleArn = aws.params.serviceRoleArn;
        var newDeploymentGroupName = aws.params.newDeploymentGroupName;
        var autoScalingGroups = aws.params.autoScalingGroups;
        var applicationName = aws.params.applicationName;
        var currentDeploymentGroupName = aws.params.currentDeploymentGroupName;
        var ec2TagFilters = aws.params.ec2TagFilters;
        var onPremisesInstanceTagFilters = aws.params.onPremisesInstanceTagFilters;
        if (! applicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter applicationName"];
        }        if (! currentDeploymentGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter currentDeploymentGroupName"];
        }

        // TODO implement code

        var ret = {
            hooksNotCleanedUp: /*S24*/[ {
                hook: "",
                name: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.RemoveTagsFromOnPremisesInstances = function RemoveTagsFromOnPremisesInstances(aws) {
        var instanceNames = aws.params.instanceNames;
        var tags = aws.params.tags;
        if (! tags) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter tags"];
        }        if (! instanceNames) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter instanceNames"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ListDeploymentInstances = function ListDeploymentInstances(aws) {
        var instanceStatusFilter = aws.params.instanceStatusFilter /* list */;
        var deploymentId = aws.params.deploymentId;
        var nextToken = aws.params.nextToken;
        if (! deploymentId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter deploymentId"];
        }

        // TODO implement code

        var ret = {
            instancesList: [ "" /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.GetApplicationRevision = function GetApplicationRevision(aws) {
        var applicationName = aws.params.applicationName;
        var revision = aws.params.revision;
        if (! applicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter applicationName"];
        }        if (! revision) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter revision"];
        }

        // TODO implement code

        var ret = {
            applicationName: "",
            revision: /*Sp*/{
                revisionType: "",
                s3Location: {
                    bucket: "",
                    key: "",
                    version: "",
                    eTag: "",
                    bundleType: ""
                },
                gitHubLocation: {
                    commitId: "",
                    repository: ""
                }
            },
            revisionInfo: {
                registerTime: now(),
                lastUsedTime: now(),
                deploymentGroups: /*S2d*/[ "" /*, ...*/ ],
                firstUsedTime: now(),
                description: ""
            }
        };
        return [200, ret];
    }
module.exports.RegisterApplicationRevision = function RegisterApplicationRevision(aws) {
        var applicationName = aws.params.applicationName;
        var revision = aws.params.revision;
        var description = aws.params.description;
        if (! applicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter applicationName"];
        }        if (! revision) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter revision"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.BatchGetOnPremisesInstances = function BatchGetOnPremisesInstances(aws) {
        var instanceNames = aws.params.instanceNames;


        // TODO implement code

        var ret = {
            instanceInfos: [ /*S1b*/{
                deregisterTime: now(),
                registerTime: now(),
                instanceArn: "",
                iamUserArn: "",
                instanceName: "",
                tags: /*S2*/[ {
                    Value: "",
                    Key: ""
                } /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ListDeployments = function ListDeployments(aws) {
        var nextToken = aws.params.nextToken;
        var applicationName = aws.params.applicationName;
        var createTimeRange = aws.params.createTimeRange /* structure */;
        var includeOnlyStatuses = aws.params.includeOnlyStatuses /* list */;
        var deploymentGroupName = aws.params.deploymentGroupName;


        // TODO implement code

        var ret = {
            deployments: /*Si*/[ "" /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.CreateApplication = function CreateApplication(aws) {
        var applicationName = aws.params.applicationName;
        if (! applicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter applicationName"];
        }

        // TODO implement code

        var ret = {
            applicationId: ""
        };
        return [200, ret];
    }
module.exports.ListDeploymentGroups = function ListDeploymentGroups(aws) {
        var applicationName = aws.params.applicationName;
        var nextToken = aws.params.nextToken;
        if (! applicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter applicationName"];
        }

        // TODO implement code

        var ret = {
            applicationName: "",
            deploymentGroups: /*S2d*/[ "" /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.GetApplication = function GetApplication(aws) {
        var applicationName = aws.params.applicationName;
        if (! applicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter applicationName"];
        }

        // TODO implement code

        var ret = {
            application: /*Sd*/{
                applicationId: "",
                applicationName: "",
                linkedToGitHub: false,
                createTime: now()
            }
        };
        return [200, ret];
    }
module.exports.ListOnPremisesInstances = function ListOnPremisesInstances(aws) {
        var tagFilters = aws.params.tagFilters;
        var registrationStatus = aws.params.registrationStatus;
        var nextToken = aws.params.nextToken;


        // TODO implement code

        var ret = {
            instanceNames: /*S6*/[ "" /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.CreateDeployment = function CreateDeployment(aws) {
        var deploymentConfigName = aws.params.deploymentConfigName;
        var revision = aws.params.revision;
        var applicationName = aws.params.applicationName;
        var ignoreApplicationStopFailures = aws.params.ignoreApplicationStopFailures /* boolean */;
        var description = aws.params.description;
        var deploymentGroupName = aws.params.deploymentGroupName;
        if (! applicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter applicationName"];
        }

        // TODO implement code

        var ret = {
            deploymentId: ""
        };
        return [200, ret];
    }
module.exports.GetDeployment = function GetDeployment(aws) {
        var deploymentId = aws.params.deploymentId;
        if (! deploymentId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter deploymentId"];
        }

        // TODO implement code

        var ret = {
            deploymentInfo: /*Sm*/{
                deploymentConfigName: "",
                revision: /*Sp*/{
                    revisionType: "",
                    s3Location: {
                        bucket: "",
                        key: "",
                        version: "",
                        eTag: "",
                        bundleType: ""
                    },
                    gitHubLocation: {
                        commitId: "",
                        repository: ""
                    }
                },
                createTime: now(),
                startTime: now(),
                errorInformation: {
                    code: "",
                    message: ""
                },
                description: "",
                ignoreApplicationStopFailures: false,
                deploymentId: "",
                creator: "",
                deploymentOverview: {
                    Failed: 0 /*long*/,
                    Succeeded: 0 /*long*/,
                    Pending: 0 /*long*/,
                    Skipped: 0 /*long*/,
                    InProgress: 0 /*long*/
                },
                status: "",
                completeTime: now(),
                applicationName: "",
                deploymentGroupName: ""
            }
        };
        return [200, ret];
    }
module.exports.ListApplicationRevisions = function ListApplicationRevisions(aws) {
        var deployed = aws.params.deployed;
        var s3Bucket = aws.params.s3Bucket;
        var s3KeyPrefix = aws.params.s3KeyPrefix;
        var applicationName = aws.params.applicationName;
        var nextToken = aws.params.nextToken;
        var sortBy = aws.params.sortBy;
        var sortOrder = aws.params.sortOrder;
        if (! applicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter applicationName"];
        }

        // TODO implement code

        var ret = {
            revisions: [ /*Sp*/{
                revisionType: "",
                s3Location: {
                    bucket: "",
                    key: "",
                    version: "",
                    eTag: "",
                    bundleType: ""
                },
                gitHubLocation: {
                    commitId: "",
                    repository: ""
                }
            } /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.AddTagsToOnPremisesInstances = function AddTagsToOnPremisesInstances(aws) {
        var instanceNames = aws.params.instanceNames;
        var tags = aws.params.tags;
        if (! tags) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter tags"];
        }        if (! instanceNames) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter instanceNames"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ListDeploymentConfigs = function ListDeploymentConfigs(aws) {
        var nextToken = aws.params.nextToken;


        // TODO implement code

        var ret = {
            deploymentConfigsList: [ "" /*, ...*/ ],
            nextToken: ""
        };
        return [200, ret];
    }
module.exports.GetDeploymentGroup = function GetDeploymentGroup(aws) {
        var applicationName = aws.params.applicationName;
        var deploymentGroupName = aws.params.deploymentGroupName;
        if (! applicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter applicationName"];
        }        if (! deploymentGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter deploymentGroupName"];
        }

        // TODO implement code

        var ret = {
            deploymentGroupInfo: {
                deploymentGroupId: "",
                deploymentConfigName: "",
                serviceRoleArn: "",
                autoScalingGroups: /*S24*/[ {
                    hook: "",
                    name: ""
                } /*, ...*/ ],
                applicationName: "",
                onPremisesInstanceTagFilters: /*S1s*/[ {
                    Value: "",
                    Key: "",
                    Type: ""
                } /*, ...*/ ],
                ec2TagFilters: /*S1p*/[ {
                    Value: "",
                    Key: "",
                    Type: ""
                } /*, ...*/ ],
                targetRevision: /*Sp*/{
                    revisionType: "",
                    s3Location: {
                        bucket: "",
                        key: "",
                        version: "",
                        eTag: "",
                        bundleType: ""
                    },
                    gitHubLocation: {
                        commitId: "",
                        repository: ""
                    }
                },
                deploymentGroupName: ""
            }
        };
        return [200, ret];
    }
module.exports.RegisterOnPremisesInstance = function RegisterOnPremisesInstance(aws) {
        var iamUserArn = aws.params.iamUserArn;
        var instanceName = aws.params.instanceName;
        if (! instanceName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter instanceName"];
        }        if (! iamUserArn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter iamUserArn"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeregisterOnPremisesInstance = function DeregisterOnPremisesInstance(aws) {
        var instanceName = aws.params.instanceName;
        if (! instanceName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter instanceName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.StopDeployment = function StopDeployment(aws) {
        var deploymentId = aws.params.deploymentId;
        if (! deploymentId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter deploymentId"];
        }

        // TODO implement code

        var ret = {
            status: "",
            statusMessage: ""
        };
        return [200, ret];
    }
module.exports.UpdateApplication = function UpdateApplication(aws) {
        var applicationName = aws.params.applicationName;
        var newApplicationName = aws.params.newApplicationName;


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeleteApplication = function DeleteApplication(aws) {
        var applicationName = aws.params.applicationName;
        if (! applicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter applicationName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeleteDeploymentConfig = function DeleteDeploymentConfig(aws) {
        var deploymentConfigName = aws.params.deploymentConfigName;
        if (! deploymentConfigName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter deploymentConfigName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.GetDeploymentConfig = function GetDeploymentConfig(aws) {
        var deploymentConfigName = aws.params.deploymentConfigName;
        if (! deploymentConfigName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter deploymentConfigName"];
        }

        // TODO implement code

        var ret = {
            deploymentConfigInfo: {
                deploymentConfigId: "",
                deploymentConfigName: "",
                createTime: now(),
                minimumHealthyHosts: /*S1j*/{
                    value: 0,
                    type: ""
                }
            }
        };
        return [200, ret];
    }
module.exports.GetOnPremisesInstance = function GetOnPremisesInstance(aws) {
        var instanceName = aws.params.instanceName;
        if (! instanceName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter instanceName"];
        }

        // TODO implement code

        var ret = {
            instanceInfo: /*S1b*/{
                deregisterTime: now(),
                registerTime: now(),
                instanceArn: "",
                iamUserArn: "",
                instanceName: "",
                tags: /*S2*/[ {
                    Value: "",
                    Key: ""
                } /*, ...*/ ]
            }
        };
        return [200, ret];
    }
