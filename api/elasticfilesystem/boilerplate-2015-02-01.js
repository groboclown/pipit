'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * Amazon Elastic File System version 2015-02-01
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol rest-json
require('../../lib/aws-common/shape_http')('rest-json', module.exports, null);
// -----------------------------------
module.exports.DescribeMountTargets = awsCommon.as(
  'GET',
  '/2015-02-01/mount-targets',
  function DescribeMountTargets(aws) {
    var marker = aws.params.Marker;
    var maxItems = aws.params.MaxItems /* Type integer */;
    var mountTargetId = aws.params.MountTargetId;
    var fileSystemId = aws.params.FileSystemId;


    // TODO implement code

    var ret = {
      Marker: '',
      NextMarker: '',
      MountTargets: [ /*Sh*/{
        NetworkInterfaceId: '',
        LifeCycleState: '',
        OwnerId: '',
        FileSystemId: '',
        IpAddress: '',
        MountTargetId: '',
        SubnetId: '',
      }, /* ...*/ ],
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.CreateMountTarget = awsCommon.as(
  '/2015-02-01/mount-targets',
  function CreateMountTarget(aws) {
    var ipAddress = aws.params.IpAddress;
    var securityGroups = aws.params.SecurityGroups;
    var subnetId = aws.params.SubnetId;
    var fileSystemId = aws.params.FileSystemId;
    if (!fileSystemId) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FileSystemId'];
    }
    if (!subnetId) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SubnetId'];
    }


    // TODO implement code

    var ret = /*Sh*/{
      NetworkInterfaceId: '',
      LifeCycleState: '',
      OwnerId: '',
      FileSystemId: '',
      IpAddress: '',
      MountTargetId: '',
      SubnetId: '',
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.DeleteTags = awsCommon.as(
  '/2015-02-01/delete-tags/:FileSystemId',
  function DeleteTags(aws) {
    var tagKeys = aws.params.TagKeys /* Type list */;
    var fileSystemId = aws.reqParams.FileSystemId;
    if (!fileSystemId) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FileSystemId'];
    }
    if (!tagKeys) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TagKeys'];
    }


    // TODO implement code

    var ret = {};
    return [204, ret];
  });
// -----------------------------------
module.exports.DescribeFileSystems = awsCommon.as(
  'GET',
  '/2015-02-01/file-systems',
  function DescribeFileSystems(aws) {
    var marker = aws.params.Marker;
    var maxItems = aws.params.MaxItems /* Type integer */;
    var creationToken = aws.params.CreationToken;
    var fileSystemId = aws.params.FileSystemId;


    // TODO implement code

    var ret = {
      Marker: '',
      NextMarker: '',
      FileSystems: [ /*S3*/{
        SizeInBytes: {
          Timestamp: awsCommon.timestamp(),
          Value: 0 /*Long*/,
        },
        LifeCycleState: '',
        OwnerId: '',
        CreationToken: '',
        NumberOfMountTargets: 0,
        FileSystemId: '',
        CreationTime: awsCommon.timestamp(),
        Name: '',
      }, /* ...*/ ],
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.DeleteMountTarget = awsCommon.as(
  'DELETE',
  '/2015-02-01/mount-targets/:MountTargetId',
  function DeleteMountTarget(aws) {
    var mountTargetId = aws.reqParams.MountTargetId;
    if (!mountTargetId) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MountTargetId'];
    }


    // TODO implement code

    var ret = {};
    return [204, ret];
  });
// -----------------------------------
module.exports.ModifyMountTargetSecurityGroups = awsCommon.as(
  'PUT',
  '/2015-02-01/mount-targets/:MountTargetId/security-groups',
  function ModifyMountTargetSecurityGroups(aws) {
    var securityGroups = aws.params.SecurityGroups;
    var mountTargetId = aws.reqParams.MountTargetId;
    if (!mountTargetId) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MountTargetId'];
    }


    // TODO implement code

    var ret = {};
    return [204, ret];
  });
// -----------------------------------
module.exports.DeleteFileSystem = awsCommon.as(
  'DELETE',
  '/2015-02-01/file-systems/:FileSystemId',
  function DeleteFileSystem(aws) {
    var fileSystemId = aws.reqParams.FileSystemId;
    if (!fileSystemId) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FileSystemId'];
    }


    // TODO implement code

    var ret = {};
    return [204, ret];
  });
// -----------------------------------
module.exports.CreateFileSystem = awsCommon.as(
  '/2015-02-01/file-systems',
  function CreateFileSystem(aws) {
    var creationToken = aws.params.CreationToken;
    if (!creationToken) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter CreationToken'];
    }


    // TODO implement code

    var ret = /*S3*/{
      SizeInBytes: {
        Timestamp: awsCommon.timestamp(),
        Value: 0 /*Long*/,
      },
      LifeCycleState: '',
      OwnerId: '',
      CreationToken: '',
      NumberOfMountTargets: 0,
      FileSystemId: '',
      CreationTime: awsCommon.timestamp(),
      Name: '',
    };
    return [201, ret];
  });
// -----------------------------------
module.exports.DescribeTags = awsCommon.as(
  'GET',
  '/2015-02-01/tags/:FileSystemId/',
  function DescribeTags(aws) {
    var marker = aws.params.Marker;
    var maxItems = aws.params.MaxItems /* Type integer */;
    var fileSystemId = aws.reqParams.FileSystemId;
    if (!fileSystemId) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FileSystemId'];
    }


    // TODO implement code

    var ret = {
      Marker: '',
      NextMarker: '',
      Tags: /*Sl*/[ {
        Value: '',
        Key: '',
      }, /* ...*/ ],
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.DescribeMountTargetSecurityGroups = awsCommon.as(
  'GET',
  '/2015-02-01/mount-targets/:MountTargetId/security-groups',
  function DescribeMountTargetSecurityGroups(aws) {
    var mountTargetId = aws.reqParams.MountTargetId;
    if (!mountTargetId) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MountTargetId'];
    }


    // TODO implement code

    var ret = {
      SecurityGroups: /*Sf*/[ '', /* ...*/ ],
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.CreateTags = awsCommon.as(
  '/2015-02-01/create-tags/:FileSystemId',
  function CreateTags(aws) {
    var tags = aws.params.Tags;
    var fileSystemId = aws.reqParams.FileSystemId;
    if (!fileSystemId) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter FileSystemId'];
    }
    if (!tags) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Tags'];
    }


    // TODO implement code

    var ret = {};
    return [204, ret];
  });
