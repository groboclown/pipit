'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * AWS Elastic Beanstalk version 2010-12-01
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.RetrieveEnvironmentInfo = function RetrieveEnvironmentInfo(aws) {
        var EnvironmentName = aws.params['EnvironmentName'];
        var EnvironmentId = aws.params['EnvironmentId'];
        var InfoType = aws.params['InfoType'];
        if (! InfoType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InfoType"];
        }

        // TODO implement code

        var ret = {
            EnvironmentInfo: [ {
                Message: "",
                Ec2InstanceId: "",
                SampleTimestamp: now(),
                InfoType: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeConfigurationOptions = function DescribeConfigurationOptions(aws) {
        var SolutionStackName = aws.params['SolutionStackName'];
        var ApplicationName = aws.params['ApplicationName'];
        var Options = aws.params['Options'];
        var EnvironmentName = aws.params['EnvironmentName'];
        var TemplateName = aws.params['TemplateName'];


        // TODO implement code

        var ret = {
            SolutionStackName: "",
            Options: [ {
                Namespace: "",
                MinValue: 0,
                MaxLength: 0,
                UserDefined: false,
                DefaultValue: "",
                ValueOptions: [ "" /*, ...*/ ],
                Name: "",
                MaxValue: 0,
                Regex: {
                    Pattern: "",
                    Label: ""
                },
                ChangeSeverity: "",
                ValueType: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.SwapEnvironmentCNAMEs = function SwapEnvironmentCNAMEs(aws) {
        var SourceEnvironmentId = aws.params['SourceEnvironmentId'];
        var SourceEnvironmentName = aws.params['SourceEnvironmentName'];
        var DestinationEnvironmentId = aws.params['DestinationEnvironmentId'];
        var DestinationEnvironmentName = aws.params['DestinationEnvironmentName'];


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CreateApplicationVersion = function CreateApplicationVersion(aws) {
        var SourceBundle = aws.params['SourceBundle'];
        var Description = aws.params['Description'];
        var ApplicationName = aws.params['ApplicationName'];
        var VersionLabel = aws.params['VersionLabel'];
        var AutoCreateApplication = aws.params['AutoCreateApplication'] /* boolean */;
        var Process = aws.params['Process'] /* boolean */;
        if (! ApplicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ApplicationName"];
        }        if (! VersionLabel) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VersionLabel"];
        }

        // TODO implement code

        var ret = /*S1b*/{
            ApplicationVersion: /*S1c*/{
                SourceBundle: /*S16*/{
                    S3Bucket: "",
                    S3Key: ""
                },
                Description: "",
                DateCreated: now(),
                ApplicationName: "",
                VersionLabel: "",
                DateUpdated: now(),
                Status: ""
            }
        };
        return [200, ret];
    }
module.exports.DescribeInstancesHealth = function DescribeInstancesHealth(aws) {
        var NextToken = aws.params['NextToken'];
        var EnvironmentId = aws.params['EnvironmentId'];
        var EnvironmentName = aws.params['EnvironmentName'];
        var AttributeNames = aws.params['AttributeNames'] /* list */;


        // TODO implement code

        var ret = {
            RefreshedAt: now(),
            NextToken: "",
            InstanceHealthList: [ {
                ApplicationMetrics: /*S2y*/{
                    Duration: 0,
                    Latency: {
                        P85: 0.0 /*double*/,
                        P75: 0.0 /*double*/,
                        P90: 0.0 /*double*/,
                        P10: 0.0 /*double*/,
                        P999: 0.0 /*double*/,
                        P99: 0.0 /*double*/,
                        P95: 0.0 /*double*/,
                        P50: 0.0 /*double*/
                    },
                    StatusCodes: {
                        Status2xx: 0,
                        Status5xx: 0,
                        Status4xx: 0,
                        Status3xx: 0
                    },
                    RequestCount: 0
                },
                HealthStatus: "",
                InstanceId: "",
                Color: "",
                Causes: /*S2w*/[ "" /*, ...*/ ],
                System: {
                    CPUUtilization: {
                        Nice: 0.0 /*double*/,
                        IOWait: 0.0 /*double*/,
                        User: 0.0 /*double*/,
                        System: 0.0 /*double*/,
                        Idle: 0.0 /*double*/,
                        SoftIRQ: 0.0 /*double*/,
                        IRQ: 0.0 /*double*/
                    },
                    LoadAverage: [ 0.0 /*double*/ /*, ...*/ ]
                },
                LaunchedAt: now()
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.RestartAppServer = function RestartAppServer(aws) {
        var EnvironmentName = aws.params['EnvironmentName'];
        var EnvironmentId = aws.params['EnvironmentId'];


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.UpdateApplication = function UpdateApplication(aws) {
        var ApplicationName = aws.params['ApplicationName'];
        var Description = aws.params['Description'];
        if (! ApplicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ApplicationName"];
        }

        // TODO implement code

        var ret = /*S11*/{
            Application: /*S12*/{
                Description: "",
                DateCreated: now(),
                Versions: /*S13*/[ "" /*, ...*/ ],
                ApplicationName: "",
                ConfigurationTemplates: [ "" /*, ...*/ ],
                DateUpdated: now()
            }
        };
        return [200, ret];
    }
module.exports.UpdateConfigurationTemplate = function UpdateConfigurationTemplate(aws) {
        var OptionSettings = aws.params['OptionSettings'];
        var ApplicationName = aws.params['ApplicationName'];
        var OptionsToRemove = aws.params['OptionsToRemove'];
        var Description = aws.params['Description'];
        var TemplateName = aws.params['TemplateName'];
        if (! ApplicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ApplicationName"];
        }        if (! TemplateName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TemplateName"];
        }

        // TODO implement code

        var ret = /*S1m*/{
            OptionSettings: /*S1g*/[ {
                Namespace: "",
                ResourceName: "",
                OptionName: "",
                Value: ""
            } /*, ...*/ ],
            Description: "",
            DeploymentStatus: "",
            EnvironmentName: "",
            TemplateName: "",
            SolutionStackName: "",
            ApplicationName: "",
            DateUpdated: now(),
            DateCreated: now()
        };
        return [200, ret];
    }
module.exports.ValidateConfigurationSettings = function ValidateConfigurationSettings(aws) {
        var OptionSettings = aws.params['OptionSettings'];
        var ApplicationName = aws.params['ApplicationName'];
        var EnvironmentName = aws.params['EnvironmentName'];
        var TemplateName = aws.params['TemplateName'];
        if (! ApplicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ApplicationName"];
        }        if (! OptionSettings) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter OptionSettings"];
        }

        // TODO implement code

        var ret = {
            Messages: [ {
                Namespace: "",
                OptionName: "",
                Severity: "",
                Message: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeEnvironmentHealth = function DescribeEnvironmentHealth(aws) {
        var EnvironmentId = aws.params['EnvironmentId'];
        var EnvironmentName = aws.params['EnvironmentName'];
        var AttributeNames = aws.params['AttributeNames'] /* list */;


        // TODO implement code

        var ret = {
            ApplicationMetrics: /*S2y*/{
                Duration: 0,
                Latency: {
                    P85: 0.0 /*double*/,
                    P75: 0.0 /*double*/,
                    P90: 0.0 /*double*/,
                    P10: 0.0 /*double*/,
                    P999: 0.0 /*double*/,
                    P99: 0.0 /*double*/,
                    P95: 0.0 /*double*/,
                    P50: 0.0 /*double*/
                },
                StatusCodes: {
                    Status2xx: 0,
                    Status5xx: 0,
                    Status4xx: 0,
                    Status3xx: 0
                },
                RequestCount: 0
            },
            HealthStatus: "",
            EnvironmentName: "",
            Color: "",
            RefreshedAt: now(),
            Causes: /*S2w*/[ "" /*, ...*/ ],
            InstancesHealth: {
                Ok: 0,
                Severe: 0,
                Info: 0,
                Degraded: 0,
                Unknown: 0,
                NoData: 0,
                Warning: 0,
                Pending: 0
            },
            Status: ""
        };
        return [200, ret];
    }
module.exports.CreateConfigurationTemplate = function CreateConfigurationTemplate(aws) {
        var OptionSettings = aws.params['OptionSettings'];
        var SourceConfiguration = aws.params['SourceConfiguration'] /* structure */;
        var Description = aws.params['Description'];
        var TemplateName = aws.params['TemplateName'];
        var SolutionStackName = aws.params['SolutionStackName'];
        var ApplicationName = aws.params['ApplicationName'];
        var EnvironmentId = aws.params['EnvironmentId'];
        if (! ApplicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ApplicationName"];
        }        if (! TemplateName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TemplateName"];
        }

        // TODO implement code

        var ret = /*S1m*/{
            OptionSettings: /*S1g*/[ {
                Namespace: "",
                ResourceName: "",
                OptionName: "",
                Value: ""
            } /*, ...*/ ],
            Description: "",
            DeploymentStatus: "",
            EnvironmentName: "",
            TemplateName: "",
            SolutionStackName: "",
            ApplicationName: "",
            DateUpdated: now(),
            DateCreated: now()
        };
        return [200, ret];
    }
module.exports.AbortEnvironmentUpdate = function AbortEnvironmentUpdate(aws) {
        var EnvironmentName = aws.params['EnvironmentName'];
        var EnvironmentId = aws.params['EnvironmentId'];


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CreateApplication = function CreateApplication(aws) {
        var ApplicationName = aws.params['ApplicationName'];
        var Description = aws.params['Description'];
        if (! ApplicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ApplicationName"];
        }

        // TODO implement code

        var ret = /*S11*/{
            Application: /*S12*/{
                Description: "",
                DateCreated: now(),
                Versions: /*S13*/[ "" /*, ...*/ ],
                ApplicationName: "",
                ConfigurationTemplates: [ "" /*, ...*/ ],
                DateUpdated: now()
            }
        };
        return [200, ret];
    }
module.exports.DescribeEnvironments = function DescribeEnvironments(aws) {
        var IncludeDeleted = aws.params['IncludeDeleted'] /* boolean */;
        var IncludedDeletedBackTo = aws.params['IncludedDeletedBackTo'] /* timestamp */;
        var ApplicationName = aws.params['ApplicationName'];
        var VersionLabel = aws.params['VersionLabel'];
        var EnvironmentIds = aws.params['EnvironmentIds'] /* list */;
        var EnvironmentNames = aws.params['EnvironmentNames'] /* list */;


        // TODO implement code

        var ret = /*Se*/{
            Environments: [ /*Sg*/{
                Health: "",
                DateCreated: now(),
                EnvironmentLinks: [ {
                    LinkName: "",
                    EnvironmentName: ""
                } /*, ...*/ ],
                SolutionStackName: "",
                TemplateName: "",
                Resources: {
                    LoadBalancer: {
                        LoadBalancerName: "",
                        Domain: "",
                        Listeners: [ {
                            Port: 0,
                            Protocol: ""
                        } /*, ...*/ ]
                    }
                },
                VersionLabel: "",
                EnvironmentId: "",
                AbortableOperationInProgress: false,
                Description: "",
                DateUpdated: now(),
                Tier: /*Sx*/{
                    Name: "",
                    Type: "",
                    Version: ""
                },
                EnvironmentName: "",
                ApplicationName: "",
                HealthStatus: "",
                CNAME: "",
                EndpointURL: "",
                Status: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeEvents = function DescribeEvents(aws) {
        var StartTime = aws.params['StartTime'] /* timestamp */;
        var EndTime = aws.params['EndTime'] /* timestamp */;
        var Severity = aws.params['Severity'];
        var EnvironmentName = aws.params['EnvironmentName'];
        var TemplateName = aws.params['TemplateName'];
        var ApplicationName = aws.params['ApplicationName'];
        var RequestId = aws.params['RequestId'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        var VersionLabel = aws.params['VersionLabel'];
        var NextToken = aws.params['NextToken'];
        var EnvironmentId = aws.params['EnvironmentId'];


        // TODO implement code

        var ret = {
            NextToken: "",
            Events: [ {
                Severity: "",
                EnvironmentName: "",
                TemplateName: "",
                ApplicationName: "",
                EventDate: now(),
                Message: "",
                VersionLabel: "",
                RequestId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.TerminateEnvironment = function TerminateEnvironment(aws) {
        var ForceTerminate = aws.params['ForceTerminate'] /* boolean */;
        var TerminateResources = aws.params['TerminateResources'] /* boolean */;
        var EnvironmentName = aws.params['EnvironmentName'];
        var EnvironmentId = aws.params['EnvironmentId'];


        // TODO implement code

        var ret = /*Sg*/{
            Health: "",
            DateCreated: now(),
            EnvironmentLinks: [ {
                LinkName: "",
                EnvironmentName: ""
            } /*, ...*/ ],
            SolutionStackName: "",
            TemplateName: "",
            Resources: {
                LoadBalancer: {
                    LoadBalancerName: "",
                    Domain: "",
                    Listeners: [ {
                        Port: 0,
                        Protocol: ""
                    } /*, ...*/ ]
                }
            },
            VersionLabel: "",
            EnvironmentId: "",
            AbortableOperationInProgress: false,
            Description: "",
            DateUpdated: now(),
            Tier: /*Sx*/{
                Name: "",
                Type: "",
                Version: ""
            },
            EnvironmentName: "",
            ApplicationName: "",
            HealthStatus: "",
            CNAME: "",
            EndpointURL: "",
            Status: ""
        };
        return [200, ret];
    }
module.exports.CreateStorageLocation = function CreateStorageLocation(aws) {


        // TODO implement code

        var ret = {
            S3Bucket: ""
        };
        return [200, ret];
    }
module.exports.ComposeEnvironments = function ComposeEnvironments(aws) {
        var ApplicationName = aws.params['ApplicationName'];
        var GroupName = aws.params['GroupName'];
        var VersionLabels = aws.params['VersionLabels'] /* list */;


        // TODO implement code

        var ret = /*Se*/{
            Environments: [ /*Sg*/{
                Health: "",
                DateCreated: now(),
                EnvironmentLinks: [ {
                    LinkName: "",
                    EnvironmentName: ""
                } /*, ...*/ ],
                SolutionStackName: "",
                TemplateName: "",
                Resources: {
                    LoadBalancer: {
                        LoadBalancerName: "",
                        Domain: "",
                        Listeners: [ {
                            Port: 0,
                            Protocol: ""
                        } /*, ...*/ ]
                    }
                },
                VersionLabel: "",
                EnvironmentId: "",
                AbortableOperationInProgress: false,
                Description: "",
                DateUpdated: now(),
                Tier: /*Sx*/{
                    Name: "",
                    Type: "",
                    Version: ""
                },
                EnvironmentName: "",
                ApplicationName: "",
                HealthStatus: "",
                CNAME: "",
                EndpointURL: "",
                Status: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteEnvironmentConfiguration = function DeleteEnvironmentConfiguration(aws) {
        var ApplicationName = aws.params['ApplicationName'];
        var EnvironmentName = aws.params['EnvironmentName'];
        if (! ApplicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ApplicationName"];
        }        if (! EnvironmentName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter EnvironmentName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.UpdateApplicationVersion = function UpdateApplicationVersion(aws) {
        var ApplicationName = aws.params['ApplicationName'];
        var Description = aws.params['Description'];
        var VersionLabel = aws.params['VersionLabel'];
        if (! ApplicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ApplicationName"];
        }        if (! VersionLabel) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VersionLabel"];
        }

        // TODO implement code

        var ret = /*S1b*/{
            ApplicationVersion: /*S1c*/{
                SourceBundle: /*S16*/{
                    S3Bucket: "",
                    S3Key: ""
                },
                Description: "",
                DateCreated: now(),
                ApplicationName: "",
                VersionLabel: "",
                DateUpdated: now(),
                Status: ""
            }
        };
        return [200, ret];
    }
module.exports.CheckDNSAvailability = function CheckDNSAvailability(aws) {
        var CNAMEPrefix = aws.params['CNAMEPrefix'];
        if (! CNAMEPrefix) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter CNAMEPrefix"];
        }

        // TODO implement code

        var ret = {
            Available: false,
            FullyQualifiedCNAME: ""
        };
        return [200, ret];
    }
module.exports.DeleteConfigurationTemplate = function DeleteConfigurationTemplate(aws) {
        var ApplicationName = aws.params['ApplicationName'];
        var TemplateName = aws.params['TemplateName'];
        if (! ApplicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ApplicationName"];
        }        if (! TemplateName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TemplateName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ListAvailableSolutionStacks = function ListAvailableSolutionStacks(aws) {


        // TODO implement code

        var ret = {
            SolutionStackDetails: [ {
                SolutionStackName: "",
                PermittedFileTypes: [ "" /*, ...*/ ]
            } /*, ...*/ ],
            SolutionStacks: [ "" /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeApplicationVersions = function DescribeApplicationVersions(aws) {
        var ApplicationName = aws.params['ApplicationName'];
        var VersionLabels = aws.params['VersionLabels'];


        // TODO implement code

        var ret = {
            ApplicationVersions: [ /*S1c*/{
                SourceBundle: /*S16*/{
                    S3Bucket: "",
                    S3Key: ""
                },
                Description: "",
                DateCreated: now(),
                ApplicationName: "",
                VersionLabel: "",
                DateUpdated: now(),
                Status: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteApplicationVersion = function DeleteApplicationVersion(aws) {
        var DeleteSourceBundle = aws.params['DeleteSourceBundle'] /* boolean */;
        var ApplicationName = aws.params['ApplicationName'];
        var VersionLabel = aws.params['VersionLabel'];
        if (! ApplicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ApplicationName"];
        }        if (! VersionLabel) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VersionLabel"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.RequestEnvironmentInfo = function RequestEnvironmentInfo(aws) {
        var EnvironmentName = aws.params['EnvironmentName'];
        var EnvironmentId = aws.params['EnvironmentId'];
        var InfoType = aws.params['InfoType'];
        if (! InfoType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InfoType"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeApplications = function DescribeApplications(aws) {
        var ApplicationNames = aws.params['ApplicationNames'] /* list */;


        // TODO implement code

        var ret = {
            Applications: [ /*S12*/{
                Description: "",
                DateCreated: now(),
                Versions: /*S13*/[ "" /*, ...*/ ],
                ApplicationName: "",
                ConfigurationTemplates: [ "" /*, ...*/ ],
                DateUpdated: now()
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeConfigurationSettings = function DescribeConfigurationSettings(aws) {
        var ApplicationName = aws.params['ApplicationName'];
        var EnvironmentName = aws.params['EnvironmentName'];
        var TemplateName = aws.params['TemplateName'];
        if (! ApplicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ApplicationName"];
        }

        // TODO implement code

        var ret = {
            ConfigurationSettings: [ /*S1m*/{
                OptionSettings: /*S1g*/[ {
                    Namespace: "",
                    ResourceName: "",
                    OptionName: "",
                    Value: ""
                } /*, ...*/ ],
                Description: "",
                DeploymentStatus: "",
                EnvironmentName: "",
                TemplateName: "",
                SolutionStackName: "",
                ApplicationName: "",
                DateUpdated: now(),
                DateCreated: now()
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.RebuildEnvironment = function RebuildEnvironment(aws) {
        var EnvironmentName = aws.params['EnvironmentName'];
        var EnvironmentId = aws.params['EnvironmentId'];


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.UpdateEnvironment = function UpdateEnvironment(aws) {
        var OptionSettings = aws.params['OptionSettings'];
        var Description = aws.params['Description'];
        var Tier = aws.params['Tier'];
        var EnvironmentName = aws.params['EnvironmentName'];
        var TemplateName = aws.params['TemplateName'];
        var SolutionStackName = aws.params['SolutionStackName'];
        var ApplicationName = aws.params['ApplicationName'];
        var OptionsToRemove = aws.params['OptionsToRemove'];
        var GroupName = aws.params['GroupName'];
        var VersionLabel = aws.params['VersionLabel'];
        var EnvironmentId = aws.params['EnvironmentId'];


        // TODO implement code

        var ret = /*Sg*/{
            Health: "",
            DateCreated: now(),
            EnvironmentLinks: [ {
                LinkName: "",
                EnvironmentName: ""
            } /*, ...*/ ],
            SolutionStackName: "",
            TemplateName: "",
            Resources: {
                LoadBalancer: {
                    LoadBalancerName: "",
                    Domain: "",
                    Listeners: [ {
                        Port: 0,
                        Protocol: ""
                    } /*, ...*/ ]
                }
            },
            VersionLabel: "",
            EnvironmentId: "",
            AbortableOperationInProgress: false,
            Description: "",
            DateUpdated: now(),
            Tier: /*Sx*/{
                Name: "",
                Type: "",
                Version: ""
            },
            EnvironmentName: "",
            ApplicationName: "",
            HealthStatus: "",
            CNAME: "",
            EndpointURL: "",
            Status: ""
        };
        return [200, ret];
    }
module.exports.CreateEnvironment = function CreateEnvironment(aws) {
        var OptionSettings = aws.params['OptionSettings'];
        var SolutionStackName = aws.params['SolutionStackName'];
        var TemplateName = aws.params['TemplateName'];
        var VersionLabel = aws.params['VersionLabel'];
        var Tier = aws.params['Tier'];
        var Description = aws.params['Description'];
        var CNAMEPrefix = aws.params['CNAMEPrefix'];
        var EnvironmentName = aws.params['EnvironmentName'];
        var ApplicationName = aws.params['ApplicationName'];
        var OptionsToRemove = aws.params['OptionsToRemove'];
        var GroupName = aws.params['GroupName'];
        var Tags = aws.params['Tags'] /* list */;
        if (! ApplicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ApplicationName"];
        }

        // TODO implement code

        var ret = /*Sg*/{
            Health: "",
            DateCreated: now(),
            EnvironmentLinks: [ {
                LinkName: "",
                EnvironmentName: ""
            } /*, ...*/ ],
            SolutionStackName: "",
            TemplateName: "",
            Resources: {
                LoadBalancer: {
                    LoadBalancerName: "",
                    Domain: "",
                    Listeners: [ {
                        Port: 0,
                        Protocol: ""
                    } /*, ...*/ ]
                }
            },
            VersionLabel: "",
            EnvironmentId: "",
            AbortableOperationInProgress: false,
            Description: "",
            DateUpdated: now(),
            Tier: /*Sx*/{
                Name: "",
                Type: "",
                Version: ""
            },
            EnvironmentName: "",
            ApplicationName: "",
            HealthStatus: "",
            CNAME: "",
            EndpointURL: "",
            Status: ""
        };
        return [200, ret];
    }
module.exports.DeleteApplication = function DeleteApplication(aws) {
        var TerminateEnvByForce = aws.params['TerminateEnvByForce'] /* boolean */;
        var ApplicationName = aws.params['ApplicationName'];
        if (! ApplicationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ApplicationName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeEnvironmentResources = function DescribeEnvironmentResources(aws) {
        var EnvironmentName = aws.params['EnvironmentName'];
        var EnvironmentId = aws.params['EnvironmentId'];


        // TODO implement code

        var ret = {
            EnvironmentResources: {
                EnvironmentName: "",
                Triggers: [ {
                    Name: ""
                } /*, ...*/ ],
                LaunchConfigurations: [ {
                    Name: ""
                } /*, ...*/ ],
                LoadBalancers: [ {
                    Name: ""
                } /*, ...*/ ],
                Queues: [ {
                    Name: "",
                    URL: ""
                } /*, ...*/ ],
                AutoScalingGroups: [ {
                    Name: ""
                } /*, ...*/ ],
                Instances: [ {
                    Id: ""
                } /*, ...*/ ]
            }
        };
        return [200, ret];
    }
