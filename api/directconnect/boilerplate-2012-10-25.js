'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * AWS Direct Connect version 2012-10-25
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol json
require('../../lib/aws-common/shape_http')('json', module.exports, null)
module.exports.CreateConnection = function CreateConnection(aws) {
        var location = aws.params['location'];
        var connectionName = aws.params['connectionName'];
        var bandwidth = aws.params['bandwidth'];
        if (! location) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter location"];
        }
        if (! bandwidth) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter bandwidth"];
        }
        if (! connectionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter connectionName"];
        }


        // TODO implement code

        var ret = /*S7*/{
            location: "",
            connectionState: "",
            region: "",
            partnerName: "",
            connectionId: "",
            vlan: 0,
            connectionName: "",
            ownerAccount: "",
            bandwidth: ""
        };
        return [200, ret];
    }
module.exports.DescribeConnections = function DescribeConnections(aws) {
        var connectionId = aws.params['connectionId'];


        // TODO implement code

        var ret = /*S1g*/{
            connections: [ /*S7*/{
                location: "",
                connectionState: "",
                region: "",
                partnerName: "",
                connectionId: "",
                vlan: 0,
                connectionName: "",
                ownerAccount: "",
                bandwidth: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.AllocatePublicVirtualInterface = function AllocatePublicVirtualInterface(aws) {
        var connectionId = aws.params['connectionId'];
        var newPublicVirtualInterfaceAllocation = aws.params['newPublicVirtualInterfaceAllocation'] /* structure */;
        var ownerAccount = aws.params['ownerAccount'];
        if (! connectionId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter connectionId"];
        }
        if (! ownerAccount) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ownerAccount"];
        }
        if (! newPublicVirtualInterfaceAllocation) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter newPublicVirtualInterfaceAllocation"];
        }


        // TODO implement code

        var ret = /*Sk*/{
            location: "",
            vlan: 0,
            virtualInterfaceId: "",
            virtualInterfaceType: "",
            authKey: "",
            virtualGatewayId: "",
            customerRouterConfig: "",
            virtualInterfaceState: "",
            routeFilterPrefixes: /*Sq*/[ {
                cidr: ""
            } /*, ...*/ ],
            customerAddress: "",
            asn: 0,
            virtualInterfaceName: "",
            connectionId: "",
            ownerAccount: "",
            amazonAddress: ""
        };
        return [200, ret];
    }
module.exports.DescribeInterconnects = function DescribeInterconnects(aws) {
        var interconnectId = aws.params['interconnectId'];


        // TODO implement code

        var ret = {
            interconnects: [ /*S14*/{
                interconnectId: "",
                region: "",
                interconnectName: "",
                location: "",
                interconnectState: "",
                bandwidth: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreatePrivateVirtualInterface = function CreatePrivateVirtualInterface(aws) {
        var connectionId = aws.params['connectionId'];
        var newPrivateVirtualInterface = aws.params['newPrivateVirtualInterface'] /* structure */;
        if (! connectionId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter connectionId"];
        }
        if (! newPrivateVirtualInterface) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter newPrivateVirtualInterface"];
        }


        // TODO implement code

        var ret = /*Sk*/{
            location: "",
            vlan: 0,
            virtualInterfaceId: "",
            virtualInterfaceType: "",
            authKey: "",
            virtualGatewayId: "",
            customerRouterConfig: "",
            virtualInterfaceState: "",
            routeFilterPrefixes: /*Sq*/[ {
                cidr: ""
            } /*, ...*/ ],
            customerAddress: "",
            asn: 0,
            virtualInterfaceName: "",
            connectionId: "",
            ownerAccount: "",
            amazonAddress: ""
        };
        return [200, ret];
    }
module.exports.AllocateConnectionOnInterconnect = function AllocateConnectionOnInterconnect(aws) {
        var interconnectId = aws.params['interconnectId'];
        var vlan = aws.params['vlan'] /* integer */;
        var connectionName = aws.params['connectionName'];
        var ownerAccount = aws.params['ownerAccount'];
        var bandwidth = aws.params['bandwidth'];
        if (! bandwidth) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter bandwidth"];
        }
        if (! connectionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter connectionName"];
        }
        if (! ownerAccount) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ownerAccount"];
        }
        if (! interconnectId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter interconnectId"];
        }
        if (! vlan) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vlan"];
        }


        // TODO implement code

        var ret = /*S7*/{
            location: "",
            connectionState: "",
            region: "",
            partnerName: "",
            connectionId: "",
            vlan: 0,
            connectionName: "",
            ownerAccount: "",
            bandwidth: ""
        };
        return [200, ret];
    }
module.exports.ConfirmPublicVirtualInterface = function ConfirmPublicVirtualInterface(aws) {
        var virtualInterfaceId = aws.params['virtualInterfaceId'];
        if (! virtualInterfaceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter virtualInterfaceId"];
        }


        // TODO implement code

        var ret = {
            virtualInterfaceState: ""
        };
        return [200, ret];
    }
module.exports.DescribeVirtualInterfaces = function DescribeVirtualInterfaces(aws) {
        var connectionId = aws.params['connectionId'];
        var virtualInterfaceId = aws.params['virtualInterfaceId'];


        // TODO implement code

        var ret = {
            virtualInterfaces: [ /*Sk*/{
                location: "",
                vlan: 0,
                virtualInterfaceId: "",
                virtualInterfaceType: "",
                authKey: "",
                virtualGatewayId: "",
                customerRouterConfig: "",
                virtualInterfaceState: "",
                routeFilterPrefixes: /*Sq*/[ {
                    cidr: ""
                } /*, ...*/ ],
                customerAddress: "",
                asn: 0,
                virtualInterfaceName: "",
                connectionId: "",
                ownerAccount: "",
                amazonAddress: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeVirtualGateways = function DescribeVirtualGateways(aws) {


        // TODO implement code

        var ret = {
            virtualGateways: [ {
                virtualGatewayState: "",
                virtualGatewayId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteConnection = function DeleteConnection(aws) {
        var connectionId = aws.params['connectionId'];
        if (! connectionId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter connectionId"];
        }


        // TODO implement code

        var ret = /*S7*/{
            location: "",
            connectionState: "",
            region: "",
            partnerName: "",
            connectionId: "",
            vlan: 0,
            connectionName: "",
            ownerAccount: "",
            bandwidth: ""
        };
        return [200, ret];
    }
module.exports.DeleteVirtualInterface = function DeleteVirtualInterface(aws) {
        var virtualInterfaceId = aws.params['virtualInterfaceId'];
        if (! virtualInterfaceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter virtualInterfaceId"];
        }


        // TODO implement code

        var ret = {
            virtualInterfaceState: ""
        };
        return [200, ret];
    }
module.exports.AllocatePrivateVirtualInterface = function AllocatePrivateVirtualInterface(aws) {
        var newPrivateVirtualInterfaceAllocation = aws.params['newPrivateVirtualInterfaceAllocation'] /* structure */;
        var connectionId = aws.params['connectionId'];
        var ownerAccount = aws.params['ownerAccount'];
        if (! connectionId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter connectionId"];
        }
        if (! ownerAccount) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ownerAccount"];
        }
        if (! newPrivateVirtualInterfaceAllocation) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter newPrivateVirtualInterfaceAllocation"];
        }


        // TODO implement code

        var ret = /*Sk*/{
            location: "",
            vlan: 0,
            virtualInterfaceId: "",
            virtualInterfaceType: "",
            authKey: "",
            virtualGatewayId: "",
            customerRouterConfig: "",
            virtualInterfaceState: "",
            routeFilterPrefixes: /*Sq*/[ {
                cidr: ""
            } /*, ...*/ ],
            customerAddress: "",
            asn: 0,
            virtualInterfaceName: "",
            connectionId: "",
            ownerAccount: "",
            amazonAddress: ""
        };
        return [200, ret];
    }
module.exports.CreatePublicVirtualInterface = function CreatePublicVirtualInterface(aws) {
        var newPublicVirtualInterface = aws.params['newPublicVirtualInterface'] /* structure */;
        var connectionId = aws.params['connectionId'];
        if (! connectionId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter connectionId"];
        }
        if (! newPublicVirtualInterface) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter newPublicVirtualInterface"];
        }


        // TODO implement code

        var ret = /*Sk*/{
            location: "",
            vlan: 0,
            virtualInterfaceId: "",
            virtualInterfaceType: "",
            authKey: "",
            virtualGatewayId: "",
            customerRouterConfig: "",
            virtualInterfaceState: "",
            routeFilterPrefixes: /*Sq*/[ {
                cidr: ""
            } /*, ...*/ ],
            customerAddress: "",
            asn: 0,
            virtualInterfaceName: "",
            connectionId: "",
            ownerAccount: "",
            amazonAddress: ""
        };
        return [200, ret];
    }
module.exports.ConfirmConnection = function ConfirmConnection(aws) {
        var connectionId = aws.params['connectionId'];
        if (! connectionId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter connectionId"];
        }


        // TODO implement code

        var ret = {
            connectionState: ""
        };
        return [200, ret];
    }
module.exports.DeleteInterconnect = function DeleteInterconnect(aws) {
        var interconnectId = aws.params['interconnectId'];
        if (! interconnectId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter interconnectId"];
        }


        // TODO implement code

        var ret = {
            interconnectState: ""
        };
        return [200, ret];
    }
module.exports.DescribeConnectionsOnInterconnect = function DescribeConnectionsOnInterconnect(aws) {
        var interconnectId = aws.params['interconnectId'];
        if (! interconnectId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter interconnectId"];
        }


        // TODO implement code

        var ret = /*S1g*/{
            connections: [ /*S7*/{
                location: "",
                connectionState: "",
                region: "",
                partnerName: "",
                connectionId: "",
                vlan: 0,
                connectionName: "",
                ownerAccount: "",
                bandwidth: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ConfirmPrivateVirtualInterface = function ConfirmPrivateVirtualInterface(aws) {
        var virtualInterfaceId = aws.params['virtualInterfaceId'];
        var virtualGatewayId = aws.params['virtualGatewayId'];
        if (! virtualInterfaceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter virtualInterfaceId"];
        }
        if (! virtualGatewayId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter virtualGatewayId"];
        }


        // TODO implement code

        var ret = {
            virtualInterfaceState: ""
        };
        return [200, ret];
    }
module.exports.DescribeLocations = function DescribeLocations(aws) {


        // TODO implement code

        var ret = {
            locations: [ {
                locationCode: "",
                locationName: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateInterconnect = function CreateInterconnect(aws) {
        var location = aws.params['location'];
        var interconnectName = aws.params['interconnectName'];
        var bandwidth = aws.params['bandwidth'];
        if (! interconnectName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter interconnectName"];
        }
        if (! bandwidth) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter bandwidth"];
        }
        if (! location) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter location"];
        }


        // TODO implement code

        var ret = /*S14*/{
            interconnectId: "",
            region: "",
            interconnectName: "",
            location: "",
            interconnectState: "",
            bandwidth: ""
        };
        return [200, ret];
    }
