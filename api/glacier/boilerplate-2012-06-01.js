'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * Amazon Glacier version 2012-06-01
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.CompleteMultipartUpload = aws_common.as(
    "/:accountId/vaults/:vaultName/multipart-uploads/:uploadId",
    function CompleteMultipartUpload(aws) {
        var vaultName = aws.reqParams.vaultName;
        var checksum = aws.params.checksum;
        var archiveSize = aws.params.archiveSize;
        var accountId = aws.reqParams.accountId;
        var uploadId = aws.reqParams.uploadId;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }        if (! uploadId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter uploadId"];
        }

        // TODO implement code

        var ret = /*S9*/{
            archiveId: "",
            checksum: "",
            location: ""
        };
        return [201, ret];
    });
module.exports.AddTagsToVault = aws_common.as(
    "/:accountId/vaults/:vaultName/tags?operation=add",
    function AddTagsToVault(aws) {
        var vaultName = aws.reqParams.vaultName;
        var Tags = aws.params.Tags;
        var accountId = aws.reqParams.accountId;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }

        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.GetVaultAccessPolicy = aws_common.as(
    "GET",
    "/:accountId/vaults/:vaultName/access-policy",
    function GetVaultAccessPolicy(aws) {
        var vaultName = aws.reqParams.vaultName;
        var accountId = aws.reqParams.accountId;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }

        // TODO implement code

        var ret = {
            policy: /*S14*/{
                Policy: ""
            }
        };
        return [200, ret];
    });
module.exports.InitiateMultipartUpload = aws_common.as(
    "/:accountId/vaults/:vaultName/multipart-uploads",
    function InitiateMultipartUpload(aws) {
        var vaultName = aws.reqParams.vaultName;
        var accountId = aws.reqParams.accountId;
        var archiveDescription = aws.params.archiveDescription;
        var partSize = aws.params.partSize;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }

        // TODO implement code

        var ret = {
            uploadId: "",
            location: ""
        };
        return [201, ret];
    });
module.exports.AbortVaultLock = aws_common.as(
    "DELETE",
    "/:accountId/vaults/:vaultName/lock-policy",
    function AbortVaultLock(aws) {
        var vaultName = aws.reqParams.vaultName;
        var accountId = aws.reqParams.accountId;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }

        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.GetDataRetrievalPolicy = aws_common.as(
    "GET",
    "/:accountId/policies/data-retrieval",
    function GetDataRetrievalPolicy(aws) {
        var accountId = aws.reqParams.accountId;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }

        // TODO implement code

        var ret = {
            Policy: /*Su*/{
                Rules: [ {
                    BytesPerHour: 0 /*long*/,
                    Strategy: ""
                } /*, ...*/ ]
            }
        };
        return [200, ret];
    });
module.exports.DeleteArchive = aws_common.as(
    "DELETE",
    "/:accountId/vaults/:vaultName/archives/:archiveId",
    function DeleteArchive(aws) {
        var archiveId = aws.reqParams.archiveId;
        var vaultName = aws.reqParams.vaultName;
        var accountId = aws.reqParams.accountId;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }        if (! archiveId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter archiveId"];
        }

        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.DeleteVault = aws_common.as(
    "DELETE",
    "/:accountId/vaults/:vaultName",
    function DeleteVault(aws) {
        var vaultName = aws.reqParams.vaultName;
        var accountId = aws.reqParams.accountId;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }

        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.CompleteVaultLock = aws_common.as(
    "/:accountId/vaults/:vaultName/lock-policy/:lockId",
    function CompleteVaultLock(aws) {
        var vaultName = aws.reqParams.vaultName;
        var lockId = aws.reqParams.lockId;
        var accountId = aws.reqParams.accountId;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }        if (! lockId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter lockId"];
        }

        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.RemoveTagsFromVault = aws_common.as(
    "/:accountId/vaults/:vaultName/tags?operation=remove",
    function RemoveTagsFromVault(aws) {
        var TagKeys = aws.params.TagKeys /* list */;
        var vaultName = aws.reqParams.vaultName;
        var accountId = aws.reqParams.accountId;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }

        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.ListMultipartUploads = aws_common.as(
    "GET",
    "/:accountId/vaults/:vaultName/multipart-uploads",
    function ListMultipartUploads(aws) {
        var marker = aws.params.marker;
        var vaultName = aws.reqParams.vaultName;
        var accountId = aws.reqParams.accountId;
        var limit = aws.params.limit;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }

        // TODO implement code

        var ret = {
            Marker: "",
            UploadsList: [ {
                PartSizeInBytes: 0 /*long*/,
                ArchiveDescription: "",
                MultipartUploadId: "",
                CreationDate: "",
                VaultARN: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.DeleteVaultAccessPolicy = aws_common.as(
    "DELETE",
    "/:accountId/vaults/:vaultName/access-policy",
    function DeleteVaultAccessPolicy(aws) {
        var vaultName = aws.reqParams.vaultName;
        var accountId = aws.reqParams.accountId;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }

        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.InitiateVaultLock = aws_common.as(
    "/:accountId/vaults/:vaultName/lock-policy",
    function InitiateVaultLock(aws) {
        var vaultName = aws.reqParams.vaultName;
        var accountId = aws.reqParams.accountId;
        var policy = aws.params.policy /* structure */;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }

        // TODO implement code

        var ret = {
            lockId: ""
        };
        return [201, ret];
    });
module.exports.UploadMultipartPart = aws_common.as(
    "PUT",
    "/:accountId/vaults/:vaultName/multipart-uploads/:uploadId",
    function UploadMultipartPart(aws) {
        var range = aws.params.range;
        var accountId = aws.reqParams.accountId;
        var vaultName = aws.reqParams.vaultName;
        var checksum = aws.params.checksum;
        var uploadId = aws.reqParams.uploadId;
        var body = aws.params.body;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }        if (! uploadId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter uploadId"];
        }

        // TODO implement code

        var ret = {
            checksum: ""
        };
        return [204, ret];
    });
module.exports.ListParts = aws_common.as(
    "GET",
    "/:accountId/vaults/:vaultName/multipart-uploads/:uploadId",
    function ListParts(aws) {
        var marker = aws.params.marker;
        var vaultName = aws.reqParams.vaultName;
        var limit = aws.params.limit;
        var accountId = aws.reqParams.accountId;
        var uploadId = aws.reqParams.uploadId;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }        if (! uploadId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter uploadId"];
        }

        // TODO implement code

        var ret = {
            Parts: [ {
                SHA256TreeHash: "",
                RangeInBytes: ""
            } /*, ...*/ ],
            MultipartUploadId: "",
            Marker: "",
            VaultARN: "",
            PartSizeInBytes: 0 /*long*/,
            ArchiveDescription: "",
            CreationDate: ""
        };
        return [200, ret];
    });
module.exports.CreateVault = aws_common.as(
    "PUT",
    "/:accountId/vaults/:vaultName",
    function CreateVault(aws) {
        var vaultName = aws.reqParams.vaultName;
        var accountId = aws.reqParams.accountId;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }

        // TODO implement code

        var ret = {
            location: ""
        };
        return [201, ret];
    });
module.exports.ListJobs = aws_common.as(
    "GET",
    "/:accountId/vaults/:vaultName/jobs",
    function ListJobs(aws) {
        var accountId = aws.reqParams.accountId;
        var limit = aws.params.limit;
        var statuscode = aws.params.statuscode;
        var completed = aws.params.completed;
        var marker = aws.params.marker;
        var vaultName = aws.reqParams.vaultName;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }

        // TODO implement code

        var ret = {
            Marker: "",
            JobList: [ /*Si*/{
                SHA256TreeHash: "",
                JobDescription: "",
                ArchiveSHA256TreeHash: "",
                VaultARN: "",
                InventorySizeInBytes: 0 /*long*/,
                Completed: false,
                ArchiveId: "",
                RetrievalByteRange: "",
                ArchiveSizeInBytes: 0 /*long*/,
                StatusMessage: "",
                CreationDate: "",
                StatusCode: "",
                InventoryRetrievalParameters: {
                    Format: "",
                    StartDate: "",
                    Marker: "",
                    EndDate: "",
                    Limit: ""
                },
                SNSTopic: "",
                Action: "",
                CompletionDate: "",
                JobId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.SetDataRetrievalPolicy = aws_common.as(
    "PUT",
    "/:accountId/policies/data-retrieval",
    function SetDataRetrievalPolicy(aws) {
        var Policy = aws.params.Policy;
        var accountId = aws.reqParams.accountId;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }

        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.SetVaultAccessPolicy = aws_common.as(
    "PUT",
    "/:accountId/vaults/:vaultName/access-policy",
    function SetVaultAccessPolicy(aws) {
        var vaultName = aws.reqParams.vaultName;
        var accountId = aws.reqParams.accountId;
        var policy = aws.params.policy;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }

        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.DeleteVaultNotifications = aws_common.as(
    "DELETE",
    "/:accountId/vaults/:vaultName/notification-configuration",
    function DeleteVaultNotifications(aws) {
        var vaultName = aws.reqParams.vaultName;
        var accountId = aws.reqParams.accountId;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }

        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.SetVaultNotifications = aws_common.as(
    "PUT",
    "/:accountId/vaults/:vaultName/notification-configuration",
    function SetVaultNotifications(aws) {
        var vaultName = aws.reqParams.vaultName;
        var vaultNotificationConfig = aws.params.vaultNotificationConfig;
        var accountId = aws.reqParams.accountId;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }

        // TODO implement code

        var ret = {};
        return [204, ret];
    });
module.exports.DescribeJob = aws_common.as(
    "GET",
    "/:accountId/vaults/:vaultName/jobs/:jobId",
    function DescribeJob(aws) {
        var jobId = aws.reqParams.jobId;
        var vaultName = aws.reqParams.vaultName;
        var accountId = aws.reqParams.accountId;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }        if (! jobId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter jobId"];
        }

        // TODO implement code

        var ret = /*Si*/{
            SHA256TreeHash: "",
            JobDescription: "",
            ArchiveSHA256TreeHash: "",
            VaultARN: "",
            InventorySizeInBytes: 0 /*long*/,
            Completed: false,
            ArchiveId: "",
            RetrievalByteRange: "",
            ArchiveSizeInBytes: 0 /*long*/,
            StatusMessage: "",
            CreationDate: "",
            StatusCode: "",
            InventoryRetrievalParameters: {
                Format: "",
                StartDate: "",
                Marker: "",
                EndDate: "",
                Limit: ""
            },
            SNSTopic: "",
            Action: "",
            CompletionDate: "",
            JobId: ""
        };
        return [200, ret];
    });
module.exports.GetVaultNotifications = aws_common.as(
    "GET",
    "/:accountId/vaults/:vaultName/notification-configuration",
    function GetVaultNotifications(aws) {
        var vaultName = aws.reqParams.vaultName;
        var accountId = aws.reqParams.accountId;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }

        // TODO implement code

        var ret = {
            vaultNotificationConfig: /*S19*/{
                Events: [ "" /*, ...*/ ],
                SNSTopic: ""
            }
        };
        return [200, ret];
    });
module.exports.GetVaultLock = aws_common.as(
    "GET",
    "/:accountId/vaults/:vaultName/lock-policy",
    function GetVaultLock(aws) {
        var vaultName = aws.reqParams.vaultName;
        var accountId = aws.reqParams.accountId;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }

        // TODO implement code

        var ret = {
            Policy: "",
            ExpirationDate: "",
            CreationDate: "",
            State: ""
        };
        return [200, ret];
    });
module.exports.DescribeVault = aws_common.as(
    "GET",
    "/:accountId/vaults/:vaultName",
    function DescribeVault(aws) {
        var vaultName = aws.reqParams.vaultName;
        var accountId = aws.reqParams.accountId;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }

        // TODO implement code

        var ret = /*Sq*/{
            VaultARN: "",
            NumberOfArchives: 0 /*long*/,
            VaultName: "",
            LastInventoryDate: "",
            CreationDate: "",
            SizeInBytes: 0 /*long*/
        };
        return [200, ret];
    });
module.exports.GetJobOutput = aws_common.as(
    "GET",
    "/:accountId/vaults/:vaultName/jobs/:jobId/output",
    function GetJobOutput(aws) {
        var jobId = aws.reqParams.jobId;
        var vaultName = aws.reqParams.vaultName;
        var range = aws.params.range;
        var accountId = aws.reqParams.accountId;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }        if (! jobId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter jobId"];
        }

        // TODO implement code

        var ret = {
            checksum: "",
            acceptRanges: "",
            contentRange: "",
            status: 0,
            contentType: "",
            archiveDescription: "",
            body: /*S10*/null /*blob*/
        };
        return [200, ret];
    });
module.exports.InitiateJob = aws_common.as(
    "/:accountId/vaults/:vaultName/jobs",
    function InitiateJob(aws) {
        var vaultName = aws.reqParams.vaultName;
        var accountId = aws.reqParams.accountId;
        var jobParameters = aws.params.jobParameters /* structure */;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }

        // TODO implement code

        var ret = {
            jobId: "",
            location: ""
        };
        return [202, ret];
    });
module.exports.ListVaults = aws_common.as(
    "GET",
    "/:accountId/vaults",
    function ListVaults(aws) {
        var marker = aws.params.marker;
        var accountId = aws.reqParams.accountId;
        var limit = aws.params.limit;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }

        // TODO implement code

        var ret = {
            VaultList: [ /*Sq*/{
                VaultARN: "",
                NumberOfArchives: 0 /*long*/,
                VaultName: "",
                LastInventoryDate: "",
                CreationDate: "",
                SizeInBytes: 0 /*long*/
            } /*, ...*/ ],
            Marker: ""
        };
        return [200, ret];
    });
module.exports.UploadArchive = aws_common.as(
    "/:accountId/vaults/:vaultName/archives",
    function UploadArchive(aws) {
        var vaultName = aws.reqParams.vaultName;
        var checksum = aws.params.checksum;
        var accountId = aws.reqParams.accountId;
        var archiveDescription = aws.params.archiveDescription;
        var body = aws.params.body;
        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }

        // TODO implement code

        var ret = /*S9*/{
            archiveId: "",
            checksum: "",
            location: ""
        };
        return [201, ret];
    });
module.exports.ListTagsForVault = aws_common.as(
    "GET",
    "/:accountId/vaults/:vaultName/tags",
    function ListTagsForVault(aws) {
        var vaultName = aws.reqParams.vaultName;
        var accountId = aws.reqParams.accountId;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }

        // TODO implement code

        var ret = {
            Tags: /*S5*/{} /* map */
        };
        return [200, ret];
    });
module.exports.AbortMultipartUpload = aws_common.as(
    "DELETE",
    "/:accountId/vaults/:vaultName/multipart-uploads/:uploadId",
    function AbortMultipartUpload(aws) {
        var vaultName = aws.reqParams.vaultName;
        var accountId = aws.reqParams.accountId;
        var uploadId = aws.reqParams.uploadId;
        if (! accountId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter accountId"];
        }        if (! vaultName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter vaultName"];
        }        if (! uploadId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter uploadId"];
        }

        // TODO implement code

        var ret = {};
        return [204, ret];
    });
