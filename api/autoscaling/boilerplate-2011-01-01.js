'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * Auto Scaling version 2011-01-01
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol query
require('../../lib/aws-common/shape_http')('query', module.exports, 'http://autoscaling.amazonaws.com/doc/2011-01-01/')
module.exports.DescribeLaunchConfigurations = function DescribeLaunchConfigurations(aws) {
        var LaunchConfigurationNames = aws.params['LaunchConfigurationNames'] /* list */;
        var NextToken = aws.params['NextToken'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;


        // TODO implement code

        var ret = {
            NextToken: "",
            LaunchConfigurations: [ {
                InstanceType: "",
                ClassicLinkVPCSecurityGroups: /*Sx*/[ "" /*, ...*/ ],
                LaunchConfigurationName: "",
                SecurityGroups: /*Sw*/[ "" /*, ...*/ ],
                ClassicLinkVPCId: "",
                CreatedTime: now(),
                PlacementTenancy: "",
                KernelId: "",
                ImageId: "",
                SpotPrice: "",
                EbsOptimized: false,
                RamdiskId: "",
                AssociatePublicIpAddress: false,
                UserData: "",
                KeyName: "",
                BlockDeviceMappings: /*Sz*/[ {
                    DeviceName: "",
                    NoDevice: false,
                    Ebs: {
                        VolumeType: "",
                        Encrypted: false,
                        DeleteOnTermination: false,
                        SnapshotId: "",
                        VolumeSize: 0,
                        Iops: 0
                    },
                    VirtualName: ""
                } /*, ...*/ ],
                IamInstanceProfile: "",
                InstanceMonitoring: /*S18*/{
                    Enabled: false
                },
                LaunchConfigurationARN: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.TerminateInstanceInAutoScalingGroup = function TerminateInstanceInAutoScalingGroup(aws) {
        var InstanceId = aws.params['InstanceId'];
        var ShouldDecrementDesiredCapacity = aws.params['ShouldDecrementDesiredCapacity'] /* boolean */;
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }
        if (! ShouldDecrementDesiredCapacity) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ShouldDecrementDesiredCapacity"];
        }


        // TODO implement code

        var ret = {
            Activity: /*S3t*/{
                Description: "",
                StatusMessage: "",
                EndTime: now(),
                StartTime: now(),
                Details: "",
                AutoScalingGroupName: "",
                ActivityId: "",
                StatusCode: "",
                Progress: 0,
                Cause: ""
            }
        };
        return [200, ret];
    }
module.exports.DeleteAutoScalingGroup = function DeleteAutoScalingGroup(aws) {
        var ForceDelete = aws.params['ForceDelete'] /* boolean */;
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeAdjustmentTypes = function DescribeAdjustmentTypes(aws) {


        // TODO implement code

        var ret = {
            AdjustmentTypes: [ {
                AdjustmentType: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeTerminationPolicyTypes = function DescribeTerminationPolicyTypes(aws) {


        // TODO implement code

        var ret = {
            TerminationPolicyTypes: /*Sm*/[ "" /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ResumeProcesses = function ResumeProcesses(aws) {


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeMetricCollectionTypes = function DescribeMetricCollectionTypes(aws) {


        // TODO implement code

        var ret = {
            Metrics: [ {
                Metric: ""
            } /*, ...*/ ],
            Granularities: [ {
                Granularity: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeAutoScalingNotificationTypes = function DescribeAutoScalingNotificationTypes(aws) {


        // TODO implement code

        var ret = {
            AutoScalingNotificationTypes: /*S2h*/[ "" /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribePolicies = function DescribePolicies(aws) {
        var PolicyNames = aws.params['PolicyNames'] /* list */;
        var NextToken = aws.params['NextToken'];
        var PolicyTypes = aws.params['PolicyTypes'] /* list */;
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];


        // TODO implement code

        var ret = {
            NextToken: "",
            ScalingPolicies: [ {
                Alarms: [ {
                    AlarmARN: "",
                    AlarmName: ""
                } /*, ...*/ ],
                PolicyType: "",
                PolicyName: "",
                AdjustmentType: "",
                MetricAggregationType: "",
                StepAdjustments: /*S3j*/[ {
                    ScalingAdjustment: 0,
                    MetricIntervalUpperBound: 0.0 /*double*/,
                    MetricIntervalLowerBound: 0.0 /*double*/
                } /*, ...*/ ],
                MinAdjustmentMagnitude: 0,
                MinAdjustmentStep: /*S3g*/0,
                PolicyARN: "",
                EstimatedInstanceWarmup: 0,
                AutoScalingGroupName: "",
                Cooldown: 0,
                ScalingAdjustment: 0
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.EnterStandby = function EnterStandby(aws) {
        var ShouldDecrementDesiredCapacity = aws.params['ShouldDecrementDesiredCapacity'] /* boolean */;
        var InstanceIds = aws.params['InstanceIds'];
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }
        if (! ShouldDecrementDesiredCapacity) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ShouldDecrementDesiredCapacity"];
        }


        // TODO implement code

        var ret = {
            Activities: /*S3s*/[ /*S3t*/{
                Description: "",
                StatusMessage: "",
                EndTime: now(),
                StartTime: now(),
                Details: "",
                AutoScalingGroupName: "",
                ActivityId: "",
                StatusCode: "",
                Progress: 0,
                Cause: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeAutoScalingInstances = function DescribeAutoScalingInstances(aws) {
        var NextToken = aws.params['NextToken'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        var InstanceIds = aws.params['InstanceIds'];


        // TODO implement code

        var ret = {
            NextToken: "",
            AutoScalingInstances: [ {
                InstanceId: "",
                LaunchConfigurationName: "",
                ProtectedFromScaleIn: false,
                LifecycleState: "",
                AvailabilityZone: "",
                HealthStatus: "",
                AutoScalingGroupName: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeScalingProcessTypes = function DescribeScalingProcessTypes(aws) {


        // TODO implement code

        var ret = {
            Processes: [ {
                ProcessName: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeLifecycleHooks = function DescribeLifecycleHooks(aws) {
        var LifecycleHookNames = aws.params['LifecycleHookNames'] /* list */;
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }


        // TODO implement code

        var ret = {
            LifecycleHooks: [ {
                RoleARN: "",
                HeartbeatTimeout: 0,
                LifecycleTransition: "",
                DefaultResult: "",
                GlobalTimeout: 0,
                NotificationTargetARN: "",
                NotificationMetadata: "",
                LifecycleHookName: "",
                AutoScalingGroupName: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.PutScheduledUpdateGroupAction = function PutScheduledUpdateGroupAction(aws) {
        var MaxSize = aws.params['MaxSize'] /* integer */;
        var DesiredCapacity = aws.params['DesiredCapacity'] /* integer */;
        var EndTime = aws.params['EndTime'] /* timestamp */;
        var StartTime = aws.params['StartTime'] /* timestamp */;
        var Time = aws.params['Time'] /* timestamp */;
        var Recurrence = aws.params['Recurrence'];
        var MinSize = aws.params['MinSize'] /* integer */;
        var ScheduledActionName = aws.params['ScheduledActionName'];
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }
        if (! ScheduledActionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ScheduledActionName"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DetachInstances = function DetachInstances(aws) {
        var ShouldDecrementDesiredCapacity = aws.params['ShouldDecrementDesiredCapacity'] /* boolean */;
        var InstanceIds = aws.params['InstanceIds'];
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }
        if (! ShouldDecrementDesiredCapacity) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ShouldDecrementDesiredCapacity"];
        }


        // TODO implement code

        var ret = {
            Activities: /*S3s*/[ /*S3t*/{
                Description: "",
                StatusMessage: "",
                EndTime: now(),
                StartTime: now(),
                Details: "",
                AutoScalingGroupName: "",
                ActivityId: "",
                StatusCode: "",
                Progress: 0,
                Cause: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.PutScalingPolicy = function PutScalingPolicy(aws) {
        var MinAdjustmentMagnitude = aws.params['MinAdjustmentMagnitude'] /* integer */;
        var PolicyType = aws.params['PolicyType'];
        var StepAdjustments = aws.params['StepAdjustments'];
        var PolicyName = aws.params['PolicyName'];
        var EstimatedInstanceWarmup = aws.params['EstimatedInstanceWarmup'] /* integer */;
        var AdjustmentType = aws.params['AdjustmentType'];
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];
        var ScalingAdjustment = aws.params['ScalingAdjustment'] /* integer */;
        var MetricAggregationType = aws.params['MetricAggregationType'];
        var Cooldown = aws.params['Cooldown'] /* integer */;
        var MinAdjustmentStep = aws.params['MinAdjustmentStep'];
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }
        if (! PolicyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PolicyName"];
        }
        if (! AdjustmentType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AdjustmentType"];
        }


        // TODO implement code

        var ret = {
            PolicyARN: ""
        };
        return [200, ret];
    }
module.exports.DeleteLaunchConfiguration = function DeleteLaunchConfiguration(aws) {
        var LaunchConfigurationName = aws.params['LaunchConfigurationName'];
        if (! LaunchConfigurationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LaunchConfigurationName"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.EnableMetricsCollection = function EnableMetricsCollection(aws) {
        var Granularity = aws.params['Granularity'];
        var Metrics = aws.params['Metrics'];
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }
        if (! Granularity) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Granularity"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeTags = function DescribeTags(aws) {
        var NextToken = aws.params['NextToken'];
        var Filters = aws.params['Filters'] /* list */;
        var MaxRecords = aws.params['MaxRecords'] /* integer */;


        // TODO implement code

        var ret = {
            Tags: /*S2a*/[ {
                Value: "",
                Key: "",
                ResourceId: "",
                ResourceType: "",
                PropagateAtLaunch: false
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.RecordLifecycleActionHeartbeat = function RecordLifecycleActionHeartbeat(aws) {
        var LifecycleActionToken = aws.params['LifecycleActionToken'];
        var LifecycleHookName = aws.params['LifecycleHookName'];
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];
        if (! LifecycleHookName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LifecycleHookName"];
        }
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }
        if (! LifecycleActionToken) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LifecycleActionToken"];
        }


        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.CreateOrUpdateTags = function CreateOrUpdateTags(aws) {
        var Tags = aws.params['Tags'];
        if (! Tags) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Tags"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DisableMetricsCollection = function DisableMetricsCollection(aws) {
        var Metrics = aws.params['Metrics'];
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeLoadBalancers = function DescribeLoadBalancers(aws) {
        var NextToken = aws.params['NextToken'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }


        // TODO implement code

        var ret = {
            NextToken: "",
            LoadBalancers: [ {
                State: "",
                LoadBalancerName: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeScalingActivities = function DescribeScalingActivities(aws) {
        var NextToken = aws.params['NextToken'];
        var ActivityIds = aws.params['ActivityIds'] /* list */;
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];


        // TODO implement code

        var ret = {
            NextToken: "",
            Activities: /*S3s*/[ /*S3t*/{
                Description: "",
                StatusMessage: "",
                EndTime: now(),
                StartTime: now(),
                Details: "",
                AutoScalingGroupName: "",
                ActivityId: "",
                StatusCode: "",
                Progress: 0,
                Cause: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.UpdateAutoScalingGroup = function UpdateAutoScalingGroup(aws) {
        var DesiredCapacity = aws.params['DesiredCapacity'] /* integer */;
        var LaunchConfigurationName = aws.params['LaunchConfigurationName'];
        var HealthCheckType = aws.params['HealthCheckType'];
        var HealthCheckGracePeriod = aws.params['HealthCheckGracePeriod'] /* integer */;
        var PlacementGroup = aws.params['PlacementGroup'];
        var DefaultCooldown = aws.params['DefaultCooldown'] /* integer */;
        var MinSize = aws.params['MinSize'] /* integer */;
        var VPCZoneIdentifier = aws.params['VPCZoneIdentifier'];
        var MaxSize = aws.params['MaxSize'] /* integer */;
        var TerminationPolicies = aws.params['TerminationPolicies'];
        var NewInstancesProtectedFromScaleIn = aws.params['NewInstancesProtectedFromScaleIn'] /* boolean */;
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];
        var AvailabilityZones = aws.params['AvailabilityZones'];
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeleteTags = function DeleteTags(aws) {
        var Tags = aws.params['Tags'];
        if (! Tags) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Tags"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeleteLifecycleHook = function DeleteLifecycleHook(aws) {
        var LifecycleHookName = aws.params['LifecycleHookName'];
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];
        if (! LifecycleHookName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LifecycleHookName"];
        }
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }


        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.DescribeNotificationConfigurations = function DescribeNotificationConfigurations(aws) {
        var AutoScalingGroupNames = aws.params['AutoScalingGroupNames'];
        var NextToken = aws.params['NextToken'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;


        // TODO implement code

        var ret = {
            NextToken: "",
            NotificationConfigurations: [ {
                TopicARN: "",
                NotificationType: "",
                AutoScalingGroupName: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeletePolicy = function DeletePolicy(aws) {
        var PolicyName = aws.params['PolicyName'];
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];
        if (! PolicyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PolicyName"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeLifecycleHookTypes = function DescribeLifecycleHookTypes(aws) {


        // TODO implement code

        var ret = {
            LifecycleHookTypes: /*S2h*/[ "" /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeAutoScalingGroups = function DescribeAutoScalingGroups(aws) {
        var AutoScalingGroupNames = aws.params['AutoScalingGroupNames'];
        var NextToken = aws.params['NextToken'];
        var MaxRecords = aws.params['MaxRecords'] /* integer */;


        // TODO implement code

        var ret = {
            NextToken: "",
            AutoScalingGroups: [ {
                Tags: /*S2a*/[ {
                    Value: "",
                    Key: "",
                    ResourceId: "",
                    ResourceType: "",
                    PropagateAtLaunch: false
                } /*, ...*/ ],
                AutoScalingGroupARN: "",
                DesiredCapacity: 0,
                LaunchConfigurationName: "",
                HealthCheckType: "",
                HealthCheckGracePeriod: 0,
                CreatedTime: now(),
                PlacementGroup: "",
                EnabledMetrics: [ {
                    Granularity: "",
                    Metric: ""
                } /*, ...*/ ],
                DefaultCooldown: 0,
                MinSize: 0,
                VPCZoneIdentifier: "",
                MaxSize: 0,
                Instances: [ {
                    InstanceId: "",
                    LaunchConfigurationName: "",
                    ProtectedFromScaleIn: false,
                    LifecycleState: "",
                    AvailabilityZone: "",
                    HealthStatus: ""
                } /*, ...*/ ],
                Status: "",
                TerminationPolicies: /*Sm*/[ "" /*, ...*/ ],
                SuspendedProcesses: [ {
                    SuspensionReason: "",
                    ProcessName: ""
                } /*, ...*/ ],
                LoadBalancerNames: /*S6*/[ "" /*, ...*/ ],
                AutoScalingGroupName: "",
                NewInstancesProtectedFromScaleIn: false,
                AvailabilityZones: /*Sj*/[ "" /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ExitStandby = function ExitStandby(aws) {
        var InstanceIds = aws.params['InstanceIds'];
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }


        // TODO implement code

        var ret = {
            Activities: /*S3s*/[ /*S3t*/{
                Description: "",
                StatusMessage: "",
                EndTime: now(),
                StartTime: now(),
                Details: "",
                AutoScalingGroupName: "",
                ActivityId: "",
                StatusCode: "",
                Progress: 0,
                Cause: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.SuspendProcesses = function SuspendProcesses(aws) {


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CreateAutoScalingGroup = function CreateAutoScalingGroup(aws) {
        var Tags = aws.params['Tags'];
        var InstanceId = aws.params['InstanceId'];
        var DesiredCapacity = aws.params['DesiredCapacity'] /* integer */;
        var LaunchConfigurationName = aws.params['LaunchConfigurationName'];
        var HealthCheckType = aws.params['HealthCheckType'];
        var HealthCheckGracePeriod = aws.params['HealthCheckGracePeriod'] /* integer */;
        var PlacementGroup = aws.params['PlacementGroup'];
        var DefaultCooldown = aws.params['DefaultCooldown'] /* integer */;
        var MinSize = aws.params['MinSize'] /* integer */;
        var VPCZoneIdentifier = aws.params['VPCZoneIdentifier'];
        var MaxSize = aws.params['MaxSize'] /* integer */;
        var TerminationPolicies = aws.params['TerminationPolicies'];
        var LoadBalancerNames = aws.params['LoadBalancerNames'];
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];
        var NewInstancesProtectedFromScaleIn = aws.params['NewInstancesProtectedFromScaleIn'] /* boolean */;
        var AvailabilityZones = aws.params['AvailabilityZones'];
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }
        if (! MinSize) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MinSize"];
        }
        if (! MaxSize) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MaxSize"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.AttachLoadBalancers = function AttachLoadBalancers(aws) {
        var LoadBalancerNames = aws.params['LoadBalancerNames'];
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];


        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.ExecutePolicy = function ExecutePolicy(aws) {
        var MetricValue = aws.params['MetricValue'] /* double */;
        var BreachThreshold = aws.params['BreachThreshold'] /* double */;
        var PolicyName = aws.params['PolicyName'];
        var HonorCooldown = aws.params['HonorCooldown'] /* boolean */;
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];
        if (! PolicyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PolicyName"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.SetDesiredCapacity = function SetDesiredCapacity(aws) {
        var DesiredCapacity = aws.params['DesiredCapacity'] /* integer */;
        var HonorCooldown = aws.params['HonorCooldown'] /* boolean */;
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }
        if (! DesiredCapacity) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DesiredCapacity"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CompleteLifecycleAction = function CompleteLifecycleAction(aws) {
        var LifecycleActionResult = aws.params['LifecycleActionResult'];
        var LifecycleActionToken = aws.params['LifecycleActionToken'];
        var LifecycleHookName = aws.params['LifecycleHookName'];
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];
        if (! LifecycleHookName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LifecycleHookName"];
        }
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }
        if (! LifecycleActionToken) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LifecycleActionToken"];
        }
        if (! LifecycleActionResult) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LifecycleActionResult"];
        }


        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.PutNotificationConfiguration = function PutNotificationConfiguration(aws) {
        var TopicARN = aws.params['TopicARN'];
        var NotificationTypes = aws.params['NotificationTypes'];
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }
        if (! TopicARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TopicARN"];
        }
        if (! NotificationTypes) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter NotificationTypes"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeleteScheduledAction = function DeleteScheduledAction(aws) {
        var ScheduledActionName = aws.params['ScheduledActionName'];
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];
        if (! ScheduledActionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ScheduledActionName"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.AttachInstances = function AttachInstances(aws) {
        var InstanceIds = aws.params['InstanceIds'];
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.SetInstanceHealth = function SetInstanceHealth(aws) {
        var ShouldRespectGracePeriod = aws.params['ShouldRespectGracePeriod'] /* boolean */;
        var InstanceId = aws.params['InstanceId'];
        var HealthStatus = aws.params['HealthStatus'];
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }
        if (! HealthStatus) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter HealthStatus"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeScheduledActions = function DescribeScheduledActions(aws) {
        var NextToken = aws.params['NextToken'];
        var EndTime = aws.params['EndTime'] /* timestamp */;
        var StartTime = aws.params['StartTime'] /* timestamp */;
        var ScheduledActionNames = aws.params['ScheduledActionNames'] /* list */;
        var MaxRecords = aws.params['MaxRecords'] /* integer */;
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];


        // TODO implement code

        var ret = {
            NextToken: "",
            ScheduledUpdateGroupActions: [ {
                MaxSize: 0,
                DesiredCapacity: 0,
                EndTime: now(),
                StartTime: now(),
                MinSize: 0,
                Time: now(),
                Recurrence: "",
                ScheduledActionARN: "",
                ScheduledActionName: "",
                AutoScalingGroupName: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.SetInstanceProtection = function SetInstanceProtection(aws) {
        var ProtectedFromScaleIn = aws.params['ProtectedFromScaleIn'] /* boolean */;
        var InstanceIds = aws.params['InstanceIds'];
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];
        if (! InstanceIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceIds"];
        }
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }
        if (! ProtectedFromScaleIn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ProtectedFromScaleIn"];
        }


        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.DetachLoadBalancers = function DetachLoadBalancers(aws) {
        var LoadBalancerNames = aws.params['LoadBalancerNames'];
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];


        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.PutLifecycleHook = function PutLifecycleHook(aws) {
        var RoleARN = aws.params['RoleARN'];
        var HeartbeatTimeout = aws.params['HeartbeatTimeout'] /* integer */;
        var LifecycleTransition = aws.params['LifecycleTransition'];
        var DefaultResult = aws.params['DefaultResult'];
        var NotificationTargetARN = aws.params['NotificationTargetARN'];
        var NotificationMetadata = aws.params['NotificationMetadata'];
        var LifecycleHookName = aws.params['LifecycleHookName'];
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];
        if (! LifecycleHookName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LifecycleHookName"];
        }
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }


        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.DescribeAccountLimits = function DescribeAccountLimits(aws) {


        // TODO implement code

        var ret = {
            MaxNumberOfLaunchConfigurations: 0,
            NumberOfAutoScalingGroups: 0,
            MaxNumberOfAutoScalingGroups: 0,
            NumberOfLaunchConfigurations: 0
        };
        return [200, ret];
    }
module.exports.CreateLaunchConfiguration = function CreateLaunchConfiguration(aws) {
        var InstanceType = aws.params['InstanceType'];
        var InstanceId = aws.params['InstanceId'];
        var ClassicLinkVPCSecurityGroups = aws.params['ClassicLinkVPCSecurityGroups'];
        var LaunchConfigurationName = aws.params['LaunchConfigurationName'];
        var SecurityGroups = aws.params['SecurityGroups'];
        var ClassicLinkVPCId = aws.params['ClassicLinkVPCId'];
        var PlacementTenancy = aws.params['PlacementTenancy'];
        var KernelId = aws.params['KernelId'];
        var ImageId = aws.params['ImageId'];
        var SpotPrice = aws.params['SpotPrice'];
        var EbsOptimized = aws.params['EbsOptimized'] /* boolean */;
        var RamdiskId = aws.params['RamdiskId'];
        var AssociatePublicIpAddress = aws.params['AssociatePublicIpAddress'] /* boolean */;
        var UserData = aws.params['UserData'];
        var KeyName = aws.params['KeyName'];
        var BlockDeviceMappings = aws.params['BlockDeviceMappings'];
        var IamInstanceProfile = aws.params['IamInstanceProfile'];
        var InstanceMonitoring = aws.params['InstanceMonitoring'];
        if (! LaunchConfigurationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LaunchConfigurationName"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeleteNotificationConfiguration = function DeleteNotificationConfiguration(aws) {
        var TopicARN = aws.params['TopicARN'];
        var AutoScalingGroupName = aws.params['AutoScalingGroupName'];
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }
        if (! TopicARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TopicARN"];
        }


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
