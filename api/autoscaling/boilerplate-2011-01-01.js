'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * Auto Scaling version 2011-01-01
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.CompleteLifecycleAction = function CompleteLifecycleAction(aws) {
        var LifecycleHookName = aws.params.LifecycleHookName;
        var LifecycleActionToken = aws.params.LifecycleActionToken;
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        var LifecycleActionResult = aws.params.LifecycleActionResult;
        if (! LifecycleHookName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LifecycleHookName"];
        }        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }        if (! LifecycleActionToken) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LifecycleActionToken"];
        }        if (! LifecycleActionResult) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LifecycleActionResult"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.DescribeLaunchConfigurations = function DescribeLaunchConfigurations(aws) {
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var LaunchConfigurationNames = aws.params.LaunchConfigurationNames /* list */;
        var NextToken = aws.params.NextToken;


        // TODO implement code

        var ret = {
            LaunchConfigurations: [ {
                ImageId: "",
                BlockDeviceMappings: /*Sz*/[ {
                    DeviceName: "",
                    Ebs: {
                        VolumeSize: 0,
                        VolumeType: "",
                        Iops: 0,
                        SnapshotId: "",
                        Encrypted: false,
                        DeleteOnTermination: false
                    },
                    VirtualName: "",
                    NoDevice: false
                } /*, ...*/ ],
                IamInstanceProfile: "",
                LaunchConfigurationName: "",
                RamdiskId: "",
                InstanceType: "",
                PlacementTenancy: "",
                LaunchConfigurationARN: "",
                AssociatePublicIpAddress: false,
                SpotPrice: "",
                SecurityGroups: /*Sw*/[ "" /*, ...*/ ],
                ClassicLinkVPCId: "",
                CreatedTime: now(),
                ClassicLinkVPCSecurityGroups: /*Sx*/[ "" /*, ...*/ ],
                KernelId: "",
                UserData: "",
                EbsOptimized: false,
                KeyName: "",
                InstanceMonitoring: /*S18*/{
                    Enabled: false
                }
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.EnterStandby = function EnterStandby(aws) {
        var InstanceIds = aws.params.InstanceIds;
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        var ShouldDecrementDesiredCapacity = aws.params.ShouldDecrementDesiredCapacity /* boolean */;
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }        if (! ShouldDecrementDesiredCapacity) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ShouldDecrementDesiredCapacity"];
        }

        // TODO implement code

        var ret = {
            Activities: /*S3s*/[ /*S3t*/{
                EndTime: now(),
                Description: "",
                StatusMessage: "",
                Progress: 0,
                StartTime: now(),
                Details: "",
                AutoScalingGroupName: "",
                ActivityId: "",
                Cause: "",
                StatusCode: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.AttachInstances = function AttachInstances(aws) {
        var InstanceIds = aws.params.InstanceIds;
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeLifecycleHooks = function DescribeLifecycleHooks(aws) {
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        var LifecycleHookNames = aws.params.LifecycleHookNames /* list */;
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }

        // TODO implement code

        var ret = {
            LifecycleHooks: [ {
                LifecycleHookName: "",
                NotificationMetadata: "",
                LifecycleTransition: "",
                NotificationTargetARN: "",
                GlobalTimeout: 0,
                AutoScalingGroupName: "",
                DefaultResult: "",
                HeartbeatTimeout: 0,
                RoleARN: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteAutoScalingGroup = function DeleteAutoScalingGroup(aws) {
        var ForceDelete = aws.params.ForceDelete /* boolean */;
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CreateLaunchConfiguration = function CreateLaunchConfiguration(aws) {
        var ImageId = aws.params.ImageId;
        var IamInstanceProfile = aws.params.IamInstanceProfile;
        var LaunchConfigurationName = aws.params.LaunchConfigurationName;
        var RamdiskId = aws.params.RamdiskId;
        var InstanceType = aws.params.InstanceType;
        var PlacementTenancy = aws.params.PlacementTenancy;
        var BlockDeviceMappings = aws.params.BlockDeviceMappings;
        var InstanceId = aws.params.InstanceId;
        var AssociatePublicIpAddress = aws.params.AssociatePublicIpAddress /* boolean */;
        var SpotPrice = aws.params.SpotPrice;
        var SecurityGroups = aws.params.SecurityGroups;
        var ClassicLinkVPCId = aws.params.ClassicLinkVPCId;
        var ClassicLinkVPCSecurityGroups = aws.params.ClassicLinkVPCSecurityGroups;
        var KernelId = aws.params.KernelId;
        var UserData = aws.params.UserData;
        var EbsOptimized = aws.params.EbsOptimized /* boolean */;
        var KeyName = aws.params.KeyName;
        var InstanceMonitoring = aws.params.InstanceMonitoring;
        if (! LaunchConfigurationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LaunchConfigurationName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.RecordLifecycleActionHeartbeat = function RecordLifecycleActionHeartbeat(aws) {
        var LifecycleHookName = aws.params.LifecycleHookName;
        var LifecycleActionToken = aws.params.LifecycleActionToken;
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        if (! LifecycleHookName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LifecycleHookName"];
        }        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }        if (! LifecycleActionToken) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LifecycleActionToken"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.DetachLoadBalancers = function DetachLoadBalancers(aws) {
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        var LoadBalancerNames = aws.params.LoadBalancerNames;


        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.DescribeLifecycleHookTypes = function DescribeLifecycleHookTypes(aws) {


        // TODO implement code

        var ret = {
            LifecycleHookTypes: /*S2h*/[ "" /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteLaunchConfiguration = function DeleteLaunchConfiguration(aws) {
        var LaunchConfigurationName = aws.params.LaunchConfigurationName;
        if (! LaunchConfigurationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LaunchConfigurationName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.AttachLoadBalancers = function AttachLoadBalancers(aws) {
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        var LoadBalancerNames = aws.params.LoadBalancerNames;


        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.SetDesiredCapacity = function SetDesiredCapacity(aws) {
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        var DesiredCapacity = aws.params.DesiredCapacity /* integer */;
        var HonorCooldown = aws.params.HonorCooldown /* boolean */;
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }        if (! DesiredCapacity) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DesiredCapacity"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeNotificationConfigurations = function DescribeNotificationConfigurations(aws) {
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var AutoScalingGroupNames = aws.params.AutoScalingGroupNames;
        var NextToken = aws.params.NextToken;


        // TODO implement code

        var ret = {
            NotificationConfigurations: [ {
                NotificationType: "",
                AutoScalingGroupName: "",
                TopicARN: ""
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.DescribeLoadBalancers = function DescribeLoadBalancers(aws) {
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        var NextToken = aws.params.NextToken;
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }

        // TODO implement code

        var ret = {
            LoadBalancers: [ {
                State: "",
                LoadBalancerName: ""
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.DeleteNotificationConfiguration = function DeleteNotificationConfiguration(aws) {
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        var TopicARN = aws.params.TopicARN;
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }        if (! TopicARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TopicARN"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeAutoScalingInstances = function DescribeAutoScalingInstances(aws) {
        var InstanceIds = aws.params.InstanceIds;
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var NextToken = aws.params.NextToken;


        // TODO implement code

        var ret = {
            AutoScalingInstances: [ {
                HealthStatus: "",
                LaunchConfigurationName: "",
                AvailabilityZone: "",
                LifecycleState: "",
                AutoScalingGroupName: "",
                InstanceId: "",
                ProtectedFromScaleIn: false
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.DescribeTags = function DescribeTags(aws) {
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var Filters = aws.params.Filters /* list */;
        var NextToken = aws.params.NextToken;


        // TODO implement code

        var ret = {
            Tags: /*S2a*/[ {
                ResourceType: "",
                Value: "",
                Key: "",
                ResourceId: "",
                PropagateAtLaunch: false
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.SetInstanceHealth = function SetInstanceHealth(aws) {
        var ShouldRespectGracePeriod = aws.params.ShouldRespectGracePeriod /* boolean */;
        var HealthStatus = aws.params.HealthStatus;
        var InstanceId = aws.params.InstanceId;
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }        if (! HealthStatus) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter HealthStatus"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeMetricCollectionTypes = function DescribeMetricCollectionTypes(aws) {


        // TODO implement code

        var ret = {
            Metrics: [ {
                Metric: ""
            } /*, ...*/ ],
            Granularities: [ {
                Granularity: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.SuspendProcesses = function SuspendProcesses(aws) {


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeScalingProcessTypes = function DescribeScalingProcessTypes(aws) {


        // TODO implement code

        var ret = {
            Processes: [ {
                ProcessName: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeTerminationPolicyTypes = function DescribeTerminationPolicyTypes(aws) {


        // TODO implement code

        var ret = {
            TerminationPolicyTypes: /*Sm*/[ "" /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteLifecycleHook = function DeleteLifecycleHook(aws) {
        var LifecycleHookName = aws.params.LifecycleHookName;
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        if (! LifecycleHookName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LifecycleHookName"];
        }        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.EnableMetricsCollection = function EnableMetricsCollection(aws) {
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        var Metrics = aws.params.Metrics;
        var Granularity = aws.params.Granularity;
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }        if (! Granularity) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Granularity"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ExitStandby = function ExitStandby(aws) {
        var InstanceIds = aws.params.InstanceIds;
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }

        // TODO implement code

        var ret = {
            Activities: /*S3s*/[ /*S3t*/{
                EndTime: now(),
                Description: "",
                StatusMessage: "",
                Progress: 0,
                StartTime: now(),
                Details: "",
                AutoScalingGroupName: "",
                ActivityId: "",
                Cause: "",
                StatusCode: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DisableMetricsCollection = function DisableMetricsCollection(aws) {
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        var Metrics = aws.params.Metrics;
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeAccountLimits = function DescribeAccountLimits(aws) {


        // TODO implement code

        var ret = {
            MaxNumberOfAutoScalingGroups: 0,
            MaxNumberOfLaunchConfigurations: 0,
            NumberOfLaunchConfigurations: 0,
            NumberOfAutoScalingGroups: 0
        };
        return [200, ret];
    }
module.exports.ResumeProcesses = function ResumeProcesses(aws) {


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.UpdateAutoScalingGroup = function UpdateAutoScalingGroup(aws) {
        var TerminationPolicies = aws.params.TerminationPolicies;
        var LaunchConfigurationName = aws.params.LaunchConfigurationName;
        var VPCZoneIdentifier = aws.params.VPCZoneIdentifier;
        var HealthCheckGracePeriod = aws.params.HealthCheckGracePeriod /* integer */;
        var NewInstancesProtectedFromScaleIn = aws.params.NewInstancesProtectedFromScaleIn /* boolean */;
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        var HealthCheckType = aws.params.HealthCheckType;
        var PlacementGroup = aws.params.PlacementGroup;
        var AvailabilityZones = aws.params.AvailabilityZones;
        var MaxSize = aws.params.MaxSize /* integer */;
        var DesiredCapacity = aws.params.DesiredCapacity /* integer */;
        var DefaultCooldown = aws.params.DefaultCooldown /* integer */;
        var MinSize = aws.params.MinSize /* integer */;
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribePolicies = function DescribePolicies(aws) {
        var PolicyNames = aws.params.PolicyNames /* list */;
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        var NextToken = aws.params.NextToken;
        var PolicyTypes = aws.params.PolicyTypes /* list */;


        // TODO implement code

        var ret = {
            ScalingPolicies: [ {
                MetricAggregationType: "",
                PolicyType: "",
                StepAdjustments: /*S3j*/[ {
                    MetricIntervalLowerBound: 0.0 /*double*/,
                    ScalingAdjustment: 0,
                    MetricIntervalUpperBound: 0.0 /*double*/
                } /*, ...*/ ],
                Cooldown: 0,
                PolicyName: "",
                AutoScalingGroupName: "",
                MinAdjustmentStep: /*S3g*/0,
                EstimatedInstanceWarmup: 0,
                PolicyARN: "",
                MinAdjustmentMagnitude: 0,
                ScalingAdjustment: 0,
                AdjustmentType: "",
                Alarms: [ {
                    AlarmName: "",
                    AlarmARN: ""
                } /*, ...*/ ]
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.SetInstanceProtection = function SetInstanceProtection(aws) {
        var InstanceIds = aws.params.InstanceIds;
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        var ProtectedFromScaleIn = aws.params.ProtectedFromScaleIn /* boolean */;
        if (! InstanceIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceIds"];
        }        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }        if (! ProtectedFromScaleIn) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ProtectedFromScaleIn"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.CreateAutoScalingGroup = function CreateAutoScalingGroup(aws) {
        var TerminationPolicies = aws.params.TerminationPolicies;
        var LaunchConfigurationName = aws.params.LaunchConfigurationName;
        var VPCZoneIdentifier = aws.params.VPCZoneIdentifier;
        var HealthCheckGracePeriod = aws.params.HealthCheckGracePeriod /* integer */;
        var NewInstancesProtectedFromScaleIn = aws.params.NewInstancesProtectedFromScaleIn /* boolean */;
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        var Tags = aws.params.Tags;
        var InstanceId = aws.params.InstanceId;
        var LoadBalancerNames = aws.params.LoadBalancerNames;
        var MaxSize = aws.params.MaxSize /* integer */;
        var AvailabilityZones = aws.params.AvailabilityZones;
        var PlacementGroup = aws.params.PlacementGroup;
        var HealthCheckType = aws.params.HealthCheckType;
        var DesiredCapacity = aws.params.DesiredCapacity /* integer */;
        var DefaultCooldown = aws.params.DefaultCooldown /* integer */;
        var MinSize = aws.params.MinSize /* integer */;
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }        if (! MinSize) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MinSize"];
        }        if (! MaxSize) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MaxSize"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.TerminateInstanceInAutoScalingGroup = function TerminateInstanceInAutoScalingGroup(aws) {
        var InstanceId = aws.params.InstanceId;
        var ShouldDecrementDesiredCapacity = aws.params.ShouldDecrementDesiredCapacity /* boolean */;
        if (! InstanceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstanceId"];
        }        if (! ShouldDecrementDesiredCapacity) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ShouldDecrementDesiredCapacity"];
        }

        // TODO implement code

        var ret = {
            Activity: /*S3t*/{
                EndTime: now(),
                Description: "",
                StatusMessage: "",
                Progress: 0,
                StartTime: now(),
                Details: "",
                AutoScalingGroupName: "",
                ActivityId: "",
                Cause: "",
                StatusCode: ""
            }
        };
        return [200, ret];
    }
module.exports.PutScheduledUpdateGroupAction = function PutScheduledUpdateGroupAction(aws) {
        var ScheduledActionName = aws.params.ScheduledActionName;
        var EndTime = aws.params.EndTime /* timestamp */;
        var MaxSize = aws.params.MaxSize /* integer */;
        var Recurrence = aws.params.Recurrence;
        var StartTime = aws.params.StartTime /* timestamp */;
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        var DesiredCapacity = aws.params.DesiredCapacity /* integer */;
        var Time = aws.params.Time /* timestamp */;
        var MinSize = aws.params.MinSize /* integer */;
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }        if (! ScheduledActionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ScheduledActionName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CreateOrUpdateTags = function CreateOrUpdateTags(aws) {
        var Tags = aws.params.Tags;
        if (! Tags) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Tags"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ExecutePolicy = function ExecutePolicy(aws) {
        var BreachThreshold = aws.params.BreachThreshold /* double */;
        var PolicyName = aws.params.PolicyName;
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        var HonorCooldown = aws.params.HonorCooldown /* boolean */;
        var MetricValue = aws.params.MetricValue /* double */;
        if (! PolicyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PolicyName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.PutNotificationConfiguration = function PutNotificationConfiguration(aws) {
        var NotificationTypes = aws.params.NotificationTypes;
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        var TopicARN = aws.params.TopicARN;
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }        if (! TopicARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TopicARN"];
        }        if (! NotificationTypes) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter NotificationTypes"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeAutoScalingNotificationTypes = function DescribeAutoScalingNotificationTypes(aws) {


        // TODO implement code

        var ret = {
            AutoScalingNotificationTypes: /*S2h*/[ "" /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.PutScalingPolicy = function PutScalingPolicy(aws) {
        var EstimatedInstanceWarmup = aws.params.EstimatedInstanceWarmup /* integer */;
        var AdjustmentType = aws.params.AdjustmentType;
        var PolicyType = aws.params.PolicyType;
        var MinAdjustmentMagnitude = aws.params.MinAdjustmentMagnitude /* integer */;
        var StepAdjustments = aws.params.StepAdjustments;
        var Cooldown = aws.params.Cooldown /* integer */;
        var PolicyName = aws.params.PolicyName;
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        var MinAdjustmentStep = aws.params.MinAdjustmentStep;
        var ScalingAdjustment = aws.params.ScalingAdjustment /* integer */;
        var MetricAggregationType = aws.params.MetricAggregationType;
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }        if (! PolicyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PolicyName"];
        }        if (! AdjustmentType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AdjustmentType"];
        }

        // TODO implement code

        var ret = {
            PolicyARN: ""
        };
        return [200, ret];
    }
module.exports.DeleteScheduledAction = function DeleteScheduledAction(aws) {
        var ScheduledActionName = aws.params.ScheduledActionName;
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        if (! ScheduledActionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ScheduledActionName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DescribeScalingActivities = function DescribeScalingActivities(aws) {
        var ActivityIds = aws.params.ActivityIds /* list */;
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        var NextToken = aws.params.NextToken;
        var MaxRecords = aws.params.MaxRecords /* integer */;


        // TODO implement code

        var ret = {
            Activities: /*S3s*/[ /*S3t*/{
                EndTime: now(),
                Description: "",
                StatusMessage: "",
                Progress: 0,
                StartTime: now(),
                Details: "",
                AutoScalingGroupName: "",
                ActivityId: "",
                Cause: "",
                StatusCode: ""
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.PutLifecycleHook = function PutLifecycleHook(aws) {
        var LifecycleHookName = aws.params.LifecycleHookName;
        var NotificationMetadata = aws.params.NotificationMetadata;
        var LifecycleTransition = aws.params.LifecycleTransition;
        var NotificationTargetARN = aws.params.NotificationTargetARN;
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        var DefaultResult = aws.params.DefaultResult;
        var HeartbeatTimeout = aws.params.HeartbeatTimeout /* integer */;
        var RoleARN = aws.params.RoleARN;
        if (! LifecycleHookName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LifecycleHookName"];
        }        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.DeleteTags = function DeleteTags(aws) {
        var Tags = aws.params.Tags;
        if (! Tags) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Tags"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DetachInstances = function DetachInstances(aws) {
        var InstanceIds = aws.params.InstanceIds;
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        var ShouldDecrementDesiredCapacity = aws.params.ShouldDecrementDesiredCapacity /* boolean */;
        if (! AutoScalingGroupName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AutoScalingGroupName"];
        }        if (! ShouldDecrementDesiredCapacity) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ShouldDecrementDesiredCapacity"];
        }

        // TODO implement code

        var ret = {
            Activities: /*S3s*/[ /*S3t*/{
                EndTime: now(),
                Description: "",
                StatusMessage: "",
                Progress: 0,
                StartTime: now(),
                Details: "",
                AutoScalingGroupName: "",
                ActivityId: "",
                Cause: "",
                StatusCode: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeAdjustmentTypes = function DescribeAdjustmentTypes(aws) {


        // TODO implement code

        var ret = {
            AdjustmentTypes: [ {
                AdjustmentType: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeScheduledActions = function DescribeScheduledActions(aws) {
        var EndTime = aws.params.EndTime /* timestamp */;
        var StartTime = aws.params.StartTime /* timestamp */;
        var NextToken = aws.params.NextToken;
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        var ScheduledActionNames = aws.params.ScheduledActionNames /* list */;


        // TODO implement code

        var ret = {
            ScheduledUpdateGroupActions: [ {
                ScheduledActionName: "",
                EndTime: now(),
                AutoScalingGroupName: "",
                MaxSize: 0,
                Recurrence: "",
                StartTime: now(),
                ScheduledActionARN: "",
                DesiredCapacity: 0,
                Time: now(),
                MinSize: 0
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.DescribeAutoScalingGroups = function DescribeAutoScalingGroups(aws) {
        var MaxRecords = aws.params.MaxRecords /* integer */;
        var AutoScalingGroupNames = aws.params.AutoScalingGroupNames;
        var NextToken = aws.params.NextToken;


        // TODO implement code

        var ret = {
            AutoScalingGroups: [ {
                TerminationPolicies: /*Sm*/[ "" /*, ...*/ ],
                Instances: [ {
                    LaunchConfigurationName: "",
                    AvailabilityZone: "",
                    LifecycleState: "",
                    HealthStatus: "",
                    InstanceId: "",
                    ProtectedFromScaleIn: false
                } /*, ...*/ ],
                LaunchConfigurationName: "",
                VPCZoneIdentifier: "",
                SuspendedProcesses: [ {
                    ProcessName: "",
                    SuspensionReason: ""
                } /*, ...*/ ],
                HealthCheckGracePeriod: 0,
                NewInstancesProtectedFromScaleIn: false,
                AutoScalingGroupName: "",
                Tags: /*S2a*/[ {
                    ResourceType: "",
                    Value: "",
                    Key: "",
                    ResourceId: "",
                    PropagateAtLaunch: false
                } /*, ...*/ ],
                LoadBalancerNames: /*S6*/[ "" /*, ...*/ ],
                Status: "",
                EnabledMetrics: [ {
                    Granularity: "",
                    Metric: ""
                } /*, ...*/ ],
                CreatedTime: now(),
                MaxSize: 0,
                AutoScalingGroupARN: "",
                PlacementGroup: "",
                HealthCheckType: "",
                DesiredCapacity: 0,
                MinSize: 0,
                DefaultCooldown: 0,
                AvailabilityZones: /*Sj*/[ "" /*, ...*/ ]
            } /*, ...*/ ],
            NextToken: ""
        };
        return [200, ret];
    }
module.exports.DeletePolicy = function DeletePolicy(aws) {
        var PolicyName = aws.params.PolicyName;
        var AutoScalingGroupName = aws.params.AutoScalingGroupName;
        if (! PolicyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PolicyName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
