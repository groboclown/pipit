'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * Amazon Elasticsearch Service version 2015-01-01
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol rest-json
require('../../lib/aws-common/shape_http')('rest-json', module.exports, null);
// -----------------------------------
module.exports.UpdateElasticsearchDomainConfig = awsCommon.as(
  '/2015-01-01/es/domain/:DomainName/config',
  function UpdateElasticsearchDomainConfig(aws) {
    var domainName = aws.reqParams.DomainName;
    var snapshotOptions = aws.params.SnapshotOptions;
    var advancedOptions = aws.params.AdvancedOptions;
    var elasticsearchClusterConfig = aws.params.ElasticsearchClusterConfig;
    var accessPolicies = aws.params.AccessPolicies;
    var eBSOptions = aws.params.EBSOptions;
    if (!domainName) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
    }


    // TODO implement code

    var ret = {
      DomainConfig: /*St*/{
        ElasticsearchClusterConfig: {
          Status: /*Sv*/{
            UpdateVersion: 0,
            CreationDate: awsCommon.timestamp(),
            PendingDeletion: false,
            UpdateDate: awsCommon.timestamp(),
            State: '',
          },
          Options: /*S9*/{
            InstanceType: '',
            ZoneAwarenessEnabled: false,
            DedicatedMasterEnabled: false,
            InstanceCount: 0,
            DedicatedMasterCount: 0,
            DedicatedMasterType: '',
          },
        },
        SnapshotOptions: {
          Status: /*Sv*/{
            UpdateVersion: 0,
            CreationDate: awsCommon.timestamp(),
            PendingDeletion: false,
            UpdateDate: awsCommon.timestamp(),
            State: '',
          },
          Options: /*Sg*/{
            AutomatedSnapshotStartHour: 0,
          },
        },
        AccessPolicies: {
          Status: /*Sv*/{
            UpdateVersion: 0,
            CreationDate: awsCommon.timestamp(),
            PendingDeletion: false,
            UpdateDate: awsCommon.timestamp(),
            State: '',
          },
          Options: '',
        },
        AdvancedOptions: {
          Status: /*Sv*/{
            UpdateVersion: 0,
            CreationDate: awsCommon.timestamp(),
            PendingDeletion: false,
            UpdateDate: awsCommon.timestamp(),
            State: '',
          },
          Options: /*Sh*/{} /*Map*/,
        },
        EBSOptions: {
          Status: /*Sv*/{
            UpdateVersion: 0,
            CreationDate: awsCommon.timestamp(),
            PendingDeletion: false,
            UpdateDate: awsCommon.timestamp(),
            State: '',
          },
          Options: /*Sd*/{
            VolumeSize: 0,
            Iops: 0,
            VolumeType: '',
            EBSEnabled: false,
          },
        },
      },
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.DescribeElasticsearchDomainConfig = awsCommon.as(
  'GET',
  '/2015-01-01/es/domain/:DomainName/config',
  function DescribeElasticsearchDomainConfig(aws) {
    var domainName = aws.reqParams.DomainName;
    if (!domainName) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
    }


    // TODO implement code

    var ret = {
      DomainConfig: /*St*/{
        ElasticsearchClusterConfig: {
          Status: /*Sv*/{
            UpdateVersion: 0,
            CreationDate: awsCommon.timestamp(),
            PendingDeletion: false,
            UpdateDate: awsCommon.timestamp(),
            State: '',
          },
          Options: /*S9*/{
            InstanceType: '',
            ZoneAwarenessEnabled: false,
            DedicatedMasterEnabled: false,
            InstanceCount: 0,
            DedicatedMasterCount: 0,
            DedicatedMasterType: '',
          },
        },
        SnapshotOptions: {
          Status: /*Sv*/{
            UpdateVersion: 0,
            CreationDate: awsCommon.timestamp(),
            PendingDeletion: false,
            UpdateDate: awsCommon.timestamp(),
            State: '',
          },
          Options: /*Sg*/{
            AutomatedSnapshotStartHour: 0,
          },
        },
        AccessPolicies: {
          Status: /*Sv*/{
            UpdateVersion: 0,
            CreationDate: awsCommon.timestamp(),
            PendingDeletion: false,
            UpdateDate: awsCommon.timestamp(),
            State: '',
          },
          Options: '',
        },
        AdvancedOptions: {
          Status: /*Sv*/{
            UpdateVersion: 0,
            CreationDate: awsCommon.timestamp(),
            PendingDeletion: false,
            UpdateDate: awsCommon.timestamp(),
            State: '',
          },
          Options: /*Sh*/{} /*Map*/,
        },
        EBSOptions: {
          Status: /*Sv*/{
            UpdateVersion: 0,
            CreationDate: awsCommon.timestamp(),
            PendingDeletion: false,
            UpdateDate: awsCommon.timestamp(),
            State: '',
          },
          Options: /*Sd*/{
            VolumeSize: 0,
            Iops: 0,
            VolumeType: '',
            EBSEnabled: false,
          },
        },
      },
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.DescribeElasticsearchDomains = awsCommon.as(
  '/2015-01-01/es/domain-info',
  function DescribeElasticsearchDomains(aws) {
    var domainNames = aws.params.DomainNames /* Type list */;
    if (!domainNames) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainNames'];
    }


    // TODO implement code

    var ret = {
      DomainStatusList: [ /*Sk*/{
        DomainId: '',
        SnapshotOptions: /*Sg*/{
          AutomatedSnapshotStartHour: 0,
        },
        Endpoint: '',
        AdvancedOptions: /*Sh*/{} /*Map*/,
        ElasticsearchClusterConfig: /*S9*/{
          InstanceType: '',
          ZoneAwarenessEnabled: false,
          DedicatedMasterEnabled: false,
          InstanceCount: 0,
          DedicatedMasterCount: 0,
          DedicatedMasterType: '',
        },
        Deleted: false,
        AccessPolicies: '',
        Created: false,
        EBSOptions: /*Sd*/{
          VolumeSize: 0,
          Iops: 0,
          VolumeType: '',
          EBSEnabled: false,
        },
        DomainName: '',
        ARN: '',
        Processing: false,
      }, /* ...*/ ],
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.CreateElasticsearchDomain = awsCommon.as(
  '/2015-01-01/es/domain',
  function CreateElasticsearchDomain(aws) {
    var domainName = aws.params.DomainName;
    var snapshotOptions = aws.params.SnapshotOptions;
    var advancedOptions = aws.params.AdvancedOptions;
    var elasticsearchClusterConfig = aws.params.ElasticsearchClusterConfig;
    var accessPolicies = aws.params.AccessPolicies;
    var eBSOptions = aws.params.EBSOptions;
    if (!domainName) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
    }


    // TODO implement code

    var ret = {
      DomainStatus: /*Sk*/{
        DomainId: '',
        SnapshotOptions: /*Sg*/{
          AutomatedSnapshotStartHour: 0,
        },
        Endpoint: '',
        AdvancedOptions: /*Sh*/{} /*Map*/,
        ElasticsearchClusterConfig: /*S9*/{
          InstanceType: '',
          ZoneAwarenessEnabled: false,
          DedicatedMasterEnabled: false,
          InstanceCount: 0,
          DedicatedMasterCount: 0,
          DedicatedMasterType: '',
        },
        Deleted: false,
        AccessPolicies: '',
        Created: false,
        EBSOptions: /*Sd*/{
          VolumeSize: 0,
          Iops: 0,
          VolumeType: '',
          EBSEnabled: false,
        },
        DomainName: '',
        ARN: '',
        Processing: false,
      },
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.DescribeElasticsearchDomain = awsCommon.as(
  'GET',
  '/2015-01-01/es/domain/:DomainName',
  function DescribeElasticsearchDomain(aws) {
    var domainName = aws.reqParams.DomainName;
    if (!domainName) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
    }


    // TODO implement code

    var ret = {
      DomainStatus: /*Sk*/{
        DomainId: '',
        SnapshotOptions: /*Sg*/{
          AutomatedSnapshotStartHour: 0,
        },
        Endpoint: '',
        AdvancedOptions: /*Sh*/{} /*Map*/,
        ElasticsearchClusterConfig: /*S9*/{
          InstanceType: '',
          ZoneAwarenessEnabled: false,
          DedicatedMasterEnabled: false,
          InstanceCount: 0,
          DedicatedMasterCount: 0,
          DedicatedMasterType: '',
        },
        Deleted: false,
        AccessPolicies: '',
        Created: false,
        EBSOptions: /*Sd*/{
          VolumeSize: 0,
          Iops: 0,
          VolumeType: '',
          EBSEnabled: false,
        },
        DomainName: '',
        ARN: '',
        Processing: false,
      },
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.DeleteElasticsearchDomain = awsCommon.as(
  'DELETE',
  '/2015-01-01/es/domain/:DomainName',
  function DeleteElasticsearchDomain(aws) {
    var domainName = aws.reqParams.DomainName;
    if (!domainName) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
    }


    // TODO implement code

    var ret = {
      DomainStatus: /*Sk*/{
        DomainId: '',
        SnapshotOptions: /*Sg*/{
          AutomatedSnapshotStartHour: 0,
        },
        Endpoint: '',
        AdvancedOptions: /*Sh*/{} /*Map*/,
        ElasticsearchClusterConfig: /*S9*/{
          InstanceType: '',
          ZoneAwarenessEnabled: false,
          DedicatedMasterEnabled: false,
          InstanceCount: 0,
          DedicatedMasterCount: 0,
          DedicatedMasterType: '',
        },
        Deleted: false,
        AccessPolicies: '',
        Created: false,
        EBSOptions: /*Sd*/{
          VolumeSize: 0,
          Iops: 0,
          VolumeType: '',
          EBSEnabled: false,
        },
        DomainName: '',
        ARN: '',
        Processing: false,
      },
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.RemoveTags = awsCommon.as(
  '/2015-01-01/tags-removal',
  function RemoveTags(aws) {
    var tagKeys = aws.params.TagKeys /* Type list */;
    var aRN = aws.params.ARN;
    if (!aRN) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ARN'];
    }
    if (!tagKeys) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TagKeys'];
    }


    // TODO implement code

    var ret = {};
    return [200, ret];
  });
// -----------------------------------
module.exports.ListTags = awsCommon.as(
  'GET',
  '/2015-01-01/tags/',
  function ListTags(aws) {
    var aRN = aws.params.ARN;
    if (!aRN) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ARN'];
    }


    // TODO implement code

    var ret = {
      TagList: /*S3*/[ {
        Value: '',
        Key: '',
      }, /* ...*/ ],
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.ListDomainNames = awsCommon.as(
  'GET',
  '/2015-01-01/domain',
  function ListDomainNames(aws) {


    // TODO implement code

    var ret = {
      DomainNames: [ {
        DomainName: '',
      }, /* ...*/ ],
    };
    return [200, ret];
  });
// -----------------------------------
module.exports.AddTags = awsCommon.as(
  '/2015-01-01/tags',
  function AddTags(aws) {
    var tagList = aws.params.TagList;
    var aRN = aws.params.ARN;
    if (!aRN) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ARN'];
    }
    if (!tagList) {
      return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TagList'];
    }


    // TODO implement code

    var ret = {};
    return [200, ret];
  });
