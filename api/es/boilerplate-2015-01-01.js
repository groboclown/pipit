'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * Amazon Elasticsearch Service version 2015-01-01
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.AddTags = aws_common.as(
    "/2015-01-01/tags",
    function AddTags(aws) {
        var TagList = aws.params.TagList;
        var ARN = aws.params.ARN;
        if (! ARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ARN"];
        }        if (! TagList) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TagList"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.DeleteElasticsearchDomain = aws_common.as(
    "DELETE",
    "/2015-01-01/es/domain/:DomainName",
    function DeleteElasticsearchDomain(aws) {
        var DomainName = aws.reqParams.DomainName;
        if (! DomainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DomainName"];
        }

        // TODO implement code

        var ret = {
            DomainStatus: /*Sk*/{
                DomainId: "",
                ARN: "",
                AdvancedOptions: /*Sh*/{} /* map */,
                AccessPolicies: "",
                Endpoint: "",
                Deleted: false,
                Processing: false,
                Created: false,
                ElasticsearchClusterConfig: /*S9*/{
                    ZoneAwarenessEnabled: false,
                    DedicatedMasterType: "",
                    InstanceCount: 0,
                    DedicatedMasterEnabled: false,
                    DedicatedMasterCount: 0,
                    InstanceType: ""
                },
                DomainName: "",
                SnapshotOptions: /*Sg*/{
                    AutomatedSnapshotStartHour: 0
                },
                EBSOptions: /*Sd*/{
                    VolumeSize: 0,
                    VolumeType: "",
                    EBSEnabled: false,
                    Iops: 0
                }
            }
        };
        return [200, ret];
    });
module.exports.UpdateElasticsearchDomainConfig = aws_common.as(
    "/2015-01-01/es/domain/:DomainName/config",
    function UpdateElasticsearchDomainConfig(aws) {
        var AdvancedOptions = aws.params.AdvancedOptions;
        var AccessPolicies = aws.params.AccessPolicies;
        var ElasticsearchClusterConfig = aws.params.ElasticsearchClusterConfig;
        var DomainName = aws.reqParams.DomainName;
        var SnapshotOptions = aws.params.SnapshotOptions;
        var EBSOptions = aws.params.EBSOptions;
        if (! DomainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DomainName"];
        }

        // TODO implement code

        var ret = {
            DomainConfig: /*St*/{
                AccessPolicies: {
                    Options: "",
                    Status: /*Sv*/{
                        UpdateDate: now(),
                        UpdateVersion: 0,
                        State: "",
                        CreationDate: now(),
                        PendingDeletion: false
                    }
                },
                ElasticsearchClusterConfig: {
                    Options: /*S9*/{
                        ZoneAwarenessEnabled: false,
                        DedicatedMasterType: "",
                        InstanceCount: 0,
                        DedicatedMasterEnabled: false,
                        DedicatedMasterCount: 0,
                        InstanceType: ""
                    },
                    Status: /*Sv*/{
                        UpdateDate: now(),
                        UpdateVersion: 0,
                        State: "",
                        CreationDate: now(),
                        PendingDeletion: false
                    }
                },
                SnapshotOptions: {
                    Options: /*Sg*/{
                        AutomatedSnapshotStartHour: 0
                    },
                    Status: /*Sv*/{
                        UpdateDate: now(),
                        UpdateVersion: 0,
                        State: "",
                        CreationDate: now(),
                        PendingDeletion: false
                    }
                },
                EBSOptions: {
                    Options: /*Sd*/{
                        VolumeSize: 0,
                        VolumeType: "",
                        EBSEnabled: false,
                        Iops: 0
                    },
                    Status: /*Sv*/{
                        UpdateDate: now(),
                        UpdateVersion: 0,
                        State: "",
                        CreationDate: now(),
                        PendingDeletion: false
                    }
                },
                AdvancedOptions: {
                    Options: /*Sh*/{} /* map */,
                    Status: /*Sv*/{
                        UpdateDate: now(),
                        UpdateVersion: 0,
                        State: "",
                        CreationDate: now(),
                        PendingDeletion: false
                    }
                }
            }
        };
        return [200, ret];
    });
module.exports.ListTags = aws_common.as(
    "GET",
    "/2015-01-01/tags/",
    function ListTags(aws) {
        var ARN = aws.params.ARN;
        if (! ARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ARN"];
        }

        // TODO implement code

        var ret = {
            TagList: /*S3*/[ {
                Value: "",
                Key: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.DescribeElasticsearchDomains = aws_common.as(
    "/2015-01-01/es/domain-info",
    function DescribeElasticsearchDomains(aws) {
        var DomainNames = aws.params.DomainNames /* list */;
        if (! DomainNames) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DomainNames"];
        }

        // TODO implement code

        var ret = {
            DomainStatusList: [ /*Sk*/{
                DomainId: "",
                ARN: "",
                AdvancedOptions: /*Sh*/{} /* map */,
                AccessPolicies: "",
                Endpoint: "",
                Deleted: false,
                Processing: false,
                Created: false,
                ElasticsearchClusterConfig: /*S9*/{
                    ZoneAwarenessEnabled: false,
                    DedicatedMasterType: "",
                    InstanceCount: 0,
                    DedicatedMasterEnabled: false,
                    DedicatedMasterCount: 0,
                    InstanceType: ""
                },
                DomainName: "",
                SnapshotOptions: /*Sg*/{
                    AutomatedSnapshotStartHour: 0
                },
                EBSOptions: /*Sd*/{
                    VolumeSize: 0,
                    VolumeType: "",
                    EBSEnabled: false,
                    Iops: 0
                }
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.CreateElasticsearchDomain = aws_common.as(
    "/2015-01-01/es/domain",
    function CreateElasticsearchDomain(aws) {
        var AdvancedOptions = aws.params.AdvancedOptions;
        var AccessPolicies = aws.params.AccessPolicies;
        var ElasticsearchClusterConfig = aws.params.ElasticsearchClusterConfig;
        var DomainName = aws.params.DomainName;
        var SnapshotOptions = aws.params.SnapshotOptions;
        var EBSOptions = aws.params.EBSOptions;
        if (! DomainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DomainName"];
        }

        // TODO implement code

        var ret = {
            DomainStatus: /*Sk*/{
                DomainId: "",
                ARN: "",
                AdvancedOptions: /*Sh*/{} /* map */,
                AccessPolicies: "",
                Endpoint: "",
                Deleted: false,
                Processing: false,
                Created: false,
                ElasticsearchClusterConfig: /*S9*/{
                    ZoneAwarenessEnabled: false,
                    DedicatedMasterType: "",
                    InstanceCount: 0,
                    DedicatedMasterEnabled: false,
                    DedicatedMasterCount: 0,
                    InstanceType: ""
                },
                DomainName: "",
                SnapshotOptions: /*Sg*/{
                    AutomatedSnapshotStartHour: 0
                },
                EBSOptions: /*Sd*/{
                    VolumeSize: 0,
                    VolumeType: "",
                    EBSEnabled: false,
                    Iops: 0
                }
            }
        };
        return [200, ret];
    });
module.exports.RemoveTags = aws_common.as(
    "/2015-01-01/tags-removal",
    function RemoveTags(aws) {
        var TagKeys = aws.params.TagKeys /* list */;
        var ARN = aws.params.ARN;
        if (! ARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ARN"];
        }        if (! TagKeys) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TagKeys"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    });
module.exports.DescribeElasticsearchDomainConfig = aws_common.as(
    "GET",
    "/2015-01-01/es/domain/:DomainName/config",
    function DescribeElasticsearchDomainConfig(aws) {
        var DomainName = aws.reqParams.DomainName;
        if (! DomainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DomainName"];
        }

        // TODO implement code

        var ret = {
            DomainConfig: /*St*/{
                AccessPolicies: {
                    Options: "",
                    Status: /*Sv*/{
                        UpdateDate: now(),
                        UpdateVersion: 0,
                        State: "",
                        CreationDate: now(),
                        PendingDeletion: false
                    }
                },
                ElasticsearchClusterConfig: {
                    Options: /*S9*/{
                        ZoneAwarenessEnabled: false,
                        DedicatedMasterType: "",
                        InstanceCount: 0,
                        DedicatedMasterEnabled: false,
                        DedicatedMasterCount: 0,
                        InstanceType: ""
                    },
                    Status: /*Sv*/{
                        UpdateDate: now(),
                        UpdateVersion: 0,
                        State: "",
                        CreationDate: now(),
                        PendingDeletion: false
                    }
                },
                SnapshotOptions: {
                    Options: /*Sg*/{
                        AutomatedSnapshotStartHour: 0
                    },
                    Status: /*Sv*/{
                        UpdateDate: now(),
                        UpdateVersion: 0,
                        State: "",
                        CreationDate: now(),
                        PendingDeletion: false
                    }
                },
                EBSOptions: {
                    Options: /*Sd*/{
                        VolumeSize: 0,
                        VolumeType: "",
                        EBSEnabled: false,
                        Iops: 0
                    },
                    Status: /*Sv*/{
                        UpdateDate: now(),
                        UpdateVersion: 0,
                        State: "",
                        CreationDate: now(),
                        PendingDeletion: false
                    }
                },
                AdvancedOptions: {
                    Options: /*Sh*/{} /* map */,
                    Status: /*Sv*/{
                        UpdateDate: now(),
                        UpdateVersion: 0,
                        State: "",
                        CreationDate: now(),
                        PendingDeletion: false
                    }
                }
            }
        };
        return [200, ret];
    });
module.exports.DescribeElasticsearchDomain = aws_common.as(
    "GET",
    "/2015-01-01/es/domain/:DomainName",
    function DescribeElasticsearchDomain(aws) {
        var DomainName = aws.reqParams.DomainName;
        if (! DomainName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DomainName"];
        }

        // TODO implement code

        var ret = {
            DomainStatus: /*Sk*/{
                DomainId: "",
                ARN: "",
                AdvancedOptions: /*Sh*/{} /* map */,
                AccessPolicies: "",
                Endpoint: "",
                Deleted: false,
                Processing: false,
                Created: false,
                ElasticsearchClusterConfig: /*S9*/{
                    ZoneAwarenessEnabled: false,
                    DedicatedMasterType: "",
                    InstanceCount: 0,
                    DedicatedMasterEnabled: false,
                    DedicatedMasterCount: 0,
                    InstanceType: ""
                },
                DomainName: "",
                SnapshotOptions: /*Sg*/{
                    AutomatedSnapshotStartHour: 0
                },
                EBSOptions: /*Sd*/{
                    VolumeSize: 0,
                    VolumeType: "",
                    EBSEnabled: false,
                    Iops: 0
                }
            }
        };
        return [200, ret];
    });
module.exports.ListDomainNames = aws_common.as(
    "GET",
    "/2015-01-01/domain",
    function ListDomainNames(aws) {


        // TODO implement code

        var ret = {
            DomainNames: [ {
                DomainName: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
