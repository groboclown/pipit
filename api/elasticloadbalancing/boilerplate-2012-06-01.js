'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * Elastic Load Balancing version 2012-06-01
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.DeleteLoadBalancerListeners = function DeleteLoadBalancerListeners(aws) {
        var LoadBalancerPorts = aws.params.LoadBalancerPorts /* list */;
        var LoadBalancerName = aws.params.LoadBalancerName;
        if (! LoadBalancerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerName"];
        }        if (! LoadBalancerPorts) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerPorts"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.DescribeLoadBalancerPolicyTypes = function DescribeLoadBalancerPolicyTypes(aws) {
        var PolicyTypeNames = aws.params.PolicyTypeNames /* list */;


        // TODO implement code

        var ret = {
            PolicyTypeDescriptions: [ {
                PolicyAttributeTypeDescriptions: [ {
                    AttributeName: "",
                    DefaultValue: "",
                    AttributeType: "",
                    Description: "",
                    Cardinality: ""
                } /*, ...*/ ],
                Description: "",
                PolicyTypeName: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.SetLoadBalancerPoliciesForBackendServer = function SetLoadBalancerPoliciesForBackendServer(aws) {
        var InstancePort = aws.params.InstancePort /* integer */;
        var PolicyNames = aws.params.PolicyNames;
        var LoadBalancerName = aws.params.LoadBalancerName;
        if (! LoadBalancerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerName"];
        }        if (! InstancePort) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InstancePort"];
        }        if (! PolicyNames) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PolicyNames"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.ModifyLoadBalancerAttributes = function ModifyLoadBalancerAttributes(aws) {
        var LoadBalancerAttributes = aws.params.LoadBalancerAttributes;
        var LoadBalancerName = aws.params.LoadBalancerName;
        if (! LoadBalancerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerName"];
        }        if (! LoadBalancerAttributes) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerAttributes"];
        }

        // TODO implement code

        var ret = {
            LoadBalancerAttributes: /*S22*/{
                ConnectionDraining: {
                    Timeout: 0,
                    Enabled: false
                },
                CrossZoneLoadBalancing: {
                    Enabled: false
                },
                AccessLog: {
                    S3BucketPrefix: "",
                    EmitInterval: 0,
                    Enabled: false,
                    S3BucketName: ""
                },
                AdditionalAttributes: [ {
                    Value: "",
                    Key: ""
                } /*, ...*/ ],
                ConnectionSettings: {
                    IdleTimeout: 0
                }
            },
            LoadBalancerName: ""
        };
        return [200, ret];
    }
module.exports.CreateLoadBalancer = function CreateLoadBalancer(aws) {
        var SecurityGroups = aws.params.SecurityGroups;
        var Scheme = aws.params.Scheme;
        var AvailabilityZones = aws.params.AvailabilityZones;
        var LoadBalancerName = aws.params.LoadBalancerName;
        var Listeners = aws.params.Listeners;
        var Tags = aws.params.Tags;
        var Subnets = aws.params.Subnets;
        if (! LoadBalancerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerName"];
        }        if (! Listeners) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Listeners"];
        }

        // TODO implement code

        var ret = {
            DNSName: ""
        };
        return [200, ret];
    }
module.exports.CreateAppCookieStickinessPolicy = function CreateAppCookieStickinessPolicy(aws) {
        var CookieName = aws.params.CookieName;
        var PolicyName = aws.params.PolicyName;
        var LoadBalancerName = aws.params.LoadBalancerName;
        if (! LoadBalancerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerName"];
        }        if (! PolicyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PolicyName"];
        }        if (! CookieName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter CookieName"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.DetachLoadBalancerFromSubnets = function DetachLoadBalancerFromSubnets(aws) {
        var Subnets = aws.params.Subnets;
        var LoadBalancerName = aws.params.LoadBalancerName;
        if (! LoadBalancerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerName"];
        }        if (! Subnets) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Subnets"];
        }

        // TODO implement code

        var ret = {
            Subnets: /*Se*/[ "" /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeLoadBalancerPolicies = function DescribeLoadBalancerPolicies(aws) {
        var PolicyNames = aws.params.PolicyNames;
        var LoadBalancerName = aws.params.LoadBalancerName;


        // TODO implement code

        var ret = {
            PolicyDescriptions: [ {
                PolicyName: "",
                PolicyTypeName: "",
                PolicyAttributeDescriptions: [ {
                    AttributeName: "",
                    AttributeValue: ""
                } /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateLoadBalancerListeners = function CreateLoadBalancerListeners(aws) {
        var LoadBalancerName = aws.params.LoadBalancerName;
        var Listeners = aws.params.Listeners;
        if (! LoadBalancerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerName"];
        }        if (! Listeners) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Listeners"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.DisableAvailabilityZonesForLoadBalancer = function DisableAvailabilityZonesForLoadBalancer(aws) {
        var AvailabilityZones = aws.params.AvailabilityZones;
        var LoadBalancerName = aws.params.LoadBalancerName;
        if (! LoadBalancerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerName"];
        }        if (! AvailabilityZones) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AvailabilityZones"];
        }

        // TODO implement code

        var ret = {
            AvailabilityZones: /*S13*/[ "" /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ConfigureHealthCheck = function ConfigureHealthCheck(aws) {
        var HealthCheck = aws.params.HealthCheck;
        var LoadBalancerName = aws.params.LoadBalancerName;
        if (! LoadBalancerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerName"];
        }        if (! HealthCheck) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter HealthCheck"];
        }

        // TODO implement code

        var ret = {
            HealthCheck: /*Si*/{
                HealthyThreshold: 0,
                Target: "",
                Interval: 0,
                Timeout: 0,
                UnhealthyThreshold: 0
            }
        };
        return [200, ret];
    }
module.exports.DescribeLoadBalancers = function DescribeLoadBalancers(aws) {
        var PageSize = aws.params.PageSize /* integer */;
        var Marker = aws.params.Marker;
        var LoadBalancerNames = aws.params.LoadBalancerNames;


        // TODO implement code

        var ret = {
            NextMarker: "",
            LoadBalancerDescriptions: [ {
                CanonicalHostedZoneNameID: "",
                Instances: /*S1p*/[ {
                    InstanceId: ""
                } /*, ...*/ ],
                LoadBalancerName: "",
                Scheme: "",
                ListenerDescriptions: [ {
                    PolicyNames: /*S2j*/[ "" /*, ...*/ ],
                    Listener: /*Sy*/{
                        InstancePort: 0,
                        InstanceProtocol: "",
                        LoadBalancerPort: 0,
                        SSLCertificateId: "",
                        Protocol: ""
                    }
                } /*, ...*/ ],
                SourceSecurityGroup: {
                    OwnerAlias: "",
                    GroupName: ""
                },
                BackendServerDescriptions: [ {
                    InstancePort: 0,
                    PolicyNames: /*S2j*/[ "" /*, ...*/ ]
                } /*, ...*/ ],
                DNSName: "",
                Subnets: /*Se*/[ "" /*, ...*/ ],
                HealthCheck: /*Si*/{
                    HealthyThreshold: 0,
                    Target: "",
                    Interval: 0,
                    Timeout: 0,
                    UnhealthyThreshold: 0
                },
                CreatedTime: now(),
                AvailabilityZones: /*S13*/[ "" /*, ...*/ ],
                SecurityGroups: /*Sa*/[ "" /*, ...*/ ],
                Policies: {
                    LBCookieStickinessPolicies: [ {
                        CookieExpirationPeriod: 0 /*long*/,
                        PolicyName: ""
                    } /*, ...*/ ],
                    OtherPolicies: /*S2j*/[ "" /*, ...*/ ],
                    AppCookieStickinessPolicies: [ {
                        CookieName: "",
                        PolicyName: ""
                    } /*, ...*/ ]
                },
                CanonicalHostedZoneName: "",
                VPCId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.EnableAvailabilityZonesForLoadBalancer = function EnableAvailabilityZonesForLoadBalancer(aws) {
        var AvailabilityZones = aws.params.AvailabilityZones;
        var LoadBalancerName = aws.params.LoadBalancerName;
        if (! LoadBalancerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerName"];
        }        if (! AvailabilityZones) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AvailabilityZones"];
        }

        // TODO implement code

        var ret = {
            AvailabilityZones: /*S13*/[ "" /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeLoadBalancerAttributes = function DescribeLoadBalancerAttributes(aws) {
        var LoadBalancerName = aws.params.LoadBalancerName;
        if (! LoadBalancerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerName"];
        }

        // TODO implement code

        var ret = {
            LoadBalancerAttributes: /*S22*/{
                ConnectionDraining: {
                    Timeout: 0,
                    Enabled: false
                },
                CrossZoneLoadBalancing: {
                    Enabled: false
                },
                AccessLog: {
                    S3BucketPrefix: "",
                    EmitInterval: 0,
                    Enabled: false,
                    S3BucketName: ""
                },
                AdditionalAttributes: [ {
                    Value: "",
                    Key: ""
                } /*, ...*/ ],
                ConnectionSettings: {
                    IdleTimeout: 0
                }
            }
        };
        return [200, ret];
    }
module.exports.SetLoadBalancerListenerSSLCertificate = function SetLoadBalancerListenerSSLCertificate(aws) {
        var LoadBalancerPort = aws.params.LoadBalancerPort /* integer */;
        var SSLCertificateId = aws.params.SSLCertificateId;
        var LoadBalancerName = aws.params.LoadBalancerName;
        if (! LoadBalancerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerName"];
        }        if (! LoadBalancerPort) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerPort"];
        }        if (! SSLCertificateId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SSLCertificateId"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.SetLoadBalancerPoliciesOfListener = function SetLoadBalancerPoliciesOfListener(aws) {
        var PolicyNames = aws.params.PolicyNames;
        var LoadBalancerPort = aws.params.LoadBalancerPort /* integer */;
        var LoadBalancerName = aws.params.LoadBalancerName;
        if (! LoadBalancerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerName"];
        }        if (! LoadBalancerPort) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerPort"];
        }        if (! PolicyNames) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PolicyNames"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.CreateLBCookieStickinessPolicy = function CreateLBCookieStickinessPolicy(aws) {
        var CookieExpirationPeriod = aws.params.CookieExpirationPeriod /* long */;
        var PolicyName = aws.params.PolicyName;
        var LoadBalancerName = aws.params.LoadBalancerName;
        if (! LoadBalancerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerName"];
        }        if (! PolicyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PolicyName"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.DescribeInstanceHealth = function DescribeInstanceHealth(aws) {
        var Instances = aws.params.Instances;
        var LoadBalancerName = aws.params.LoadBalancerName;
        if (! LoadBalancerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerName"];
        }

        // TODO implement code

        var ret = {
            InstanceStates: [ {
                ReasonCode: "",
                Description: "",
                InstanceId: "",
                State: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ApplySecurityGroupsToLoadBalancer = function ApplySecurityGroupsToLoadBalancer(aws) {
        var SecurityGroups = aws.params.SecurityGroups;
        var LoadBalancerName = aws.params.LoadBalancerName;
        if (! LoadBalancerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerName"];
        }        if (! SecurityGroups) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SecurityGroups"];
        }

        // TODO implement code

        var ret = {
            SecurityGroups: /*Sa*/[ "" /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeTags = function DescribeTags(aws) {
        var LoadBalancerNames = aws.params.LoadBalancerNames /* list */;
        if (! LoadBalancerNames) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerNames"];
        }

        // TODO implement code

        var ret = {
            TagDescriptions: [ {
                Tags: /*S4*/[ {
                    Value: "",
                    Key: ""
                } /*, ...*/ ],
                LoadBalancerName: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeregisterInstancesFromLoadBalancer = function DeregisterInstancesFromLoadBalancer(aws) {
        var Instances = aws.params.Instances;
        var LoadBalancerName = aws.params.LoadBalancerName;
        if (! LoadBalancerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerName"];
        }        if (! Instances) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Instances"];
        }

        // TODO implement code

        var ret = {
            Instances: /*S1p*/[ {
                InstanceId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.AddTags = function AddTags(aws) {
        var Tags = aws.params.Tags;
        var LoadBalancerNames = aws.params.LoadBalancerNames;
        if (! LoadBalancerNames) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerNames"];
        }        if (! Tags) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Tags"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.RegisterInstancesWithLoadBalancer = function RegisterInstancesWithLoadBalancer(aws) {
        var Instances = aws.params.Instances;
        var LoadBalancerName = aws.params.LoadBalancerName;
        if (! LoadBalancerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerName"];
        }        if (! Instances) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Instances"];
        }

        // TODO implement code

        var ret = {
            Instances: /*S1p*/[ {
                InstanceId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.RemoveTags = function RemoveTags(aws) {
        var Tags = aws.params.Tags /* list */;
        var LoadBalancerNames = aws.params.LoadBalancerNames;
        if (! LoadBalancerNames) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerNames"];
        }        if (! Tags) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Tags"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.DeleteLoadBalancer = function DeleteLoadBalancer(aws) {
        var LoadBalancerName = aws.params.LoadBalancerName;
        if (! LoadBalancerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerName"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.AttachLoadBalancerToSubnets = function AttachLoadBalancerToSubnets(aws) {
        var Subnets = aws.params.Subnets;
        var LoadBalancerName = aws.params.LoadBalancerName;
        if (! LoadBalancerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerName"];
        }        if (! Subnets) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Subnets"];
        }

        // TODO implement code

        var ret = {
            Subnets: /*Se*/[ "" /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateLoadBalancerPolicy = function CreateLoadBalancerPolicy(aws) {
        var PolicyName = aws.params.PolicyName;
        var PolicyAttributes = aws.params.PolicyAttributes /* list */;
        var PolicyTypeName = aws.params.PolicyTypeName;
        var LoadBalancerName = aws.params.LoadBalancerName;
        if (! LoadBalancerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerName"];
        }        if (! PolicyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PolicyName"];
        }        if (! PolicyTypeName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PolicyTypeName"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
module.exports.DeleteLoadBalancerPolicy = function DeleteLoadBalancerPolicy(aws) {
        var PolicyName = aws.params.PolicyName;
        var LoadBalancerName = aws.params.LoadBalancerName;
        if (! LoadBalancerName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter LoadBalancerName"];
        }        if (! PolicyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PolicyName"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    }
