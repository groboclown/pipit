'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * Amazon Route 53 version 2013-04-01
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.DeleteTrafficPolicyInstance = aws_common.as(
    "DELETE",
    "/2013-04-01/trafficpolicyinstance/:Id",
    function DeleteTrafficPolicyInstance(aws) {
        var Id = aws.reqParams.Id;
        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    });
module.exports.DeleteReusableDelegationSet = aws_common.as(
    "DELETE",
    "/2013-04-01/delegationset/:Id",
    function DeleteReusableDelegationSet(aws) {
        var Id = aws.reqParams.Id;
        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    });
module.exports.ListTrafficPolicyInstances = aws_common.as(
    "GET",
    "/2013-04-01/trafficpolicyinstances",
    function ListTrafficPolicyInstances(aws) {
        var HostedZoneIdMarker = aws.params['HostedZoneIdMarker'];
        var TrafficPolicyInstanceNameMarker = aws.params['TrafficPolicyInstanceNameMarker'];
        var MaxItems = aws.params['MaxItems'];
        var TrafficPolicyInstanceTypeMarker = aws.params['TrafficPolicyInstanceTypeMarker'];


        // TODO implement code

        var ret = {
            TrafficPolicyInstances: /*S57*/[ /*S2e*/{
                HostedZoneId: "",
                TTL: 0 /*long*/,
                TrafficPolicyType: "",
                State: "",
                Id: "",
                TrafficPolicyVersion: 0,
                Name: "",
                TrafficPolicyId: "",
                Message: ""
            } /*, ...*/ ],
            MaxItems: "",
            IsTruncated: false,
            HostedZoneIdMarker: "",
            TrafficPolicyInstanceNameMarker: "",
            TrafficPolicyInstanceTypeMarker: ""
        };
        return [200, ret];
    });
module.exports.GetHealthCheckLastFailureReason = aws_common.as(
    "GET",
    "/2013-04-01/healthcheck/:HealthCheckId/lastfailurereason",
    function GetHealthCheckLastFailureReason(aws) {
        var HealthCheckId = aws.reqParams.HealthCheckId;
        if (! HealthCheckId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter HealthCheckId"];
        }

        // TODO implement code

        var ret = {
            HealthCheckObservations: /*S3j*/[ {
                StatusReport: {
                    CheckedTime: now(),
                    Status: ""
                },
                IPAddress: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.GetTrafficPolicy = aws_common.as(
    "GET",
    "/2013-04-01/trafficpolicy/:Id/:Version",
    function GetTrafficPolicy(aws) {
        var Version = aws.reqParams.Version /* integer */;
        var Id = aws.reqParams.Id;
        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }        if (! Version) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Version"];
        }

        // TODO implement code

        var ret = {
            TrafficPolicy: /*S29*/{
                Document: "",
                Comment: "",
                Type: "",
                Version: 0,
                Id: "",
                Name: ""
            }
        };
        return [200, ret];
    });
module.exports.DeleteHealthCheck = aws_common.as(
    "DELETE",
    "/2013-04-01/healthcheck/:HealthCheckId",
    function DeleteHealthCheck(aws) {
        var HealthCheckId = aws.reqParams.HealthCheckId;
        if (! HealthCheckId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter HealthCheckId"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    });
module.exports.ListTrafficPolicyVersions = aws_common.as(
    "GET",
    "/2013-04-01/trafficpolicies/:Id/versions",
    function ListTrafficPolicyVersions(aws) {
        var TrafficPolicyVersionMarker = aws.params['TrafficPolicyVersionMarker'];
        var MaxItems = aws.params['MaxItems'];
        var Id = aws.reqParams.Id;
        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }

        // TODO implement code

        var ret = {
            TrafficPolicyVersionMarker: "",
            TrafficPolicies: [ /*S29*/{
                Document: "",
                Comment: "",
                Type: "",
                Version: 0,
                Id: "",
                Name: ""
            } /*, ...*/ ],
            MaxItems: "",
            IsTruncated: false
        };
        return [200, ret];
    });
module.exports.ListChangeBatchesByRRSet = aws_common.as(
    "GET",
    "/2013-04-01/hostedzone/:Id/rrsChanges",
    function ListChangeBatchesByRRSet(aws) {
        var EndDate = aws.params['EndDate'];
        var HostedZoneId = aws.reqParams.Id;
        var Type = aws.params['Type'];
        var SetIdentifier = aws.params['SetIdentifier'];
        var MaxItems = aws.params['MaxItems'];
        var Marker = aws.params['Marker'];
        var Name = aws.params['Name'];
        var StartDate = aws.params['StartDate'];
        if (! HostedZoneId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter HostedZoneId"];
        }        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }        if (! Type) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Type"];
        }        if (! StartDate) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StartDate"];
        }        if (! EndDate) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter EndDate"];
        }

        // TODO implement code

        var ret = {
            Marker: "",
            NextMarker: "",
            MaxItems: "",
            ChangeBatchRecords: /*S4a*/[ /*S30*/{
                Changes: /*Se*/[ {
                    ResourceRecordSet: /*Sh*/{
                        GeoLocation: {
                            CountryCode: "",
                            ContinentCode: "",
                            SubdivisionCode: ""
                        },
                        ResourceRecords: [ {
                            Value: ""
                        } /*, ...*/ ],
                        HealthCheckId: "",
                        TTL: 0 /*long*/,
                        Failover: "",
                        SetIdentifier: "",
                        Type: "",
                        Weight: 0 /*long*/,
                        Region: "",
                        AliasTarget: {
                            HostedZoneId: "",
                            EvaluateTargetHealth: false,
                            DNSName: ""
                        },
                        TrafficPolicyInstanceId: "",
                        Name: ""
                    },
                    Action: ""
                } /*, ...*/ ],
                Submitter: "",
                Id: "",
                SubmittedAt: now(),
                Comment: "",
                Status: ""
            } /*, ...*/ ],
            IsTruncated: false
        };
        return [200, ret];
    });
module.exports.ListHealthChecks = aws_common.as(
    "GET",
    "/2013-04-01/healthcheck",
    function ListHealthChecks(aws) {
        var Marker = aws.params['Marker'];
        var MaxItems = aws.params['MaxItems'];


        // TODO implement code

        var ret = {
            Marker: "",
            NextMarker: "",
            MaxItems: "",
            IsTruncated: false,
            HealthChecks: [ /*S1q*/{
                CallerReference: "",
                HealthCheckVersion: 0 /*long*/,
                HealthCheckConfig: /*S1c*/{
                    Inverted: false,
                    FailureThreshold: 0,
                    ChildHealthChecks: /*S1o*/[ "" /*, ...*/ ],
                    MeasureLatency: false,
                    SearchString: "",
                    FullyQualifiedDomainName: "",
                    ResourcePath: "",
                    RequestInterval: 0,
                    Type: "",
                    HealthThreshold: 0,
                    Port: 0,
                    IPAddress: ""
                },
                Id: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.ListGeoLocations = aws_common.as(
    "GET",
    "/2013-04-01/geolocations",
    function ListGeoLocations(aws) {
        var MaxItems = aws.params['MaxItems'];
        var StartContinentCode = aws.params['StartContinentCode'];
        var StartCountryCode = aws.params['StartCountryCode'];
        var StartSubdivisionCode = aws.params['StartSubdivisionCode'];


        // TODO implement code

        var ret = {
            NextCountryCode: "",
            MaxItems: "",
            IsTruncated: false,
            GeoLocationDetailsList: [ /*S38*/{
                SubdivisionCode: "",
                CountryName: "",
                ContinentName: "",
                CountryCode: "",
                ContinentCode: "",
                SubdivisionName: ""
            } /*, ...*/ ],
            NextContinentCode: "",
            NextSubdivisionCode: ""
        };
        return [200, ret];
    });
module.exports.GetHealthCheckCount = aws_common.as(
    "GET",
    "/2013-04-01/healthcheckcount",
    function GetHealthCheckCount(aws) {


        // TODO implement code

        var ret = {
            HealthCheckCount: 0 /*long*/
        };
        return [200, ret];
    });
module.exports.UpdateTrafficPolicyComment = aws_common.as(
    "/2013-04-01/trafficpolicy/:Id/:Version",
    function UpdateTrafficPolicyComment(aws) {
        var Comment = aws.params['Comment'];
        var Version = aws.reqParams.Version /* integer */;
        var Id = aws.reqParams.Id;
        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }        if (! Version) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Version"];
        }        if (! Comment) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Comment"];
        }

        // TODO implement code

        var ret = {
            TrafficPolicy: /*S29*/{
                Document: "",
                Comment: "",
                Type: "",
                Version: 0,
                Id: "",
                Name: ""
            }
        };
        return [200, ret];
    });
module.exports.ListTagsForResource = aws_common.as(
    "GET",
    "/2013-04-01/tags/:ResourceType/:ResourceId",
    function ListTagsForResource(aws) {
        var ResourceType = aws.reqParams.ResourceType;
        var ResourceId = aws.reqParams.ResourceId;
        if (! ResourceType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResourceType"];
        }        if (! ResourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResourceId"];
        }

        // TODO implement code

        var ret = {
            ResourceTagSet: /*S4w*/{
                ResourceType: "",
                ResourceId: "",
                Tags: /*S14*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ]
            }
        };
        return [200, ret];
    });
module.exports.ListResourceRecordSets = aws_common.as(
    "GET",
    "/2013-04-01/hostedzone/:Id/rrset",
    function ListResourceRecordSets(aws) {
        var StartRecordIdentifier = aws.params['StartRecordIdentifier'];
        var HostedZoneId = aws.reqParams.Id;
        var StartRecordName = aws.params['StartRecordName'];
        var MaxItems = aws.params['MaxItems'];
        var StartRecordType = aws.params['StartRecordType'];
        if (! HostedZoneId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter HostedZoneId"];
        }

        // TODO implement code

        var ret = {
            NextRecordType: "",
            MaxItems: "",
            ResourceRecordSets: [ /*Sh*/{
                GeoLocation: {
                    CountryCode: "",
                    ContinentCode: "",
                    SubdivisionCode: ""
                },
                ResourceRecords: [ {
                    Value: ""
                } /*, ...*/ ],
                HealthCheckId: "",
                TTL: 0 /*long*/,
                Failover: "",
                SetIdentifier: "",
                Type: "",
                Weight: 0 /*long*/,
                Region: "",
                AliasTarget: {
                    HostedZoneId: "",
                    EvaluateTargetHealth: false,
                    DNSName: ""
                },
                TrafficPolicyInstanceId: "",
                Name: ""
            } /*, ...*/ ],
            IsTruncated: false,
            NextRecordIdentifier: "",
            NextRecordName: ""
        };
        return [200, ret];
    });
module.exports.GetGeoLocation = aws_common.as(
    "GET",
    "/2013-04-01/geolocation",
    function GetGeoLocation(aws) {
        var CountryCode = aws.params['CountryCode'];
        var ContinentCode = aws.params['ContinentCode'];
        var SubdivisionCode = aws.params['SubdivisionCode'];


        // TODO implement code

        var ret = {
            GeoLocationDetails: /*S38*/{
                SubdivisionCode: "",
                CountryName: "",
                ContinentName: "",
                CountryCode: "",
                ContinentCode: "",
                SubdivisionName: ""
            }
        };
        return [200, ret];
    });
module.exports.AssociateVPCWithHostedZone = aws_common.as(
    "/2013-04-01/hostedzone/:Id/associatevpc",
    function AssociateVPCWithHostedZone(aws) {
        var VPC = aws.params['VPC'];
        var HostedZoneId = aws.reqParams.Id;
        var Comment = aws.params['Comment'];
        if (! HostedZoneId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter HostedZoneId"];
        }        if (! VPC) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VPC"];
        }

        // TODO implement code

        var ret = {
            ChangeInfo: /*S8*/{
                SubmittedAt: now(),
                Comment: "",
                Status: "",
                Id: ""
            }
        };
        return [200, ret];
    });
module.exports.CreateReusableDelegationSet = aws_common.as(
    "/2013-04-01/delegationset",
    function CreateReusableDelegationSet(aws) {
        var HostedZoneId = aws.params['HostedZoneId'];
        var CallerReference = aws.params['CallerReference'];
        if (! CallerReference) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter CallerReference"];
        }

        // TODO implement code

        var ret = {
            DelegationSet: /*S20*/{
                CallerReference: "",
                NameServers: [ "" /*, ...*/ ],
                Id: ""
            },
            Location: ""
        };
        return [201, ret];
    });
module.exports.ListReusableDelegationSets = aws_common.as(
    "GET",
    "/2013-04-01/delegationset",
    function ListReusableDelegationSets(aws) {
        var Marker = aws.params['Marker'];
        var MaxItems = aws.params['MaxItems'];


        // TODO implement code

        var ret = {
            DelegationSets: [ /*S20*/{
                CallerReference: "",
                NameServers: [ "" /*, ...*/ ],
                Id: ""
            } /*, ...*/ ],
            Marker: "",
            NextMarker: "",
            MaxItems: "",
            IsTruncated: false
        };
        return [200, ret];
    });
module.exports.ListTrafficPolicyInstancesByHostedZone = aws_common.as(
    "GET",
    "/2013-04-01/trafficpolicyinstances/hostedzone",
    function ListTrafficPolicyInstancesByHostedZone(aws) {
        var HostedZoneId = aws.params['HostedZoneId'];
        var TrafficPolicyInstanceNameMarker = aws.params['TrafficPolicyInstanceNameMarker'];
        var MaxItems = aws.params['MaxItems'];
        var TrafficPolicyInstanceTypeMarker = aws.params['TrafficPolicyInstanceTypeMarker'];
        if (! HostedZoneId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter HostedZoneId"];
        }

        // TODO implement code

        var ret = {
            TrafficPolicyInstances: /*S57*/[ /*S2e*/{
                HostedZoneId: "",
                TTL: 0 /*long*/,
                TrafficPolicyType: "",
                State: "",
                Id: "",
                TrafficPolicyVersion: 0,
                Name: "",
                TrafficPolicyId: "",
                Message: ""
            } /*, ...*/ ],
            MaxItems: "",
            TrafficPolicyInstanceNameMarker: "",
            IsTruncated: false,
            TrafficPolicyInstanceTypeMarker: ""
        };
        return [200, ret];
    });
module.exports.ListHostedZones = aws_common.as(
    "GET",
    "/2013-04-01/hostedzone",
    function ListHostedZones(aws) {
        var Marker = aws.params['Marker'];
        var MaxItems = aws.params['MaxItems'];
        var DelegationSetId = aws.params['DelegationSetId'];


        // TODO implement code

        var ret = {
            Marker: "",
            NextMarker: "",
            MaxItems: "",
            HostedZones: /*S4l*/[ /*S1y*/{
                CallerReference: "",
                Name: "",
                Config: /*S1v*/{
                    PrivateZone: false,
                    Comment: ""
                },
                ResourceRecordSetCount: 0 /*long*/,
                Id: ""
            } /*, ...*/ ],
            IsTruncated: false
        };
        return [200, ret];
    });
module.exports.ListTrafficPolicies = aws_common.as(
    "GET",
    "/2013-04-01/trafficpolicies",
    function ListTrafficPolicies(aws) {
        var MaxItems = aws.params['MaxItems'];
        var TrafficPolicyIdMarker = aws.params['TrafficPolicyIdMarker'];


        // TODO implement code

        var ret = {
            TrafficPolicySummaries: [ {
                LatestVersion: 0,
                TrafficPolicyCount: 0,
                Name: "",
                Type: "",
                Id: ""
            } /*, ...*/ ],
            MaxItems: "",
            TrafficPolicyIdMarker: "",
            IsTruncated: false
        };
        return [200, ret];
    });
module.exports.GetCheckerIpRanges = aws_common.as(
    "GET",
    "/2013-04-01/checkeripranges",
    function GetCheckerIpRanges(aws) {


        // TODO implement code

        var ret = {
            CheckerIpRanges: [ "" /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.CreateTrafficPolicyInstance = aws_common.as(
    "/2013-04-01/trafficpolicyinstance",
    function CreateTrafficPolicyInstance(aws) {
        var HostedZoneId = aws.params['HostedZoneId'];
        var TrafficPolicyVersion = aws.params['TrafficPolicyVersion'] /* integer */;
        var Name = aws.params['Name'];
        var TTL = aws.params['TTL'] /* long */;
        var TrafficPolicyId = aws.params['TrafficPolicyId'];
        if (! HostedZoneId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter HostedZoneId"];
        }        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }        if (! TTL) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TTL"];
        }        if (! TrafficPolicyId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TrafficPolicyId"];
        }        if (! TrafficPolicyVersion) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TrafficPolicyVersion"];
        }

        // TODO implement code

        var ret = {
            TrafficPolicyInstance: /*S2e*/{
                HostedZoneId: "",
                TTL: 0 /*long*/,
                TrafficPolicyType: "",
                State: "",
                Id: "",
                TrafficPolicyVersion: 0,
                Name: "",
                TrafficPolicyId: "",
                Message: ""
            },
            Location: ""
        };
        return [201, ret];
    });
module.exports.DeleteTrafficPolicy = aws_common.as(
    "DELETE",
    "/2013-04-01/trafficpolicy/:Id/:Version",
    function DeleteTrafficPolicy(aws) {
        var Version = aws.reqParams.Version /* integer */;
        var Id = aws.reqParams.Id;
        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }        if (! Version) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Version"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    });
module.exports.ChangeTagsForResource = aws_common.as(
    "/2013-04-01/tags/:ResourceType/:ResourceId",
    function ChangeTagsForResource(aws) {
        var RemoveTagKeys = aws.params['RemoveTagKeys'] /* list */;
        var ResourceType = aws.reqParams.ResourceType;
        var ResourceId = aws.reqParams.ResourceId;
        var AddTags = aws.params['AddTags'];
        if (! ResourceType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResourceType"];
        }        if (! ResourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResourceId"];
        }

        // TODO implement code

        var ret = {

        };
        return [200, ret];
    });
module.exports.UpdateHealthCheck = aws_common.as(
    "/2013-04-01/healthcheck/:HealthCheckId",
    function UpdateHealthCheck(aws) {
        var ResourcePath = aws.params['ResourcePath'];
        var SearchString = aws.params['SearchString'];
        var FailureThreshold = aws.params['FailureThreshold'] /* integer */;
        var Inverted = aws.params['Inverted'] /* boolean */;
        var HealthCheckVersion = aws.params['HealthCheckVersion'] /* long */;
        var HealthThreshold = aws.params['HealthThreshold'] /* integer */;
        var Port = aws.params['Port'] /* integer */;
        var HealthCheckId = aws.reqParams.HealthCheckId;
        var IPAddress = aws.params['IPAddress'];
        var ChildHealthChecks = aws.params['ChildHealthChecks'];
        var FullyQualifiedDomainName = aws.params['FullyQualifiedDomainName'];
        if (! HealthCheckId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter HealthCheckId"];
        }

        // TODO implement code

        var ret = {
            HealthCheck: /*S1q*/{
                CallerReference: "",
                HealthCheckVersion: 0 /*long*/,
                HealthCheckConfig: /*S1c*/{
                    Inverted: false,
                    FailureThreshold: 0,
                    ChildHealthChecks: /*S1o*/[ "" /*, ...*/ ],
                    MeasureLatency: false,
                    SearchString: "",
                    FullyQualifiedDomainName: "",
                    ResourcePath: "",
                    RequestInterval: 0,
                    Type: "",
                    HealthThreshold: 0,
                    Port: 0,
                    IPAddress: ""
                },
                Id: ""
            }
        };
        return [200, ret];
    });
module.exports.DisassociateVPCFromHostedZone = aws_common.as(
    "/2013-04-01/hostedzone/:Id/disassociatevpc",
    function DisassociateVPCFromHostedZone(aws) {
        var VPC = aws.params['VPC'];
        var HostedZoneId = aws.reqParams.Id;
        var Comment = aws.params['Comment'];
        if (! HostedZoneId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter HostedZoneId"];
        }        if (! VPC) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VPC"];
        }

        // TODO implement code

        var ret = {
            ChangeInfo: /*S8*/{
                SubmittedAt: now(),
                Comment: "",
                Status: "",
                Id: ""
            }
        };
        return [200, ret];
    });
module.exports.CreateHostedZone = aws_common.as(
    "/2013-04-01/hostedzone",
    function CreateHostedZone(aws) {
        var VPC = aws.params['VPC'];
        var CallerReference = aws.params['CallerReference'];
        var Name = aws.params['Name'];
        var HostedZoneConfig = aws.params['HostedZoneConfig'];
        var DelegationSetId = aws.params['DelegationSetId'];
        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }        if (! CallerReference) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter CallerReference"];
        }

        // TODO implement code

        var ret = {
            VPC: /*S3*/{
                VPCId: "",
                VPCRegion: ""
            },
            ChangeInfo: /*S8*/{
                SubmittedAt: now(),
                Comment: "",
                Status: "",
                Id: ""
            },
            HostedZone: /*S1y*/{
                CallerReference: "",
                Name: "",
                Config: /*S1v*/{
                    PrivateZone: false,
                    Comment: ""
                },
                ResourceRecordSetCount: 0 /*long*/,
                Id: ""
            },
            DelegationSet: /*S20*/{
                CallerReference: "",
                NameServers: [ "" /*, ...*/ ],
                Id: ""
            },
            Location: ""
        };
        return [201, ret];
    });
module.exports.GetReusableDelegationSet = aws_common.as(
    "GET",
    "/2013-04-01/delegationset/:Id",
    function GetReusableDelegationSet(aws) {
        var Id = aws.reqParams.Id;
        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }

        // TODO implement code

        var ret = {
            DelegationSet: /*S20*/{
                CallerReference: "",
                NameServers: [ "" /*, ...*/ ],
                Id: ""
            }
        };
        return [200, ret];
    });
module.exports.GetHostedZoneCount = aws_common.as(
    "GET",
    "/2013-04-01/hostedzonecount",
    function GetHostedZoneCount(aws) {


        // TODO implement code

        var ret = {
            HostedZoneCount: 0 /*long*/
        };
        return [200, ret];
    });
module.exports.UpdateHostedZoneComment = aws_common.as(
    "/2013-04-01/hostedzone/:Id",
    function UpdateHostedZoneComment(aws) {
        var Comment = aws.params['Comment'];
        var Id = aws.reqParams.Id;
        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }

        // TODO implement code

        var ret = {
            HostedZone: /*S1y*/{
                CallerReference: "",
                Name: "",
                Config: /*S1v*/{
                    PrivateZone: false,
                    Comment: ""
                },
                ResourceRecordSetCount: 0 /*long*/,
                Id: ""
            }
        };
        return [200, ret];
    });
module.exports.ListChangeBatchesByHostedZone = aws_common.as(
    "GET",
    "/2013-04-01/hostedzone/:Id/changes",
    function ListChangeBatchesByHostedZone(aws) {
        var EndDate = aws.params['EndDate'];
        var HostedZoneId = aws.reqParams.Id;
        var Marker = aws.params['Marker'];
        var MaxItems = aws.params['MaxItems'];
        var StartDate = aws.params['StartDate'];
        if (! HostedZoneId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter HostedZoneId"];
        }        if (! StartDate) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StartDate"];
        }        if (! EndDate) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter EndDate"];
        }

        // TODO implement code

        var ret = {
            Marker: "",
            NextMarker: "",
            MaxItems: "",
            ChangeBatchRecords: /*S4a*/[ /*S30*/{
                Changes: /*Se*/[ {
                    ResourceRecordSet: /*Sh*/{
                        GeoLocation: {
                            CountryCode: "",
                            ContinentCode: "",
                            SubdivisionCode: ""
                        },
                        ResourceRecords: [ {
                            Value: ""
                        } /*, ...*/ ],
                        HealthCheckId: "",
                        TTL: 0 /*long*/,
                        Failover: "",
                        SetIdentifier: "",
                        Type: "",
                        Weight: 0 /*long*/,
                        Region: "",
                        AliasTarget: {
                            HostedZoneId: "",
                            EvaluateTargetHealth: false,
                            DNSName: ""
                        },
                        TrafficPolicyInstanceId: "",
                        Name: ""
                    },
                    Action: ""
                } /*, ...*/ ],
                Submitter: "",
                Id: "",
                SubmittedAt: now(),
                Comment: "",
                Status: ""
            } /*, ...*/ ],
            IsTruncated: false
        };
        return [200, ret];
    });
module.exports.GetTrafficPolicyInstanceCount = aws_common.as(
    "GET",
    "/2013-04-01/trafficpolicyinstancecount",
    function GetTrafficPolicyInstanceCount(aws) {


        // TODO implement code

        var ret = {
            TrafficPolicyInstanceCount: 0
        };
        return [200, ret];
    });
module.exports.CreateTrafficPolicy = aws_common.as(
    "/2013-04-01/trafficpolicy",
    function CreateTrafficPolicy(aws) {
        var Document = aws.params['Document'];
        var Name = aws.params['Name'];
        var Comment = aws.params['Comment'];
        if (! Name) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Name"];
        }        if (! Document) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Document"];
        }

        // TODO implement code

        var ret = {
            TrafficPolicy: /*S29*/{
                Document: "",
                Comment: "",
                Type: "",
                Version: 0,
                Id: "",
                Name: ""
            },
            Location: ""
        };
        return [201, ret];
    });
module.exports.GetTrafficPolicyInstance = aws_common.as(
    "GET",
    "/2013-04-01/trafficpolicyinstance/:Id",
    function GetTrafficPolicyInstance(aws) {
        var Id = aws.reqParams.Id;
        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }

        // TODO implement code

        var ret = {
            TrafficPolicyInstance: /*S2e*/{
                HostedZoneId: "",
                TTL: 0 /*long*/,
                TrafficPolicyType: "",
                State: "",
                Id: "",
                TrafficPolicyVersion: 0,
                Name: "",
                TrafficPolicyId: "",
                Message: ""
            }
        };
        return [200, ret];
    });
module.exports.GetChange = aws_common.as(
    "GET",
    "/2013-04-01/change/:Id",
    function GetChange(aws) {
        var Id = aws.reqParams.Id;
        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }

        // TODO implement code

        var ret = {
            ChangeInfo: /*S8*/{
                SubmittedAt: now(),
                Comment: "",
                Status: "",
                Id: ""
            }
        };
        return [200, ret];
    });
module.exports.ListTagsForResources = aws_common.as(
    "/2013-04-01/tags/:ResourceType",
    function ListTagsForResources(aws) {
        var ResourceIds = aws.params['ResourceIds'] /* list */;
        var ResourceType = aws.reqParams.ResourceType;
        if (! ResourceType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResourceType"];
        }        if (! ResourceIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResourceIds"];
        }

        // TODO implement code

        var ret = {
            ResourceTagSets: [ /*S4w*/{
                ResourceType: "",
                ResourceId: "",
                Tags: /*S14*/[ {
                    Key: "",
                    Value: ""
                } /*, ...*/ ]
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.CreateHealthCheck = aws_common.as(
    "/2013-04-01/healthcheck",
    function CreateHealthCheck(aws) {
        var CallerReference = aws.params['CallerReference'];
        var HealthCheckConfig = aws.params['HealthCheckConfig'];
        if (! CallerReference) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter CallerReference"];
        }        if (! HealthCheckConfig) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter HealthCheckConfig"];
        }

        // TODO implement code

        var ret = {
            HealthCheck: /*S1q*/{
                CallerReference: "",
                HealthCheckVersion: 0 /*long*/,
                HealthCheckConfig: /*S1c*/{
                    Inverted: false,
                    FailureThreshold: 0,
                    ChildHealthChecks: /*S1o*/[ "" /*, ...*/ ],
                    MeasureLatency: false,
                    SearchString: "",
                    FullyQualifiedDomainName: "",
                    ResourcePath: "",
                    RequestInterval: 0,
                    Type: "",
                    HealthThreshold: 0,
                    Port: 0,
                    IPAddress: ""
                },
                Id: ""
            },
            Location: ""
        };
        return [201, ret];
    });
module.exports.ListTrafficPolicyInstancesByPolicy = aws_common.as(
    "GET",
    "/2013-04-01/trafficpolicyinstances/trafficpolicy",
    function ListTrafficPolicyInstancesByPolicy(aws) {
        var TrafficPolicyInstanceNameMarker = aws.params['TrafficPolicyInstanceNameMarker'];
        var MaxItems = aws.params['MaxItems'];
        var HostedZoneIdMarker = aws.params['HostedZoneIdMarker'];
        var TrafficPolicyId = aws.params['TrafficPolicyId'];
        var TrafficPolicyInstanceTypeMarker = aws.params['TrafficPolicyInstanceTypeMarker'];
        var TrafficPolicyVersion = aws.params['TrafficPolicyVersion'] /* integer */;
        if (! TrafficPolicyId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TrafficPolicyId"];
        }        if (! TrafficPolicyVersion) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TrafficPolicyVersion"];
        }

        // TODO implement code

        var ret = {
            TrafficPolicyInstances: /*S57*/[ /*S2e*/{
                HostedZoneId: "",
                TTL: 0 /*long*/,
                TrafficPolicyType: "",
                State: "",
                Id: "",
                TrafficPolicyVersion: 0,
                Name: "",
                TrafficPolicyId: "",
                Message: ""
            } /*, ...*/ ],
            MaxItems: "",
            IsTruncated: false,
            HostedZoneIdMarker: "",
            TrafficPolicyInstanceNameMarker: "",
            TrafficPolicyInstanceTypeMarker: ""
        };
        return [200, ret];
    });
module.exports.UpdateTrafficPolicyInstance = aws_common.as(
    "/2013-04-01/trafficpolicyinstance/:Id",
    function UpdateTrafficPolicyInstance(aws) {
        var TrafficPolicyVersion = aws.params['TrafficPolicyVersion'] /* integer */;
        var TTL = aws.params['TTL'] /* long */;
        var TrafficPolicyId = aws.params['TrafficPolicyId'];
        var Id = aws.reqParams.Id;
        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }        if (! TTL) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TTL"];
        }        if (! TrafficPolicyId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TrafficPolicyId"];
        }        if (! TrafficPolicyVersion) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TrafficPolicyVersion"];
        }

        // TODO implement code

        var ret = {
            TrafficPolicyInstance: /*S2e*/{
                HostedZoneId: "",
                TTL: 0 /*long*/,
                TrafficPolicyType: "",
                State: "",
                Id: "",
                TrafficPolicyVersion: 0,
                Name: "",
                TrafficPolicyId: "",
                Message: ""
            }
        };
        return [200, ret];
    });
module.exports.DeleteHostedZone = aws_common.as(
    "DELETE",
    "/2013-04-01/hostedzone/:Id",
    function DeleteHostedZone(aws) {
        var Id = aws.reqParams.Id;
        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }

        // TODO implement code

        var ret = {
            ChangeInfo: /*S8*/{
                SubmittedAt: now(),
                Comment: "",
                Status: "",
                Id: ""
            }
        };
        return [200, ret];
    });
module.exports.CreateTrafficPolicyVersion = aws_common.as(
    "/2013-04-01/trafficpolicy/:Id",
    function CreateTrafficPolicyVersion(aws) {
        var Document = aws.params['Document'];
        var Comment = aws.params['Comment'];
        var Id = aws.reqParams.Id;
        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }        if (! Document) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Document"];
        }

        // TODO implement code

        var ret = {
            TrafficPolicy: /*S29*/{
                Document: "",
                Comment: "",
                Type: "",
                Version: 0,
                Id: "",
                Name: ""
            },
            Location: ""
        };
        return [201, ret];
    });
module.exports.ChangeResourceRecordSets = aws_common.as(
    "/2013-04-01/hostedzone/:Id/rrset/",
    function ChangeResourceRecordSets(aws) {
        var HostedZoneId = aws.reqParams.Id;
        var ChangeBatch = aws.params['ChangeBatch'] /* structure */;
        if (! HostedZoneId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter HostedZoneId"];
        }        if (! ChangeBatch) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ChangeBatch"];
        }

        // TODO implement code

        var ret = {
            ChangeInfo: /*S8*/{
                SubmittedAt: now(),
                Comment: "",
                Status: "",
                Id: ""
            }
        };
        return [200, ret];
    });
module.exports.ListHostedZonesByName = aws_common.as(
    "GET",
    "/2013-04-01/hostedzonesbyname",
    function ListHostedZonesByName(aws) {
        var HostedZoneId = aws.params['HostedZoneId'];
        var MaxItems = aws.params['MaxItems'];
        var DNSName = aws.params['DNSName'];


        // TODO implement code

        var ret = {
            HostedZoneId: "",
            NextHostedZoneId: "",
            MaxItems: "",
            HostedZones: /*S4l*/[ /*S1y*/{
                CallerReference: "",
                Name: "",
                Config: /*S1v*/{
                    PrivateZone: false,
                    Comment: ""
                },
                ResourceRecordSetCount: 0 /*long*/,
                Id: ""
            } /*, ...*/ ],
            IsTruncated: false,
            NextDNSName: "",
            DNSName: ""
        };
        return [200, ret];
    });
module.exports.GetHostedZone = aws_common.as(
    "GET",
    "/2013-04-01/hostedzone/:Id",
    function GetHostedZone(aws) {
        var Id = aws.reqParams.Id;
        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }

        // TODO implement code

        var ret = {
            DelegationSet: /*S20*/{
                CallerReference: "",
                NameServers: [ "" /*, ...*/ ],
                Id: ""
            },
            HostedZone: /*S1y*/{
                CallerReference: "",
                Name: "",
                Config: /*S1v*/{
                    PrivateZone: false,
                    Comment: ""
                },
                ResourceRecordSetCount: 0 /*long*/,
                Id: ""
            },
            VPCs: [ /*S3*/{
                VPCId: "",
                VPCRegion: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
module.exports.GetHealthCheck = aws_common.as(
    "GET",
    "/2013-04-01/healthcheck/:HealthCheckId",
    function GetHealthCheck(aws) {
        var HealthCheckId = aws.reqParams.HealthCheckId;
        if (! HealthCheckId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter HealthCheckId"];
        }

        // TODO implement code

        var ret = {
            HealthCheck: /*S1q*/{
                CallerReference: "",
                HealthCheckVersion: 0 /*long*/,
                HealthCheckConfig: /*S1c*/{
                    Inverted: false,
                    FailureThreshold: 0,
                    ChildHealthChecks: /*S1o*/[ "" /*, ...*/ ],
                    MeasureLatency: false,
                    SearchString: "",
                    FullyQualifiedDomainName: "",
                    ResourcePath: "",
                    RequestInterval: 0,
                    Type: "",
                    HealthThreshold: 0,
                    Port: 0,
                    IPAddress: ""
                },
                Id: ""
            }
        };
        return [200, ret];
    });
module.exports.GetChangeDetails = aws_common.as(
    "GET",
    "/2013-04-01/changedetails/:Id",
    function GetChangeDetails(aws) {
        var Id = aws.reqParams.Id;
        if (! Id) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Id"];
        }

        // TODO implement code

        var ret = {
            ChangeBatchRecord: /*S30*/{
                Changes: /*Se*/[ {
                    ResourceRecordSet: /*Sh*/{
                        GeoLocation: {
                            CountryCode: "",
                            ContinentCode: "",
                            SubdivisionCode: ""
                        },
                        ResourceRecords: [ {
                            Value: ""
                        } /*, ...*/ ],
                        HealthCheckId: "",
                        TTL: 0 /*long*/,
                        Failover: "",
                        SetIdentifier: "",
                        Type: "",
                        Weight: 0 /*long*/,
                        Region: "",
                        AliasTarget: {
                            HostedZoneId: "",
                            EvaluateTargetHealth: false,
                            DNSName: ""
                        },
                        TrafficPolicyInstanceId: "",
                        Name: ""
                    },
                    Action: ""
                } /*, ...*/ ],
                Submitter: "",
                Id: "",
                SubmittedAt: now(),
                Comment: "",
                Status: ""
            }
        };
        return [200, ret];
    });
module.exports.GetHealthCheckStatus = aws_common.as(
    "GET",
    "/2013-04-01/healthcheck/:HealthCheckId/status",
    function GetHealthCheckStatus(aws) {
        var HealthCheckId = aws.reqParams.HealthCheckId;
        if (! HealthCheckId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter HealthCheckId"];
        }

        // TODO implement code

        var ret = {
            HealthCheckObservations: /*S3j*/[ {
                StatusReport: {
                    CheckedTime: now(),
                    Status: ""
                },
                IPAddress: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    });
