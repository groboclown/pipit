'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * AWS Key Management Service version 2014-11-01
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.RevokeGrant = function RevokeGrant(aws) {
        var KeyId = aws.params.KeyId;
        var GrantId = aws.params.GrantId;
        if (! KeyId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter KeyId"];
        }        if (! GrantId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GrantId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ScheduleKeyDeletion = function ScheduleKeyDeletion(aws) {
        var PendingWindowInDays = aws.params.PendingWindowInDays /* integer */;
        var KeyId = aws.params.KeyId;
        if (! KeyId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter KeyId"];
        }

        // TODO implement code

        var ret = {
            DeletionDate: now(),
            KeyId: ""
        };
        return [200, ret];
    }
module.exports.GetKeyRotationStatus = function GetKeyRotationStatus(aws) {
        var KeyId = aws.params.KeyId;
        if (! KeyId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter KeyId"];
        }

        // TODO implement code

        var ret = {
            KeyRotationEnabled: false
        };
        return [200, ret];
    }
module.exports.ReEncrypt = function ReEncrypt(aws) {
        var GrantTokens = aws.params.GrantTokens;
        var CiphertextBlob = aws.params.CiphertextBlob /* blob */;
        var DestinationKeyId = aws.params.DestinationKeyId;
        var DestinationEncryptionContext = aws.params.DestinationEncryptionContext;
        var SourceEncryptionContext = aws.params.SourceEncryptionContext;
        if (! CiphertextBlob) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter CiphertextBlob"];
        }        if (! DestinationKeyId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DestinationKeyId"];
        }

        // TODO implement code

        var ret = {
            CiphertextBlob: null /*blob*/,
            KeyId: "",
            SourceKeyId: ""
        };
        return [200, ret];
    }
module.exports.CreateGrant = function CreateGrant(aws) {
        var GrantTokens = aws.params.GrantTokens;
        var RetiringPrincipal = aws.params.RetiringPrincipal;
        var Constraints = aws.params.Constraints;
        var KeyId = aws.params.KeyId;
        var Name = aws.params.Name;
        var GranteePrincipal = aws.params.GranteePrincipal;
        var Operations = aws.params.Operations;
        if (! KeyId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter KeyId"];
        }        if (! GranteePrincipal) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GranteePrincipal"];
        }

        // TODO implement code

        var ret = {
            GrantToken: "",
            GrantId: ""
        };
        return [200, ret];
    }
module.exports.ListRetirableGrants = function ListRetirableGrants(aws) {
        var Limit = aws.params.Limit /* integer */;
        var Marker = aws.params.Marker;
        var RetiringPrincipal = aws.params.RetiringPrincipal;
        if (! RetiringPrincipal) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RetiringPrincipal"];
        }

        // TODO implement code

        var ret = /*S1r*/{
            Grants: [ {
                Name: "",
                RetiringPrincipal: "",
                GranteePrincipal: "",
                KeyId: "",
                GrantId: "",
                Constraints: /*Sa*/{
                    EncryptionContextEquals: /*Sb*/{} /* map */,
                    EncryptionContextSubset: /*Sb*/{} /* map */
                },
                IssuingAccount: "",
                CreationDate: now(),
                Operations: /*S8*/[ "" /*, ...*/ ]
            } /*, ...*/ ],
            NextMarker: "",
            Truncated: false
        };
        return [200, ret];
    }
module.exports.DisableKeyRotation = function DisableKeyRotation(aws) {
        var KeyId = aws.params.KeyId;
        if (! KeyId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter KeyId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ListKeyPolicies = function ListKeyPolicies(aws) {
        var Limit = aws.params.Limit /* integer */;
        var Marker = aws.params.Marker;
        var KeyId = aws.params.KeyId;
        if (! KeyId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter KeyId"];
        }

        // TODO implement code

        var ret = {
            PolicyNames: [ "" /*, ...*/ ],
            NextMarker: "",
            Truncated: false
        };
        return [200, ret];
    }
module.exports.PutKeyPolicy = function PutKeyPolicy(aws) {
        var Policy = aws.params.Policy;
        var PolicyName = aws.params.PolicyName;
        var KeyId = aws.params.KeyId;
        if (! KeyId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter KeyId"];
        }        if (! PolicyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PolicyName"];
        }        if (! Policy) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Policy"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.ListAliases = function ListAliases(aws) {
        var Limit = aws.params.Limit /* integer */;
        var Marker = aws.params.Marker;


        // TODO implement code

        var ret = {
            NextMarker: "",
            Truncated: false,
            Aliases: [ {
                AliasName: "",
                TargetKeyId: "",
                AliasArn: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.EnableKey = function EnableKey(aws) {
        var KeyId = aws.params.KeyId;
        if (! KeyId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter KeyId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DisableKey = function DisableKey(aws) {
        var KeyId = aws.params.KeyId;
        if (! KeyId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter KeyId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.UpdateAlias = function UpdateAlias(aws) {
        var AliasName = aws.params.AliasName;
        var TargetKeyId = aws.params.TargetKeyId;
        if (! AliasName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AliasName"];
        }        if (! TargetKeyId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TargetKeyId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.RetireGrant = function RetireGrant(aws) {
        var GrantToken = aws.params.GrantToken;
        var KeyId = aws.params.KeyId;
        var GrantId = aws.params.GrantId;


        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.Decrypt = function Decrypt(aws) {
        var GrantTokens = aws.params.GrantTokens;
        var CiphertextBlob = aws.params.CiphertextBlob /* blob */;
        var EncryptionContext = aws.params.EncryptionContext;
        if (! CiphertextBlob) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter CiphertextBlob"];
        }

        // TODO implement code

        var ret = {
            Plaintext: /*Sx*/null /*blob*/,
            KeyId: ""
        };
        return [200, ret];
    }
module.exports.EnableKeyRotation = function EnableKeyRotation(aws) {
        var KeyId = aws.params.KeyId;
        if (! KeyId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter KeyId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.DeleteAlias = function DeleteAlias(aws) {
        var AliasName = aws.params.AliasName;
        if (! AliasName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AliasName"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.CancelKeyDeletion = function CancelKeyDeletion(aws) {
        var KeyId = aws.params.KeyId;
        if (! KeyId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter KeyId"];
        }

        // TODO implement code

        var ret = {
            KeyId: ""
        };
        return [200, ret];
    }
module.exports.GenerateDataKey = function GenerateDataKey(aws) {
        var GrantTokens = aws.params.GrantTokens;
        var NumberOfBytes = aws.params.NumberOfBytes /* integer */;
        var EncryptionContext = aws.params.EncryptionContext;
        var KeyId = aws.params.KeyId;
        var KeySpec = aws.params.KeySpec;
        if (! KeyId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter KeyId"];
        }

        // TODO implement code

        var ret = {
            CiphertextBlob: null /*blob*/,
            KeyId: "",
            Plaintext: /*Sx*/null /*blob*/
        };
        return [200, ret];
    }
module.exports.ListKeys = function ListKeys(aws) {
        var Limit = aws.params.Limit /* integer */;
        var Marker = aws.params.Marker;


        // TODO implement code

        var ret = {
            NextMarker: "",
            Truncated: false,
            Keys: [ {
                KeyArn: "",
                KeyId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.GenerateDataKeyWithoutPlaintext = function GenerateDataKeyWithoutPlaintext(aws) {
        var GrantTokens = aws.params.GrantTokens;
        var NumberOfBytes = aws.params.NumberOfBytes /* integer */;
        var EncryptionContext = aws.params.EncryptionContext;
        var KeyId = aws.params.KeyId;
        var KeySpec = aws.params.KeySpec;
        if (! KeyId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter KeyId"];
        }

        // TODO implement code

        var ret = {
            CiphertextBlob: null /*blob*/,
            KeyId: ""
        };
        return [200, ret];
    }
module.exports.Encrypt = function Encrypt(aws) {
        var GrantTokens = aws.params.GrantTokens;
        var Plaintext = aws.params.Plaintext;
        var EncryptionContext = aws.params.EncryptionContext;
        var KeyId = aws.params.KeyId;
        if (! KeyId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter KeyId"];
        }        if (! Plaintext) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Plaintext"];
        }

        // TODO implement code

        var ret = {
            CiphertextBlob: null /*blob*/,
            KeyId: ""
        };
        return [200, ret];
    }
module.exports.CreateAlias = function CreateAlias(aws) {
        var AliasName = aws.params.AliasName;
        var TargetKeyId = aws.params.TargetKeyId;
        if (! AliasName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter AliasName"];
        }        if (! TargetKeyId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TargetKeyId"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
module.exports.GenerateRandom = function GenerateRandom(aws) {
        var NumberOfBytes = aws.params.NumberOfBytes /* integer */;


        // TODO implement code

        var ret = {
            Plaintext: /*Sx*/null /*blob*/
        };
        return [200, ret];
    }
module.exports.DescribeKey = function DescribeKey(aws) {
        var GrantTokens = aws.params.GrantTokens;
        var KeyId = aws.params.KeyId;
        if (! KeyId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter KeyId"];
        }

        // TODO implement code

        var ret = {
            KeyMetadata: /*So*/{
                KeyUsage: "",
                Enabled: false,
                Arn: "",
                KeyState: "",
                DeletionDate: now(),
                Description: "",
                AWSAccountId: "",
                CreationDate: now(),
                KeyId: ""
            }
        };
        return [200, ret];
    }
module.exports.CreateKey = function CreateKey(aws) {
        var Policy = aws.params.Policy;
        var Description = aws.params.Description;
        var KeyUsage = aws.params.KeyUsage;


        // TODO implement code

        var ret = {
            KeyMetadata: /*So*/{
                KeyUsage: "",
                Enabled: false,
                Arn: "",
                KeyState: "",
                DeletionDate: now(),
                Description: "",
                AWSAccountId: "",
                CreationDate: now(),
                KeyId: ""
            }
        };
        return [200, ret];
    }
module.exports.GetKeyPolicy = function GetKeyPolicy(aws) {
        var PolicyName = aws.params.PolicyName;
        var KeyId = aws.params.KeyId;
        if (! KeyId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter KeyId"];
        }        if (! PolicyName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PolicyName"];
        }

        // TODO implement code

        var ret = {
            Policy: ""
        };
        return [200, ret];
    }
module.exports.ListGrants = function ListGrants(aws) {
        var Limit = aws.params.Limit /* integer */;
        var Marker = aws.params.Marker;
        var KeyId = aws.params.KeyId;
        if (! KeyId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter KeyId"];
        }

        // TODO implement code

        var ret = /*S1r*/{
            Grants: [ {
                Name: "",
                RetiringPrincipal: "",
                GranteePrincipal: "",
                KeyId: "",
                GrantId: "",
                Constraints: /*Sa*/{
                    EncryptionContextEquals: /*Sb*/{} /* map */,
                    EncryptionContextSubset: /*Sb*/{} /* map */
                },
                IssuingAccount: "",
                CreationDate: now(),
                Operations: /*S8*/[ "" /*, ...*/ ]
            } /*, ...*/ ],
            NextMarker: "",
            Truncated: false
        };
        return [200, ret];
    }
module.exports.UpdateKeyDescription = function UpdateKeyDescription(aws) {
        var Description = aws.params.Description;
        var KeyId = aws.params.KeyId;
        if (! KeyId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter KeyId"];
        }        if (! Description) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Description"];
        }

        // TODO implement code

        var ret = {};
        return [200, ret];
    }
