'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * Amazon CloudSearch version 2011-02-01
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol query
require('../../lib/aws-common/shape_http')('query', module.exports, 'http://cloudsearch.amazonaws.com/doc/2011-02-01/');
// -----------------------------------
module.exports.CreateDomain = function CreateDomain(aws) {
  var domainName = aws.params.DomainName;
  if (!domainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
  }


  // TODO implement code

  var ret = {
    DomainStatus: /*S4*/{
      Created: false,
      Deleted: false,
      DocService: /*S8*/{
        Arn: '',
        Endpoint: '',
      },
      DomainId: '',
      DomainName: '',
      NumSearchableDocs: 0 /*Long*/,
      Processing: false,
      RequiresIndexDocuments: false,
      SearchInstanceCount: 0,
      SearchInstanceType: '',
      SearchPartitionCount: 0,
      SearchService: /*S8*/{
        Arn: '',
        Endpoint: '',
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DefineIndexField = function DefineIndexField(aws) {
  var domainName = aws.params.DomainName;
  var indexField = aws.params.IndexField;
  if (!domainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
  }
  if (!indexField) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter IndexField'];
  }


  // TODO implement code

  var ret = {
    IndexField: /*Sx*/{
      Options: /*Sf*/{
        IndexFieldName: '',
        IndexFieldType: '',
        LiteralOptions: {
          DefaultValue: '',
          FacetEnabled: false,
          ResultEnabled: false,
          SearchEnabled: false,
        },
        SourceAttributes: [ {
          SourceDataCopy: {
            DefaultValue: '',
            SourceName: '',
          },
          SourceDataFunction: '',
          SourceDataMap: {
            Cases: {} /*Map*/,
            DefaultValue: '',
            SourceName: '',
          },
          SourceDataTrimTitle: {
            DefaultValue: '',
            Language: '',
            Separator: '',
            SourceName: '',
          },
        }, /* ...*/ ],
        TextOptions: {
          DefaultValue: '',
          FacetEnabled: false,
          ResultEnabled: false,
          TextProcessor: '',
        },
        UIntOptions: {
          DefaultValue: 0,
        },
      },
      Status: /*Sy*/{
        CreationDate: awsCommon.timestamp(),
        PendingDeletion: false,
        State: '',
        UpdateDate: awsCommon.timestamp(),
        UpdateVersion: 0,
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DefineRankExpression = function DefineRankExpression(aws) {
  var domainName = aws.params.DomainName;
  var rankExpression = aws.params.RankExpression;
  if (!domainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
  }
  if (!rankExpression) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RankExpression'];
  }


  // TODO implement code

  var ret = {
    RankExpression: /*S15*/{
      Options: /*S12*/{
        RankExpression: '',
        RankName: '',
      },
      Status: /*Sy*/{
        CreationDate: awsCommon.timestamp(),
        PendingDeletion: false,
        State: '',
        UpdateDate: awsCommon.timestamp(),
        UpdateVersion: 0,
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteDomain = function DeleteDomain(aws) {
  var domainName = aws.params.DomainName;
  if (!domainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
  }


  // TODO implement code

  var ret = {
    DomainStatus: /*S4*/{
      Created: false,
      Deleted: false,
      DocService: /*S8*/{
        Arn: '',
        Endpoint: '',
      },
      DomainId: '',
      DomainName: '',
      NumSearchableDocs: 0 /*Long*/,
      Processing: false,
      RequiresIndexDocuments: false,
      SearchInstanceCount: 0,
      SearchInstanceType: '',
      SearchPartitionCount: 0,
      SearchService: /*S8*/{
        Arn: '',
        Endpoint: '',
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteIndexField = function DeleteIndexField(aws) {
  var domainName = aws.params.DomainName;
  var indexFieldName = aws.params.IndexFieldName;
  if (!domainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
  }
  if (!indexFieldName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter IndexFieldName'];
  }


  // TODO implement code

  var ret = {
    IndexField: /*Sx*/{
      Options: /*Sf*/{
        IndexFieldName: '',
        IndexFieldType: '',
        LiteralOptions: {
          DefaultValue: '',
          FacetEnabled: false,
          ResultEnabled: false,
          SearchEnabled: false,
        },
        SourceAttributes: [ {
          SourceDataCopy: {
            DefaultValue: '',
            SourceName: '',
          },
          SourceDataFunction: '',
          SourceDataMap: {
            Cases: {} /*Map*/,
            DefaultValue: '',
            SourceName: '',
          },
          SourceDataTrimTitle: {
            DefaultValue: '',
            Language: '',
            Separator: '',
            SourceName: '',
          },
        }, /* ...*/ ],
        TextOptions: {
          DefaultValue: '',
          FacetEnabled: false,
          ResultEnabled: false,
          TextProcessor: '',
        },
        UIntOptions: {
          DefaultValue: 0,
        },
      },
      Status: /*Sy*/{
        CreationDate: awsCommon.timestamp(),
        PendingDeletion: false,
        State: '',
        UpdateDate: awsCommon.timestamp(),
        UpdateVersion: 0,
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteRankExpression = function DeleteRankExpression(aws) {
  var domainName = aws.params.DomainName;
  var rankName = aws.params.RankName;
  if (!domainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
  }
  if (!rankName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RankName'];
  }


  // TODO implement code

  var ret = {
    RankExpression: /*S15*/{
      Options: /*S12*/{
        RankExpression: '',
        RankName: '',
      },
      Status: /*Sy*/{
        CreationDate: awsCommon.timestamp(),
        PendingDeletion: false,
        State: '',
        UpdateDate: awsCommon.timestamp(),
        UpdateVersion: 0,
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeAvailabilityOptions = function DescribeAvailabilityOptions(aws) {
  var domainName = aws.params.DomainName;
  if (!domainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
  }


  // TODO implement code

  var ret = {
    AvailabilityOptions: /*S1e*/{
      Options: false,
      Status: /*Sy*/{
        CreationDate: awsCommon.timestamp(),
        PendingDeletion: false,
        State: '',
        UpdateDate: awsCommon.timestamp(),
        UpdateVersion: 0,
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeDefaultSearchField = function DescribeDefaultSearchField(aws) {
  var domainName = aws.params.DomainName;
  if (!domainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
  }


  // TODO implement code

  var ret = {
    DefaultSearchField: /*S1i*/{
      Options: '',
      Status: /*Sy*/{
        CreationDate: awsCommon.timestamp(),
        PendingDeletion: false,
        State: '',
        UpdateDate: awsCommon.timestamp(),
        UpdateVersion: 0,
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeDomains = function DescribeDomains(aws) {
  var domainNames = aws.params.DomainNames /* Type list */;


  // TODO implement code

  var ret = {
    DomainStatusList: [ /*S4*/{
      Created: false,
      Deleted: false,
      DocService: /*S8*/{
        Arn: '',
        Endpoint: '',
      },
      DomainId: '',
      DomainName: '',
      NumSearchableDocs: 0 /*Long*/,
      Processing: false,
      RequiresIndexDocuments: false,
      SearchInstanceCount: 0,
      SearchInstanceType: '',
      SearchPartitionCount: 0,
      SearchService: /*S8*/{
        Arn: '',
        Endpoint: '',
      },
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeIndexFields = function DescribeIndexFields(aws) {
  var domainName = aws.params.DomainName;
  var fieldNames = aws.params.FieldNames;
  if (!domainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
  }


  // TODO implement code

  var ret = {
    IndexFields: [ /*Sx*/{
      Options: /*Sf*/{
        IndexFieldName: '',
        IndexFieldType: '',
        LiteralOptions: {
          DefaultValue: '',
          FacetEnabled: false,
          ResultEnabled: false,
          SearchEnabled: false,
        },
        SourceAttributes: [ {
          SourceDataCopy: {
            DefaultValue: '',
            SourceName: '',
          },
          SourceDataFunction: '',
          SourceDataMap: {
            Cases: {} /*Map*/,
            DefaultValue: '',
            SourceName: '',
          },
          SourceDataTrimTitle: {
            DefaultValue: '',
            Language: '',
            Separator: '',
            SourceName: '',
          },
        }, /* ...*/ ],
        TextOptions: {
          DefaultValue: '',
          FacetEnabled: false,
          ResultEnabled: false,
          TextProcessor: '',
        },
        UIntOptions: {
          DefaultValue: 0,
        },
      },
      Status: /*Sy*/{
        CreationDate: awsCommon.timestamp(),
        PendingDeletion: false,
        State: '',
        UpdateDate: awsCommon.timestamp(),
        UpdateVersion: 0,
      },
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeRankExpressions = function DescribeRankExpressions(aws) {
  var domainName = aws.params.DomainName;
  var rankNames = aws.params.RankNames;
  if (!domainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
  }


  // TODO implement code

  var ret = {
    RankExpressions: [ /*S15*/{
      Options: /*S12*/{
        RankExpression: '',
        RankName: '',
      },
      Status: /*Sy*/{
        CreationDate: awsCommon.timestamp(),
        PendingDeletion: false,
        State: '',
        UpdateDate: awsCommon.timestamp(),
        UpdateVersion: 0,
      },
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeServiceAccessPolicies = function DescribeServiceAccessPolicies(aws) {
  var domainName = aws.params.DomainName;
  if (!domainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
  }


  // TODO implement code

  var ret = {
    AccessPolicies: /*S1w*/{
      Options: '',
      Status: /*Sy*/{
        CreationDate: awsCommon.timestamp(),
        PendingDeletion: false,
        State: '',
        UpdateDate: awsCommon.timestamp(),
        UpdateVersion: 0,
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeStemmingOptions = function DescribeStemmingOptions(aws) {
  var domainName = aws.params.DomainName;
  if (!domainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
  }


  // TODO implement code

  var ret = {
    Stems: /*S20*/{
      Options: '',
      Status: /*Sy*/{
        CreationDate: awsCommon.timestamp(),
        PendingDeletion: false,
        State: '',
        UpdateDate: awsCommon.timestamp(),
        UpdateVersion: 0,
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeStopwordOptions = function DescribeStopwordOptions(aws) {
  var domainName = aws.params.DomainName;
  if (!domainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
  }


  // TODO implement code

  var ret = {
    Stopwords: /*S24*/{
      Options: '',
      Status: /*Sy*/{
        CreationDate: awsCommon.timestamp(),
        PendingDeletion: false,
        State: '',
        UpdateDate: awsCommon.timestamp(),
        UpdateVersion: 0,
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeSynonymOptions = function DescribeSynonymOptions(aws) {
  var domainName = aws.params.DomainName;
  if (!domainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
  }


  // TODO implement code

  var ret = {
    Synonyms: /*S28*/{
      Options: '',
      Status: /*Sy*/{
        CreationDate: awsCommon.timestamp(),
        PendingDeletion: false,
        State: '',
        UpdateDate: awsCommon.timestamp(),
        UpdateVersion: 0,
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.IndexDocuments = function IndexDocuments(aws) {
  var domainName = aws.params.DomainName;
  if (!domainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
  }


  // TODO implement code

  var ret = {
    FieldNames: /*S1o*/[ '', /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateAvailabilityOptions = function UpdateAvailabilityOptions(aws) {
  var domainName = aws.params.DomainName;
  var multiAZ = aws.params.MultiAZ /* Type boolean */;
  if (!domainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
  }
  if (!multiAZ) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MultiAZ'];
  }


  // TODO implement code

  var ret = {
    AvailabilityOptions: /*S1e*/{
      Options: false,
      Status: /*Sy*/{
        CreationDate: awsCommon.timestamp(),
        PendingDeletion: false,
        State: '',
        UpdateDate: awsCommon.timestamp(),
        UpdateVersion: 0,
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateDefaultSearchField = function UpdateDefaultSearchField(aws) {
  var defaultSearchField = aws.params.DefaultSearchField;
  var domainName = aws.params.DomainName;
  if (!defaultSearchField) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DefaultSearchField'];
  }
  if (!domainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
  }


  // TODO implement code

  var ret = {
    DefaultSearchField: /*S1i*/{
      Options: '',
      Status: /*Sy*/{
        CreationDate: awsCommon.timestamp(),
        PendingDeletion: false,
        State: '',
        UpdateDate: awsCommon.timestamp(),
        UpdateVersion: 0,
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateServiceAccessPolicies = function UpdateServiceAccessPolicies(aws) {
  var accessPolicies = aws.params.AccessPolicies;
  var domainName = aws.params.DomainName;
  if (!accessPolicies) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter AccessPolicies'];
  }
  if (!domainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
  }


  // TODO implement code

  var ret = {
    AccessPolicies: /*S1w*/{
      Options: '',
      Status: /*Sy*/{
        CreationDate: awsCommon.timestamp(),
        PendingDeletion: false,
        State: '',
        UpdateDate: awsCommon.timestamp(),
        UpdateVersion: 0,
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateStemmingOptions = function UpdateStemmingOptions(aws) {
  var domainName = aws.params.DomainName;
  var stems = aws.params.Stems;
  if (!domainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
  }
  if (!stems) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Stems'];
  }


  // TODO implement code

  var ret = {
    Stems: /*S20*/{
      Options: '',
      Status: /*Sy*/{
        CreationDate: awsCommon.timestamp(),
        PendingDeletion: false,
        State: '',
        UpdateDate: awsCommon.timestamp(),
        UpdateVersion: 0,
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateStopwordOptions = function UpdateStopwordOptions(aws) {
  var domainName = aws.params.DomainName;
  var stopwords = aws.params.Stopwords;
  if (!domainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
  }
  if (!stopwords) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Stopwords'];
  }


  // TODO implement code

  var ret = {
    Stopwords: /*S24*/{
      Options: '',
      Status: /*Sy*/{
        CreationDate: awsCommon.timestamp(),
        PendingDeletion: false,
        State: '',
        UpdateDate: awsCommon.timestamp(),
        UpdateVersion: 0,
      },
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateSynonymOptions = function UpdateSynonymOptions(aws) {
  var domainName = aws.params.DomainName;
  var synonyms = aws.params.Synonyms;
  if (!domainName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DomainName'];
  }
  if (!synonyms) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Synonyms'];
  }


  // TODO implement code

  var ret = {
    Synonyms: /*S28*/{
      Options: '',
      Status: /*Sy*/{
        CreationDate: awsCommon.timestamp(),
        PendingDeletion: false,
        State: '',
        UpdateDate: awsCommon.timestamp(),
        UpdateVersion: 0,
      },
    },
  };
  return [200, ret];
};
