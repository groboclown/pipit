'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * Amazon Machine Learning version 2014-12-12
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol json
require('../../lib/aws-common/shape_http')('json', module.exports, null);
// -----------------------------------
module.exports.CreateBatchPrediction = function CreateBatchPrediction(aws) {
  var batchPredictionDataSourceId = aws.params.BatchPredictionDataSourceId;
  var batchPredictionId = aws.params.BatchPredictionId;
  var batchPredictionName = aws.params.BatchPredictionName;
  var mLModelId = aws.params.MLModelId;
  var outputUri = aws.params.OutputUri;
  if (!batchPredictionDataSourceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter BatchPredictionDataSourceId'];
  }
  if (!batchPredictionId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter BatchPredictionId'];
  }
  if (!mLModelId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MLModelId'];
  }
  if (!outputUri) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter OutputUri'];
  }


  // TODO implement code

  var ret = {
    BatchPredictionId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateDataSourceFromRDS = function CreateDataSourceFromRDS(aws) {
  var computeStatistics = aws.params.ComputeStatistics /* Type boolean */;
  var dataSourceId = aws.params.DataSourceId;
  var dataSourceName = aws.params.DataSourceName;
  var rDSData = aws.params.RDSData /* Type structure */;
  var roleARN = aws.params.RoleARN;
  if (!dataSourceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DataSourceId'];
  }
  if (!rDSData) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RDSData'];
  }
  if (!roleARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RoleARN'];
  }


  // TODO implement code

  var ret = {
    DataSourceId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateDataSourceFromRedshift = function CreateDataSourceFromRedshift(aws) {
  var computeStatistics = aws.params.ComputeStatistics /* Type boolean */;
  var dataSourceId = aws.params.DataSourceId;
  var dataSourceName = aws.params.DataSourceName;
  var dataSpec = aws.params.DataSpec /* Type structure */;
  var roleARN = aws.params.RoleARN;
  if (!dataSourceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DataSourceId'];
  }
  if (!dataSpec) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DataSpec'];
  }
  if (!roleARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RoleARN'];
  }


  // TODO implement code

  var ret = {
    DataSourceId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateDataSourceFromS3 = function CreateDataSourceFromS3(aws) {
  var computeStatistics = aws.params.ComputeStatistics /* Type boolean */;
  var dataSourceId = aws.params.DataSourceId;
  var dataSourceName = aws.params.DataSourceName;
  var dataSpec = aws.params.DataSpec /* Type structure */;
  if (!dataSourceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DataSourceId'];
  }
  if (!dataSpec) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DataSpec'];
  }


  // TODO implement code

  var ret = {
    DataSourceId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateEvaluation = function CreateEvaluation(aws) {
  var evaluationDataSourceId = aws.params.EvaluationDataSourceId;
  var evaluationId = aws.params.EvaluationId;
  var evaluationName = aws.params.EvaluationName;
  var mLModelId = aws.params.MLModelId;
  if (!evaluationDataSourceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EvaluationDataSourceId'];
  }
  if (!evaluationId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EvaluationId'];
  }
  if (!mLModelId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MLModelId'];
  }


  // TODO implement code

  var ret = {
    EvaluationId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateMLModel = function CreateMLModel(aws) {
  var mLModelId = aws.params.MLModelId;
  var mLModelName = aws.params.MLModelName;
  var mLModelType = aws.params.MLModelType;
  var parameters = aws.params.Parameters;
  var recipe = aws.params.Recipe;
  var recipeUri = aws.params.RecipeUri;
  var trainingDataSourceId = aws.params.TrainingDataSourceId;
  if (!mLModelId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MLModelId'];
  }
  if (!mLModelType) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MLModelType'];
  }
  if (!trainingDataSourceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TrainingDataSourceId'];
  }


  // TODO implement code

  var ret = {
    MLModelId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateRealtimeEndpoint = function CreateRealtimeEndpoint(aws) {
  var mLModelId = aws.params.MLModelId;
  if (!mLModelId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MLModelId'];
  }


  // TODO implement code

  var ret = {
    MLModelId: '',
    RealtimeEndpointInfo: /*S1c*/{
      CreatedAt: awsCommon.timestamp(),
      EndpointStatus: '',
      EndpointUrl: '',
      PeakRequestsPerSecond: 0,
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteBatchPrediction = function DeleteBatchPrediction(aws) {
  var batchPredictionId = aws.params.BatchPredictionId;
  if (!batchPredictionId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter BatchPredictionId'];
  }


  // TODO implement code

  var ret = {
    BatchPredictionId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteDataSource = function DeleteDataSource(aws) {
  var dataSourceId = aws.params.DataSourceId;
  if (!dataSourceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DataSourceId'];
  }


  // TODO implement code

  var ret = {
    DataSourceId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteEvaluation = function DeleteEvaluation(aws) {
  var evaluationId = aws.params.EvaluationId;
  if (!evaluationId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EvaluationId'];
  }


  // TODO implement code

  var ret = {
    EvaluationId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteMLModel = function DeleteMLModel(aws) {
  var mLModelId = aws.params.MLModelId;
  if (!mLModelId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MLModelId'];
  }


  // TODO implement code

  var ret = {
    MLModelId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteRealtimeEndpoint = function DeleteRealtimeEndpoint(aws) {
  var mLModelId = aws.params.MLModelId;
  if (!mLModelId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MLModelId'];
  }


  // TODO implement code

  var ret = {
    MLModelId: '',
    RealtimeEndpointInfo: /*S1c*/{
      CreatedAt: awsCommon.timestamp(),
      EndpointStatus: '',
      EndpointUrl: '',
      PeakRequestsPerSecond: 0,
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeBatchPredictions = function DescribeBatchPredictions(aws) {
  var eQ = aws.params.EQ;
  var filterVariable = aws.params.FilterVariable;
  var gE = aws.params.GE;
  var gT = aws.params.GT;
  var lE = aws.params.LE;
  var lT = aws.params.LT;
  var limit = aws.params.Limit /* Type integer */;
  var nE = aws.params.NE;
  var nextToken = aws.params.NextToken;
  var prefix = aws.params.Prefix;
  var sortOrder = aws.params.SortOrder;


  // TODO implement code

  var ret = {
    NextToken: '',
    Results: [ {
      BatchPredictionDataSourceId: '',
      BatchPredictionId: '',
      CreatedAt: awsCommon.timestamp(),
      CreatedByIamUser: '',
      InputDataLocationS3: '',
      LastUpdatedAt: awsCommon.timestamp(),
      MLModelId: '',
      Message: '',
      Name: '',
      OutputUri: '',
      Status: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeDataSources = function DescribeDataSources(aws) {
  var eQ = aws.params.EQ;
  var filterVariable = aws.params.FilterVariable;
  var gE = aws.params.GE;
  var gT = aws.params.GT;
  var lE = aws.params.LE;
  var lT = aws.params.LT;
  var limit = aws.params.Limit /* Type integer */;
  var nE = aws.params.NE;
  var nextToken = aws.params.NextToken;
  var prefix = aws.params.Prefix;
  var sortOrder = aws.params.SortOrder;


  // TODO implement code

  var ret = {
    NextToken: '',
    Results: [ {
      ComputeStatistics: false,
      CreatedAt: awsCommon.timestamp(),
      CreatedByIamUser: '',
      DataLocationS3: '',
      DataRearrangement: '',
      DataSizeInBytes: 0 /*Long*/,
      DataSourceId: '',
      LastUpdatedAt: awsCommon.timestamp(),
      Message: '',
      Name: '',
      NumberOfFiles: 0 /*Long*/,
      RDSMetadata: /*S29*/{
        DataPipelineId: '',
        Database: /*S8*/{
          DatabaseName: '',
          InstanceIdentifier: '',
        },
        DatabaseUserName: '',
        ResourceRole: '',
        SelectSqlQuery: '',
        ServiceRole: '',
      },
      RedshiftMetadata: /*S28*/{
        DatabaseUserName: '',
        RedshiftDatabase: /*Sr*/{
          ClusterIdentifier: '',
          DatabaseName: '',
        },
        SelectSqlQuery: '',
      },
      RoleARN: '',
      Status: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeEvaluations = function DescribeEvaluations(aws) {
  var eQ = aws.params.EQ;
  var filterVariable = aws.params.FilterVariable;
  var gE = aws.params.GE;
  var gT = aws.params.GT;
  var lE = aws.params.LE;
  var lT = aws.params.LT;
  var limit = aws.params.Limit /* Type integer */;
  var nE = aws.params.NE;
  var nextToken = aws.params.NextToken;
  var prefix = aws.params.Prefix;
  var sortOrder = aws.params.SortOrder;


  // TODO implement code

  var ret = {
    NextToken: '',
    Results: [ {
      CreatedAt: awsCommon.timestamp(),
      CreatedByIamUser: '',
      EvaluationDataSourceId: '',
      EvaluationId: '',
      InputDataLocationS3: '',
      LastUpdatedAt: awsCommon.timestamp(),
      MLModelId: '',
      Message: '',
      Name: '',
      PerformanceMetrics: /*S2g*/{
        Properties: {} /*Map*/,
      },
      Status: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeMLModels = function DescribeMLModels(aws) {
  var eQ = aws.params.EQ;
  var filterVariable = aws.params.FilterVariable;
  var gE = aws.params.GE;
  var gT = aws.params.GT;
  var lE = aws.params.LE;
  var lT = aws.params.LT;
  var limit = aws.params.Limit /* Type integer */;
  var nE = aws.params.NE;
  var nextToken = aws.params.NextToken;
  var prefix = aws.params.Prefix;
  var sortOrder = aws.params.SortOrder;


  // TODO implement code

  var ret = {
    NextToken: '',
    Results: [ {
      Algorithm: '',
      CreatedAt: awsCommon.timestamp(),
      CreatedByIamUser: '',
      EndpointInfo: /*S1c*/{
        CreatedAt: awsCommon.timestamp(),
        EndpointStatus: '',
        EndpointUrl: '',
        PeakRequestsPerSecond: 0,
      },
      InputDataLocationS3: '',
      LastUpdatedAt: awsCommon.timestamp(),
      MLModelId: '',
      MLModelType: '',
      Message: '',
      Name: '',
      ScoreThreshold: 9.0,
      ScoreThresholdLastUpdatedAt: awsCommon.timestamp(),
      SizeInBytes: 0 /*Long*/,
      Status: '',
      TrainingDataSourceId: '',
      TrainingParameters: /*S16*/{} /*Map*/,
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetBatchPrediction = function GetBatchPrediction(aws) {
  var batchPredictionId = aws.params.BatchPredictionId;
  if (!batchPredictionId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter BatchPredictionId'];
  }


  // TODO implement code

  var ret = {
    BatchPredictionDataSourceId: '',
    BatchPredictionId: '',
    CreatedAt: awsCommon.timestamp(),
    CreatedByIamUser: '',
    InputDataLocationS3: '',
    LastUpdatedAt: awsCommon.timestamp(),
    LogUri: '',
    MLModelId: '',
    Message: '',
    Name: '',
    OutputUri: '',
    Status: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetDataSource = function GetDataSource(aws) {
  var dataSourceId = aws.params.DataSourceId;
  var verbose = aws.params.Verbose /* Type boolean */;
  if (!dataSourceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DataSourceId'];
  }


  // TODO implement code

  var ret = {
    ComputeStatistics: false,
    CreatedAt: awsCommon.timestamp(),
    CreatedByIamUser: '',
    DataLocationS3: '',
    DataRearrangement: '',
    DataSizeInBytes: 0 /*Long*/,
    DataSourceId: '',
    DataSourceSchema: '',
    LastUpdatedAt: awsCommon.timestamp(),
    LogUri: '',
    Message: '',
    Name: '',
    NumberOfFiles: 0 /*Long*/,
    RDSMetadata: /*S29*/{
      DataPipelineId: '',
      Database: /*S8*/{
        DatabaseName: '',
        InstanceIdentifier: '',
      },
      DatabaseUserName: '',
      ResourceRole: '',
      SelectSqlQuery: '',
      ServiceRole: '',
    },
    RedshiftMetadata: /*S28*/{
      DatabaseUserName: '',
      RedshiftDatabase: /*Sr*/{
        ClusterIdentifier: '',
        DatabaseName: '',
      },
      SelectSqlQuery: '',
    },
    RoleARN: '',
    Status: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetEvaluation = function GetEvaluation(aws) {
  var evaluationId = aws.params.EvaluationId;
  if (!evaluationId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EvaluationId'];
  }


  // TODO implement code

  var ret = {
    CreatedAt: awsCommon.timestamp(),
    CreatedByIamUser: '',
    EvaluationDataSourceId: '',
    EvaluationId: '',
    InputDataLocationS3: '',
    LastUpdatedAt: awsCommon.timestamp(),
    LogUri: '',
    MLModelId: '',
    Message: '',
    Name: '',
    PerformanceMetrics: /*S2g*/{
      Properties: {} /*Map*/,
    },
    Status: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.GetMLModel = function GetMLModel(aws) {
  var mLModelId = aws.params.MLModelId;
  var verbose = aws.params.Verbose /* Type boolean */;
  if (!mLModelId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MLModelId'];
  }


  // TODO implement code

  var ret = {
    CreatedAt: awsCommon.timestamp(),
    CreatedByIamUser: '',
    EndpointInfo: /*S1c*/{
      CreatedAt: awsCommon.timestamp(),
      EndpointStatus: '',
      EndpointUrl: '',
      PeakRequestsPerSecond: 0,
    },
    InputDataLocationS3: '',
    LastUpdatedAt: awsCommon.timestamp(),
    LogUri: '',
    MLModelId: '',
    MLModelType: '',
    Message: '',
    Name: '',
    Recipe: '',
    Schema: '',
    ScoreThreshold: 9.0,
    ScoreThresholdLastUpdatedAt: awsCommon.timestamp(),
    SizeInBytes: 0 /*Long*/,
    Status: '',
    TrainingDataSourceId: '',
    TrainingParameters: /*S16*/{} /*Map*/,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.Predict = function Predict(aws) {
  var mLModelId = aws.params.MLModelId;
  var predictEndpoint = aws.params.PredictEndpoint;
  var record = aws.params.Record /* Type map */;
  if (!mLModelId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MLModelId'];
  }
  if (!predictEndpoint) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PredictEndpoint'];
  }
  if (!record) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Record'];
  }


  // TODO implement code

  var ret = {
    Prediction: {
      details: {} /*Map*/,
      predictedLabel: '',
      predictedScores: {} /*Map*/,
      predictedValue: 9.0,
    },
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateBatchPrediction = function UpdateBatchPrediction(aws) {
  var batchPredictionId = aws.params.BatchPredictionId;
  var batchPredictionName = aws.params.BatchPredictionName;
  if (!batchPredictionId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter BatchPredictionId'];
  }
  if (!batchPredictionName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter BatchPredictionName'];
  }


  // TODO implement code

  var ret = {
    BatchPredictionId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateDataSource = function UpdateDataSource(aws) {
  var dataSourceId = aws.params.DataSourceId;
  var dataSourceName = aws.params.DataSourceName;
  if (!dataSourceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DataSourceId'];
  }
  if (!dataSourceName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DataSourceName'];
  }


  // TODO implement code

  var ret = {
    DataSourceId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateEvaluation = function UpdateEvaluation(aws) {
  var evaluationId = aws.params.EvaluationId;
  var evaluationName = aws.params.EvaluationName;
  if (!evaluationId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EvaluationId'];
  }
  if (!evaluationName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter EvaluationName'];
  }


  // TODO implement code

  var ret = {
    EvaluationId: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateMLModel = function UpdateMLModel(aws) {
  var mLModelId = aws.params.MLModelId;
  var mLModelName = aws.params.MLModelName;
  var scoreThreshold = aws.params.ScoreThreshold /* Type float */;
  if (!mLModelId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MLModelId'];
  }


  // TODO implement code

  var ret = {
    MLModelId: '',
  };
  return [200, ret];
};
