'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * Amazon Machine Learning version 2014-12-12
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.DeleteMLModel = function DeleteMLModel(aws) {
        var MLModelId = aws.params['MLModelId'];
        if (! MLModelId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MLModelId"];
        }

        // TODO implement code

        var ret = {
            MLModelId: ""
        };
        return [200, ret];
    }
module.exports.DescribeDataSources = function DescribeDataSources(aws) {
        var FilterVariable = aws.params['FilterVariable'];
        var Limit = aws.params['Limit'] /* integer */;
        var LE = aws.params['LE'];
        var GT = aws.params['GT'];
        var SortOrder = aws.params['SortOrder'];
        var NextToken = aws.params['NextToken'];
        var NE = aws.params['NE'];
        var LT = aws.params['LT'];
        var GE = aws.params['GE'];
        var EQ = aws.params['EQ'];
        var Prefix = aws.params['Prefix'];


        // TODO implement code

        var ret = {
            NextToken: "",
            Results: [ {
                DataSourceId: "",
                DataSizeInBytes: 0 /*long*/,
                NumberOfFiles: 0 /*long*/,
                CreatedByIamUser: "",
                DataRearrangement: "",
                Name: "",
                DataLocationS3: "",
                ComputeStatistics: false,
                RDSMetadata: /*S29*/{
                    Database: /*S8*/{
                        InstanceIdentifier: "",
                        DatabaseName: ""
                    },
                    DatabaseUserName: "",
                    ResourceRole: "",
                    ServiceRole: "",
                    DataPipelineId: "",
                    SelectSqlQuery: ""
                },
                CreatedAt: now(),
                Message: "",
                LastUpdatedAt: now(),
                RedshiftMetadata: /*S28*/{
                    DatabaseUserName: "",
                    RedshiftDatabase: /*Sr*/{
                        ClusterIdentifier: "",
                        DatabaseName: ""
                    },
                    SelectSqlQuery: ""
                },
                Status: "",
                RoleARN: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateRealtimeEndpoint = function CreateRealtimeEndpoint(aws) {
        var MLModelId = aws.params['MLModelId'];
        if (! MLModelId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MLModelId"];
        }

        // TODO implement code

        var ret = {
            RealtimeEndpointInfo: /*S1c*/{
                EndpointUrl: "",
                EndpointStatus: "",
                PeakRequestsPerSecond: 0,
                CreatedAt: now()
            },
            MLModelId: ""
        };
        return [200, ret];
    }
module.exports.GetBatchPrediction = function GetBatchPrediction(aws) {
        var BatchPredictionId = aws.params['BatchPredictionId'];
        if (! BatchPredictionId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter BatchPredictionId"];
        }

        // TODO implement code

        var ret = {
            BatchPredictionId: "",
            Name: "",
            MLModelId: "",
            InputDataLocationS3: "",
            LogUri: "",
            CreatedByIamUser: "",
            Message: "",
            LastUpdatedAt: now(),
            BatchPredictionDataSourceId: "",
            OutputUri: "",
            Status: "",
            CreatedAt: now()
        };
        return [200, ret];
    }
module.exports.DescribeMLModels = function DescribeMLModels(aws) {
        var FilterVariable = aws.params['FilterVariable'];
        var Limit = aws.params['Limit'] /* integer */;
        var LE = aws.params['LE'];
        var GT = aws.params['GT'];
        var SortOrder = aws.params['SortOrder'];
        var NextToken = aws.params['NextToken'];
        var NE = aws.params['NE'];
        var LT = aws.params['LT'];
        var GE = aws.params['GE'];
        var EQ = aws.params['EQ'];
        var Prefix = aws.params['Prefix'];


        // TODO implement code

        var ret = {
            NextToken: "",
            Results: [ {
                SizeInBytes: 0 /*long*/,
                ScoreThreshold: 9.0,
                Algorithm: "",
                TrainingParameters: /*S16*/{} /* map */,
                CreatedByIamUser: "",
                Name: "",
                ScoreThresholdLastUpdatedAt: now(),
                MLModelId: "",
                InputDataLocationS3: "",
                MLModelType: "",
                EndpointInfo: /*S1c*/{
                    EndpointUrl: "",
                    EndpointStatus: "",
                    PeakRequestsPerSecond: 0,
                    CreatedAt: now()
                },
                CreatedAt: now(),
                Message: "",
                LastUpdatedAt: now(),
                Status: "",
                TrainingDataSourceId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteBatchPrediction = function DeleteBatchPrediction(aws) {
        var BatchPredictionId = aws.params['BatchPredictionId'];
        if (! BatchPredictionId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter BatchPredictionId"];
        }

        // TODO implement code

        var ret = {
            BatchPredictionId: ""
        };
        return [200, ret];
    }
module.exports.UpdateEvaluation = function UpdateEvaluation(aws) {
        var EvaluationId = aws.params['EvaluationId'];
        var EvaluationName = aws.params['EvaluationName'];
        if (! EvaluationId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter EvaluationId"];
        }        if (! EvaluationName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter EvaluationName"];
        }

        // TODO implement code

        var ret = {
            EvaluationId: ""
        };
        return [200, ret];
    }
module.exports.DeleteDataSource = function DeleteDataSource(aws) {
        var DataSourceId = aws.params['DataSourceId'];
        if (! DataSourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DataSourceId"];
        }

        // TODO implement code

        var ret = {
            DataSourceId: ""
        };
        return [200, ret];
    }
module.exports.GetEvaluation = function GetEvaluation(aws) {
        var EvaluationId = aws.params['EvaluationId'];
        if (! EvaluationId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter EvaluationId"];
        }

        // TODO implement code

        var ret = {
            CreatedByIamUser: "",
            PerformanceMetrics: /*S2g*/{
                Properties: {} /* map */
            },
            Name: "",
            MLModelId: "",
            EvaluationId: "",
            LogUri: "",
            InputDataLocationS3: "",
            Message: "",
            LastUpdatedAt: now(),
            EvaluationDataSourceId: "",
            Status: "",
            CreatedAt: now()
        };
        return [200, ret];
    }
module.exports.DeleteRealtimeEndpoint = function DeleteRealtimeEndpoint(aws) {
        var MLModelId = aws.params['MLModelId'];
        if (! MLModelId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MLModelId"];
        }

        // TODO implement code

        var ret = {
            RealtimeEndpointInfo: /*S1c*/{
                EndpointUrl: "",
                EndpointStatus: "",
                PeakRequestsPerSecond: 0,
                CreatedAt: now()
            },
            MLModelId: ""
        };
        return [200, ret];
    }
module.exports.CreateDataSourceFromS3 = function CreateDataSourceFromS3(aws) {
        var DataSourceId = aws.params['DataSourceId'];
        var ComputeStatistics = aws.params['ComputeStatistics'] /* boolean */;
        var DataSourceName = aws.params['DataSourceName'];
        var DataSpec = aws.params['DataSpec'] /* structure */;
        if (! DataSourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DataSourceId"];
        }        if (! DataSpec) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DataSpec"];
        }

        // TODO implement code

        var ret = {
            DataSourceId: ""
        };
        return [200, ret];
    }
module.exports.CreateEvaluation = function CreateEvaluation(aws) {
        var EvaluationId = aws.params['EvaluationId'];
        var EvaluationDataSourceId = aws.params['EvaluationDataSourceId'];
        var MLModelId = aws.params['MLModelId'];
        var EvaluationName = aws.params['EvaluationName'];
        if (! EvaluationId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter EvaluationId"];
        }        if (! MLModelId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MLModelId"];
        }        if (! EvaluationDataSourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter EvaluationDataSourceId"];
        }

        // TODO implement code

        var ret = {
            EvaluationId: ""
        };
        return [200, ret];
    }
module.exports.UpdateBatchPrediction = function UpdateBatchPrediction(aws) {
        var BatchPredictionId = aws.params['BatchPredictionId'];
        var BatchPredictionName = aws.params['BatchPredictionName'];
        if (! BatchPredictionId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter BatchPredictionId"];
        }        if (! BatchPredictionName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter BatchPredictionName"];
        }

        // TODO implement code

        var ret = {
            BatchPredictionId: ""
        };
        return [200, ret];
    }
module.exports.CreateDataSourceFromRDS = function CreateDataSourceFromRDS(aws) {
        var DataSourceId = aws.params['DataSourceId'];
        var RDSData = aws.params['RDSData'] /* structure */;
        var ComputeStatistics = aws.params['ComputeStatistics'] /* boolean */;
        var DataSourceName = aws.params['DataSourceName'];
        var RoleARN = aws.params['RoleARN'];
        if (! DataSourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DataSourceId"];
        }        if (! RDSData) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RDSData"];
        }        if (! RoleARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RoleARN"];
        }

        // TODO implement code

        var ret = {
            DataSourceId: ""
        };
        return [200, ret];
    }
module.exports.DescribeEvaluations = function DescribeEvaluations(aws) {
        var FilterVariable = aws.params['FilterVariable'];
        var Limit = aws.params['Limit'] /* integer */;
        var LE = aws.params['LE'];
        var GT = aws.params['GT'];
        var SortOrder = aws.params['SortOrder'];
        var NextToken = aws.params['NextToken'];
        var NE = aws.params['NE'];
        var LT = aws.params['LT'];
        var GE = aws.params['GE'];
        var EQ = aws.params['EQ'];
        var Prefix = aws.params['Prefix'];


        // TODO implement code

        var ret = {
            NextToken: "",
            Results: [ {
                EvaluationId: "",
                Status: "",
                InputDataLocationS3: "",
                Message: "",
                PerformanceMetrics: /*S2g*/{
                    Properties: {} /* map */
                },
                LastUpdatedAt: now(),
                Name: "",
                CreatedAt: now(),
                MLModelId: "",
                CreatedByIamUser: "",
                EvaluationDataSourceId: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateMLModel = function CreateMLModel(aws) {
        var MLModelType = aws.params['MLModelType'];
        var Parameters = aws.params['Parameters'];
        var RecipeUri = aws.params['RecipeUri'];
        var Recipe = aws.params['Recipe'];
        var MLModelName = aws.params['MLModelName'];
        var MLModelId = aws.params['MLModelId'];
        var TrainingDataSourceId = aws.params['TrainingDataSourceId'];
        if (! MLModelId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MLModelId"];
        }        if (! MLModelType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MLModelType"];
        }        if (! TrainingDataSourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TrainingDataSourceId"];
        }

        // TODO implement code

        var ret = {
            MLModelId: ""
        };
        return [200, ret];
    }
module.exports.CreateBatchPrediction = function CreateBatchPrediction(aws) {
        var BatchPredictionId = aws.params['BatchPredictionId'];
        var BatchPredictionDataSourceId = aws.params['BatchPredictionDataSourceId'];
        var OutputUri = aws.params['OutputUri'];
        var MLModelId = aws.params['MLModelId'];
        var BatchPredictionName = aws.params['BatchPredictionName'];
        if (! BatchPredictionId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter BatchPredictionId"];
        }        if (! MLModelId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MLModelId"];
        }        if (! BatchPredictionDataSourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter BatchPredictionDataSourceId"];
        }        if (! OutputUri) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter OutputUri"];
        }

        // TODO implement code

        var ret = {
            BatchPredictionId: ""
        };
        return [200, ret];
    }
module.exports.UpdateMLModel = function UpdateMLModel(aws) {
        var ScoreThreshold = aws.params['ScoreThreshold'] /* float */;
        var MLModelId = aws.params['MLModelId'];
        var MLModelName = aws.params['MLModelName'];
        if (! MLModelId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MLModelId"];
        }

        // TODO implement code

        var ret = {
            MLModelId: ""
        };
        return [200, ret];
    }
module.exports.GetDataSource = function GetDataSource(aws) {
        var DataSourceId = aws.params['DataSourceId'];
        var Verbose = aws.params['Verbose'] /* boolean */;
        if (! DataSourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DataSourceId"];
        }

        // TODO implement code

        var ret = {
            DataSourceId: "",
            DataSizeInBytes: 0 /*long*/,
            NumberOfFiles: 0 /*long*/,
            CreatedByIamUser: "",
            ComputeStatistics: false,
            DataRearrangement: "",
            Name: "",
            DataLocationS3: "",
            DataSourceSchema: "",
            LogUri: "",
            RDSMetadata: /*S29*/{
                Database: /*S8*/{
                    InstanceIdentifier: "",
                    DatabaseName: ""
                },
                DatabaseUserName: "",
                ResourceRole: "",
                ServiceRole: "",
                DataPipelineId: "",
                SelectSqlQuery: ""
            },
            CreatedAt: now(),
            Message: "",
            LastUpdatedAt: now(),
            RedshiftMetadata: /*S28*/{
                DatabaseUserName: "",
                RedshiftDatabase: /*Sr*/{
                    ClusterIdentifier: "",
                    DatabaseName: ""
                },
                SelectSqlQuery: ""
            },
            Status: "",
            RoleARN: ""
        };
        return [200, ret];
    }
module.exports.DescribeBatchPredictions = function DescribeBatchPredictions(aws) {
        var FilterVariable = aws.params['FilterVariable'];
        var Limit = aws.params['Limit'] /* integer */;
        var LE = aws.params['LE'];
        var GT = aws.params['GT'];
        var SortOrder = aws.params['SortOrder'];
        var NextToken = aws.params['NextToken'];
        var NE = aws.params['NE'];
        var LT = aws.params['LT'];
        var GE = aws.params['GE'];
        var EQ = aws.params['EQ'];
        var Prefix = aws.params['Prefix'];


        // TODO implement code

        var ret = {
            NextToken: "",
            Results: [ {
                BatchPredictionId: "",
                Status: "",
                CreatedByIamUser: "",
                Message: "",
                LastUpdatedAt: now(),
                BatchPredictionDataSourceId: "",
                Name: "",
                OutputUri: "",
                MLModelId: "",
                InputDataLocationS3: "",
                CreatedAt: now()
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.UpdateDataSource = function UpdateDataSource(aws) {
        var DataSourceId = aws.params['DataSourceId'];
        var DataSourceName = aws.params['DataSourceName'];
        if (! DataSourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DataSourceId"];
        }        if (! DataSourceName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DataSourceName"];
        }

        // TODO implement code

        var ret = {
            DataSourceId: ""
        };
        return [200, ret];
    }
module.exports.DeleteEvaluation = function DeleteEvaluation(aws) {
        var EvaluationId = aws.params['EvaluationId'];
        if (! EvaluationId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter EvaluationId"];
        }

        // TODO implement code

        var ret = {
            EvaluationId: ""
        };
        return [200, ret];
    }
module.exports.Predict = function Predict(aws) {
        var Record = aws.params['Record'] /* map */;
        var MLModelId = aws.params['MLModelId'];
        var PredictEndpoint = aws.params['PredictEndpoint'];
        if (! MLModelId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MLModelId"];
        }        if (! Record) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Record"];
        }        if (! PredictEndpoint) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PredictEndpoint"];
        }

        // TODO implement code

        var ret = {
            Prediction: {
                details: {} /* map */,
                predictedScores: {} /* map */,
                predictedLabel: "",
                predictedValue: 9.0
            }
        };
        return [200, ret];
    }
module.exports.CreateDataSourceFromRedshift = function CreateDataSourceFromRedshift(aws) {
        var DataSourceId = aws.params['DataSourceId'];
        var ComputeStatistics = aws.params['ComputeStatistics'] /* boolean */;
        var DataSourceName = aws.params['DataSourceName'];
        var RoleARN = aws.params['RoleARN'];
        var DataSpec = aws.params['DataSpec'] /* structure */;
        if (! DataSourceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DataSourceId"];
        }        if (! DataSpec) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DataSpec"];
        }        if (! RoleARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RoleARN"];
        }

        // TODO implement code

        var ret = {
            DataSourceId: ""
        };
        return [200, ret];
    }
module.exports.GetMLModel = function GetMLModel(aws) {
        var MLModelId = aws.params['MLModelId'];
        var Verbose = aws.params['Verbose'] /* boolean */;
        if (! MLModelId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MLModelId"];
        }

        // TODO implement code

        var ret = {
            SizeInBytes: 0 /*long*/,
            ScoreThreshold: 9.0,
            TrainingParameters: /*S16*/{} /* map */,
            CreatedByIamUser: "",
            Name: "",
            ScoreThresholdLastUpdatedAt: now(),
            MLModelId: "",
            InputDataLocationS3: "",
            MLModelType: "",
            EndpointInfo: /*S1c*/{
                EndpointUrl: "",
                EndpointStatus: "",
                PeakRequestsPerSecond: 0,
                CreatedAt: now()
            },
            LogUri: "",
            Recipe: "",
            CreatedAt: now(),
            Message: "",
            Schema: "",
            LastUpdatedAt: now(),
            Status: "",
            TrainingDataSourceId: ""
        };
        return [200, ret];
    }
