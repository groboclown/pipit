'use strict';

const awsCommon = require('../../lib/aws-common');

/**
 * AWS Storage Gateway version 2013-06-30
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */

// Setup input and output to use AWS protocol json
require('../../lib/aws-common/shape_http')('json', module.exports, null)
// -----------------------------------
module.exports.DescribeTapeRecoveryPoints = function DescribeTapeRecoveryPoints(aws) {
  var Marker = aws.params['Marker'];
  var Limit = aws.params['Limit'] /* Type integer */;
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    TapeRecoveryPointInfos: [ {
      TapeRecoveryPointTime: awsCommon.timestamp(),
      TapeARN: '',
      TapeStatus: '',
      TapeSizeInBytes: 0 /*Long*/,
    }, /* ...*/ ],
    GatewayARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateChapCredentials = function UpdateChapCredentials(aws) {
  var InitiatorName = aws.params['InitiatorName'];
  var SecretToAuthenticateTarget = aws.params['SecretToAuthenticateTarget'];
  var TargetARN = aws.params['TargetARN'];
  var SecretToAuthenticateInitiator = aws.params['SecretToAuthenticateInitiator'];
  if (!TargetARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TargetARN'];
  }
  if (!SecretToAuthenticateInitiator) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SecretToAuthenticateInitiator'];
  }
  if (!InitiatorName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InitiatorName'];
  }


  // TODO implement code

  var ret = {
    InitiatorName: '',
    TargetARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateTapes = function CreateTapes(aws) {
  var ClientToken = aws.params['ClientToken'];
  var TapeSizeInBytes = aws.params['TapeSizeInBytes'] /* Type long */;
  var TapeBarcodePrefix = aws.params['TapeBarcodePrefix'];
  var NumTapesToCreate = aws.params['NumTapesToCreate'] /* Type integer */;
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }
  if (!TapeSizeInBytes) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TapeSizeInBytes'];
  }
  if (!ClientToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClientToken'];
  }
  if (!NumTapesToCreate) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter NumTapesToCreate'];
  }
  if (!TapeBarcodePrefix) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TapeBarcodePrefix'];
  }


  // TODO implement code

  var ret = {
    TapeARNs: /*S1i*/[ '', /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeChapCredentials = function DescribeChapCredentials(aws) {
  var TargetARN = aws.params['TargetARN'];
  if (!TargetARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TargetARN'];
  }


  // TODO implement code

  var ret = {
    ChapCredentials: [ {
      InitiatorName: '',
      SecretToAuthenticateTarget: '',
      TargetARN: '',
      SecretToAuthenticateInitiator: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteVolume = function DeleteVolume(aws) {
  var VolumeARN = aws.params['VolumeARN'];
  if (!VolumeARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VolumeARN'];
  }


  // TODO implement code

  var ret = {
    VolumeARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListLocalDisks = function ListLocalDisks(aws) {
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }


  // TODO implement code

  var ret = {
    Disks: [ {
      DiskStatus: '',
      DiskAllocationResource: '',
      DiskId: '',
      DiskSizeInBytes: 0 /*Long*/,
      DiskAllocationType: '',
      DiskPath: '',
      DiskNode: '',
    }, /* ...*/ ],
    GatewayARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateGatewayInformation = function UpdateGatewayInformation(aws) {
  var GatewayTimezone = aws.params['GatewayTimezone'];
  var GatewayName = aws.params['GatewayName'];
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }


  // TODO implement code

  var ret = {
    GatewayName: '',
    GatewayARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AddWorkingStorage = function AddWorkingStorage(aws) {
  var DiskIds = aws.params['DiskIds'];
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }
  if (!DiskIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DiskIds'];
  }


  // TODO implement code

  var ret = {
    GatewayARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateSnapshotSchedule = function UpdateSnapshotSchedule(aws) {
  var StartAt = aws.params['StartAt'] /* Type integer */;
  var Description = aws.params['Description'];
  var VolumeARN = aws.params['VolumeARN'];
  var RecurrenceInHours = aws.params['RecurrenceInHours'] /* Type integer */;
  if (!VolumeARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VolumeARN'];
  }
  if (!StartAt) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter StartAt'];
  }
  if (!RecurrenceInHours) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter RecurrenceInHours'];
  }


  // TODO implement code

  var ret = {
    VolumeARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeCache = function DescribeCache(aws) {
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }


  // TODO implement code

  var ret = {
    CacheMissPercentage: 0.0 /*Double*/,
    DiskIds: /*Sc*/[ '', /* ...*/ ],
    CacheDirtyPercentage: 0.0 /*Double*/,
    CacheUsedPercentage: 0.0 /*Double*/,
    CacheHitPercentage: 0.0 /*Double*/,
    GatewayARN: '',
    CacheAllocatedInBytes: 0 /*Long*/,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateCachediSCSIVolume = function CreateCachediSCSIVolume(aws) {
  var TargetName = aws.params['TargetName'];
  var ClientToken = aws.params['ClientToken'];
  var SnapshotId = aws.params['SnapshotId'];
  var VolumeSizeInBytes = aws.params['VolumeSizeInBytes'] /* Type long */;
  var NetworkInterfaceId = aws.params['NetworkInterfaceId'];
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }
  if (!VolumeSizeInBytes) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VolumeSizeInBytes'];
  }
  if (!TargetName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TargetName'];
  }
  if (!NetworkInterfaceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter NetworkInterfaceId'];
  }
  if (!ClientToken) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ClientToken'];
  }


  // TODO implement code

  var ret = {
    TargetARN: '',
    VolumeARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteSnapshotSchedule = function DeleteSnapshotSchedule(aws) {
  var VolumeARN = aws.params['VolumeARN'];
  if (!VolumeARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VolumeARN'];
  }


  // TODO implement code

  var ret = {
    VolumeARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeTapeArchives = function DescribeTapeArchives(aws) {
  var Marker = aws.params['Marker'];
  var Limit = aws.params['Limit'] /* Type integer */;
  var TapeARNs = aws.params['TapeARNs'];


  // TODO implement code

  var ret = {
    Marker: '',
    TapeArchives: [ {
      TapeSizeInBytes: 0 /*Long*/,
      CompletionTime: awsCommon.timestamp(),
      RetrievedTo: '',
      TapeBarcode: '',
      TapeARN: '',
      TapeStatus: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.StartGateway = function StartGateway(aws) {
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }


  // TODO implement code

  var ret = {
    GatewayARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeMaintenanceStartTime = function DescribeMaintenanceStartTime(aws) {
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }


  // TODO implement code

  var ret = {
    MinuteOfHour: 0,
    HourOfDay: 0,
    Timezone: '',
    GatewayARN: '',
    DayOfWeek: 0,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ActivateGateway = function ActivateGateway(aws) {
  var TapeDriveType = aws.params['TapeDriveType'];
  var GatewayRegion = aws.params['GatewayRegion'];
  var MediumChangerType = aws.params['MediumChangerType'];
  var ActivationKey = aws.params['ActivationKey'];
  var GatewayTimezone = aws.params['GatewayTimezone'];
  var GatewayName = aws.params['GatewayName'];
  var GatewayType = aws.params['GatewayType'];
  if (!ActivationKey) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ActivationKey'];
  }
  if (!GatewayName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayName'];
  }
  if (!GatewayTimezone) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayTimezone'];
  }
  if (!GatewayRegion) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayRegion'];
  }


  // TODO implement code

  var ret = {
    GatewayARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeVTLDevices = function DescribeVTLDevices(aws) {
  var VTLDeviceARNs = aws.params['VTLDeviceARNs'] /* Type list */;
  var Marker = aws.params['Marker'];
  var Limit = aws.params['Limit'] /* Type integer */;
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    VTLDevices: [ {
      VTLDeviceType: '',
      VTLDeviceARN: '',
      VTLDeviceProductIdentifier: '',
      VTLDeviceVendor: '',
      DeviceiSCSIAttributes: {
        NetworkInterfacePort: 0,
        TargetARN: '',
        NetworkInterfaceId: '',
        ChapEnabled: false,
      },
    }, /* ...*/ ],
    GatewayARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteChapCredentials = function DeleteChapCredentials(aws) {
  var InitiatorName = aws.params['InitiatorName'];
  var TargetARN = aws.params['TargetARN'];
  if (!TargetARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TargetARN'];
  }
  if (!InitiatorName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter InitiatorName'];
  }


  // TODO implement code

  var ret = {
    InitiatorName: '',
    TargetARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeSnapshotSchedule = function DescribeSnapshotSchedule(aws) {
  var VolumeARN = aws.params['VolumeARN'];
  if (!VolumeARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VolumeARN'];
  }


  // TODO implement code

  var ret = {
    StartAt: 0,
    Description: '',
    VolumeARN: '',
    Timezone: '',
    RecurrenceInHours: 0,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AddUploadBuffer = function AddUploadBuffer(aws) {
  var DiskIds = aws.params['DiskIds'];
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }
  if (!DiskIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DiskIds'];
  }


  // TODO implement code

  var ret = {
    GatewayARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateGatewaySoftwareNow = function UpdateGatewaySoftwareNow(aws) {
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }


  // TODO implement code

  var ret = {
    GatewayARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListGateways = function ListGateways(aws) {
  var Marker = aws.params['Marker'];
  var Limit = aws.params['Limit'] /* Type integer */;


  // TODO implement code

  var ret = {
    Marker: '',
    Gateways: [ {
      GatewayName: '',
      GatewayOperationalState: '',
      GatewayType: '',
      GatewayARN: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateBandwidthRateLimit = function UpdateBandwidthRateLimit(aws) {
  var AverageDownloadRateLimitInBitsPerSec = aws.params['AverageDownloadRateLimitInBitsPerSec'] /* Type long */;
  var GatewayARN = aws.params['GatewayARN'];
  var AverageUploadRateLimitInBitsPerSec = aws.params['AverageUploadRateLimitInBitsPerSec'] /* Type long */;
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }


  // TODO implement code

  var ret = {
    GatewayARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListVolumeInitiators = function ListVolumeInitiators(aws) {
  var VolumeARN = aws.params['VolumeARN'];
  if (!VolumeARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VolumeARN'];
  }


  // TODO implement code

  var ret = {
    Initiators: [ '', /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateStorediSCSIVolume = function CreateStorediSCSIVolume(aws) {
  var PreserveExistingData = aws.params['PreserveExistingData'] /* Type boolean */;
  var DiskId = aws.params['DiskId'];
  var TargetName = aws.params['TargetName'];
  var SnapshotId = aws.params['SnapshotId'];
  var NetworkInterfaceId = aws.params['NetworkInterfaceId'];
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }
  if (!DiskId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DiskId'];
  }
  if (!PreserveExistingData) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter PreserveExistingData'];
  }
  if (!TargetName) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TargetName'];
  }
  if (!NetworkInterfaceId) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter NetworkInterfaceId'];
  }


  // TODO implement code

  var ret = {
    TargetARN: '',
    VolumeSizeInBytes: 0 /*Long*/,
    VolumeARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AddTagsToResource = function AddTagsToResource(aws) {
  var Tags = aws.params['Tags'];
  var ResourceARN = aws.params['ResourceARN'];
  if (!ResourceARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter ResourceARN'];
  }
  if (!Tags) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter Tags'];
  }


  // TODO implement code

  var ret = {
    ResourceARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListVolumeRecoveryPoints = function ListVolumeRecoveryPoints(aws) {
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }


  // TODO implement code

  var ret = {
    GatewayARN: '',
    VolumeRecoveryPointInfos: [ {
      VolumeUsageInBytes: 0 /*Long*/,
      VolumeRecoveryPointTime: '',
      VolumeSizeInBytes: 0 /*Long*/,
      VolumeARN: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateSnapshotFromVolumeRecoveryPoint = function CreateSnapshotFromVolumeRecoveryPoint(aws) {
  var VolumeARN = aws.params['VolumeARN'];
  var SnapshotDescription = aws.params['SnapshotDescription'];
  if (!VolumeARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VolumeARN'];
  }
  if (!SnapshotDescription) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SnapshotDescription'];
  }


  // TODO implement code

  var ret = {
    SnapshotId: '',
    VolumeRecoveryPointTime: '',
    VolumeARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeTapes = function DescribeTapes(aws) {
  var Marker = aws.params['Marker'];
  var Limit = aws.params['Limit'] /* Type integer */;
  var GatewayARN = aws.params['GatewayARN'];
  var TapeARNs = aws.params['TapeARNs'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    Tapes: [ {
      VTLDevice: '',
      TapeSizeInBytes: 0 /*Long*/,
      Progress: 0.0 /*Double*/,
      TapeBarcode: '',
      TapeARN: '',
      TapeStatus: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListTagsForResource = function ListTagsForResource(aws) {
  var Marker = aws.params['Marker'];
  var Limit = aws.params['Limit'] /* Type integer */;
  var ResourceARN = aws.params['ResourceARN'];


  // TODO implement code

  var ret = {
    Marker: '',
    Tags: /*Sh*/[ {
      Key: '',
      Value: '',
    }, /* ...*/ ],
    ResourceARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RetrieveTapeArchive = function RetrieveTapeArchive(aws) {
  var TapeARN = aws.params['TapeARN'];
  var GatewayARN = aws.params['GatewayARN'];
  if (!TapeARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TapeARN'];
  }
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }


  // TODO implement code

  var ret = {
    TapeARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ListVolumes = function ListVolumes(aws) {
  var Marker = aws.params['Marker'];
  var Limit = aws.params['Limit'] /* Type integer */;
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }


  // TODO implement code

  var ret = {
    Marker: '',
    VolumeInfos: [ {
      VolumeARN: '',
      VolumeType: '',
    }, /* ...*/ ],
    GatewayARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteGateway = function DeleteGateway(aws) {
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }


  // TODO implement code

  var ret = {
    GatewayARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteTapeArchive = function DeleteTapeArchive(aws) {
  var TapeARN = aws.params['TapeARN'];
  if (!TapeARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TapeARN'];
  }


  // TODO implement code

  var ret = {
    TapeARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RetrieveTapeRecoveryPoint = function RetrieveTapeRecoveryPoint(aws) {
  var TapeARN = aws.params['TapeARN'];
  var GatewayARN = aws.params['GatewayARN'];
  if (!TapeARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TapeARN'];
  }
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }


  // TODO implement code

  var ret = {
    TapeARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ShutdownGateway = function ShutdownGateway(aws) {
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }


  // TODO implement code

  var ret = {
    GatewayARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.ResetCache = function ResetCache(aws) {
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }


  // TODO implement code

  var ret = {
    GatewayARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DisableGateway = function DisableGateway(aws) {
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }


  // TODO implement code

  var ret = {
    GatewayARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeCachediSCSIVolumes = function DescribeCachediSCSIVolumes(aws) {
  var VolumeARNs = aws.params['VolumeARNs'];
  if (!VolumeARNs) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VolumeARNs'];
  }


  // TODO implement code

  var ret = {
    CachediSCSIVolumes: [ {
      VolumeiSCSIAttributes: /*S2f*/{
        NetworkInterfacePort: 0,
        TargetARN: '',
        NetworkInterfaceId: '',
        LunNumber: 0,
        ChapEnabled: false,
      },
      SourceSnapshotId: '',
      VolumeProgress: 0.0 /*Double*/,
      VolumeId: '',
      VolumeSizeInBytes: 0 /*Long*/,
      VolumeARN: '',
      VolumeStatus: '',
      VolumeType: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.AddCache = function AddCache(aws) {
  var DiskIds = aws.params['DiskIds'];
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }
  if (!DiskIds) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DiskIds'];
  }


  // TODO implement code

  var ret = {
    GatewayARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CancelRetrieval = function CancelRetrieval(aws) {
  var TapeARN = aws.params['TapeARN'];
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }
  if (!TapeARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TapeARN'];
  }


  // TODO implement code

  var ret = {
    TapeARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteBandwidthRateLimit = function DeleteBandwidthRateLimit(aws) {
  var BandwidthType = aws.params['BandwidthType'];
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }
  if (!BandwidthType) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter BandwidthType'];
  }


  // TODO implement code

  var ret = {
    GatewayARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateMaintenanceStartTime = function UpdateMaintenanceStartTime(aws) {
  var MinuteOfHour = aws.params['MinuteOfHour'] /* Type integer */;
  var HourOfDay = aws.params['HourOfDay'] /* Type integer */;
  var GatewayARN = aws.params['GatewayARN'];
  var DayOfWeek = aws.params['DayOfWeek'] /* Type integer */;
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }
  if (!HourOfDay) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter HourOfDay'];
  }
  if (!MinuteOfHour) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter MinuteOfHour'];
  }
  if (!DayOfWeek) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DayOfWeek'];
  }


  // TODO implement code

  var ret = {
    GatewayARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeUploadBuffer = function DescribeUploadBuffer(aws) {
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }


  // TODO implement code

  var ret = {
    DiskIds: /*Sc*/[ '', /* ...*/ ],
    UploadBufferUsedInBytes: 0 /*Long*/,
    UploadBufferAllocatedInBytes: 0 /*Long*/,
    GatewayARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CreateSnapshot = function CreateSnapshot(aws) {
  var VolumeARN = aws.params['VolumeARN'];
  var SnapshotDescription = aws.params['SnapshotDescription'];
  if (!VolumeARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VolumeARN'];
  }
  if (!SnapshotDescription) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter SnapshotDescription'];
  }


  // TODO implement code

  var ret = {
    SnapshotId: '',
    VolumeARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeWorkingStorage = function DescribeWorkingStorage(aws) {
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }


  // TODO implement code

  var ret = {
    DiskIds: /*Sc*/[ '', /* ...*/ ],
    WorkingStorageAllocatedInBytes: 0 /*Long*/,
    WorkingStorageUsedInBytes: 0 /*Long*/,
    GatewayARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.UpdateVTLDeviceType = function UpdateVTLDeviceType(aws) {
  var VTLDeviceARN = aws.params['VTLDeviceARN'];
  var DeviceType = aws.params['DeviceType'];
  if (!VTLDeviceARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VTLDeviceARN'];
  }
  if (!DeviceType) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter DeviceType'];
  }


  // TODO implement code

  var ret = {
    VTLDeviceARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeGatewayInformation = function DescribeGatewayInformation(aws) {
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }


  // TODO implement code

  var ret = {
    NextUpdateAvailabilityDate: '',
    GatewayId: '',
    LastSoftwareUpdate: '',
    GatewayState: '',
    GatewayTimezone: '',
    GatewayName: '',
    GatewayType: '',
    GatewayNetworkInterfaces: [ {
      Ipv4Address: '',
      MacAddress: '',
      Ipv6Address: '',
    }, /* ...*/ ],
    GatewayARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.RemoveTagsFromResource = function RemoveTagsFromResource(aws) {
  var TagKeys = aws.params['TagKeys'] /* Type list */;
  var ResourceARN = aws.params['ResourceARN'];


  // TODO implement code

  var ret = {
    ResourceARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DeleteTape = function DeleteTape(aws) {
  var TapeARN = aws.params['TapeARN'];
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }
  if (!TapeARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TapeARN'];
  }


  // TODO implement code

  var ret = {
    TapeARN: '',
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeBandwidthRateLimit = function DescribeBandwidthRateLimit(aws) {
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }


  // TODO implement code

  var ret = {
    AverageDownloadRateLimitInBitsPerSec: 0 /*Long*/,
    GatewayARN: '',
    AverageUploadRateLimitInBitsPerSec: 0 /*Long*/,
  };
  return [200, ret];
};
// -----------------------------------
module.exports.DescribeStorediSCSIVolumes = function DescribeStorediSCSIVolumes(aws) {
  var VolumeARNs = aws.params['VolumeARNs'];
  if (!VolumeARNs) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter VolumeARNs'];
  }


  // TODO implement code

  var ret = {
    StorediSCSIVolumes: [ {
      VolumeiSCSIAttributes: /*S2f*/{
        NetworkInterfacePort: 0,
        TargetARN: '',
        NetworkInterfaceId: '',
        LunNumber: 0,
        ChapEnabled: false,
      },
      PreservedExistingData: false,
      VolumeDiskId: '',
      SourceSnapshotId: '',
      VolumeProgress: 0.0 /*Double*/,
      VolumeId: '',
      VolumeSizeInBytes: 0 /*Long*/,
      VolumeARN: '',
      VolumeStatus: '',
      VolumeType: '',
    }, /* ...*/ ],
  };
  return [200, ret];
};
// -----------------------------------
module.exports.CancelArchival = function CancelArchival(aws) {
  var TapeARN = aws.params['TapeARN'];
  var GatewayARN = aws.params['GatewayARN'];
  if (!GatewayARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter GatewayARN'];
  }
  if (!TapeARN) {
    return [400, 'Sender', 'MissingParameter', 'Did not specify parameter TapeARN'];
  }


  // TODO implement code

  var ret = {
    TapeARN: '',
  };
  return [200, ret];
};
