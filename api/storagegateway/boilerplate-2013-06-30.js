'use strict';
const aws_common = require('../../lib/aws-common');


/**
 * AWS Storage Gateway version 2013-06-30
 *
 * --- TODO REMOVE WHEN IMPLEMENTED ---
 * AUTOGENERATED BY build-api.py
 */
module.exports.DeleteChapCredentials = function DeleteChapCredentials(aws) {
        var TargetARN = aws.params['TargetARN'];
        var InitiatorName = aws.params['InitiatorName'];
        if (! TargetARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TargetARN"];
        }        if (! InitiatorName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InitiatorName"];
        }

        // TODO implement code

        var ret = {
            TargetARN: "",
            InitiatorName: ""
        };
        return [200, ret];
    }
module.exports.DescribeBandwidthRateLimit = function DescribeBandwidthRateLimit(aws) {
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }

        // TODO implement code

        var ret = {
            AverageDownloadRateLimitInBitsPerSec: 0 /*long*/,
            AverageUploadRateLimitInBitsPerSec: 0 /*long*/,
            GatewayARN: ""
        };
        return [200, ret];
    }
module.exports.ListTagsForResource = function ListTagsForResource(aws) {
        var Marker = aws.params['Marker'];
        var ResourceARN = aws.params['ResourceARN'];
        var Limit = aws.params['Limit'] /* integer */;


        // TODO implement code

        var ret = {
            Marker: "",
            ResourceARN: "",
            Tags: /*Sh*/[ {
                Key: "",
                Value: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.UpdateGatewaySoftwareNow = function UpdateGatewaySoftwareNow(aws) {
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }

        // TODO implement code

        var ret = {
            GatewayARN: ""
        };
        return [200, ret];
    }
module.exports.DescribeMaintenanceStartTime = function DescribeMaintenanceStartTime(aws) {
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }

        // TODO implement code

        var ret = {
            DayOfWeek: 0,
            Timezone: "",
            HourOfDay: 0,
            MinuteOfHour: 0,
            GatewayARN: ""
        };
        return [200, ret];
    }
module.exports.CreateTapes = function CreateTapes(aws) {
        var TapeSizeInBytes = aws.params['TapeSizeInBytes'] /* long */;
        var NumTapesToCreate = aws.params['NumTapesToCreate'] /* integer */;
        var ClientToken = aws.params['ClientToken'];
        var TapeBarcodePrefix = aws.params['TapeBarcodePrefix'];
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }        if (! TapeSizeInBytes) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TapeSizeInBytes"];
        }        if (! ClientToken) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ClientToken"];
        }        if (! NumTapesToCreate) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter NumTapesToCreate"];
        }        if (! TapeBarcodePrefix) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TapeBarcodePrefix"];
        }

        // TODO implement code

        var ret = {
            TapeARNs: /*S1i*/[ "" /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ListVolumeRecoveryPoints = function ListVolumeRecoveryPoints(aws) {
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }

        // TODO implement code

        var ret = {
            VolumeRecoveryPointInfos: [ {
                VolumeUsageInBytes: 0 /*long*/,
                VolumeSizeInBytes: 0 /*long*/,
                VolumeARN: "",
                VolumeRecoveryPointTime: ""
            } /*, ...*/ ],
            GatewayARN: ""
        };
        return [200, ret];
    }
module.exports.AddWorkingStorage = function AddWorkingStorage(aws) {
        var DiskIds = aws.params['DiskIds'];
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }        if (! DiskIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DiskIds"];
        }

        // TODO implement code

        var ret = {
            GatewayARN: ""
        };
        return [200, ret];
    }
module.exports.ListGateways = function ListGateways(aws) {
        var Marker = aws.params['Marker'];
        var Limit = aws.params['Limit'] /* integer */;


        // TODO implement code

        var ret = {
            Marker: "",
            Gateways: [ {
                GatewayOperationalState: "",
                GatewayName: "",
                GatewayType: "",
                GatewayARN: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeCache = function DescribeCache(aws) {
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }

        // TODO implement code

        var ret = {
            CacheDirtyPercentage: 0.0 /*double*/,
            CacheAllocatedInBytes: 0 /*long*/,
            CacheMissPercentage: 0.0 /*double*/,
            CacheHitPercentage: 0.0 /*double*/,
            CacheUsedPercentage: 0.0 /*double*/,
            GatewayARN: "",
            DiskIds: /*Sc*/[ "" /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ListVolumeInitiators = function ListVolumeInitiators(aws) {
        var VolumeARN = aws.params['VolumeARN'];
        if (! VolumeARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VolumeARN"];
        }

        // TODO implement code

        var ret = {
            Initiators: [ "" /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateSnapshotFromVolumeRecoveryPoint = function CreateSnapshotFromVolumeRecoveryPoint(aws) {
        var VolumeARN = aws.params['VolumeARN'];
        var SnapshotDescription = aws.params['SnapshotDescription'];
        if (! VolumeARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VolumeARN"];
        }        if (! SnapshotDescription) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SnapshotDescription"];
        }

        // TODO implement code

        var ret = {
            VolumeRecoveryPointTime: "",
            VolumeARN: "",
            SnapshotId: ""
        };
        return [200, ret];
    }
module.exports.ActivateGateway = function ActivateGateway(aws) {
        var GatewayName = aws.params['GatewayName'];
        var GatewayType = aws.params['GatewayType'];
        var MediumChangerType = aws.params['MediumChangerType'];
        var GatewayTimezone = aws.params['GatewayTimezone'];
        var TapeDriveType = aws.params['TapeDriveType'];
        var GatewayRegion = aws.params['GatewayRegion'];
        var ActivationKey = aws.params['ActivationKey'];
        if (! ActivationKey) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ActivationKey"];
        }        if (! GatewayName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayName"];
        }        if (! GatewayTimezone) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayTimezone"];
        }        if (! GatewayRegion) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayRegion"];
        }

        // TODO implement code

        var ret = {
            GatewayARN: ""
        };
        return [200, ret];
    }
module.exports.DescribeUploadBuffer = function DescribeUploadBuffer(aws) {
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }

        // TODO implement code

        var ret = {
            UploadBufferUsedInBytes: 0 /*long*/,
            DiskIds: /*Sc*/[ "" /*, ...*/ ],
            UploadBufferAllocatedInBytes: 0 /*long*/,
            GatewayARN: ""
        };
        return [200, ret];
    }
module.exports.ListLocalDisks = function ListLocalDisks(aws) {
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }

        // TODO implement code

        var ret = {
            Disks: [ {
                DiskId: "",
                DiskAllocationType: "",
                DiskAllocationResource: "",
                DiskPath: "",
                DiskNode: "",
                DiskStatus: "",
                DiskSizeInBytes: 0 /*long*/
            } /*, ...*/ ],
            GatewayARN: ""
        };
        return [200, ret];
    }
module.exports.AddTagsToResource = function AddTagsToResource(aws) {
        var ResourceARN = aws.params['ResourceARN'];
        var Tags = aws.params['Tags'];
        if (! ResourceARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ResourceARN"];
        }        if (! Tags) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter Tags"];
        }

        // TODO implement code

        var ret = {
            ResourceARN: ""
        };
        return [200, ret];
    }
module.exports.ShutdownGateway = function ShutdownGateway(aws) {
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }

        // TODO implement code

        var ret = {
            GatewayARN: ""
        };
        return [200, ret];
    }
module.exports.DeleteBandwidthRateLimit = function DeleteBandwidthRateLimit(aws) {
        var BandwidthType = aws.params['BandwidthType'];
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }        if (! BandwidthType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter BandwidthType"];
        }

        // TODO implement code

        var ret = {
            GatewayARN: ""
        };
        return [200, ret];
    }
module.exports.CreateStorediSCSIVolume = function CreateStorediSCSIVolume(aws) {
        var NetworkInterfaceId = aws.params['NetworkInterfaceId'];
        var DiskId = aws.params['DiskId'];
        var SnapshotId = aws.params['SnapshotId'];
        var TargetName = aws.params['TargetName'];
        var PreserveExistingData = aws.params['PreserveExistingData'] /* boolean */;
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }        if (! DiskId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DiskId"];
        }        if (! PreserveExistingData) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter PreserveExistingData"];
        }        if (! TargetName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TargetName"];
        }        if (! NetworkInterfaceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter NetworkInterfaceId"];
        }

        // TODO implement code

        var ret = {
            VolumeSizeInBytes: 0 /*long*/,
            TargetARN: "",
            VolumeARN: ""
        };
        return [200, ret];
    }
module.exports.AddUploadBuffer = function AddUploadBuffer(aws) {
        var DiskIds = aws.params['DiskIds'];
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }        if (! DiskIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DiskIds"];
        }

        // TODO implement code

        var ret = {
            GatewayARN: ""
        };
        return [200, ret];
    }
module.exports.AddCache = function AddCache(aws) {
        var DiskIds = aws.params['DiskIds'];
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }        if (! DiskIds) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DiskIds"];
        }

        // TODO implement code

        var ret = {
            GatewayARN: ""
        };
        return [200, ret];
    }
module.exports.CreateCachediSCSIVolume = function CreateCachediSCSIVolume(aws) {
        var NetworkInterfaceId = aws.params['NetworkInterfaceId'];
        var VolumeSizeInBytes = aws.params['VolumeSizeInBytes'] /* long */;
        var SnapshotId = aws.params['SnapshotId'];
        var TargetName = aws.params['TargetName'];
        var ClientToken = aws.params['ClientToken'];
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }        if (! VolumeSizeInBytes) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VolumeSizeInBytes"];
        }        if (! TargetName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TargetName"];
        }        if (! NetworkInterfaceId) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter NetworkInterfaceId"];
        }        if (! ClientToken) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter ClientToken"];
        }

        // TODO implement code

        var ret = {
            TargetARN: "",
            VolumeARN: ""
        };
        return [200, ret];
    }
module.exports.DescribeChapCredentials = function DescribeChapCredentials(aws) {
        var TargetARN = aws.params['TargetARN'];
        if (! TargetARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TargetARN"];
        }

        // TODO implement code

        var ret = {
            ChapCredentials: [ {
                SecretToAuthenticateInitiator: "",
                TargetARN: "",
                SecretToAuthenticateTarget: "",
                InitiatorName: ""
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.ListVolumes = function ListVolumes(aws) {
        var Marker = aws.params['Marker'];
        var Limit = aws.params['Limit'] /* integer */;
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }

        // TODO implement code

        var ret = {
            Marker: "",
            VolumeInfos: [ {
                VolumeType: "",
                VolumeARN: ""
            } /*, ...*/ ],
            GatewayARN: ""
        };
        return [200, ret];
    }
module.exports.DeleteTapeArchive = function DeleteTapeArchive(aws) {
        var TapeARN = aws.params['TapeARN'];
        if (! TapeARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TapeARN"];
        }

        // TODO implement code

        var ret = {
            TapeARN: ""
        };
        return [200, ret];
    }
module.exports.DeleteSnapshotSchedule = function DeleteSnapshotSchedule(aws) {
        var VolumeARN = aws.params['VolumeARN'];
        if (! VolumeARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VolumeARN"];
        }

        // TODO implement code

        var ret = {
            VolumeARN: ""
        };
        return [200, ret];
    }
module.exports.StartGateway = function StartGateway(aws) {
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }

        // TODO implement code

        var ret = {
            GatewayARN: ""
        };
        return [200, ret];
    }
module.exports.CancelArchival = function CancelArchival(aws) {
        var TapeARN = aws.params['TapeARN'];
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }        if (! TapeARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TapeARN"];
        }

        // TODO implement code

        var ret = {
            TapeARN: ""
        };
        return [200, ret];
    }
module.exports.UpdateChapCredentials = function UpdateChapCredentials(aws) {
        var SecretToAuthenticateInitiator = aws.params['SecretToAuthenticateInitiator'];
        var TargetARN = aws.params['TargetARN'];
        var SecretToAuthenticateTarget = aws.params['SecretToAuthenticateTarget'];
        var InitiatorName = aws.params['InitiatorName'];
        if (! TargetARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TargetARN"];
        }        if (! SecretToAuthenticateInitiator) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SecretToAuthenticateInitiator"];
        }        if (! InitiatorName) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter InitiatorName"];
        }

        // TODO implement code

        var ret = {
            TargetARN: "",
            InitiatorName: ""
        };
        return [200, ret];
    }
module.exports.DeleteGateway = function DeleteGateway(aws) {
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }

        // TODO implement code

        var ret = {
            GatewayARN: ""
        };
        return [200, ret];
    }
module.exports.DescribeCachediSCSIVolumes = function DescribeCachediSCSIVolumes(aws) {
        var VolumeARNs = aws.params['VolumeARNs'];
        if (! VolumeARNs) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VolumeARNs"];
        }

        // TODO implement code

        var ret = {
            CachediSCSIVolumes: [ {
                VolumeSizeInBytes: 0 /*long*/,
                VolumeId: "",
                VolumeType: "",
                VolumeStatus: "",
                VolumeiSCSIAttributes: /*S2f*/{
                    NetworkInterfaceId: "",
                    LunNumber: 0,
                    NetworkInterfacePort: 0,
                    TargetARN: "",
                    ChapEnabled: false
                },
                VolumeARN: "",
                SourceSnapshotId: "",
                VolumeProgress: 0.0 /*double*/
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DeleteTape = function DeleteTape(aws) {
        var TapeARN = aws.params['TapeARN'];
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }        if (! TapeARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TapeARN"];
        }

        // TODO implement code

        var ret = {
            TapeARN: ""
        };
        return [200, ret];
    }
module.exports.UpdateSnapshotSchedule = function UpdateSnapshotSchedule(aws) {
        var RecurrenceInHours = aws.params['RecurrenceInHours'] /* integer */;
        var StartAt = aws.params['StartAt'] /* integer */;
        var Description = aws.params['Description'];
        var VolumeARN = aws.params['VolumeARN'];
        if (! VolumeARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VolumeARN"];
        }        if (! StartAt) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter StartAt"];
        }        if (! RecurrenceInHours) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter RecurrenceInHours"];
        }

        // TODO implement code

        var ret = {
            VolumeARN: ""
        };
        return [200, ret];
    }
module.exports.DescribeVTLDevices = function DescribeVTLDevices(aws) {
        var Marker = aws.params['Marker'];
        var Limit = aws.params['Limit'] /* integer */;
        var VTLDeviceARNs = aws.params['VTLDeviceARNs'] /* list */;
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }

        // TODO implement code

        var ret = {
            Marker: "",
            VTLDevices: [ {
                VTLDeviceType: "",
                VTLDeviceProductIdentifier: "",
                DeviceiSCSIAttributes: {
                    NetworkInterfaceId: "",
                    ChapEnabled: false,
                    NetworkInterfacePort: 0,
                    TargetARN: ""
                },
                VTLDeviceARN: "",
                VTLDeviceVendor: ""
            } /*, ...*/ ],
            GatewayARN: ""
        };
        return [200, ret];
    }
module.exports.DisableGateway = function DisableGateway(aws) {
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }

        // TODO implement code

        var ret = {
            GatewayARN: ""
        };
        return [200, ret];
    }
module.exports.DescribeTapes = function DescribeTapes(aws) {
        var TapeARNs = aws.params['TapeARNs'];
        var Marker = aws.params['Marker'];
        var Limit = aws.params['Limit'] /* integer */;
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }

        // TODO implement code

        var ret = {
            Marker: "",
            Tapes: [ {
                TapeSizeInBytes: 0 /*long*/,
                TapeBarcode: "",
                VTLDevice: "",
                TapeStatus: "",
                TapeARN: "",
                Progress: 0.0 /*double*/
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.RetrieveTapeArchive = function RetrieveTapeArchive(aws) {
        var GatewayARN = aws.params['GatewayARN'];
        var TapeARN = aws.params['TapeARN'];
        if (! TapeARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TapeARN"];
        }        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }

        // TODO implement code

        var ret = {
            TapeARN: ""
        };
        return [200, ret];
    }
module.exports.UpdateBandwidthRateLimit = function UpdateBandwidthRateLimit(aws) {
        var AverageDownloadRateLimitInBitsPerSec = aws.params['AverageDownloadRateLimitInBitsPerSec'] /* long */;
        var AverageUploadRateLimitInBitsPerSec = aws.params['AverageUploadRateLimitInBitsPerSec'] /* long */;
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }

        // TODO implement code

        var ret = {
            GatewayARN: ""
        };
        return [200, ret];
    }
module.exports.RetrieveTapeRecoveryPoint = function RetrieveTapeRecoveryPoint(aws) {
        var GatewayARN = aws.params['GatewayARN'];
        var TapeARN = aws.params['TapeARN'];
        if (! TapeARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TapeARN"];
        }        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }

        // TODO implement code

        var ret = {
            TapeARN: ""
        };
        return [200, ret];
    }
module.exports.DescribeTapeArchives = function DescribeTapeArchives(aws) {
        var TapeARNs = aws.params['TapeARNs'];
        var Marker = aws.params['Marker'];
        var Limit = aws.params['Limit'] /* integer */;


        // TODO implement code

        var ret = {
            Marker: "",
            TapeArchives: [ {
                TapeSizeInBytes: 0 /*long*/,
                TapeBarcode: "",
                RetrievedTo: "",
                TapeStatus: "",
                TapeARN: "",
                CompletionTime: now()
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.DescribeGatewayInformation = function DescribeGatewayInformation(aws) {
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }

        // TODO implement code

        var ret = {
            GatewayName: "",
            LastSoftwareUpdate: "",
            NextUpdateAvailabilityDate: "",
            GatewayId: "",
            GatewayTimezone: "",
            GatewayState: "",
            GatewayType: "",
            GatewayNetworkInterfaces: [ {
                Ipv4Address: "",
                MacAddress: "",
                Ipv6Address: ""
            } /*, ...*/ ],
            GatewayARN: ""
        };
        return [200, ret];
    }
module.exports.ResetCache = function ResetCache(aws) {
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }

        // TODO implement code

        var ret = {
            GatewayARN: ""
        };
        return [200, ret];
    }
module.exports.DescribeTapeRecoveryPoints = function DescribeTapeRecoveryPoints(aws) {
        var Marker = aws.params['Marker'];
        var Limit = aws.params['Limit'] /* integer */;
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }

        // TODO implement code

        var ret = {
            Marker: "",
            TapeRecoveryPointInfos: [ {
                TapeSizeInBytes: 0 /*long*/,
                TapeStatus: "",
                TapeRecoveryPointTime: now(),
                TapeARN: ""
            } /*, ...*/ ],
            GatewayARN: ""
        };
        return [200, ret];
    }
module.exports.DescribeStorediSCSIVolumes = function DescribeStorediSCSIVolumes(aws) {
        var VolumeARNs = aws.params['VolumeARNs'];
        if (! VolumeARNs) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VolumeARNs"];
        }

        // TODO implement code

        var ret = {
            StorediSCSIVolumes: [ {
                VolumeSizeInBytes: 0 /*long*/,
                VolumeId: "",
                PreservedExistingData: false,
                VolumeDiskId: "",
                VolumeType: "",
                VolumeStatus: "",
                VolumeiSCSIAttributes: /*S2f*/{
                    NetworkInterfaceId: "",
                    LunNumber: 0,
                    NetworkInterfacePort: 0,
                    TargetARN: "",
                    ChapEnabled: false
                },
                VolumeARN: "",
                SourceSnapshotId: "",
                VolumeProgress: 0.0 /*double*/
            } /*, ...*/ ]
        };
        return [200, ret];
    }
module.exports.CreateSnapshot = function CreateSnapshot(aws) {
        var VolumeARN = aws.params['VolumeARN'];
        var SnapshotDescription = aws.params['SnapshotDescription'];
        if (! VolumeARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VolumeARN"];
        }        if (! SnapshotDescription) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter SnapshotDescription"];
        }

        // TODO implement code

        var ret = {
            VolumeARN: "",
            SnapshotId: ""
        };
        return [200, ret];
    }
module.exports.UpdateGatewayInformation = function UpdateGatewayInformation(aws) {
        var GatewayName = aws.params['GatewayName'];
        var GatewayTimezone = aws.params['GatewayTimezone'];
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }

        // TODO implement code

        var ret = {
            GatewayName: "",
            GatewayARN: ""
        };
        return [200, ret];
    }
module.exports.UpdateVTLDeviceType = function UpdateVTLDeviceType(aws) {
        var DeviceType = aws.params['DeviceType'];
        var VTLDeviceARN = aws.params['VTLDeviceARN'];
        if (! VTLDeviceARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VTLDeviceARN"];
        }        if (! DeviceType) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DeviceType"];
        }

        // TODO implement code

        var ret = {
            VTLDeviceARN: ""
        };
        return [200, ret];
    }
module.exports.CancelRetrieval = function CancelRetrieval(aws) {
        var TapeARN = aws.params['TapeARN'];
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }        if (! TapeARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter TapeARN"];
        }

        // TODO implement code

        var ret = {
            TapeARN: ""
        };
        return [200, ret];
    }
module.exports.DescribeWorkingStorage = function DescribeWorkingStorage(aws) {
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }

        // TODO implement code

        var ret = {
            WorkingStorageAllocatedInBytes: 0 /*long*/,
            DiskIds: /*Sc*/[ "" /*, ...*/ ],
            WorkingStorageUsedInBytes: 0 /*long*/,
            GatewayARN: ""
        };
        return [200, ret];
    }
module.exports.UpdateMaintenanceStartTime = function UpdateMaintenanceStartTime(aws) {
        var DayOfWeek = aws.params['DayOfWeek'] /* integer */;
        var HourOfDay = aws.params['HourOfDay'] /* integer */;
        var MinuteOfHour = aws.params['MinuteOfHour'] /* integer */;
        var GatewayARN = aws.params['GatewayARN'];
        if (! GatewayARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter GatewayARN"];
        }        if (! HourOfDay) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter HourOfDay"];
        }        if (! MinuteOfHour) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter MinuteOfHour"];
        }        if (! DayOfWeek) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter DayOfWeek"];
        }

        // TODO implement code

        var ret = {
            GatewayARN: ""
        };
        return [200, ret];
    }
module.exports.DescribeSnapshotSchedule = function DescribeSnapshotSchedule(aws) {
        var VolumeARN = aws.params['VolumeARN'];
        if (! VolumeARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VolumeARN"];
        }

        // TODO implement code

        var ret = {
            RecurrenceInHours: 0,
            StartAt: 0,
            Description: "",
            VolumeARN: "",
            Timezone: ""
        };
        return [200, ret];
    }
module.exports.DeleteVolume = function DeleteVolume(aws) {
        var VolumeARN = aws.params['VolumeARN'];
        if (! VolumeARN) {
            return [400, "Sender", "MissingParameter", "Did not specify parameter VolumeARN"];
        }

        // TODO implement code

        var ret = {
            VolumeARN: ""
        };
        return [200, ret];
    }
module.exports.RemoveTagsFromResource = function RemoveTagsFromResource(aws) {
        var ResourceARN = aws.params['ResourceARN'];
        var TagKeys = aws.params['TagKeys'] /* list */;


        // TODO implement code

        var ret = {
            ResourceARN: ""
        };
        return [200, ret];
    }
